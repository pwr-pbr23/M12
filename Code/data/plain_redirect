{"https:\/\/github.com\/marticongost\/cocktail":{"399dfd2479193ad0acaa2e74df1ae0c407b32231":{"url":"https:\/\/api.github.com\/repos\/marticongost\/cocktail\/commits\/399dfd2479193ad0acaa2e74df1ae0c407b32231","html_url":"https:\/\/github.com\/marticongost\/cocktail\/commit\/399dfd2479193ad0acaa2e74df1ae0c407b32231","message":"Changes to the dispatcher\n* All errors raised during handler resolution are re-raised using the handler chain mechanism, not just redirections and HTTP errors\n* Raising cherrypy.HTTPRedirect from an after_request event doesn't prevent the execution of the remaining handlers\n* Pass the request exception to the after_request event","sha":"399dfd2479193ad0acaa2e74df1ae0c407b32231","keyword":"execution after redirect prevent","diff":"diff --git a\/cocktail\/controllers\/dispatcher.py b\/cocktail\/controllers\/dispatcher.py\nindex 1021fcd7d..37729192b 100644\n--- a\/cocktail\/controllers\/dispatcher.py\n+++ b\/cocktail\/controllers\/dispatcher.py\n@@ -24,6 +24,7 @@ def __init__(self, callable, *args, **kwargs):\n     def __call__(self, *args, **kwargs):\n \n         request = cherrypy.request\n+        request_error = None\n         visited = []\n         context[\"visited_handlers\"] = visited\n \n@@ -33,7 +34,7 @@ def __call__(self, *args, **kwargs):\n                 parent = None\n \n                 for handler in request.handler_chain:\n-                    \n+\n                     context[\"parent_handler\"] = parent\n                     visited.append(handler)\n \n@@ -71,12 +72,14 @@ def __call__(self, *args, **kwargs):\n                 raise\n \n             # Custom error handlers\n-            except Exception, error:\n+            except Exception, request_error:\n                 for handler in reversed(visited):\n                     event_slot = getattr(handler, \"exception_raised\", None)\n                     if event_slot is not None:\n                         event_info = event_slot(\n-                            exception = error, handled = False)\n+                            exception = request_error,\n+                            handled = False\n+                        )\n                         if event_info.handled:\n                             break\n                 else:\n@@ -84,16 +87,24 @@ def __call__(self, *args, **kwargs):\n \n             # Cleanup\n             finally:\n-                flow_control_errors = (cherrypy.HTTPError, StopRequest)\n+                flow_control_errors = (\n+                    cherrypy.HTTPError,\n+                    cherrypy.HTTPRedirect,\n+                    StopRequest\n+                )\n                 flow_exception = None\n                 \n                 for handler in reversed(visited):\n                     event_slot = getattr(handler, \"after_request\", None)\n                     if event_slot is not None:\n                         try:\n-                            event_slot()\n-                        except flow_control_errors, flow_exception:\n-                            pass\n+                            event_slot(\n+                                flow_exception = flow_exception,\n+                                error = request_error\n+                            )\n+                        except flow_control_errors, exception:\n+                            if exception is not None:\n+                                flow_exception = exception\n \n                 if flow_exception:\n                     raise flow_exception\n@@ -209,8 +220,10 @@ def __call__(self, path_info, handler = None):\n                 else:\n                     handler = child\n         \n-        except (cherrypy.HTTPRedirect, StopRequest), error:\n-            handler = self._error_trigger(error)\n+        except Exception, error:\n+            def handler(*args, **kwargs):\n+                raise error\n+            chain.append(handler)\n         \n         request.handler = HandlerActivator(handler, *path)\n     \n@@ -218,13 +231,6 @@ def respond(self, path_info, handler = None):\n         self(path_info, handler)\n         return cherrypy.request.handler()\n \n-    def _error_trigger(self, error):\n-        \n-        def error_trigger(*args, **kwargs):\n-            raise error\n-\n-        return error_trigger\n-\n     def split(self, path):\n         return [self.normalize_component(component)\n                 for component in path.strip('\/').split('\/')\n","files":{"\/cocktail\/controllers\/dispatcher.py":{"changes":[{"diff":"\n                 raise\n \n             # Custom error handlers\n-            except Exception, error:\n+            except Exception, request_error:\n                 for handler in reversed(visited):\n                     event_slot = getattr(handler, \"exception_raised\", None)\n                     if event_slot is not None:\n                         event_info = event_slot(\n-                            exception = error, handled = False)\n+                            exception = request_error,\n+                            handled = False\n+                        )\n                         if event_info.handled:\n                             break\n                 else:\n","add":4,"remove":2,"filename":"\/cocktail\/controllers\/dispatcher.py","badparts":["            except Exception, error:","                            exception = error, handled = False)"],"goodparts":["            except Exception, request_error:","                            exception = request_error,","                            handled = False","                        )"]},{"diff":"\n \n             # Cleanup\n             finally:\n-                flow_control_errors = (cherrypy.HTTPError, StopRequest)\n+                flow_control_errors = (\n+                    cherrypy.HTTPError,\n+                    cherrypy.HTTPRedirect,\n+                    StopRequest\n+                )\n                 flow_exception = None\n                 \n                 for handler in reversed(visited):\n                     event_slot = getattr(handler, \"after_request\", None)\n                     if event_slot is not None:\n                         try:\n-                            event_slot()\n-                        except flow_control_errors, flow_exception:\n-                            pass\n+                            event_slot(\n+                                flow_exception = flow_exception,\n+                                error = request_error\n+                            )\n+                        except flow_control_errors, exception:\n+                            if exception is not None:\n+                                flow_exception = exception\n \n                 if flow_exception:\n                     raise flow_exception\n","add":12,"remove":4,"filename":"\/cocktail\/controllers\/dispatcher.py","badparts":["                flow_control_errors = (cherrypy.HTTPError, StopRequest)","                            event_slot()","                        except flow_control_errors, flow_exception:","                            pass"],"goodparts":["                flow_control_errors = (","                    cherrypy.HTTPError,","                    cherrypy.HTTPRedirect,","                    StopRequest","                )","                            event_slot(","                                flow_exception = flow_exception,","                                error = request_error","                            )","                        except flow_control_errors, exception:","                            if exception is not None:","                                flow_exception = exception"]},{"diff":"\n                 else:\n                     handler = child\n         \n-        except (cherrypy.HTTPRedirect, StopRequest), error:\n-            handler = self._error_trigger(error)\n+        except Exception, error:\n+            def handler(*args, **kwargs):\n+                raise error\n+            chain.append(handler)\n         \n         request.handler = HandlerActivator(handler, *path)\n     \n","add":4,"remove":2,"filename":"\/cocktail\/controllers\/dispatcher.py","badparts":["        except (cherrypy.HTTPRedirect, StopRequest), error:","            handler = self._error_trigger(error)"],"goodparts":["        except Exception, error:","            def handler(*args, **kwargs):","                raise error","            chain.append(handler)"]},{"diff":"\n         self(path_info, handler)\n         return cherrypy.request.handler()\n \n-    def _error_trigger(self, error):\n-        \n-        def error_trigger(*args, **kwargs):\n-            raise error\n-\n-        return error_trigger\n-\n     def split(self, path):\n         return [self.normalize_component(component)\n                 for component in path.strip('\/').split('\/')\n","add":0,"remove":7,"filename":"\/cocktail\/controllers\/dispatcher.py","badparts":["    def _error_trigger(self, error):","        def error_trigger(*args, **kwargs):","            raise error","        return error_trigger"],"goodparts":[]}],"source":"\n\nu\"\"\" @author:\t\tMart\u00ed\u00ad Congost @contact:\t\tmarti.congost@whads.com @organization:\tWhads\/Accent SL @since:\t\t\tDecember 2008 \"\"\" from inspect import isfunction, getargspec import cherrypy from cocktail.modeling import getter, ListWrapper, ContextualDict from cocktail.controllers.requesthandler import RequestHandler context=ContextualDict() class HandlerActivator(object): def __init__(self, callable, *args, **kwargs): self.callable=callable self.args=args self.kwargs=kwargs def __call__(self, *args, **kwargs): request=cherrypy.request visited=[] context[\"visited_handlers\"]=visited try: try: parent=None for handler in request.handler_chain: context[\"parent_handler\"]=parent visited.append(handler) event_slot=getattr(handler, \"before_request\", None) if event_slot is not None: event_slot() parent=handler try: return self.callable(*self.args, **self.kwargs) except TypeError, x: callable=self.callable if not isfunction(callable): callable=getattr(callable, \"__call__\", None) if callable: (args, varargs, varkw, defaults)=getargspec(callable) if args and args[0]==\"self\": args=args[1:] if len(self.args) < len(args) \\ or(len(self.args) > len(args) and not varargs): raise cherrypy.NotFound() raise except cherrypy.HTTPRedirect: raise except Exception, error: for handler in reversed(visited): event_slot=getattr(handler, \"exception_raised\", None) if event_slot is not None: event_info=event_slot( exception=error, handled=False) if event_info.handled: break else: raise finally: flow_control_errors=(cherrypy.HTTPError, StopRequest) flow_exception=None for handler in reversed(visited): event_slot=getattr(handler, \"after_request\", None) if event_slot is not None: try: event_slot() except flow_control_errors, flow_exception: pass if flow_exception: raise flow_exception except StopRequest: pass return cherrypy.response.body def _get_kwargs(self): kwargs=cherrypy.request.params.copy() if self._kwargs: kwargs.update(self._kwargs) return kwargs def _set_kwargs(self, kwargs): self._kwargs=kwargs kwargs=property(_get_kwargs, _set_kwargs) class Dispatcher(object): def __call__(self, path_info, handler=None): request=cherrypy.request config=getattr(request, \"config\", None) if config is None: config=cherrypy.config.copy() request.config=config if isinstance(path_info, basestring): parts=self.split(path_info) else: parts=list(path_info) path=self.__class__.PathProcessor(parts) if handler is None: handler=request.app.root parent=None chain=getattr(request, \"handler_chain\", None) if chain is None: chain=[] request.handler_chain=chain context.clear() try: while True: if isinstance(handler, type): handler=handler() if not getattr(handler, \"exposed\", False): handler=None break chain.append(handler) handler_config=getattr(handler, \"_cp_config\", None) if handler_config is not None: config.update(handler_config) path_config=request.app.config.get(path.current_path) if path_config: config.update(path_config) event_slot=getattr(handler, \"traversed\", None) if event_slot is not None: event_slot(path=path, config=config) child=None if path: child_name=path[0] if not child_name[0]==\"_\": child=getattr(handler, child_name, None) if child: if getattr(child, \"exposed\", False): path.pop(0) else: child=None if child is None: resolver=getattr(handler, \"resolve\", None) if resolver: child=resolver(path) if child is None or child is handler: break else: handler=child except(cherrypy.HTTPRedirect, StopRequest), error: handler=self._error_trigger(error) request.handler=HandlerActivator(handler, *path) def respond(self, path_info, handler=None): self(path_info, handler) return cherrypy.request.handler() def _error_trigger(self, error): def error_trigger(*args, **kwargs): raise error return error_trigger def split(self, path): return[self.normalize_component(component) for component in path.strip('\/').split('\/') if component] def normalize_component(self, component): return component.replace(\"%2F\", \"\/\") class PathProcessor(ListWrapper): def __init__(self, path): ListWrapper.__init__(self, path) self.__consumed_components=[] def pop(self, index=-1): if index < 0: index=len(self._items) +index component=self._items.pop(index) if index==0: self.__consumed_components.append(component) return component @getter def current_path(self): return \"\/\" +\"\/\".join(component for component in self.__consumed_components) class StopRequest(Exception): \"\"\"An exception raised to stop the processing of the current request without triggering an error. When raised by a request handler, the exception will be caught and silenced by the dispatcher.\"\"\" if __name__==\"__main__\": class TestController(object): @cherrypy.expose def index(self, foo=None): prev_foo=getattr(cherrypy.request, \"foo\", \"None\") cherrypy.request.foo=foo return prev_foo cherrypy.quickstart(TestController, \"\/\",{ \"global\":{ \"request.dispatch\": Dispatcher() } }) ","sourceWithComments":"#-*- coding: utf-8 -*-\nu\"\"\"\n\n@author:\t\tMart\u00ed\u00ad Congost\n@contact:\t\tmarti.congost@whads.com\n@organization:\tWhads\/Accent SL\n@since:\t\t\tDecember 2008\n\"\"\"\nfrom inspect import isfunction, getargspec\nimport cherrypy\nfrom cocktail.modeling import getter, ListWrapper, ContextualDict\nfrom cocktail.controllers.requesthandler import RequestHandler\n\ncontext = ContextualDict()\n\n\nclass HandlerActivator(object):\n\n    def __init__(self, callable, *args, **kwargs):\n        self.callable = callable\n        self.args = args\n        self.kwargs = kwargs\n\n    def __call__(self, *args, **kwargs):\n\n        request = cherrypy.request\n        visited = []\n        context[\"visited_handlers\"] = visited\n\n        try:\n            try:\n                # Descend from the root to the final handler\n                parent = None\n\n                for handler in request.handler_chain:\n                    \n                    context[\"parent_handler\"] = parent\n                    visited.append(handler)\n\n                    # Trigger the 'before_request' event on those handlers that\n                    # support it\n                    event_slot = getattr(handler, \"before_request\", None)\n                    if event_slot is not None:\n                        event_slot()\n\n                    parent = handler\n                    \n                # Execute the response handler\n                try:\n                    return self.callable(*self.args, **self.kwargs)\n            \n                except TypeError, x:\n                    callable = self.callable\n                    \n                    if not isfunction(callable):\n                        callable = getattr(callable, \"__call__\", None)\n                    \n                    if callable:                        \n                        (args, varargs, varkw, defaults) = getargspec(callable)\n\n                        if args and args[0] == \"self\":\n                            args = args[1:]\n                        \n                        if len(self.args) < len(args) \\\n                        or (len(self.args) > len(args) and not varargs):\n                            raise cherrypy.NotFound()\n\n                    raise\n            \n            except cherrypy.HTTPRedirect: \n                raise\n\n            # Custom error handlers\n            except Exception, error:\n                for handler in reversed(visited):\n                    event_slot = getattr(handler, \"exception_raised\", None)\n                    if event_slot is not None:\n                        event_info = event_slot(\n                            exception = error, handled = False)\n                        if event_info.handled:\n                            break\n                else:\n                    raise       \n\n            # Cleanup\n            finally:\n                flow_control_errors = (cherrypy.HTTPError, StopRequest)\n                flow_exception = None\n                \n                for handler in reversed(visited):\n                    event_slot = getattr(handler, \"after_request\", None)\n                    if event_slot is not None:\n                        try:\n                            event_slot()\n                        except flow_control_errors, flow_exception:\n                            pass\n\n                if flow_exception:\n                    raise flow_exception\n\n        except StopRequest:\n            pass\n    \n        return cherrypy.response.body\n\n    def _get_kwargs(self):\n        kwargs = cherrypy.request.params.copy()\n        if self._kwargs:\n            kwargs.update(self._kwargs)\n        return kwargs\n    \n    def _set_kwargs(self, kwargs):\n        self._kwargs = kwargs\n    \n    kwargs = property(_get_kwargs, _set_kwargs)\n\n\nclass Dispatcher(object):\n\n    def __call__(self, path_info, handler = None):\n\n        request = cherrypy.request\n\n        # Configuration\n        config = getattr(request, \"config\", None)\n\n        if config is None:\n            config = cherrypy.config.copy()\n            request.config = config\n        \n        # Path components\n        if isinstance(path_info, basestring):\n            parts = self.split(path_info)\n        else:\n            parts = list(path_info)\n\n        path = self.__class__.PathProcessor(parts)\n\n        # Handler chain\n        if handler is None:\n            handler = request.app.root\n\n        parent = None\n        \n        chain = getattr(request, \"handler_chain\", None)\n\n        if chain is None:\n            chain = []\n            request.handler_chain = chain\n            context.clear()\n\n        # Traverse handlers\n        try:\n\n            while True:\n\n                # Instantiate classes\n                if isinstance(handler, type):\n                    handler = handler()\n                \n                if not getattr(handler, \"exposed\", False):\n                    handler = None\n                    break\n\n                # Add the handler to the execution chain\n                chain.append(handler)\n\n                # Handler specific configuration\n                handler_config = getattr(handler, \"_cp_config\", None)\n                \n                if handler_config is not None:\n                    config.update(handler_config)\n\n                # Path specific configuration (overrides per-handler configuration)\n                path_config = request.app.config.get(path.current_path)\n\n                if path_config:\n                    config.update(path_config)\n\n                # Trigger the 'traversed' event\n                event_slot = getattr(handler, \"traversed\", None)\n                if event_slot is not None:\n                    event_slot(path = path, config = config)\n\n                # Descend:                \n                child = None\n\n                # Named child\n                if path:\n                    child_name = path[0]\n                    if not child_name[0] == \"_\":\n                        child = getattr(handler, child_name, None)\n                        if child:\n                            if getattr(child, \"exposed\", False):\n                                path.pop(0)\n                            else:\n                                child = None\n\n                # Dynamic resolver\n                if child is None:\n                    resolver = getattr(handler, \"resolve\", None)\n                    if resolver:\n                        child = resolver(path)\n\n                # End of the road: no child could be retrieved, or the handler\n                # resolves to itself\n                if child is None or child is handler: \n                    break\n                else:\n                    handler = child\n        \n        except (cherrypy.HTTPRedirect, StopRequest), error:\n            handler = self._error_trigger(error)\n        \n        request.handler = HandlerActivator(handler, *path)\n    \n    def respond(self, path_info, handler = None):\n        self(path_info, handler)\n        return cherrypy.request.handler()\n\n    def _error_trigger(self, error):\n        \n        def error_trigger(*args, **kwargs):\n            raise error\n\n        return error_trigger\n\n    def split(self, path):\n        return [self.normalize_component(component)\n                for component in path.strip('\/').split('\/')\n                if component]\n\n    def normalize_component(self, component):\n        return component.replace(\"%2F\", \"\/\")\n       \n    class PathProcessor(ListWrapper):\n\n        def __init__(self, path):\n            ListWrapper.__init__(self, path)\n            self.__consumed_components = []\n\n        def pop(self, index = -1):\n\n            if index < 0:\n                index = len(self._items) + index\n\n            component = self._items.pop(index)\n            \n            if index == 0:\n                self.__consumed_components.append(component)\n\n            return component\n            \n        @getter\n        def current_path(self):\n            return \"\/\" + \"\/\".join(component\n                                  for component in self.__consumed_components)\n\n\nclass StopRequest(Exception):\n    \"\"\"An exception raised to stop the processing of the current request\n    without triggering an error. When raised by a request handler, the\n    exception will be caught and silenced by the dispatcher.\"\"\"\n\n\nif __name__ == \"__main__\":\n    \n    class TestController(object):\n\n        @cherrypy.expose\n        def index(self, foo = None):\n            prev_foo = getattr(cherrypy.request, \"foo\", \"None\")\n            cherrypy.request.foo = foo\n            return prev_foo\n\n    cherrypy.quickstart(TestController, \"\/\", {\n        \"global\": {\n            \"request.dispatch\": Dispatcher()\n        }\n    })\n\n"}},"msg":"Changes to the dispatcher\n* All errors raised during handler resolution are re-raised using the handler chain mechanism, not just redirections and HTTP errors\n* Raising cherrypy.HTTPRedirect from an after_request event doesn't prevent the execution of the remaining handlers\n* Pass the request exception to the after_request event"}},"https:\/\/github.com\/vstconsulting\/vstutils":{"16b67ad024b6ae1167c1d883f285565f2606b906":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/16b67ad024b6ae1167c1d883f285565f2606b906","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/16b67ad024b6ae1167c1d883f285565f2606b906","sha":"16b67ad024b6ae1167c1d883f285565f2606b906","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 898a962d..a5c2fcc1 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b72'\n+__version__: str = '5.0.0b73'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b72'\n+__version__: str = '5.0.0b73'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b72'"],"goodparts":["__version__: str = '5.0.0b73'"]}],"source":"\n\n__version__: str='5.0.0b72' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b72'\n"}},"msg":"Release 5.0.0 Beta 73\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields\n\nParsed bundle size: 2.41 MB.\n\n### TODO:\n* Optimize bundle size."},"fc43bd21203efbc5dd297f86d77d254ee6c26546":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/fc43bd21203efbc5dd297f86d77d254ee6c26546","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/fc43bd21203efbc5dd297f86d77d254ee6c26546","sha":"fc43bd21203efbc5dd297f86d77d254ee6c26546","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex a5c2fcc1..e8172e64 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b73'\n+__version__: str = '5.0.0b74'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b73'\n+__version__: str = '5.0.0b74'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b73'"],"goodparts":["__version__: str = '5.0.0b74'"]}],"source":"\n\n__version__: str='5.0.0b73' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b73'\n"}},"msg":"Release 5.0.0 Beta 73\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n\nParsed bundle size: 2.41 MB.\n\n### TODO:\n* Optimize bundle size."},"61c9464183edea9f0ca01f14e93f4d5b0deb708b":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/61c9464183edea9f0ca01f14e93f4d5b0deb708b","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/61c9464183edea9f0ca01f14e93f4d5b0deb708b","sha":"61c9464183edea9f0ca01f14e93f4d5b0deb708b","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex e8172e64..7d57d965 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b74'\n+__version__: str = '5.0.0b75'\ndiff --git a\/vstutils\/settings.py b\/vstutils\/settings.py\nindex fe5a5e3f..9b67a8d0 100644\n--- a\/vstutils\/settings.py\n+++ b\/vstutils\/settings.py\n@@ -683,8 +683,7 @@ def get_plugins():\n             name = plugin_name\n         else:\n             data = {\"BACKEND\": plugin_name}\n-            name = list(filter(bool, plugin_name.split('.')))[-1].lower().replace(\n-                'backend', '')\n+            name = list(filter(bool, plugin_name.split('.')))[-1].lower().replace('backend', '')\n         plugins[name] = data\n     return plugins\n \n@@ -1076,7 +1075,6 @@ def parse_db(params):\n         VST_PROJECT: default_logger_data,\n         'vstutils': default_logger_data,\n         'drf_yasg.generators': default_logger_data,\n-        'daphne': default_logger_data,\n     }\n }\n \n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b74'\n+__version__: str = '5.0.0b75'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b74'"],"goodparts":["__version__: str = '5.0.0b75'"]}],"source":"\n\n__version__: str='5.0.0b74' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b74'\n"},"\/vstutils\/settings.py":{"changes":[{"diff":"\n             name = plugin_name\n         else:\n             data = {\"BACKEND\": plugin_name}\n-            name = list(filter(bool, plugin_name.split('.')))[-1].lower().replace(\n-                'backend', '')\n+            name = list(filter(bool, plugin_name.split('.')))[-1].lower().replace('backend', '')\n         plugins[name] = data\n     return plugins\n \n","add":1,"remove":2,"filename":"\/vstutils\/settings.py","badparts":["            name = list(filter(bool, plugin_name.split('.')))[-1].lower().replace(","                'backend', '')"],"goodparts":["            name = list(filter(bool, plugin_name.split('.')))[-1].lower().replace('backend', '')"]},{"diff":"\n         VST_PROJECT: default_logger_data,\n         'vstutils': default_logger_data,\n         'drf_yasg.generators': default_logger_data,\n-        'daphne': default_logger_data,\n     }\n }\n \n","add":0,"remove":1,"filename":"\/vstutils\/settings.py","badparts":["        'daphne': default_logger_data,"],"goodparts":[]}]}},"msg":"Release 5.0.0 Beta 75\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n\nParsed bundle size: 2.41 MB.\n\n### TODO:\n* Optimize bundle size."},"c608a921498aef9bc4f8efd5a595ffc97e3363b2":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/c608a921498aef9bc4f8efd5a595ffc97e3363b2","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/c608a921498aef9bc4f8efd5a595ffc97e3363b2","sha":"c608a921498aef9bc4f8efd5a595ffc97e3363b2","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 7d57d965..6da73db2 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b75'\n+__version__: str = '5.0.0b76'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b75'\n+__version__: str = '5.0.0b76'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b75'"],"goodparts":["__version__: str = '5.0.0b76'"]}],"source":"\n\n__version__: str='5.0.0b75' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b75'\n"}},"msg":"Release 5.0.0 Beta 76\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n\nParsed bundle size: 2.41 MB.\n\n### TODO:\n* Optimize bundle size."},"ee3f94d387632ba270addcf00aa306916ef7d5de":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/ee3f94d387632ba270addcf00aa306916ef7d5de","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/ee3f94d387632ba270addcf00aa306916ef7d5de","sha":"ee3f94d387632ba270addcf00aa306916ef7d5de","keyword":"execution after redirect prevent","diff":"diff --git a\/test_src\/test_proj\/tests.py b\/test_src\/test_proj\/tests.py\nindex 0e15abda..e870edd6 100644\n--- a\/test_src\/test_proj\/tests.py\n+++ b\/test_src\/test_proj\/tests.py\n@@ -2837,6 +2837,10 @@ class FieldChoices(BaseEnum):\n             [('FIRST', 'FIRST',), ('SECOND', 'SECOND'), ('THIRD', 'THIRD')]\n         )\n \n+        self.assertTrue({\"FIRST\": True}.get(FieldChoices.FIRST))\n+        self.assertTrue({\"FIRST\": True}[FieldChoices.FIRST])\n+\n+        self.assertEqual(repr(FieldChoices.FIRST.name), repr(FieldChoices.FIRST))\n \n     @override_settings(SESSION_ENGINE='django.contrib.sessions.backends.db')\n     def test_hierarchy(self):\ndiff --git a\/test_src\/test_proj\/views.py b\/test_src\/test_proj\/views.py\nindex db176ede..5c0182b6 100644\n--- a\/test_src\/test_proj\/views.py\n+++ b\/test_src\/test_proj\/views.py\n@@ -112,6 +112,7 @@ def test_nested_view_inspection(self, *args, **kwargs):\n \n class RequestInfoTestView(NonModelsViewSet):\n     base_name = 'request_info'\n+    serializer_class = DataSerializer\n \n     def list(self, request):\n         start_time = time.time()\ndiff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 6542dfd2..1a1dcf96 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b82'\n+__version__: str = '5.0.0b83'\ndiff --git a\/vstutils\/utils.py b\/vstutils\/utils.py\nindex 31d4dba5..ad12af16 100644\n--- a\/vstutils\/utils.py\n+++ b\/vstutils\/utils.py\n@@ -1270,7 +1270,7 @@ def list_to_choices(items_list: tp.Iterable, response_type: tp.Callable = list)\n     return response_type(map(lambda x: (x, x), items_list))\n \n \n-class BaseEnum(Enum):\n+class BaseEnum(str, Enum):\n     \"\"\"\n     BaseEnum extends `Enum` class and used to create enum-like objects that can be used in django serializers or\n     django models.\n@@ -1297,11 +1297,17 @@ def is_second(self):\n \n     \"\"\"\n \n+    def __new__(cls, name):\n+        return str.__new__(cls, name)\n+\n     def __repr__(self):\n-        return str(self.name)\n+        return repr(self.__str__())\n \n     def __str__(self):\n-        return self.__repr__()\n+        return str(self.name)\n+\n+    def __hash__(self):\n+        return hash(str(self))\n \n     @classmethod\n     def get_names(cls):\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b82'\n+__version__: str = '5.0.0b8","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b82'"],"goodparts":["__version__: str = '5.0.0b8"]}],"source":"\n\n__version__: str='5.0.0b82' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b82'\n"},"\/vstutils\/utils.py":{"changes":[{"diff":"\n     return response_type(map(lambda x: (x, x), items_list))\n \n \n-class BaseEnum(Enum):\n+class BaseEnum(str, Enum):\n     \"\"\"\n     BaseEnum extends `Enum` class and used to create enum-like objects that can be used in django serializers or\n     django models.\n","add":1,"remove":1,"filename":"\/vstutils\/utils.py","badparts":["class BaseEnum(Enum):"],"goodparts":["class BaseEnum(str, Enum):"]},{"diff":"\n \n     \"\"\"\n \n+    def __new__(cls, name):\n+        return str.__new__(cls, name)\n+\n     def __repr__(self):\n-        return str(self.name)\n+        return repr(self.__str__())\n \n     def __str__(self):\n-        return self.__repr__()\n+        return str(self.name)\n+\n+    def __hash__(self):\n+        return hash(str(self))\n \n     @classmethod\n     def get_names(cls):\n","add":8,"remove":2,"filename":"\/vstutils\/utils.py","badparts":["        return str(self.name)","        return self.__repr__()"],"goodparts":["    def __new__(cls, name):","        return str.__new__(cls, name)","        return repr(self.__str__())","        return str(self.name)","    def __hash__(self):","        return hash(str(self))"]}]}},"msg":"Release 5.0.0 Beta 82\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n\nParsed bundle size: 2.41 MB.\n\n### TODO:\n* Optimize bundle size."},"42364138f6f850ab40f0af6e794b994082c0bb87":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/42364138f6f850ab40f0af6e794b994082c0bb87","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/42364138f6f850ab40f0af6e794b994082c0bb87","sha":"42364138f6f850ab40f0af6e794b994082c0bb87","keyword":"execution after redirect prevent","diff":"diff --git a\/test_src\/test_proj\/tests.py b\/test_src\/test_proj\/tests.py\nindex e870edd6..928ffb34 100644\n--- a\/test_src\/test_proj\/tests.py\n+++ b\/test_src\/test_proj\/tests.py\n@@ -4035,6 +4035,9 @@ def test_custom_models(self):\n         self.assertTrue(File.objects.all()[1:2].query['low_mark'], 1)\n         self.assertTrue(File.objects.all()[1:2].query['high_mark'], 2)\n \n+        list_qs = List.objects.setup_custom_queryset_kwargs(data_source=[])\n+        self.assertEqual(list_qs.count(), 0)\n+\n     def test_custom(self):\n         self.client.logout()\n         results = self.bulk([\ndiff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 1a1dcf96..b30d2b81 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b83'\n+__version__: str = '5.0.0b84'\ndiff --git a\/vstutils\/custom_model.py b\/vstutils\/custom_model.py\nindex e7ddaff9..2622a008 100644\n--- a\/vstutils\/custom_model.py\n+++ b\/vstutils\/custom_model.py\n@@ -39,7 +39,7 @@ def standard_ordering(self):\n     def standard_ordering(self, value):\n         self['standard_ordering'] = bool(value)\n \n-    def chain(self):  # nocv\n+    def chain(self):\n         return self.clone()\n \n     def clone(self):\n@@ -124,7 +124,10 @@ def __iter__(self):\n         queryset = self.queryset\n         model = queryset.model\n         query = queryset.query\n-        model_data = model._get_data(chunked_fetch=self.chunked_fetch)\n+        model_data = model._get_data(\n+            chunked_fetch=self.chunked_fetch,\n+            **query.get('custom_queryset_kwargs', {})\n+        )\n         model_data = list(filter(query.check_in_query, model_data))\n         ordering = query.order_by\n         if ordering:\n@@ -153,7 +156,7 @@ class CustomQuerySet(BQuerySet):\n     custom_query_class = Query\n \n     def _filter_or_exclude(self, negate, *args, **kwargs):\n-        clone = self._clone()\n+        clone = self._chain()\n         if negate:\n             filter_type = 'exclude'\n         else:\n@@ -182,6 +185,11 @@ def values(self, *fields, **expressions):\n         clone.__iterable_class__ = type('CustomModelIterableValues', (object,), {'fields': fields})\n         return clone\n \n+    def setup_custom_queryset_kwargs(self, **kwargs):\n+        qs = self._chain()\n+        qs.query['custom_queryset_kwargs'] = deepcopy(kwargs)\n+        return qs\n+\n \n class ListModel(BaseModel):\n     \"\"\"\n@@ -201,6 +209,28 @@ class Authors(ListModel):\n                     {\"name\": \"Sergey Klyuykov\"},\n                     {\"name\": \"Michael Taran\"},\n                 ]\n+\n+    Sometimes, it may be necessary to switch the data source. For these purposes,\n+    you should use the `setup_custom_queryset_kwargs` function, which takes various named arguments,\n+    which are also passed to the data initialization function.\n+    One such argument for :class:`ListModel` is date_source, which takes any iterable object.\n+\n+    Examples:\n+        .. sourcecode:: python\n+\n+            from vstutils.custom_model import ListModel, CharField\n+\n+\n+            class Authors(ListModel):\n+                name = CharField(max_length=512)\n+\n+            qs = Authors.objects.setup_custom_queryset_kwargs(data_source=[\n+                {\"name\": \"Sergey Klyuykov\"},\n+                {\"name\": \"Michael Taran\"},\n+            ])\n+\n+    In this case, we setup source list via `setup_custom_queryset_kwargs` function, and any other chained call\n+    is going to work with this data.\n     \"\"\"\n \n     #: List with data dicts. Empty by default.\n@@ -211,9 +241,9 @@ class Meta:\n         abstract = True\n \n     @classmethod\n-    def _get_data(cls, chunked_fetch=False):\n+    def _get_data(cls, chunked_fetch=False, data_source=None):\n         # pylint: disable=unused-argument\n-        return deepcopy(cls.data)\n+        return deepcopy(cls.data if data_source is None else data_source)\n \n \n class FileModel(ListModel):\ndiff --git a\/vstutils\/custom_model.pyi b\/vstutils\/custom_model.pyi\nindex d691d512..788d8e20 100644\n--- a\/vstutils\/custom_model.pyi\n+++ b\/vstutils\/custom_model.pyi\n@@ -47,7 +47,7 @@ class CustomModelIterable(ModelIterable):\n class ListModel(BaseModel):\n     data: _t.ClassVar[_t.List[_t.Dict]]\n \n-    def _get_data(self, chunked_fetch: bool = False) -> _t.List[_t.Dict]:\n+    def _get_data(self, chunked_fetch: bool = False, data_source: _t.Iterable = None) -> _t.List[_t.Dict]:\n         ...\n \n \n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b83'\n+__version__: str = '5.0.0b84","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b83'"],"goodparts":["__version__: str = '5.0.0b84"]}],"source":"\n\n__version__: str='5.0.0b83' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b83'\n"},"\/vstutils\/custom_model.py":{"changes":[{"diff":"\n     def standard_ordering(self, value):\n         self['standard_ordering'] = bool(value)\n \n-    def chain(self):  # nocv\n+    def chain(self):\n         return self.clone()\n \n     def clone(self):\n","add":1,"remove":1,"filename":"\/vstutils\/custom_model.py","badparts":["    def chain(self):  # nocv"],"goodparts":["    def chain(self):"]},{"diff":"\n         queryset = self.queryset\n         model = queryset.model\n         query = queryset.query\n-        model_data = model._get_data(chunked_fetch=self.chunked_fetch)\n+        model_data = model._get_data(\n+            chunked_fetch=self.chunked_fetch,\n+            **query.get('custom_queryset_kwargs', {})\n+        )\n         model_data = list(filter(query.check_in_query, model_data))\n         ordering = query.order_by\n         if ordering:\n","add":4,"remove":1,"filename":"\/vstutils\/custom_model.py","badparts":["        model_data = model._get_data(chunked_fetch=self.chunked_fetch)"],"goodparts":["        model_data = model._get_data(","            chunked_fetch=self.chunked_fetch,","            **query.get('custom_queryset_kwargs', {})","        )"]},{"diff":"\n     custom_query_class = Query\n \n     def _filter_or_exclude(self, negate, *args, **kwargs):\n-        clone = self._clone()\n+        clone = self._chain()\n         if negate:\n             filter_type = 'exclude'\n         else:\n","add":1,"remove":1,"filename":"\/vstutils\/custom_model.py","badparts":["        clone = self._clone()"],"goodparts":["        clone = self._chain()"]},{"diff":"\n         abstract = True\n \n     @classmethod\n-    def _get_data(cls, chunked_fetch=False):\n+    def _get_data(cls, chunked_fetch=False, data_source=None):\n         # pylint: disable=unused-argument\n-        return deepcopy(cls.data)\n+        return deepcopy(cls.data if data_source is None else data_source)\n \n \n class FileModel(ListModel","add":2,"remove":2,"filename":"\/vstutils\/custom_model.py","badparts":["    def _get_data(cls, chunked_fetch=False):","        return deepcopy(cls.data)"],"goodparts":["    def _get_data(cls, chunked_fetch=False, data_source=None):","        return deepcopy(cls.data if data_source is None else data_source)"]}],"source":"\n\nfrom copy import deepcopy from functools import partial from yaml import load try: from yaml import CSafeLoader as Loader except ImportError: from yaml import SafeLoader as Loader from django.db.models.query import ModelIterable from django.db.models.fields import CharField, TextField, IntegerField, BooleanField from.models import BQuerySet, BaseModel from.tools import get_file_value, multikeysort class Query(dict): __slots__='queryset', 'combinator', 'is_sliced', 'select_for_update', 'select_related', 'empty' distinct_fields=False def __init__(self, queryset, *args, **kwargs): super().__init__(*args, **kwargs) self.queryset=queryset self.combinator=None self.is_sliced=False self.select_for_update=False self.select_related=False self['standard_ordering']=True @property def model(self): return self.queryset.model @property def standard_ordering(self): return self['standard_ordering'] @standard_ordering.setter def standard_ordering(self, value): self['standard_ordering']=bool(value) def chain(self): return self.clone() def clone(self): return deepcopy(self) def _check_data(self, check_type, data): if getattr(self, 'empty', False): return False check_data=self.get(check_type,{}) if check_type=='exclude' and not check_data: return False meta=self.model._meta for filter_name, filter_data in check_data.items(): filter_name=filter_name.replace('__exact', '') filter_name__cleared=filter_name.split('__')[0] if filter_name__cleared=='pk': filter_name='__'.join( [meta.pk.attname] +filter_name.split('__')[1:] ) filter_name__cleared=meta.pk.attname try: value=data[filter_name__cleared] except KeyError: continue field=meta._forward_fields_map[filter_name__cleared] if isinstance(filter_data,(list, tuple, set)): filter_data=map(field.to_python, filter_data) else: filter_data=field.to_python(filter_data) if '__in' in filter_name and value not in filter_data: return False elif '__in' not in filter_name and value !=filter_data: return False return True def check_in_query(self, data): return self._check_data('filter', data) and not self._check_data('exclude', data) def set_empty(self): self.empty=True def set_limits(self, low: int=None, high: int=None): self['low_mark'], self['high_mark']=low, high self.is_sliced=True def has_results(self, *args, **kwargs): return bool(self.queryset.all()[:2]) def get_count(self, using): return len(self.queryset.all()) def can_filter(self): return self.get('low_mark', None) is None and self.get('high_mark', None) is None def clear_ordering(self, *args, **kwargs): self['ordering']=[] def add_ordering(self, *ordering): self['ordering']=ordering @property def order_by(self): return self.get('ordering',()) class CustomModelIterable(ModelIterable): __slots__=() def values_handler(self, unit): return{f: unit.get(f) for f in self.fields} def construct_instance(self, data, model): return model(**data) def __iter__(self): queryset=self.queryset model=queryset.model query=queryset.query model_data=model._get_data(chunked_fetch=self.chunked_fetch) model_data=list(filter(query.check_in_query, model_data)) ordering=query.order_by if ordering: ordering=list(ordering) for idx, value in enumerate(ordering): if value in('pk', '-pk'): ordering[idx]=value.replace('pk', model._meta.pk.name) model_data=multikeysort( model_data, ordering, not query.standard_ordering ) elif not query.standard_ordering: model_data.reverse() low=query.get('low_mark', 0) high=query.get('high_mark', len(model_data)) fields=getattr(self, 'fields', None) handler=partial(self.construct_instance, model=model) if not fields else self.values_handler for data in model_data[low:high]: yield handler(data) class CustomQuerySet(BQuerySet): __slots__=() custom_iterable_class=CustomModelIterable custom_query_class=Query def _filter_or_exclude(self, negate, *args, **kwargs): clone=self._clone() if negate: filter_type='exclude' else: filter_type='filter' clone.query[filter_type]=clone.query.get(filter_type,{}) clone.query[filter_type].update(kwargs) for q_arg in filter(lambda x: isinstance(x, dict), filter(bool, args)): clone.query[filter_type].update(q_arg) return clone _filter_or_exclude_inplace=_filter_or_exclude def last(self): data=list(self)[-1:] if data: return data[0] def first(self): data=list(self[:1]) if data: return data[0] def values(self, *fields, **expressions): assert not expressions, 'Expressions is not supported on custom non-database models.' clone=self._clone() clone.__iterable_class__=type('CustomModelIterableValues',(object,),{'fields': fields}) return clone class ListModel(BaseModel): \"\"\" Custom model which uses a list of dicts with data(attribute `ListModel.data`) instead of database records. Useful when you have a simple list of data. Examples: .. sourcecode:: python from vstutils.custom_model import ListModel, CharField class Authors(ListModel): name=CharField(max_length=512) data=[ {\"name\": \"Sergey Klyuykov\"}, {\"name\": \"Michael Taran\"}, ] \"\"\" data=[] objects=CustomQuerySet.as_manager() class Meta: abstract=True @classmethod def _get_data(cls, chunked_fetch=False): return deepcopy(cls.data) class FileModel(ListModel): \"\"\" Custom model which loads data from YAML-file instead of database. Path to the file stored in `FileModel.file_path` attribute. Examples: Source file stored in `\/etc\/authors.yaml` with content: .. sourcecode:: YAML -name: \"Sergey Klyuykov\" -name: \"Michael Taran\" Example: .. sourcecode:: python from vstutils.custom_model import FileModel, CharField class Authors(FileModel): name=CharField(max_length=512) file_path='\/etc\/authors.yaml' \"\"\" class Meta: abstract=True @classmethod def load_file_data(cls): return get_file_value(cls.file_path, strip=False) @classmethod def _get_data(cls, chunked_fetch=False): return load(cls.load_file_data(), Loader=Loader) ","sourceWithComments":"# pylint: disable=unused-import\nfrom copy import deepcopy\nfrom functools import partial\n\nfrom yaml import load\ntry:\n    from yaml import CSafeLoader as Loader\nexcept ImportError:  # nocv\n    from yaml import SafeLoader as Loader\nfrom django.db.models.query import ModelIterable\nfrom django.db.models.fields import CharField, TextField, IntegerField, BooleanField    # noqa: F401\n\nfrom .models import BQuerySet, BaseModel\nfrom .tools import get_file_value, multikeysort  # pylint: disable=import-error\n\n\nclass Query(dict):\n    __slots__ = 'queryset', 'combinator', 'is_sliced', 'select_for_update', 'select_related', 'empty'\n    distinct_fields = False\n\n    def __init__(self, queryset, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.queryset = queryset\n        self.combinator = None\n        self.is_sliced = False\n        self.select_for_update = False\n        self.select_related = False\n        self['standard_ordering'] = True\n\n    @property\n    def model(self):\n        return self.queryset.model\n\n    @property\n    def standard_ordering(self):\n        return self['standard_ordering']\n\n    @standard_ordering.setter\n    def standard_ordering(self, value):\n        self['standard_ordering'] = bool(value)\n\n    def chain(self):  # nocv\n        return self.clone()\n\n    def clone(self):\n        return deepcopy(self)\n\n    def _check_data(self, check_type, data):\n        # pylint: disable=protected-access\n        if getattr(self, 'empty', False):\n            return False\n        check_data = self.get(check_type, {})\n        if check_type == 'exclude' and not check_data:\n            return False\n        meta = self.model._meta\n        for filter_name, filter_data in check_data.items():\n            filter_name = filter_name.replace('__exact', '')\n            filter_name__cleared = filter_name.split('__')[0]\n            if filter_name__cleared == 'pk':\n                filter_name = '__'.join(\n                    [meta.pk.attname] + filter_name.split('__')[1:]\n                )\n                filter_name__cleared = meta.pk.attname\n            try:\n                value = data[filter_name__cleared]\n            except KeyError:\n                continue\n            field = meta._forward_fields_map[filter_name__cleared]\n            if isinstance(filter_data, (list, tuple, set)):\n                filter_data = map(field.to_python, filter_data)\n            else:\n                filter_data = field.to_python(filter_data)\n            if '__in' in filter_name and value not in filter_data:\n                return False\n            elif '__in' not in filter_name and value != filter_data:\n                return False\n        return True\n\n    def check_in_query(self, data):\n        return self._check_data('filter', data) and not self._check_data('exclude', data)\n\n    def set_empty(self):\n        self.empty = True\n\n    def set_limits(self, low: int = None, high: int = None):\n        self['low_mark'], self['high_mark'] = low, high\n        self.is_sliced = True\n\n    def has_results(self, *args, **kwargs):\n        # pylint: disable=unused-argument\n        return bool(self.queryset.all()[:2])\n\n    def get_count(self, using):\n        # pylint: disable=unused-argument\n        return len(self.queryset.all())\n\n    def can_filter(self):\n        return self.get('low_mark', None) is None and self.get('high_mark', None) is None\n\n    def clear_ordering(self, *args, **kwargs):\n        # pylint: disable=unused-argument\n        self['ordering'] = []\n\n    def add_ordering(self, *ordering):\n        self['ordering'] = ordering\n\n    @property\n    def order_by(self):\n        return self.get('ordering', ())\n\n\nclass CustomModelIterable(ModelIterable):\n    __slots__ = ()\n\n    def values_handler(self, unit):\n        # pylint: disable=no-member\n        return {f: unit.get(f) for f in self.fields}  # nocv\n\n    def construct_instance(self, data, model):\n        return model(**data)\n\n    def __iter__(self):\n        # pylint: disable=protected-access\n        queryset = self.queryset\n        model = queryset.model\n        query = queryset.query\n        model_data = model._get_data(chunked_fetch=self.chunked_fetch)\n        model_data = list(filter(query.check_in_query, model_data))\n        ordering = query.order_by\n        if ordering:\n            ordering = list(ordering)\n            for idx, value in enumerate(ordering):\n                if value in ('pk', '-pk'):\n                    ordering[idx] = value.replace('pk', model._meta.pk.name)\n            model_data = multikeysort(\n                model_data,\n                ordering,\n                not query.standard_ordering\n            )\n        elif not query.standard_ordering:\n            model_data.reverse()\n        low = query.get('low_mark', 0)\n        high = query.get('high_mark', len(model_data))\n        fields = getattr(self, 'fields', None)\n        handler = partial(self.construct_instance, model=model) if not fields else self.values_handler\n        for data in model_data[low:high]:\n            yield handler(data)\n\n\nclass CustomQuerySet(BQuerySet):\n    __slots__ = ()\n    custom_iterable_class = CustomModelIterable\n    custom_query_class = Query\n\n    def _filter_or_exclude(self, negate, *args, **kwargs):\n        clone = self._clone()\n        if negate:\n            filter_type = 'exclude'\n        else:\n            filter_type = 'filter'\n        clone.query[filter_type] = clone.query.get(filter_type, {})\n        clone.query[filter_type].update(kwargs)\n        for q_arg in filter(lambda x: isinstance(x, dict), filter(bool, args)):\n            clone.query[filter_type].update(q_arg)  # nocv\n        return clone\n\n    _filter_or_exclude_inplace = _filter_or_exclude\n\n    def last(self):\n        data = list(self)[-1:]\n        if data:\n            return data[0]\n\n    def first(self):\n        data = list(self[:1])\n        if data:\n            return data[0]\n\n    def values(self, *fields, **expressions):\n        assert not expressions, 'Expressions is not supported on custom non-database models.'\n        clone = self._clone()\n        clone.__iterable_class__ = type('CustomModelIterableValues', (object,), {'fields': fields})\n        return clone\n\n\nclass ListModel(BaseModel):\n    \"\"\"\n    Custom model which uses a list of dicts with data (attribute `ListModel.data`) instead of database records.\n    Useful when you have a simple list of data.\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.custom_model import ListModel, CharField\n\n\n            class Authors(ListModel):\n                name = CharField(max_length=512)\n\n                data = [\n                    {\"name\": \"Sergey Klyuykov\"},\n                    {\"name\": \"Michael Taran\"},\n                ]\n    \"\"\"\n\n    #: List with data dicts. Empty by default.\n    data = []\n    objects = CustomQuerySet.as_manager()\n\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def _get_data(cls, chunked_fetch=False):\n        # pylint: disable=unused-argument\n        return deepcopy(cls.data)\n\n\nclass FileModel(ListModel):\n    \"\"\"\n    Custom model which loads data from YAML-file instead of database.\n    Path to the file stored in `FileModel.file_path` attribute.\n\n\n    Examples:\n        Source file stored in `\/etc\/authors.yaml` with content:\n\n        .. sourcecode:: YAML\n\n            - name: \"Sergey Klyuykov\"\n            - name: \"Michael Taran\"\n\n        Example:\n\n        .. sourcecode:: python\n\n            from vstutils.custom_model import FileModel, CharField\n\n\n            class Authors(FileModel):\n                name = CharField(max_length=512)\n\n                file_path = '\/etc\/authors.yaml'\n\n    \"\"\"\n\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def load_file_data(cls):\n        # pylint: disable=no-member\n        return get_file_value(cls.file_path, strip=False)\n\n    @classmethod\n    def _get_data(cls, chunked_fetch=False):\n        return load(cls.load_file_data(), Loader=Loader)\n"},"\/vstutils\/custom_model.pyi":{"changes":[{"diff":"\n class ListModel(BaseModel):\n     data: _t.ClassVar[_t.List[_t.Dict]]\n \n-    def _get_data(self, chunked_fetch: bool = False) -> _t.List[_t.Dict]:\n+    def _get_data(self, chunked_fetch: bool = False, data_source: _t.Iterable = None) -> _t.List[_t.Dict]:\n         ...\n \n \n","add":1,"remove":1,"filename":"\/vstutils\/custom_model.pyi","badparts":["    def _get_data(self, chunked_fetch: bool = False) -> _t.List[_t.Dict]:"],"goodparts":["    def _get_data(self, chunked_fetch: bool = False, data_source: _t.Iterable = None) -> _t.List[_t.Dict]:"]}],"source":"\n\nfrom copy import deepcopy from functools import partial from yaml import load try: from yaml import CSafeLoader as Loader except ImportError: from yaml import SafeLoader as Loader from django.db.models.query import ModelIterable from django.db.models.fields import CharField, TextField, IntegerField, BooleanField from.models import BQuerySet, BaseModel from.tools import get_file_value, multikeysort class Query(dict): __slots__='queryset', 'combinator', 'is_sliced', 'select_for_update', 'select_related', 'empty' distinct_fields=False def __init__(self, queryset, *args, **kwargs): super().__init__(*args, **kwargs) self.queryset=queryset self.combinator=None self.is_sliced=False self.select_for_update=False self.select_related=False self['standard_ordering']=True @property def model(self): return self.queryset.model @property def standard_ordering(self): return self['standard_ordering'] @standard_ordering.setter def standard_ordering(self, value): self['standard_ordering']=bool(value) def chain(self): return self.clone() def clone(self): return deepcopy(self) def _check_data(self, check_type, data): if getattr(self, 'empty', False): return False check_data=self.get(check_type,{}) if check_type=='exclude' and not check_data: return False meta=self.model._meta for filter_name, filter_data in check_data.items(): filter_name=filter_name.replace('__exact', '') filter_name__cleared=filter_name.split('__')[0] if filter_name__cleared=='pk': filter_name='__'.join( [meta.pk.attname] +filter_name.split('__')[1:] ) filter_name__cleared=meta.pk.attname try: value=data[filter_name__cleared] except KeyError: continue field=meta._forward_fields_map[filter_name__cleared] if isinstance(filter_data,(list, tuple, set)): filter_data=map(field.to_python, filter_data) else: filter_data=field.to_python(filter_data) if '__in' in filter_name and value not in filter_data: return False elif '__in' not in filter_name and value !=filter_data: return False return True def check_in_query(self, data): return self._check_data('filter', data) and not self._check_data('exclude', data) def set_empty(self): self.empty=True def set_limits(self, low: int=None, high: int=None): self['low_mark'], self['high_mark']=low, high self.is_sliced=True def has_results(self, *args, **kwargs): return bool(self.queryset.all()[:2]) def get_count(self, using): return len(self.queryset.all()) def can_filter(self): return self.get('low_mark', None) is None and self.get('high_mark', None) is None def clear_ordering(self, *args, **kwargs): self['ordering']=[] def add_ordering(self, *ordering): self['ordering']=ordering @property def order_by(self): return self.get('ordering',()) class CustomModelIterable(ModelIterable): __slots__=() def values_handler(self, unit): return{f: unit.get(f) for f in self.fields} def construct_instance(self, data, model): return model(**data) def __iter__(self): queryset=self.queryset model=queryset.model query=queryset.query model_data=model._get_data(chunked_fetch=self.chunked_fetch) model_data=list(filter(query.check_in_query, model_data)) ordering=query.order_by if ordering: ordering=list(ordering) for idx, value in enumerate(ordering): if value in('pk', '-pk'): ordering[idx]=value.replace('pk', model._meta.pk.name) model_data=multikeysort( model_data, ordering, not query.standard_ordering ) elif not query.standard_ordering: model_data.reverse() low=query.get('low_mark', 0) high=query.get('high_mark', len(model_data)) fields=getattr(self, 'fields', None) handler=partial(self.construct_instance, model=model) if not fields else self.values_handler for data in model_data[low:high]: yield handler(data) class CustomQuerySet(BQuerySet): __slots__=() custom_iterable_class=CustomModelIterable custom_query_class=Query def _filter_or_exclude(self, negate, *args, **kwargs): clone=self._clone() if negate: filter_type='exclude' else: filter_type='filter' clone.query[filter_type]=clone.query.get(filter_type,{}) clone.query[filter_type].update(kwargs) for q_arg in filter(lambda x: isinstance(x, dict), filter(bool, args)): clone.query[filter_type].update(q_arg) return clone _filter_or_exclude_inplace=_filter_or_exclude def last(self): data=list(self)[-1:] if data: return data[0] def first(self): data=list(self[:1]) if data: return data[0] def values(self, *fields, **expressions): assert not expressions, 'Expressions is not supported on custom non-database models.' clone=self._clone() clone.__iterable_class__=type('CustomModelIterableValues',(object,),{'fields': fields}) return clone class ListModel(BaseModel): \"\"\" Custom model which uses a list of dicts with data(attribute `ListModel.data`) instead of database records. Useful when you have a simple list of data. Examples: .. sourcecode:: python from vstutils.custom_model import ListModel, CharField class Authors(ListModel): name=CharField(max_length=512) data=[ {\"name\": \"Sergey Klyuykov\"}, {\"name\": \"Michael Taran\"}, ] \"\"\" data=[] objects=CustomQuerySet.as_manager() class Meta: abstract=True @classmethod def _get_data(cls, chunked_fetch=False): return deepcopy(cls.data) class FileModel(ListModel): \"\"\" Custom model which loads data from YAML-file instead of database. Path to the file stored in `FileModel.file_path` attribute. Examples: Source file stored in `\/etc\/authors.yaml` with content: .. sourcecode:: YAML -name: \"Sergey Klyuykov\" -name: \"Michael Taran\" Example: .. sourcecode:: python from vstutils.custom_model import FileModel, CharField class Authors(FileModel): name=CharField(max_length=512) file_path='\/etc\/authors.yaml' \"\"\" class Meta: abstract=True @classmethod def load_file_data(cls): return get_file_value(cls.file_path, strip=False) @classmethod def _get_data(cls, chunked_fetch=False): return load(cls.load_file_data(), Loader=Loader) ","sourceWithComments":"# pylint: disable=unused-import\nfrom copy import deepcopy\nfrom functools import partial\n\nfrom yaml import load\ntry:\n    from yaml import CSafeLoader as Loader\nexcept ImportError:  # nocv\n    from yaml import SafeLoader as Loader\nfrom django.db.models.query import ModelIterable\nfrom django.db.models.fields import CharField, TextField, IntegerField, BooleanField    # noqa: F401\n\nfrom .models import BQuerySet, BaseModel\nfrom .tools import get_file_value, multikeysort  # pylint: disable=import-error\n\n\nclass Query(dict):\n    __slots__ = 'queryset', 'combinator', 'is_sliced', 'select_for_update', 'select_related', 'empty'\n    distinct_fields = False\n\n    def __init__(self, queryset, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.queryset = queryset\n        self.combinator = None\n        self.is_sliced = False\n        self.select_for_update = False\n        self.select_related = False\n        self['standard_ordering'] = True\n\n    @property\n    def model(self):\n        return self.queryset.model\n\n    @property\n    def standard_ordering(self):\n        return self['standard_ordering']\n\n    @standard_ordering.setter\n    def standard_ordering(self, value):\n        self['standard_ordering'] = bool(value)\n\n    def chain(self):  # nocv\n        return self.clone()\n\n    def clone(self):\n        return deepcopy(self)\n\n    def _check_data(self, check_type, data):\n        # pylint: disable=protected-access\n        if getattr(self, 'empty', False):\n            return False\n        check_data = self.get(check_type, {})\n        if check_type == 'exclude' and not check_data:\n            return False\n        meta = self.model._meta\n        for filter_name, filter_data in check_data.items():\n            filter_name = filter_name.replace('__exact', '')\n            filter_name__cleared = filter_name.split('__')[0]\n            if filter_name__cleared == 'pk':\n                filter_name = '__'.join(\n                    [meta.pk.attname] + filter_name.split('__')[1:]\n                )\n                filter_name__cleared = meta.pk.attname\n            try:\n                value = data[filter_name__cleared]\n            except KeyError:\n                continue\n            field = meta._forward_fields_map[filter_name__cleared]\n            if isinstance(filter_data, (list, tuple, set)):\n                filter_data = map(field.to_python, filter_data)\n            else:\n                filter_data = field.to_python(filter_data)\n            if '__in' in filter_name and value not in filter_data:\n                return False\n            elif '__in' not in filter_name and value != filter_data:\n                return False\n        return True\n\n    def check_in_query(self, data):\n        return self._check_data('filter', data) and not self._check_data('exclude', data)\n\n    def set_empty(self):\n        self.empty = True\n\n    def set_limits(self, low: int = None, high: int = None):\n        self['low_mark'], self['high_mark'] = low, high\n        self.is_sliced = True\n\n    def has_results(self, *args, **kwargs):\n        # pylint: disable=unused-argument\n        return bool(self.queryset.all()[:2])\n\n    def get_count(self, using):\n        # pylint: disable=unused-argument\n        return len(self.queryset.all())\n\n    def can_filter(self):\n        return self.get('low_mark', None) is None and self.get('high_mark', None) is None\n\n    def clear_ordering(self, *args, **kwargs):\n        # pylint: disable=unused-argument\n        self['ordering'] = []\n\n    def add_ordering(self, *ordering):\n        self['ordering'] = ordering\n\n    @property\n    def order_by(self):\n        return self.get('ordering', ())\n\n\nclass CustomModelIterable(ModelIterable):\n    __slots__ = ()\n\n    def values_handler(self, unit):\n        # pylint: disable=no-member\n        return {f: unit.get(f) for f in self.fields}  # nocv\n\n    def construct_instance(self, data, model):\n        return model(**data)\n\n    def __iter__(self):\n        # pylint: disable=protected-access\n        queryset = self.queryset\n        model = queryset.model\n        query = queryset.query\n        model_data = model._get_data(chunked_fetch=self.chunked_fetch)\n        model_data = list(filter(query.check_in_query, model_data))\n        ordering = query.order_by\n        if ordering:\n            ordering = list(ordering)\n            for idx, value in enumerate(ordering):\n                if value in ('pk', '-pk'):\n                    ordering[idx] = value.replace('pk', model._meta.pk.name)\n            model_data = multikeysort(\n                model_data,\n                ordering,\n                not query.standard_ordering\n            )\n        elif not query.standard_ordering:\n            model_data.reverse()\n        low = query.get('low_mark', 0)\n        high = query.get('high_mark', len(model_data))\n        fields = getattr(self, 'fields', None)\n        handler = partial(self.construct_instance, model=model) if not fields else self.values_handler\n        for data in model_data[low:high]:\n            yield handler(data)\n\n\nclass CustomQuerySet(BQuerySet):\n    __slots__ = ()\n    custom_iterable_class = CustomModelIterable\n    custom_query_class = Query\n\n    def _filter_or_exclude(self, negate, *args, **kwargs):\n        clone = self._clone()\n        if negate:\n            filter_type = 'exclude'\n        else:\n            filter_type = 'filter'\n        clone.query[filter_type] = clone.query.get(filter_type, {})\n        clone.query[filter_type].update(kwargs)\n        for q_arg in filter(lambda x: isinstance(x, dict), filter(bool, args)):\n            clone.query[filter_type].update(q_arg)  # nocv\n        return clone\n\n    _filter_or_exclude_inplace = _filter_or_exclude\n\n    def last(self):\n        data = list(self)[-1:]\n        if data:\n            return data[0]\n\n    def first(self):\n        data = list(self[:1])\n        if data:\n            return data[0]\n\n    def values(self, *fields, **expressions):\n        assert not expressions, 'Expressions is not supported on custom non-database models.'\n        clone = self._clone()\n        clone.__iterable_class__ = type('CustomModelIterableValues', (object,), {'fields': fields})\n        return clone\n\n\nclass ListModel(BaseModel):\n    \"\"\"\n    Custom model which uses a list of dicts with data (attribute `ListModel.data`) instead of database records.\n    Useful when you have a simple list of data.\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.custom_model import ListModel, CharField\n\n\n            class Authors(ListModel):\n                name = CharField(max_length=512)\n\n                data = [\n                    {\"name\": \"Sergey Klyuykov\"},\n                    {\"name\": \"Michael Taran\"},\n                ]\n    \"\"\"\n\n    #: List with data dicts. Empty by default.\n    data = []\n    objects = CustomQuerySet.as_manager()\n\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def _get_data(cls, chunked_fetch=False):\n        # pylint: disable=unused-argument\n        return deepcopy(cls.data)\n\n\nclass FileModel(ListModel):\n    \"\"\"\n    Custom model which loads data from YAML-file instead of database.\n    Path to the file stored in `FileModel.file_path` attribute.\n\n\n    Examples:\n        Source file stored in `\/etc\/authors.yaml` with content:\n\n        .. sourcecode:: YAML\n\n            - name: \"Sergey Klyuykov\"\n            - name: \"Michael Taran\"\n\n        Example:\n\n        .. sourcecode:: python\n\n            from vstutils.custom_model import FileModel, CharField\n\n\n            class Authors(FileModel):\n                name = CharField(max_length=512)\n\n                file_path = '\/etc\/authors.yaml'\n\n    \"\"\"\n\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def load_file_data(cls):\n        # pylint: disable=no-member\n        return get_file_value(cls.file_path, strip=False)\n\n    @classmethod\n    def _get_data(cls, chunked_fetch=False):\n        return load(cls.load_file_data(), Loader=Loader)\n"}},"msg":"Release 5.0.0 Beta 84\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n\nParsed bundle size: 2.41 MB.\n\n### TODO:\n* Optimize bundle size."},"5d7a8bc0da341997b6bc17a5aa4723ed89b0e06f":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/5d7a8bc0da341997b6bc17a5aa4723ed89b0e06f","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/5d7a8bc0da341997b6bc17a5aa4723ed89b0e06f","sha":"5d7a8bc0da341997b6bc17a5aa4723ed89b0e06f","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex b30d2b81..32d77849 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b84'\n+__version__: str = '5.0.0b85'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b84'\n+__version__: str = '5.0.0b85'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b84'"],"goodparts":["__version__: str = '5.0.0b85'"]}],"source":"\n\n__version__: str='5.0.0b84' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b84'\n"}},"msg":"Release 5.0.0 Beta 85\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n\nParsed bundle size: 2.46 MB.\n\n### TODO:\n* Optimize bundle size."},"f5cf5a3c15a7b389b80ab256ba09800592ebabe7":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/f5cf5a3c15a7b389b80ab256ba09800592ebabe7","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/f5cf5a3c15a7b389b80ab256ba09800592ebabe7","sha":"f5cf5a3c15a7b389b80ab256ba09800592ebabe7","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 32d77849..38d14681 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b85'\n+__version__: str = '5.0.0b86'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b85'\n+__version__: str = '5.0.0b86'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b85'"],"goodparts":["__version__: str = '5.0.0b86'"]}],"source":"\n\n__version__: str='5.0.0b85' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b85'\n"}},"msg":"Release 5.0.0 Beta 86\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n\nParsed bundle size: 2.46 MB.\n\n### TODO:\n* Optimize bundle size."},"6348fff42f503ac5ec297c236c7af4eae36f20eb":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/6348fff42f503ac5ec297c236c7af4eae36f20eb","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/6348fff42f503ac5ec297c236c7af4eae36f20eb","sha":"6348fff42f503ac5ec297c236c7af4eae36f20eb","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 38d14681..d5e42227 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b86'\n+__version__: str = '5.0.0b87'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b86'\n+__version__: str = '5.0.0b87'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b86'"],"goodparts":["__version__: str = '5.0.0b87'"]}],"source":"\n\n__version__: str='5.0.0b86' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b86'\n"}},"msg":"Release 5.0.0 Beta 87\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n\nParsed bundle size: 2.46 MB.\n\n### TODO:\n* Optimize bundle size."},"97d9e0494ed843ecd325de33194327660afa2875":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/97d9e0494ed843ecd325de33194327660afa2875","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/97d9e0494ed843ecd325de33194327660afa2875","sha":"97d9e0494ed843ecd325de33194327660afa2875","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex d5e42227..92f4d95a 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b87'\n+__version__: str = '5.0.0b88'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b87'\n+__version__: str = '5.0.0b88'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b87'"],"goodparts":["__version__: str = '5.0.0b88'"]}],"source":"\n\n__version__: str='5.0.0b87' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b87'\n"}},"msg":"Release 5.0.0 Beta 88\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n\nParsed bundle size: 2.46 MB.\n\n### TODO:\n* Optimize bundle size."},"e3eb5c130c2228790453e6cd5ed2049d2454da79":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/e3eb5c130c2228790453e6cd5ed2049d2454da79","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/e3eb5c130c2228790453e6cd5ed2049d2454da79","sha":"e3eb5c130c2228790453e6cd5ed2049d2454da79","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 3a508aff..ddf396bc 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b89'\n+__version__: str = '5.0.0b90'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b89'\n+__version__: str = '5.0.0b90'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b89'"],"goodparts":["__version__: str = '5.0.0b90'"]}],"source":"\n\n__version__: str='5.0.0b89' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b89'\n"}},"msg":"Release 5.0.0 Beta 90\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n\nParsed bundle size: 2.46 MB.\n\n### TODO:\n* Optimize bundle size."},"c747f9e4bcdf802d4a9d919b3f11ac2a65f3d16c":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/c747f9e4bcdf802d4a9d919b3f11ac2a65f3d16c","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/c747f9e4bcdf802d4a9d919b3f11ac2a65f3d16c","sha":"c747f9e4bcdf802d4a9d919b3f11ac2a65f3d16c","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex ddf396bc..d770d05f 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b90'\n+__version__: str = '5.0.0b91'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b90'\n+__version__: str = '5.0.0b91'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b90'"],"goodparts":["__version__: str = '5.0.0b91'"]}],"source":"\n\n__version__: str='5.0.0b90' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b90'\n"}},"msg":"Release 5.0.0 Beta 91\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n\nParsed bundle size: 2.46 MB.\n\n### TODO:\n* Optimize bundle size."},"ff083b5f722abc8070417638e7b66568ca10e28d":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/ff083b5f722abc8070417638e7b66568ca10e28d","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/ff083b5f722abc8070417638e7b66568ca10e28d","sha":"ff083b5f722abc8070417638e7b66568ca10e28d","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex d770d05f..70056a1d 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b91'\n+__version__: str = '5.0.0b92'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b91'\n+__version__: str = '5.0.0b92'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b91'"],"goodparts":["__version__: str = '5.0.0b92'"]}],"source":"\n\n__version__: str='5.0.0b91' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b91'\n"}},"msg":"Release 5.0.0 Beta 92\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n\nParsed bundle size: 3.26 MB.\n\n### TODO:\n* Optimize bundle size."},"99493437b607c1350f3e1cae705cb12361183c8b":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/99493437b607c1350f3e1cae705cb12361183c8b","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/99493437b607c1350f3e1cae705cb12361183c8b","sha":"99493437b607c1350f3e1cae705cb12361183c8b","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 70056a1d..74fad167 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b92'\n+__version__: str = '5.0.0b93'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b92'\n+__version__: str = '5.0.0b93'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b92'"],"goodparts":["__version__: str = '5.0.0b93'"]}],"source":"\n\n__version__: str='5.0.0b92' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b92'\n"}},"msg":"Release 5.0.0 Beta 93\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n\nParsed bundle size: 3.26 MB.\n\n### TODO:\n* Optimize bundle size."},"422f6e18d9360888c8c22029156092820480c84c":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/422f6e18d9360888c8c22029156092820480c84c","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/422f6e18d9360888c8c22029156092820480c84c","sha":"422f6e18d9360888c8c22029156092820480c84c","keyword":"execution after redirect prevent","diff":"diff --git a\/test_src\/test_proj\/tests.py b\/test_src\/test_proj\/tests.py\nindex 2b929c13..fa6d9e89 100644\n--- a\/test_src\/test_proj\/tests.py\n+++ b\/test_src\/test_proj\/tests.py\n@@ -1674,6 +1674,16 @@ def has_deep_parent_filter(params):\n             },\n         })\n \n+    def test_search_fields(self):\n+        self.assertEqual(\n+            self.get_model_class('test_proj.Variable').generated_view.search_fields,\n+            ('key', 'value')\n+        )\n+        self.assertEqual(\n+            self.get_model_class('test_proj.Author').generated_view.search_fields,\n+            ('name', 'phone', 'masked')\n+        )\n+\n     def test_api_version_request(self):\n         api = self.get_result('get', '\/api\/endpoint\/?format=openapi&version=v2', 200)\n         paths_which_is_tech = (r'settings', r'_lang')\ndiff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 74fad167..8c36c483 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b93'\n+__version__: str = '5.0.0b94'\ndiff --git a\/vstutils\/models\/base.py b\/vstutils\/models\/base.py\nindex 73db3f64..aac11c36 100644\n--- a\/vstutils\/models\/base.py\n+++ b\/vstutils\/models\/base.py\n@@ -418,7 +418,7 @@ def _update_serializers(cls, metadata: dict, serializers: dict):\n             serializers[serializer_name] = extra_serializer_class\n \n     def get_extra_metadata(cls):\n-        return cls.__extra_metadata__\n+        return cls.__extra_metadata__.copy()\n \n     def get_list_serializer_name(cls):\n         # pylint: disable=no-value-for-parameter\n@@ -493,24 +493,24 @@ class Meta:\n \n     def _get_search_fields(cls, serializer, fields=None):\n         if fields is not None:\n-            return fields\n-\n-        model_fields = cls.get_model_fields_mapping()  # pylint: disable=no-value-for-parameter\n-        serializer_fields = serializer().fields\n-        avail_fields = filter(\n-            tuple(model_fields.keys()).__contains__,\n-            tuple(\n-                k if v.source is None or v.source == '*' else v.source\n-                for k, v in serializer_fields.items()\n-                if not isinstance(v, EXCLUDED_FIELDS)\n+            yield from fields\n+        else:\n+            model_fields = cls.get_model_fields_mapping()  # pylint: disable=no-value-for-parameter\n+            serializer_fields = serializer().fields\n+            avail_fields = filter(\n+                tuple(model_fields.keys()).__contains__,\n+                tuple(\n+                    k if v.source is None or v.source == '*' else v.source\n+                    for k, v in serializer_fields.items()\n+                    if not isinstance(v, EXCLUDED_FIELDS)\n+                )\n             )\n-        )\n-        for field in avail_fields:\n-            serializer_field = serializer_fields[field]\n-            if isinstance(serializer_field, FkField):\n-                yield f'{field}__{serializer_field.autocomplete_represent}'\n-            elif isinstance(serializer_field, drfCharField):\n-                yield field\n+            for field in avail_fields:\n+                serializer_field = serializer_fields[field]\n+                if isinstance(serializer_field, FkField):\n+                    yield f'{field}__{serializer_field.autocomplete_represent}'\n+                elif isinstance(serializer_field, drfCharField):\n+                    yield field\n \n     def _get_view_class(cls, view_base_class):\n         \"\"\"\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b93'\n+__version__: str = '5.0.0b94","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b93'"],"goodparts":["__version__: str = '5.0.0b94"]}],"source":"\n\n__version__: str='5.0.0b93' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b93'\n"},"\/vstutils\/models\/base.py":{"changes":[{"diff":"\n             serializers[serializer_name] = extra_serializer_class\n \n     def get_extra_metadata(cls):\n-        return cls.__extra_metadata__\n+        return cls.__extra_metadata__.copy()\n \n     def get_list_serializer_name(cls):\n         # pylint: disable=no-value-for-parameter\n","add":1,"remove":1,"filename":"\/vstutils\/models\/base.py","badparts":["        return cls.__extra_metadata__"],"goodparts":["        return cls.__extra_metadata__.copy()"]},{"diff":"\n \n     def _get_search_fields(cls, serializer, fields=None):\n         if fields is not None:\n-            return fields\n-\n-        model_fields = cls.get_model_fields_mapping()  # pylint: disable=no-value-for-parameter\n-        serializer_fields = serializer().fields\n-        avail_fields = filter(\n-            tuple(model_fields.keys()).__contains__,\n-            tuple(\n-                k if v.source is None or v.source == '*' else v.source\n-                for k, v in serializer_fields.items()\n-                if not isinstance(v, EXCLUDED_FIELDS)\n+            yield from fields\n+        else:\n+            model_fields = cls.get_model_fields_mapping()  # pylint: disable=no-value-for-parameter\n+            serializer_fields = serializer().fields\n+            avail_fields = filter(\n+                tuple(model_fields.keys()).__contains__,\n+                tuple(\n+                    k if v.source is None or v.source == '*' else v.source\n+                    for k, v in serializer_fields.items()\n+                    if not isinstance(v, EXCLUDED_FIELDS)\n+                )\n             )\n-        )\n-        for field in avail_fields:\n-            serializer_field = serializer_fields[field]\n-            if isinstance(serializer_field, FkField):\n-                yield f'{field}__{serializer_field.autocomplete_represent}'\n-            elif isinstance(serializer_field, drfCharField):\n-                yield field\n+            for field in avail_fields:\n+                serializer_field = serializer_fields[field]\n+                if isinstance(serializer_field, FkField):\n+                    yield f'{field}__{serializer_field.autocomplete_represent}'\n+                elif isinstance(serializer_field, drfCharField):\n+                    yield field\n \n     def _get_view_class(cls, view_base_class):\n         \"\"\"\n","add":17,"remove":17,"filename":"\/vstutils\/models\/base.py","badparts":["            return fields","        model_fields = cls.get_model_fields_mapping()  # pylint: disable=no-value-for-parameter","        serializer_fields = serializer().fields","        avail_fields = filter(","            tuple(model_fields.keys()).__contains__,","            tuple(","                k if v.source is None or v.source == '*' else v.source","                for k, v in serializer_fields.items()","                if not isinstance(v, EXCLUDED_FIELDS)","        )","        for field in avail_fields:","            serializer_field = serializer_fields[field]","            if isinstance(serializer_field, FkField):","                yield f'{field}__{serializer_field.autocomplete_represent}'","            elif isinstance(serializer_field, drfCharField):","                yield field"],"goodparts":["            yield from fields","        else:","            model_fields = cls.get_model_fields_mapping()  # pylint: disable=no-value-for-parameter","            serializer_fields = serializer().fields","            avail_fields = filter(","                tuple(model_fields.keys()).__contains__,","                tuple(","                    k if v.source is None or v.source == '*' else v.source","                    for k, v in serializer_fields.items()","                    if not isinstance(v, EXCLUDED_FIELDS)","                )","            for field in avail_fields:","                serializer_field = serializer_fields[field]","                if isinstance(serializer_field, FkField):","                    yield f'{field}__{serializer_field.autocomplete_represent}'","                elif isinstance(serializer_field, drfCharField):","                    yield field"]}],"source":"\n\nimport operator import uuid from functools import lru_cache, partial, reduce from itertools import chain from copy import deepcopy from django_filters import rest_framework as filters, filterset from django.core.cache import caches as django_caches from django.db.models.base import ModelBase from django.db.models import fields as django_model_fields from django.db.models.fields.related import ManyToManyField, OneToOneField, ForeignKey from django.utils.functional import SimpleLazyObject, lazy from django.db.models.signals import post_save, post_delete from django.dispatch import receiver from rest_framework.fields import ModelField, JSONField, CharField as drfCharField, ChoiceField from rest_framework.mixins import CreateModelMixin, UpdateModelMixin, DestroyModelMixin from..api.fields import( NamedBinaryFileInJsonField, NamedBinaryImageInJsonField, MultipleNamedBinaryFileInJsonField, MultipleNamedBinaryImageInJsonField, FkField, PasswordField, RelatedListField, ) from..utils import( import_class, apply_decorators, classproperty, get_if_lazy, raise_context_decorator_with_default ) from..api import( base as api_base, filters as api_filters, serializers as api_serializers, decorators as api_decorators ) LAZY_MODEL=object() DEFAULT_VIEW_FIELD_NAMES=( 'name', 'title', 'username', 'email', 'key', ) EXCLUDED_FIELDS=( NamedBinaryFileInJsonField, NamedBinaryImageInJsonField, MultipleNamedBinaryFileInJsonField, MultipleNamedBinaryImageInJsonField, ModelField, JSONField, PasswordField, RelatedListField, ) CHANGE_MIXINS=( CreateModelMixin, UpdateModelMixin, DestroyModelMixin ) view_settings=( 'filter_backends', 'permission_classes', 'authentication_classes', 'throttle_classes', 'renderer_classes', 'parser_classes', ) default_extra_metadata: dict={ \"view_class\": None, \"serializer_class\": None, \"serializer_class_name\": None, \"list_fields\": None, \"override_list_fields\": None, \"detail_fields\": None, \"override_detail_fields\": None, \"view_field_name\": None, \"non_bulk_methods\": None, \"properties_groups\": None, \"extra_serializer_classes\": None, \"filterset_fields\": 'serializer', \"search_fields\": None, \"copy_attrs\": None, \"nested\": None, **dict(reduce(operator.add,[((f'pre_{i}', None),(i, None),(f'override_{i}', False)) for i in view_settings])) } def is_append_to_view(item): return bool(getattr(item[1], '_append_to_view', False)) def is_inherit_append_to_view(item): return bool(getattr(item[1], '_inherit', False)) and is_append_to_view(item) def get_append_to_view(items, handler=is_append_to_view): return dict(filter(handler, items)) def get_parents_append_to_view(mro_items): result={} for items in reversed(list(mro_items)): result.update(get_append_to_view(items, is_inherit_append_to_view)) return result def update_cache_for_model(instance, **kwargs): kwargs.get('cached_model_class', instance.__class__).set_etag_value() def get_first_match_name(field_names, default=None): return next( (i for i in field_names if i in DEFAULT_VIEW_FIELD_NAMES), next(iter(field_names[1:]), default) ) def _get_unicode(obj): return obj.__unicode__() def _ensure_pk_in_fields(model_class, fields): if fields is None or fields=='__all__': return fields=list(fields) primary_key_name=model_class._meta.pk.attname if primary_key_name not in fields: fields.insert(0, primary_key_name) return fields def _import_class_if_string(value): if isinstance(value, str): return SimpleLazyObject(lambda: import_class(value)) return value def _load_settings_for_view(metadataobject): return list(map(_import_class_if_string, metadataobject)) def _get_setting_for_view(metatype, metadata, views): override=metadata[f'override_{metatype}'] metadataobject=metadata[metatype] or[] if metadataobject: metadataobject=_load_settings_for_view(metadataobject) pre_metadataobject=metadata[f'pre_{metatype}'] or[] if override: return pre_metadataobject +metadataobject if metadataobject or pre_metadataobject: for view in views: if hasattr(view, metatype): return list(chain(pre_metadataobject, getattr(view, metatype), metadataobject)) return pre_metadataobject +metadataobject def _result_with_arg_decorator(func): def wrapper(*args, **kwargs): return(func(*args, **kwargs), *args) return wrapper def _bool_first(item): return item and item[0] def _get_decorator(data): path, deco_kwargs=data assert not('model' in deco_kwargs and 'view' in deco_kwargs),( \"Invalid model configuration: \" f\"Unable to set 'model' and 'view' at the same time for path[{path}].\" ) if 'model' in deco_kwargs: model=_import_class_if_string(deco_kwargs.pop('model')) assert isinstance(model, ModelBaseClass),( f\"Invalid model type{type(model)} for path[{path}].\" ) deco_kwargs['view']=model.lazy_generated_view if 'arg' not in deco_kwargs: deco_kwargs['arg']=model._meta.pk.name else: deco_kwargs['view']=_import_class_if_string(deco_kwargs.pop('view')) return api_decorators.nested_view(path, **deco_kwargs) def _set_deep_filter_or_not(backends): if backends is None: backends=[] elif not isinstance(backends, list): backends=list(backends) backends.append('vstutils.api.filter_backends.DeepViewFilterBackend') return backends def get_proxy_labels(model): labels=[] if model._meta.proxy: labels.append(model._meta.proxy_for_model._meta.label) labels +=get_proxy_labels(model._meta.proxy_for_model) return labels class ApplyNestedDecorators(apply_decorators): def __init__(self, nested: dict): super().__init__( *map(_get_decorator, nested.items()) ) class ModelBaseClass(ModelBase, metaclass=classproperty.meta): \"\"\" Metaclass for all models. Read more in:class:`vstutils.models.BModel` \"\"\" def __new__(mcs, name, bases, attrs, **kwargs): if \"__slots__\" not in attrs: attrs['__slots__']=() if \"__unicode__\" in attrs and '__str__' not in attrs: attrs['__str__']=_get_unicode extra_metadata: dict={**default_extra_metadata} meta=None if \"Meta\" in attrs: meta=attrs['Meta'] extra_metadata['proxy']=getattr(meta, 'proxy', False) if not getattr(meta, 'abstract', False): for extra_name in filter(lambda y: hasattr(meta, y), map(lambda x: f'_{x}', extra_metadata.keys())): extra_metadata[extra_name[1:]]=getattr(meta, extra_name) attrs['__extra_metadata__']=deepcopy(extra_metadata) model_class=super(ModelBaseClass, mcs).__new__(mcs, name, bases, attrs, **kwargs) model_class.OriginalMeta=meta if meta is not None else model_class.Meta if hasattr(model_class, '__prepare_model__'): model_class.__prepare_model__() if hasattr(model_class, 'deep_parent_field'): model_class.__extra_metadata__['filter_backends']=lazy(_set_deep_filter_or_not, list)( model_class.__extra_metadata__['filter_backends'] ) if getattr(model_class, '_cache_responses', False): receiver(post_save, sender=model_class)(update_cache_for_model) receiver(post_delete, sender=model_class)(update_cache_for_model) cache_related_labels=getattr(model_class, '_cache_related_labels',()) update_cache_for_model_related=partial(update_cache_for_model, cached_model_class=model_class) for label in cache_related_labels: receiver(post_save, sender=label)(update_cache_for_model_related) receiver(post_delete, sender=label)(update_cache_for_model_related) return model_class def get_proxy_labels(cls): return get_proxy_labels(cls) def get_api_cache_name(cls): return f'api_caching_table_{cls._meta.db_table}' def get_etag_value(cls): return str(django_caches['etag'].get_or_set(cls.get_api_cache_name(), str(uuid.uuid4()))) def set_etag_value(cls): new_value=str(uuid.uuid4()) django_caches['etag'].set(cls.get_api_cache_name(), new_value) return new_value @classproperty @lru_cache() def generated_view(cls): return cls.get_view_class() @classproperty @lru_cache() def lazy_generated_view(cls, **extra_metadata): return SimpleLazyObject(lambda: cls.get_view_class(**extra_metadata)) def get_model_fields_mapping(cls, filter_handler=lambda f: True): return{ f.name: f for f in cls._meta.fields if filter_handler(f) } def get_all_view_fields_lazy(cls): return SimpleLazyObject( lambda: tuple(cls.get_model_fields_mapping( lambda f: not isinstance(f,(ManyToManyField, OneToOneField)) and not getattr(f, '_hide', False) ).keys()) ) def get_serializer_class( cls, serializer_class, serializer_class_name=None, fields=None, field_overrides=None, view_field_name=None, non_bulk_methods=None, ): attributes={} if view_field_name: attributes['_view_field_name']=view_field_name if serializer_class is None: serializer_class=api_serializers.VSTSerializer serializer_class=_import_class_if_string(serializer_class) serializer_class_name=cls.__name__ +'Serializer' if serializer_class_name is None else serializer_class_name if fields and fields !='__all__': fields=list(fields) else: fields=cls.get_all_view_fields_lazy() meta=type('Meta',(),{ 'model': cls, 'ref_name': serializer_class_name.replace('Serializer', ''), 'fields': fields }) serializer_class=get_if_lazy(serializer_class) properties_groups=cls.get_extra_metadata()['properties_groups'] translate_model=getattr(cls, '_translate_model', None) if properties_groups: attributes['_schema_properties_groups']=dict(**properties_groups) if non_bulk_methods: attributes['_non_bulk_methods']=non_bulk_methods if translate_model: attributes['_translate_model']=translate_model return type(serializer_class)( serializer_class_name, (serializer_class,), { \"Meta\": meta, **attributes, **(field_overrides or{}) } ) def _update_serializers(cls, metadata: dict, serializers: dict): \"\"\" Setup extra serializers. \"\"\" for serializer_name, extra_serializer_class in(metadata['extra_serializer_classes'] or{}).items(): if issubclass(extra_serializer_class, api_serializers.VSTSerializer) and \\ getattr(extra_serializer_class.Meta, 'model', None) is None: inject_from=getattr(extra_serializer_class.Meta, '__inject_from__', None) field_overrides={ n: f for n, f in(metadata.get(f'override_{inject_from}_fields',{}) or{}).items() if extra_serializer_class._declared_fields.get(n, None) is None } or None extra_serializer_class=cls.get_serializer_class( serializer_class=extra_serializer_class, serializer_class_name=extra_serializer_class.__name__, fields=_ensure_pk_in_fields( cls, getattr(extra_serializer_class.Meta, 'fields', None) or metadata.get(f'{inject_from}_fields', None) ), field_overrides=field_overrides, view_field_name=( metadata['view_field_name'] if inject_from is not None else getattr(extra_serializer_class, '_view_field_name', None) ), non_bulk_methods=( getattr(extra_serializer_class, '_non_bulk_methods', None) or metadata['non_bulk_methods'] if inject_from is not None and metadata['non_bulk_methods'] else getattr(extra_serializer_class, '_non_bulk_methods', None) ) ) elif issubclass(extra_serializer_class, api_serializers.VSTSerializer) and \\ getattr(extra_serializer_class.Meta, 'model', None) is LAZY_MODEL: meta_class=type(extra_serializer_class.Meta)( 'Meta', (extra_serializer_class.Meta,), {'model': cls} ) extra_serializer_class=type(extra_serializer_class)( extra_serializer_class.__name__, (extra_serializer_class,), {'Meta': meta_class} ) serializers[serializer_name]=extra_serializer_class def get_extra_metadata(cls): return cls.__extra_metadata__ def get_list_serializer_name(cls): serializer_class_name=cls.get_extra_metadata()['serializer_class_name'] if serializer_class_name is None: serializer_class_name=cls.__name__ +'Serializer' return serializer_class_name @raise_context_decorator_with_default(default=None) def _get_filterset_class(cls, filterset_fields, serializers): \"\"\" Logic with generating filterset class. Returns `None` if class is not generated by any reason. \"\"\" if filterset_fields=='serializer': serializer=serializers['serializer_class'] filterset_fields=serializer.Meta.fields if not isinstance(filterset_fields, str): model_fields=tuple(cls.get_model_fields_mapping().keys()) filterset_fields=tuple( f for f in filterset_fields if f in model_fields and not isinstance(serializer().fields.get(f), EXCLUDED_FIELDS) ) if filterset_fields: if isinstance(filterset_fields, dict): filterset_fields_list=tuple(filterset_fields.keys()) filterset_fields_types={k: v for k, v in filterset_fields.items() if v is not None} else: filterset_fields_list, filterset_fields_types=filterset_fields,{} class Meta: model=cls if not cls._meta.proxy else cls._meta.proxy_for_model fields=filterset_fields_list filter_base_classes=[] if 'id' in filterset_fields_list: filter_base_classes.append(api_filters.DefaultIDFilter) if 'name' in filterset_fields_list: filter_base_classes.append(api_filters.DefaultNameFilter) if not filter_base_classes: filter_base_classes.append(filters.FilterSet) iteration_filter_handler=( lambda f: f.name not in filterset_fields_types and f.name in filterset_fields_list ) serializer=serializers['serializer_class']() for field_name, field in cls.get_model_fields_mapping(iteration_filter_handler).items(): if isinstance(field, ForeignKey): related_name=get_first_match_name([f.name for f in field.related_model._meta.fields]) filterset_fields_types[field_name]=api_filters.CharFilter( method=api_filters.FkFilterHandler( related_pk=field.target_field.attname, related_name=related_name ), help_text=f\"Search by{field_name}'s primary key or{related_name}\" ) elif isinstance(field, django_model_fields.BooleanField): filterset_fields_types[field_name]=filters.BooleanFilter() elif isinstance(serializer.fields.get(field_name), ChoiceField): filterset_fields_types[field_name]=filters.ChoiceFilter( choices=tuple(serializer.fields.get(field_name).choices.items()) ) return filterset.FilterSetMetaclass( f'{cls.__name__}FilterSetClass', tuple(filter_base_classes), {'Meta': Meta, **filterset_fields_types} ) def _get_search_fields(cls, serializer, fields=None): if fields is not None: return fields model_fields=cls.get_model_fields_mapping() serializer_fields=serializer().fields avail_fields=filter( tuple(model_fields.keys()).__contains__, tuple( k if v.source is None or v.source=='*' else v.source for k, v in serializer_fields.items() if not isinstance(v, EXCLUDED_FIELDS) ) ) for field in avail_fields: serializer_field=serializer_fields[field] if isinstance(serializer_field, FkField): yield f'{field}__{serializer_field.autocomplete_represent}' elif isinstance(serializer_field, drfCharField): yield field def _get_view_class(cls, view_base_class): \"\"\" Get one item of view base class for inheritance. \"\"\" if view_base_class is None: return api_base.ModelViewSet elif view_base_class=='read_only': return api_base.ReadOnlyModelViewSet elif view_base_class=='list_only': return api_base.ListOnlyModelViewSet elif view_base_class=='history': return api_base.HistoryModelViewSet elif isinstance(view_base_class, str): return import_class(view_base_class) return view_base_class def get_view_class(cls, **extra_options): \"\"\" Method which return autogenerated ViewSet based on model's Meta class. \"\"\" metadata=cls.get_extra_metadata() metadata.update(extra_options) list_fields=_ensure_pk_in_fields(cls, metadata['list_fields']) detail_fields=_ensure_pk_in_fields(cls, metadata['detail_fields'] or list_fields) view_attributes={'model': cls, **metadata.get('extra_view_attributes',{})} serializer_class=metadata['serializer_class'] serializers={ 'serializer_class': cls.get_serializer_class( serializer_class=serializer_class, serializer_class_name=cls.get_list_serializer_name(), fields=list_fields, field_overrides=metadata['override_list_fields'] or{}, view_field_name=metadata['view_field_name'], non_bulk_methods=metadata['non_bulk_methods'] ) } detail_fields_override=metadata['override_detail_fields'] if not detail_fields_override and not metadata['detail_fields']: detail_fields_override=metadata['override_list_fields'] serializers['serializer_class_one']=cls.get_serializer_class( serializer_class=serializer_class, serializer_class_name=f'One{serializers[\"serializer_class\"].__name__}', fields=detail_fields, field_overrides=detail_fields_override or{}, view_field_name=metadata['view_field_name'], non_bulk_methods=metadata['non_bulk_methods'] ) cls._update_serializers(metadata, serializers) view_class_data=metadata['view_class'] if not isinstance(view_class_data,(tuple, list)): view_class_data=(view_class_data,) view_class=[cls._get_view_class(v) for v in view_class_data] if getattr(cls, '_cache_responses', False): view_class.insert(0, api_base.CachableHeadMixin) if metadata['copy_attrs']: view_attributes.update(map(lambda r:(f'copy_{r[0]}', r[1]), metadata['copy_attrs'].items())) view_class.append(api_base.CopyMixin) filterset_class=cls._get_filterset_class(metadata['filterset_fields'], serializers) if filterset_class is not None: view_attributes['filterset_class']=filterset_class get_setting_for_view=partial( _result_with_arg_decorator(_get_setting_for_view), metadata=metadata, views=view_class ) for value, name in filter(_bool_first, map(get_setting_for_view, view_settings)): view_attributes[name]=SimpleLazyObject(lambda obj=value: list(map(get_if_lazy, obj))) view_attributes['search_fields']=SimpleLazyObject(lambda: tuple(cls._get_search_fields( serializers['serializer_class_one'], metadata['search_fields'] ))) generated_view=type( f'{cls.__name__}ViewSet', tuple(view_class), { **view_attributes, **serializers, **get_append_to_view(vars(cls).items()), **get_parents_append_to_view([vars(c).items() for c in cls.mro()]), } ) generated_view=apply_decorators( *map(_import_class_if_string, getattr(cls, 'generated_view_decorators',[])) )(ApplyNestedDecorators(metadata['nested'] or{})(generated_view)) if hasattr(cls, 'deep_parent_field') and issubclass(generated_view, CHANGE_MIXINS): remote_name: str=cls.get_model_fields_mapping()[cls.deep_parent_field].remote_field.related_name parent_view=type( f'Parent{cls.__name__}ViewSet', (generated_view,), {'deep_nested_subview': remote_name} ) return ApplyNestedDecorators({remote_name:{ 'view': generated_view, 'arg': cls._meta.pk.attname, 'manager_name': remote_name, 'allow_append': getattr(cls, 'deep_parent_allow_append', False), }})(parent_view) return generated_view ","sourceWithComments":"# pylint: disable=no-member,no-classmethod-decorator,protected-access\nimport operator\nimport uuid\nfrom functools import lru_cache, partial, reduce\nfrom itertools import chain\nfrom copy import deepcopy\n\nfrom django_filters import rest_framework as filters, filterset\nfrom django.core.cache import caches as django_caches\nfrom django.db.models.base import ModelBase\nfrom django.db.models import fields as django_model_fields\nfrom django.db.models.fields.related import ManyToManyField, OneToOneField, ForeignKey\nfrom django.utils.functional import SimpleLazyObject, lazy\nfrom django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom rest_framework.fields import ModelField, JSONField, CharField as drfCharField, ChoiceField\nfrom rest_framework.mixins import CreateModelMixin, UpdateModelMixin, DestroyModelMixin\n\nfrom ..api.fields import (\n    NamedBinaryFileInJsonField,\n    NamedBinaryImageInJsonField,\n    MultipleNamedBinaryFileInJsonField,\n    MultipleNamedBinaryImageInJsonField,\n    FkField,\n    PasswordField,\n    RelatedListField,\n)\nfrom ..utils import (\n    import_class,\n    apply_decorators,\n    classproperty,\n    get_if_lazy,\n    raise_context_decorator_with_default\n)\nfrom ..api import (\n    base as api_base,\n    filters as api_filters,\n    serializers as api_serializers,\n    decorators as api_decorators\n)\n\n# Constants\nLAZY_MODEL = object()\nDEFAULT_VIEW_FIELD_NAMES = (\n    'name',\n    'title',\n    'username',\n    'email',\n    'key',\n)\nEXCLUDED_FIELDS = (\n    NamedBinaryFileInJsonField,\n    NamedBinaryImageInJsonField,\n    MultipleNamedBinaryFileInJsonField,\n    MultipleNamedBinaryImageInJsonField,\n    ModelField,\n    JSONField,\n    PasswordField,\n    RelatedListField,\n)\nCHANGE_MIXINS = (\n    CreateModelMixin,\n    UpdateModelMixin,\n    DestroyModelMixin\n)\n\nview_settings = (\n    'filter_backends',\n    'permission_classes',\n    'authentication_classes',\n    'throttle_classes',\n    'renderer_classes',\n    'parser_classes',\n)\n\ndefault_extra_metadata: dict = {\n    # list or class which is base for view\n    \"view_class\": None,\n    # base class for serializers\n    \"serializer_class\": None,\n    # name of openapi model\n    \"serializer_class_name\": None,\n    # tuple or list of fields in list view\n    \"list_fields\": None,\n    # dict which override fields types of list view serializer\n    \"override_list_fields\": None,\n    # tuple or list of fields in detail view\n    \"detail_fields\": None,\n    # dict which override fields types of detail view serializer\n    \"override_detail_fields\": None,\n    # name of default view field\n    \"view_field_name\": None,\n    # list or tuple of non-bulk methods from gui\n    \"non_bulk_methods\": None,\n    # dict which indicates about properties groups\n    \"properties_groups\": None,\n    # key-value of actions serializers (key - action, value - serializer class)\n    \"extra_serializer_classes\": None,\n    # tuple or list of filters on list\n    \"filterset_fields\": 'serializer',\n    # tuple or list of fields using for search requests\n    \"search_fields\": None,\n    # additional attrs which means that this view allowed to copy elements\n    \"copy_attrs\": None,\n    # key-value mapping with nested views (key - nested name, kwargs for nested decorator)\n    \"nested\": None,\n    # additional view's settings\n    **dict(reduce(operator.add, [((f'pre_{i}', None), (i, None), (f'override_{i}', False)) for i in view_settings]))\n}\n\n\n# Handlers\ndef is_append_to_view(item):\n    return bool(getattr(item[1], '_append_to_view', False))\n\n\ndef is_inherit_append_to_view(item):\n    return bool(getattr(item[1], '_inherit', False)) and is_append_to_view(item)\n\n\ndef get_append_to_view(items, handler=is_append_to_view):\n    return dict(filter(handler, items))\n\n\ndef get_parents_append_to_view(mro_items):\n    result = {}\n    for items in reversed(list(mro_items)):\n        result.update(get_append_to_view(items, is_inherit_append_to_view))\n    return result\n\n\ndef update_cache_for_model(instance, **kwargs):\n    kwargs.get('cached_model_class', instance.__class__).set_etag_value()\n\n\ndef get_first_match_name(field_names, default=None):\n    return next(\n        (i for i in field_names if i in DEFAULT_VIEW_FIELD_NAMES),\n        next(iter(field_names[1:]), default)\n    )\n\n\ndef _get_unicode(obj):\n    return obj.__unicode__()\n\n\ndef _ensure_pk_in_fields(model_class, fields):\n    if fields is None or fields == '__all__':\n        return\n    fields = list(fields)\n    primary_key_name = model_class._meta.pk.attname\n    if primary_key_name not in fields:\n        fields.insert(0, primary_key_name)\n    return fields\n\n\ndef _import_class_if_string(value):\n    if isinstance(value, str):\n        return SimpleLazyObject(lambda: import_class(value))\n    return value\n\n\ndef _load_settings_for_view(metadataobject):\n    return list(map(_import_class_if_string, metadataobject))\n\n\ndef _get_setting_for_view(metatype, metadata, views):\n    override = metadata[f'override_{metatype}']\n    metadataobject = metadata[metatype] or []\n    if metadataobject:\n        metadataobject = _load_settings_for_view(metadataobject)\n    pre_metadataobject = metadata[f'pre_{metatype}'] or []\n    if override:\n        return pre_metadataobject + metadataobject  # nocv\n    if metadataobject or pre_metadataobject:\n        for view in views:\n            if hasattr(view, metatype):  # pragma: no branch\n                return list(chain(pre_metadataobject, getattr(view, metatype), metadataobject))\n        return pre_metadataobject + metadataobject  # nocv\n\n\ndef _result_with_arg_decorator(func):\n    def wrapper(*args, **kwargs):\n        return (func(*args, **kwargs), *args)\n\n    return wrapper\n\n\ndef _bool_first(item):\n    return item and item[0]\n\n\ndef _get_decorator(data):\n    path, deco_kwargs = data\n\n    assert not ('model' in deco_kwargs and 'view' in deco_kwargs), (\n        \"Invalid model configuration: \"\n        f\"Unable to set 'model' and 'view' at the same time for path [{path}].\"\n    )\n    if 'model' in deco_kwargs:\n        model = _import_class_if_string(deco_kwargs.pop('model'))\n        assert isinstance(model, ModelBaseClass), (\n            f\"Invalid model type {type(model)} for path [{path}].\"\n        )\n        deco_kwargs['view'] = model.lazy_generated_view\n        if 'arg' not in deco_kwargs:\n            deco_kwargs['arg'] = model._meta.pk.name\n    else:\n        deco_kwargs['view'] = _import_class_if_string(deco_kwargs.pop('view'))\n    return api_decorators.nested_view(path, **deco_kwargs)\n\n\ndef _set_deep_filter_or_not(backends):\n    if backends is None:  # nocv\n        backends = []\n    elif not isinstance(backends, list):\n        backends = list(backends)\n    backends.append('vstutils.api.filter_backends.DeepViewFilterBackend')\n    return backends\n\n\ndef get_proxy_labels(model):\n    labels = []\n    if model._meta.proxy:\n        labels.append(model._meta.proxy_for_model._meta.label)\n        labels += get_proxy_labels(model._meta.proxy_for_model)\n    return labels\n\n\n# Classes\nclass ApplyNestedDecorators(apply_decorators):\n    def __init__(self, nested: dict):\n        super().__init__(\n            *map(_get_decorator, nested.items())\n        )\n\n\nclass ModelBaseClass(ModelBase, metaclass=classproperty.meta):\n    \"\"\"\n    Metaclass for all models. Read more in :class:`vstutils.models.BModel`\n    \"\"\"\n\n    def __new__(mcs, name, bases, attrs, **kwargs):\n        if \"__slots__\" not in attrs:\n            attrs['__slots__'] = ()\n        if \"__unicode__\" in attrs and '__str__' not in attrs:\n            attrs['__str__'] = _get_unicode\n        extra_metadata: dict = {**default_extra_metadata}\n        meta = None\n        if \"Meta\" in attrs:\n            meta = attrs['Meta']\n            extra_metadata['proxy'] = getattr(meta, 'proxy', False)\n            if not getattr(meta, 'abstract', False):\n                for extra_name in filter(lambda y: hasattr(meta, y), map(lambda x: f'_{x}', extra_metadata.keys())):\n                    extra_metadata[extra_name[1:]] = getattr(meta, extra_name)\n        attrs['__extra_metadata__'] = deepcopy(extra_metadata)\n        model_class = super(ModelBaseClass, mcs).__new__(mcs, name, bases, attrs, **kwargs)\n        model_class.OriginalMeta = meta if meta is not None else model_class.Meta\n        if hasattr(model_class, '__prepare_model__'):\n            model_class.__prepare_model__()\n        if hasattr(model_class, 'deep_parent_field'):\n            model_class.__extra_metadata__['filter_backends'] = lazy(_set_deep_filter_or_not, list)(\n                model_class.__extra_metadata__['filter_backends']\n            )\n        if getattr(model_class, '_cache_responses', False):\n            receiver(post_save, sender=model_class)(update_cache_for_model)\n            receiver(post_delete, sender=model_class)(update_cache_for_model)\n            cache_related_labels = getattr(model_class, '_cache_related_labels', ())\n            update_cache_for_model_related = partial(update_cache_for_model, cached_model_class=model_class)\n            for label in cache_related_labels:\n                receiver(post_save, sender=label)(update_cache_for_model_related)\n                receiver(post_delete, sender=label)(update_cache_for_model_related)\n        return model_class\n\n    def get_proxy_labels(cls):\n        return get_proxy_labels(cls)  # nocv\n\n    def get_api_cache_name(cls):\n        return f'api_caching_table_{cls._meta.db_table}'\n\n    def get_etag_value(cls):\n        # pylint: disable=no-value-for-parameter\n        return str(django_caches['etag'].get_or_set(cls.get_api_cache_name(), str(uuid.uuid4())))\n\n    def set_etag_value(cls):\n        # pylint: disable=no-value-for-parameter\n        new_value = str(uuid.uuid4())\n        django_caches['etag'].set(cls.get_api_cache_name(), new_value)\n        return new_value\n\n    @classproperty\n    @lru_cache()\n    def generated_view(cls):\n        # pylint: disable=no-value-for-parameter\n        return cls.get_view_class()\n\n    @classproperty\n    @lru_cache()\n    def lazy_generated_view(cls, **extra_metadata):\n        # pylint: disable=unnecessary-lambda,no-value-for-parameter\n        return SimpleLazyObject(lambda: cls.get_view_class(**extra_metadata))\n\n    def get_model_fields_mapping(cls, filter_handler=lambda f: True):\n        return {\n            f.name: f\n            for f in cls._meta.fields\n            if filter_handler(f)\n        }\n\n    def get_all_view_fields_lazy(cls):\n        return SimpleLazyObject(\n            lambda: tuple(cls.get_model_fields_mapping(\n                lambda f: not isinstance(f, (ManyToManyField, OneToOneField)) and not getattr(f, '_hide', False)\n            ).keys())\n        )\n\n    def get_serializer_class(  # noqa: CFQ002\n            cls,\n            serializer_class,\n            serializer_class_name=None,\n            fields=None,\n            field_overrides=None,\n            view_field_name=None,\n            non_bulk_methods=None,\n    ):\n        # pylint: disable=no-value-for-parameter,too-many-arguments\n        attributes = {}\n\n        if view_field_name:\n            attributes['_view_field_name'] = view_field_name\n\n        if serializer_class is None:\n            serializer_class = api_serializers.VSTSerializer\n\n        serializer_class = _import_class_if_string(serializer_class)\n\n        serializer_class_name = cls.__name__ + 'Serializer' if serializer_class_name is None else serializer_class_name\n\n        if fields and fields != '__all__':\n            fields = list(fields)\n        else:\n            fields = cls.get_all_view_fields_lazy()\n\n        meta = type('Meta', (), {\n            'model': cls,\n            'ref_name': serializer_class_name.replace('Serializer', ''),\n            'fields': fields\n        })\n\n        serializer_class = get_if_lazy(serializer_class)\n        properties_groups = cls.get_extra_metadata()['properties_groups']\n        translate_model = getattr(cls, '_translate_model', None)\n\n        if properties_groups:\n            attributes['_schema_properties_groups'] = dict(**properties_groups)\n\n        if non_bulk_methods:\n            attributes['_non_bulk_methods'] = non_bulk_methods\n\n        if translate_model:\n            attributes['_translate_model'] = translate_model\n\n        return type(serializer_class)(\n            serializer_class_name,\n            (serializer_class,),\n            {\n                \"Meta\": meta,\n                **attributes,\n                **(field_overrides or {})\n            }\n        )\n\n    def _update_serializers(cls, metadata: dict, serializers: dict):\n        \"\"\"\n        Setup extra serializers.\n        \"\"\"\n        for serializer_name, extra_serializer_class in (metadata['extra_serializer_classes'] or {}).items():\n            if issubclass(extra_serializer_class, api_serializers.VSTSerializer) and \\\n                    getattr(extra_serializer_class.Meta, 'model', None) is None:\n                inject_from = getattr(extra_serializer_class.Meta, '__inject_from__', None)\n                field_overrides = {\n                    n: f\n                    for n, f in (metadata.get(f'override_{inject_from}_fields', {}) or {}).items()\n                    if extra_serializer_class._declared_fields.get(n, None) is None\n                } or None\n                extra_serializer_class = cls.get_serializer_class(  # pylint: disable=no-value-for-parameter\n                    serializer_class=extra_serializer_class,\n                    serializer_class_name=extra_serializer_class.__name__,\n                    fields=_ensure_pk_in_fields(\n                        cls,\n                        getattr(extra_serializer_class.Meta, 'fields', None) or\n                        metadata.get(f'{inject_from}_fields', None)\n                    ),\n                    field_overrides=field_overrides,\n                    view_field_name=(\n                        metadata['view_field_name']\n                        if inject_from is not None\n                        else getattr(extra_serializer_class, '_view_field_name', None)\n                    ),\n                    non_bulk_methods=(\n                        getattr(extra_serializer_class, '_non_bulk_methods', None) or metadata['non_bulk_methods']\n                        if inject_from is not None and metadata['non_bulk_methods']\n                        else getattr(extra_serializer_class, '_non_bulk_methods', None)\n                    )\n                )\n            elif issubclass(extra_serializer_class, api_serializers.VSTSerializer) and \\\n                    getattr(extra_serializer_class.Meta, 'model', None) is LAZY_MODEL:\n                meta_class = type(extra_serializer_class.Meta)(\n                    'Meta',\n                    (extra_serializer_class.Meta,),\n                    {'model': cls}\n                )\n                extra_serializer_class = type(extra_serializer_class)(\n                    extra_serializer_class.__name__,\n                    (extra_serializer_class,),\n                    {'Meta': meta_class}\n                )\n            serializers[serializer_name] = extra_serializer_class\n\n    def get_extra_metadata(cls):\n        return cls.__extra_metadata__\n\n    def get_list_serializer_name(cls):\n        # pylint: disable=no-value-for-parameter\n        serializer_class_name = cls.get_extra_metadata()['serializer_class_name']\n        if serializer_class_name is None:\n            serializer_class_name = cls.__name__ + 'Serializer'\n        return serializer_class_name\n\n    @raise_context_decorator_with_default(default=None)\n    def _get_filterset_class(cls, filterset_fields, serializers):\n        \"\"\"\n        Logic with generating filterset class. Returns `None` if class is not generated by any reason.\n        \"\"\"\n        if filterset_fields == 'serializer':\n            serializer = serializers['serializer_class']\n            filterset_fields = serializer.Meta.fields\n\n            if not isinstance(filterset_fields, str):  # pragma: no branch\n                model_fields = tuple(cls.get_model_fields_mapping().keys())  # pylint: disable=no-value-for-parameter\n                # fields are added to tuple if field in model_fields and not in EXCLUDED_FIELDS\n                filterset_fields = tuple(\n                    f for f in filterset_fields if f in model_fields and\n                    not isinstance(serializer().fields.get(f), EXCLUDED_FIELDS)\n                )\n\n        if filterset_fields:\n\n            if isinstance(filterset_fields, dict):\n                filterset_fields_list = tuple(filterset_fields.keys())\n                filterset_fields_types = {k: v for k, v in filterset_fields.items() if v is not None}\n            else:\n                filterset_fields_list, filterset_fields_types = filterset_fields, {}\n\n            class Meta:\n                model = cls if not cls._meta.proxy else cls._meta.proxy_for_model\n                fields = filterset_fields_list\n\n            filter_base_classes = []\n            if 'id' in filterset_fields_list:\n                filter_base_classes.append(api_filters.DefaultIDFilter)\n            if 'name' in filterset_fields_list:\n                filter_base_classes.append(api_filters.DefaultNameFilter)\n            if not filter_base_classes:\n                filter_base_classes.append(filters.FilterSet)\n\n            iteration_filter_handler = (\n                lambda f: f.name not in filterset_fields_types and f.name in filterset_fields_list\n            )\n            serializer = serializers['serializer_class']()\n            for field_name, field in cls.get_model_fields_mapping(iteration_filter_handler).items():\n                if isinstance(field, ForeignKey):\n                    related_name = get_first_match_name([f.name for f in field.related_model._meta.fields])\n                    filterset_fields_types[field_name] = api_filters.CharFilter(\n                        method=api_filters.FkFilterHandler(\n                            related_pk=field.target_field.attname,\n                            related_name=related_name\n                        ),\n                        help_text=f\"Search by {field_name}'s primary key or {related_name}\"\n                    )\n                elif isinstance(field, django_model_fields.BooleanField):\n                    filterset_fields_types[field_name] = filters.BooleanFilter()\n                elif isinstance(serializer.fields.get(field_name), ChoiceField):\n                    filterset_fields_types[field_name] = filters.ChoiceFilter(\n                        choices=tuple(serializer.fields.get(field_name).choices.items())\n                    )\n\n            return filterset.FilterSetMetaclass(\n                f'{cls.__name__}FilterSetClass',\n                tuple(filter_base_classes),\n                {'Meta': Meta, **filterset_fields_types}\n            )\n\n    def _get_search_fields(cls, serializer, fields=None):\n        if fields is not None:\n            return fields\n\n        model_fields = cls.get_model_fields_mapping()  # pylint: disable=no-value-for-parameter\n        serializer_fields = serializer().fields\n        avail_fields = filter(\n            tuple(model_fields.keys()).__contains__,\n            tuple(\n                k if v.source is None or v.source == '*' else v.source\n                for k, v in serializer_fields.items()\n                if not isinstance(v, EXCLUDED_FIELDS)\n            )\n        )\n        for field in avail_fields:\n            serializer_field = serializer_fields[field]\n            if isinstance(serializer_field, FkField):\n                yield f'{field}__{serializer_field.autocomplete_represent}'\n            elif isinstance(serializer_field, drfCharField):\n                yield field\n\n    def _get_view_class(cls, view_base_class):\n        \"\"\"\n        Get one item of view base class for inheritance.\n        \"\"\"\n        if view_base_class is None:\n            return api_base.ModelViewSet\n        elif view_base_class == 'read_only':\n            return api_base.ReadOnlyModelViewSet\n        elif view_base_class == 'list_only':\n            return api_base.ListOnlyModelViewSet\n        elif view_base_class == 'history':\n            return api_base.HistoryModelViewSet  # nocv\n        elif isinstance(view_base_class, str):\n            return import_class(view_base_class)\n        return view_base_class\n\n    def get_view_class(cls, **extra_options):\n        \"\"\"\n        Method which return autogenerated ViewSet based on model's Meta class.\n        \"\"\"\n        # pylint: disable=no-value-for-parameter\n        metadata = cls.get_extra_metadata()\n        metadata.update(extra_options)\n        list_fields = _ensure_pk_in_fields(cls, metadata['list_fields'])\n        detail_fields = _ensure_pk_in_fields(cls, metadata['detail_fields'] or list_fields)\n\n        view_attributes = {'model': cls, **metadata.get('extra_view_attributes', {})}\n\n        serializer_class = metadata['serializer_class']\n        serializers = {\n            'serializer_class': cls.get_serializer_class(  # pylint: disable=no-value-for-parameter\n                serializer_class=serializer_class,\n                serializer_class_name=cls.get_list_serializer_name(),  # pylint: disable=no-value-for-parameter\n                fields=list_fields,\n                field_overrides=metadata['override_list_fields'] or {},\n                view_field_name=metadata['view_field_name'],\n                non_bulk_methods=metadata['non_bulk_methods']\n            )\n        }\n        detail_fields_override = metadata['override_detail_fields']\n        if not detail_fields_override and not metadata['detail_fields']:\n            detail_fields_override = metadata['override_list_fields']\n\n        serializers['serializer_class_one'] = cls.get_serializer_class(  # pylint: disable=no-value-for-parameter\n            serializer_class=serializer_class,\n            serializer_class_name=f'One{serializers[\"serializer_class\"].__name__}',\n            fields=detail_fields,\n            field_overrides=detail_fields_override or {},\n            view_field_name=metadata['view_field_name'],\n            non_bulk_methods=metadata['non_bulk_methods']\n        )\n        cls._update_serializers(metadata, serializers)\n\n        view_class_data = metadata['view_class']\n\n        if not isinstance(view_class_data, (tuple, list)):\n            view_class_data = (view_class_data,)\n\n        view_class = [cls._get_view_class(v) for v in view_class_data]\n        if getattr(cls, '_cache_responses', False):\n            view_class.insert(0, api_base.CachableHeadMixin)\n\n        if metadata['copy_attrs']:\n            view_attributes.update(map(lambda r: (f'copy_{r[0]}', r[1]), metadata['copy_attrs'].items()))\n            view_class.append(api_base.CopyMixin)\n\n        filterset_class = cls._get_filterset_class(metadata['filterset_fields'], serializers)\n        if filterset_class is not None:\n            view_attributes['filterset_class'] = filterset_class\n\n        get_setting_for_view = partial(\n            _result_with_arg_decorator(_get_setting_for_view),\n            metadata=metadata,\n            views=view_class\n        )\n        for value, name in filter(_bool_first, map(get_setting_for_view, view_settings)):\n            view_attributes[name] = SimpleLazyObject(lambda obj=value: list(map(get_if_lazy, obj)))\n\n        view_attributes['search_fields'] = SimpleLazyObject(lambda: tuple(cls._get_search_fields(\n            serializers['serializer_class_one'],\n            metadata['search_fields']\n        )))\n\n        generated_view = type(\n            f'{cls.__name__}ViewSet',\n            tuple(view_class),\n            {\n                **view_attributes,\n                **serializers,\n                **get_append_to_view(vars(cls).items()),\n                **get_parents_append_to_view([vars(c).items() for c in cls.mro()]),\n            }\n        )\n\n        generated_view = apply_decorators(\n            *map(_import_class_if_string, getattr(cls, 'generated_view_decorators', []))\n        )(ApplyNestedDecorators(metadata['nested'] or {})(generated_view))\n\n        if hasattr(cls, 'deep_parent_field') and issubclass(generated_view, CHANGE_MIXINS):\n            remote_name: str = cls.get_model_fields_mapping()[cls.deep_parent_field].remote_field.related_name\n            parent_view = type(\n                f'Parent{cls.__name__}ViewSet',\n                (generated_view,),\n                {'deep_nested_subview': remote_name}\n            )\n            return ApplyNestedDecorators({remote_name: {\n                'view': generated_view,\n                'arg': cls._meta.pk.attname,\n                'manager_name': remote_name,\n                'allow_append': getattr(cls, 'deep_parent_allow_append', False),\n            }})(parent_view)\n\n        return generated_view\n"}},"msg":"Release 5.0.0 Beta 94\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n\nParsed bundle size: 3.26 MB.\n\n### TODO:\n* Optimize bundle size."},"6af35ee9ff3ca05ce2ee5f6de4544d47da5404b6":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/6af35ee9ff3ca05ce2ee5f6de4544d47da5404b6","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/6af35ee9ff3ca05ce2ee5f6de4544d47da5404b6","sha":"6af35ee9ff3ca05ce2ee5f6de4544d47da5404b6","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 8c36c483..36e9fb5a 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b94'\n+__version__: str = '5.0.0b95'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b94'\n+__version__: str = '5.0.0b95'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b94'"],"goodparts":["__version__: str = '5.0.0b95'"]}],"source":"\n\n__version__: str='5.0.0b94' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b94'\n"}},"msg":"Release 5.0.0 Beta 95\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n\nParsed bundle size: 3.26 MB.\n\n### TODO:\n* Optimize bundle size."},"e475fdd4a95ee38bfb5537323987744449ece14b":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/e475fdd4a95ee38bfb5537323987744449ece14b","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/e475fdd4a95ee38bfb5537323987744449ece14b","sha":"e475fdd4a95ee38bfb5537323987744449ece14b","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 36e9fb5a..026e472d 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b95'\n+__version__: str = '5.0.0b96'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b95'\n+__version__: str = '5.0.0b96'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b95'"],"goodparts":["__version__: str = '5.0.0b96'"]}],"source":"\n\n__version__: str='5.0.0b95' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b95'\n"}},"msg":"Release 5.0.0 Beta 96\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n\nParsed bundle size: 3.26 MB.\n\n### TODO:\n* Optimize bundle size."},"90bd96807628c1d6b1b4471ebc3bb0c7ff4c79ed":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/90bd96807628c1d6b1b4471ebc3bb0c7ff4c79ed","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/90bd96807628c1d6b1b4471ebc3bb0c7ff4c79ed","sha":"90bd96807628c1d6b1b4471ebc3bb0c7ff4c79ed","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 026e472d..48e4e9e6 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b96'\n+__version__: str = '5.0.0b97'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b96'\n+__version__: str = '5.0.0b97'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b96'"],"goodparts":["__version__: str = '5.0.0b97'"]}],"source":"\n\n__version__: str='5.0.0b96' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b96'\n"}},"msg":"Release 5.0.0 Beta 97\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n\nParsed bundle size: 3.26 MB.\n\n### TODO:\n* Optimize bundle size."},"989626610e523c5496da75111db1be7e4b361724":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/989626610e523c5496da75111db1be7e4b361724","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/989626610e523c5496da75111db1be7e4b361724","sha":"989626610e523c5496da75111db1be7e4b361724","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 48e4e9e6..354e7a31 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b97'\n+__version__: str = '5.0.0b98'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b97'\n+__version__: str = '5.0.0b98'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b97'"],"goodparts":["__version__: str = '5.0.0b98'"]}],"source":"\n\n__version__: str='5.0.0b97' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b97'\n"}},"msg":"Release 5.0.0 Beta 98\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"83efd98ce581644a9b5bfb5fc88cc7196c174eec":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/83efd98ce581644a9b5bfb5fc88cc7196c174eec","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/83efd98ce581644a9b5bfb5fc88cc7196c174eec","sha":"83efd98ce581644a9b5bfb5fc88cc7196c174eec","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 354e7a31..c6bd9643 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b98'\n+__version__: str = '5.0.0b99'\ndiff --git a\/vstutils\/api\/fields.py b\/vstutils\/api\/fields.py\nindex ca6238e7..ddbe07bc 100644\n--- a\/vstutils\/api\/fields.py\n+++ b\/vstutils\/api\/fields.py\n@@ -694,11 +694,12 @@ def run_validation(self, data=empty):\n             return data  # nocv\n         self.validate_value(data)\n         if not self.should_not_handle(data):\n-            data['content'] = base64.b64encode(functools.reduce(\n-                lambda binary, func: func(binary, original_data=data),\n-                self.pre_handlers,\n-                base64.b64decode(data['content'])\n-            )).decode('utf-8')\n+            with raise_context(verbose=True):\n+                data['content'] = base64.b64encode(functools.reduce(\n+                    lambda binary, func: func(binary, original_data=data),\n+                    self.pre_handlers,\n+                    base64.b64decode(data['content'])\n+                )).decode('utf-8')\n         self.run_validators(data)\n         return self.to_internal_value(data)\n \n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b98'\n+__version__: str = '5.0.0b99'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b98'"],"goodparts":["__version__: str = '5.0.0b99'"]}],"source":"\n\n__version__: str='5.0.0b98' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b98'\n"},"\/vstutils\/api\/fields.py":{"changes":[{"diff":"\n             return data  # nocv\n         self.validate_value(data)\n         if not self.should_not_handle(data):\n-            data['content'] = base64.b64encode(functools.reduce(\n-                lambda binary, func: func(binary, original_data=data),\n-                self.pre_handlers,\n-                base64.b64decode(data['content'])\n-            )).decode('utf-8')\n+            with raise_context(verbose=True):\n+                data['content'] = base64.b64encode(functools.reduce(\n+                    lambda binary, func: func(binary, original_data=data),\n+                    self.pre_handlers,\n+                    base64.b64decode(data['content'])\n+                )).decode('utf-8')\n         self.run_validators(data)\n         return self.to_internal_value(data)\n \n","add":6,"remove":5,"filename":"\/vstutils\/api\/fields.py","badparts":["            data['content'] = base64.b64encode(functools.reduce(","                lambda binary, func: func(binary, original_data=data),","                self.pre_handlers,","                base64.b64decode(data['content'])","            )).decode('utf-8')"],"goodparts":["            with raise_context(verbose=True):","                data['content'] = base64.b64encode(functools.reduce(","                    lambda binary, func: func(binary, original_data=data),","                    self.pre_handlers,","                    base64.b64decode(data['content'])","                )).decode('utf-8')"]}]}},"msg":"Release 5.0.0 Beta 99\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"2d7536a530d1376a40265132eb9882934ebef45b":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/2d7536a530d1376a40265132eb9882934ebef45b","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/2d7536a530d1376a40265132eb9882934ebef45b","sha":"2d7536a530d1376a40265132eb9882934ebef45b","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex c6bd9643..ff20fe71 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b99'\n+__version__: str = '5.0.0b100'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b99'\n+__version__: str = '5.0.0b100'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b99'"],"goodparts":["__version__: str = '5.0.0b100'"]}],"source":"\n\n__version__: str='5.0.0b99' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b99'\n"}},"msg":"Release 5.0.0 Beta 100\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"1a45e66617f7daef68dd73d2c0cb2c91a3d55ea0":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/1a45e66617f7daef68dd73d2c0cb2c91a3d55ea0","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/1a45e66617f7daef68dd73d2c0cb2c91a3d55ea0","sha":"1a45e66617f7daef68dd73d2c0cb2c91a3d55ea0","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex ff20fe71..7ef6f98c 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b100'\n+__version__: str = '5.0.0b101'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b100'\n+__version__: str = '5.0.0b101'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b100'"],"goodparts":["__version__: str = '5.0.0b101'"]}],"source":"\n\n__version__: str='5.0.0b100' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b100'\n"}},"msg":"Release 5.0.0 Beta 101\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"72925bc12b78940b22c02d741168c799101fde5c":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/72925bc12b78940b22c02d741168c799101fde5c","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/72925bc12b78940b22c02d741168c799101fde5c","sha":"72925bc12b78940b22c02d741168c799101fde5c","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 7ef6f98c..7c3ad94c 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b101'\n+__version__: str = '5.0.0b102'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b101'\n+__version__: str = '5.0.0b102'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b101'"],"goodparts":["__version__: str = '5.0.0b102'"]}],"source":"\n\n__version__: str='5.0.0b101' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b101'\n"}},"msg":"Release 5.0.0 Beta 102\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"85adddaea3ff65154ef4327a828bd639186468b3":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/85adddaea3ff65154ef4327a828bd639186468b3","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/85adddaea3ff65154ef4327a828bd639186468b3","sha":"85adddaea3ff65154ef4327a828bd639186468b3","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 7c3ad94c..6f5dd438 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b102'\n+__version__: str = '5.0.0b103'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b102'\n+__version__: str = '5.0.0b103'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b102'"],"goodparts":["__version__: str = '5.0.0b103'"]}],"source":"\n\n__version__: str='5.0.0b102' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b102'\n"}},"msg":"Release 5.0.0 Beta 102\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"971bc01735e712b78568a6d36583f2a7d16a68ee":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/971bc01735e712b78568a6d36583f2a7d16a68ee","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/971bc01735e712b78568a6d36583f2a7d16a68ee","sha":"971bc01735e712b78568a6d36583f2a7d16a68ee","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 6f5dd438..af23ff15 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b103'\n+__version__: str = '5.0.0b104'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b103'\n+__version__: str = '5.0.0b104'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b103'"],"goodparts":["__version__: str = '5.0.0b104'"]}],"source":"\n\n__version__: str='5.0.0b103' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b103'\n"}},"msg":"Release 5.0.0 Beta 104\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"02653db3be3986ec4c22e37beece6e0898b43950":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/02653db3be3986ec4c22e37beece6e0898b43950","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/02653db3be3986ec4c22e37beece6e0898b43950","sha":"02653db3be3986ec4c22e37beece6e0898b43950","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex af23ff15..4cad774b 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b104'\n+__version__: str = '5.0.0b105'\ndiff --git a\/vstutils\/api\/fields.py b\/vstutils\/api\/fields.py\nindex ddbe07bc..fe3c9d2c 100644\n--- a\/vstutils\/api\/fields.py\n+++ b\/vstutils\/api\/fields.py\n@@ -521,6 +521,8 @@ def _get_lazy_select_name_from_model(self):\n     @functools.lru_cache()\n     def _get_data_from_model(self, value):\n         self.model_class = get_if_lazy(self.model_class)\n+        if isinstance(value, self.model_class):\n+            return value  # nocv\n         return self.model_class.objects.get(**{self.autocomplete_property: value})\n \n     def get_value(self, dictionary: _t.Any) -> _t.Any:\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b104'\n+__version__: str = '5.0.0b105'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b104'"],"goodparts":["__version__: str = '5.0.0b105'"]}],"source":"\n\n__version__: str='5.0.0b104' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b104'\n"}},"msg":"Release 5.0.0 Beta 105\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"4a18cfbbae93b1768625ec92f8c1c6d4d7c74ee7":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/4a18cfbbae93b1768625ec92f8c1c6d4d7c74ee7","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/4a18cfbbae93b1768625ec92f8c1c6d4d7c74ee7","sha":"4a18cfbbae93b1768625ec92f8c1c6d4d7c74ee7","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 4cad774b..9b60ff3f 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b105'\n+__version__: str = '5.0.0b106'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b105'\n+__version__: str = '5.0.0b106'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b105'"],"goodparts":["__version__: str = '5.0.0b106'"]}],"source":"\n\n__version__: str='5.0.0b105' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b105'\n"}},"msg":"Release 5.0.0 Beta 106\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"e243716fac874a0a7829a120c062ace061efa5cd":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/e243716fac874a0a7829a120c062ace061efa5cd","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/e243716fac874a0a7829a120c062ace061efa5cd","sha":"e243716fac874a0a7829a120c062ace061efa5cd","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 9b60ff3f..38e316b2 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b106'\n+__version__: str = '5.0.0b107'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b106'\n+__version__: str = '5.0.0b107'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b106'"],"goodparts":["__version__: str = '5.0.0b107'"]}],"source":"\n\n__version__: str='5.0.0b106' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b106'\n"}},"msg":"Release 5.0.0 Beta 107\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"ca221db1b7f91cb7a1470432e1bb8aee4187ef8e":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/ca221db1b7f91cb7a1470432e1bb8aee4187ef8e","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/ca221db1b7f91cb7a1470432e1bb8aee4187ef8e","sha":"ca221db1b7f91cb7a1470432e1bb8aee4187ef8e","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 38e316b2..9dd6c7fb 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b107'\n+__version__: str = '5.0.0b108'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b107'\n+__version__: str = '5.0.0b108'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b107'"],"goodparts":["__version__: str = '5.0.0b108'"]}],"source":"\n\n__version__: str='5.0.0b107' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b107'\n"}},"msg":"Release 5.0.0 Beta 108\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Fix: Registration page fields.\n\nParsed bundle size: 3.45 MB.\n\n### TODO:\n* Optimize bundle size."},"10e8624146a244bbb56fff3b082a9442738c2e30":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/10e8624146a244bbb56fff3b082a9442738c2e30","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/10e8624146a244bbb56fff3b082a9442738c2e30","sha":"10e8624146a244bbb56fff3b082a9442738c2e30","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 9dd6c7fb..d9f1b7d1 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b108'\n+__version__: str = '5.0.0b109'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b108'\n+__version__: str = '5.0.0b109'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b108'"],"goodparts":["__version__: str = '5.0.0b109'"]}],"source":"\n\n__version__: str='5.0.0b108' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b108'\n"}},"msg":"Release 5.0.0 Beta 109\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n\n### TODO:\n* Optimize bundle size."},"48f913b30dcc5fc216a066ba8bea98aacd180abc":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/48f913b30dcc5fc216a066ba8bea98aacd180abc","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/48f913b30dcc5fc216a066ba8bea98aacd180abc","sha":"48f913b30dcc5fc216a066ba8bea98aacd180abc","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex d9f1b7d1..52ce8d6a 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b109'\n+__version__: str = '5.0.0b110'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b109'\n+__version__: str = '5.0.0b110'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b109'"],"goodparts":["__version__: str = '5.0.0b110'"]}],"source":"\n\n__version__: str='5.0.0b109' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b109'\n"}},"msg":"Release 5.0.0 Beta 109\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n\n### TODO:\n* Optimize bundle size."},"4505b7c91cb48d6b09e81d9c30e5493420dd7a80":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/4505b7c91cb48d6b09e81d9c30e5493420dd7a80","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/4505b7c91cb48d6b09e81d9c30e5493420dd7a80","sha":"4505b7c91cb48d6b09e81d9c30e5493420dd7a80","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex fe96fe15..0f60caa5 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b111'\n+__version__: str = '5.0.0b112'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b111'\n+__version__: str = '5.0.0b112'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b111'"],"goodparts":["__version__: str = '5.0.0b112'"]}],"source":"\n\n__version__: str='5.0.0b111' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b111'\n"}},"msg":"Release 5.0.0 Beta 112\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n\n### TODO:\n* Optimize bundle size."},"b6e88d1cae0860141662a88350c61a1fcd851c5a":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/b6e88d1cae0860141662a88350c61a1fcd851c5a","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/b6e88d1cae0860141662a88350c61a1fcd851c5a","sha":"b6e88d1cae0860141662a88350c61a1fcd851c5a","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 0f60caa5..6864058d 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b112'\n+__version__: str = '5.0.0b113'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b112'\n+__version__: str = '5.0.0b113'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b112'"],"goodparts":["__version__: str = '5.0.0b113'"]}],"source":"\n\n__version__: str='5.0.0b112' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b112'\n"}},"msg":"Release 5.0.0 Beta 113\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n\n### TODO:\n* Optimize bundle size."},"476c3ad2a82a3e28391eaf45d026733650dde0d2":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/476c3ad2a82a3e28391eaf45d026733650dde0d2","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/476c3ad2a82a3e28391eaf45d026733650dde0d2","sha":"476c3ad2a82a3e28391eaf45d026733650dde0d2","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 294c6ef9..b9f38afe 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b114'\n+__version__: str = '5.0.0b115'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b114'\n+__version__: str = '5.0.0b115'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b114'"],"goodparts":["__version__: str = '5.0.0b115'"]}],"source":"\n\n__version__: str='5.0.0b114' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b114'\n"}},"msg":"Release 5.0.0 Beta 115\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n - Remove styles parameters.\n - Add language selector and dark theme button.\n* Layout\n - Put title and back button on the top bar.\n* Instances list\n - Show actions list in modal window.\n - Make rows smaller.\n* One instance\n - In read-only view do not display inputs, leave just content.\n - Add cancel button on `edit` and not `editOnly` views.\n - Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n\n### TODO:\n* Optimize bundle size."},"8969313078943b626e587004163383d661d818cf":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/8969313078943b626e587004163383d661d818cf","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/8969313078943b626e587004163383d661d818cf","sha":"8969313078943b626e587004163383d661d818cf","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex b9f38afe..01d1544c 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b115'\n+__version__: str = '5.0.0b116'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b115'\n+__version__: str = '5.0.0b116'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b115'"],"goodparts":["__version__: str = '5.0.0b116'"]}],"source":"\n\n__version__: str='5.0.0b115' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b115'\n"}},"msg":"FixRelease 5.0.0 Beta 116\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n\n### TODO:\n* Optimize bundle size."},"e7fcda3cd01035decc57d674ae901bbd01187e42":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/e7fcda3cd01035decc57d674ae901bbd01187e42","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/e7fcda3cd01035decc57d674ae901bbd01187e42","sha":"e7fcda3cd01035decc57d674ae901bbd01187e42","keyword":"execution after redirect prevent","diff":"diff --git a\/setup.py b\/setup.py\nindex 118b8996..7fd13025 100644\n--- a\/setup.py\n+++ b\/setup.py\n@@ -396,7 +396,7 @@ def make_setup(**opts):\n         'vstutils\/static\/bundle\/.*\\.js$'\n     ],\n     install_requires=[\n-        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.11\"),\n+        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.12\"),\n     ]\n     + load_requirements('requirements.txt')\n     + load_requirements('requirements-doc.txt'),\ndiff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 01d1544c..3076c105 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b116'\n+__version__: str = '5.0.0b117'\n","message":"","files":{"\/setup.py":{"changes":[{"diff":"\n         'vstutils\/static\/bundle\/.*\\.js$'\n     ],\n     install_requires=[\n-        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.11\"),\n+        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.12\"),\n     ]\n     + load_requirements('requirements.txt')\n     + load_requirements('requirements-doc.txt'),","add":1,"remove":1,"filename":"\/setup.py","badparts":["        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.11\"),"],"goodparts":["        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.12\"),"," load_requirements('requirements.txt')"," load_requirements('requirements-doc.txt'),"]}],"source":"\n import re import os import sys import fnmatch import codecs import gzip import glob import shutil os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir))) from setuptools import find_packages, setup, Command from setuptools.extension import Extension from setuptools.command.sdist import sdist as _sdist from setuptools.command.build_py import build_py as build_py_orig from setuptools.command.install_lib import install_lib as _install_lib try: from Cython.Build import cythonize, build_ext as _build_ext except ImportError: has_cython=False else: has_cython=True try: from sphinx.setup_command import BuildDoc import sphinx has_sphinx=True except ImportError: has_sphinx=False ignored_keys=['-h', '--help', '--version'] is_help=any([a for a in ignored_keys if a in sys.argv]) is_develop='develop' in sys.argv is_build=(any([a for a in['compile', 'bdist_wheel', 'bdist'] if a in sys.argv]) or is_develop) and not is_help def get_discription(file_path='README.rst', folder=os.getcwd()): with codecs.open(\"{}\/{}\".format(folder, file_path), 'r', encoding='utf-8') as readme: return readme.read() def load_requirements(file_name, folder=os.getcwd()): with codecs.open(os.path.join(folder, file_name), 'r', encoding='utf-8')as req_file: return req_file.read().strip().split('\\n') def get_file_ext(ext): file_types=[\".py\", \".pyx\", \".c\", '.cpp'] if has_cython else[\".c\", '.cpp', \".py\"] for ftype in file_types: fname=ext.replace(\".\", \"\/\") +ftype if os.path.exists(fname): return fname return None def listfiles(folder): if not isinstance(folder,(list, tuple)): folder=[folder] folder=filter(lambda p: os.path.isdir(p), folder) for one_folder in folder: for root, folders, files in os.walk(one_folder): for filename in folders +files: yield os.path.join(root, filename) def clear_old_extentions(extensions_list, packages): for filename in listfiles(packages): _filename, _f_ext=os.path.splitext(filename) if os.path.isdir(_filename) or _f_ext not in['.c', '.cpp']: continue has_py=( os.path.exists('{}.py'.format(_filename)) or os.path.exists('{}.pyx'.format(_filename)) ) if has_py and filename.replace('\/', '.').replace(_f_ext, '') in extensions_list: print('Removing old extention[{}].'.format(filename)) os.remove(filename) def make_extention(module_name, files, extra_compile_args, main_include_dir=os.path.join(os.getcwd(), 'include')): include_dirs=list(filter( lambda f: bool(f) and os.path.exists(f) and os.path.isdir(f), [os.path.join(module_name.split('.')[0], 'include'), main_include_dir] )) return Extension( module_name, files, extra_compile_args=extra_compile_args, include_dirs=include_dirs ) def make_extensions(extensions_list, packages): if not isinstance(extensions_list, list): raise Exception(\"Extension list should be `list`.\") if not is_help: clear_old_extentions(extensions_list, packages) extensions_dict={} for ext in extensions_list: files=[] module_name=ext if isinstance(ext,(list, tuple)): module_name=ext[0] for file_module in ext[1]: file_name=get_file_ext(file_module) files +=[file_name] if file_name else[] else: file_name=get_file_ext(ext) files +=[file_name] if file_name else[] if files: extensions_dict[module_name]=files extra_compile_args=[ '-g0', '-ggdb1', \"-fno-strict-aliasing\", \"-fno-var-tracking-assignments\", \"-pipe\", \"-std=c99\", '-Werror=sign-compare' ] ext_modules=list( make_extention(m, f, extra_compile_args) for m, f in extensions_dict.items() ) ext_count=len(ext_modules) nthreads=ext_count if ext_count < 10 else 10 language_level=3 if is_help: pass elif has_cython and('compile' in sys.argv or 'bdist_wheel' in sys.argv or 'build_ext' in sys.argv): cy_kwargs=dict( nthreads=nthreads, force=True, language_level=language_level, compiler_directives=dict( linetrace='CYTHON_TRACE_NOGIL' in sys.argv, profile=True, c_string_type='str', c_string_encoding='utf8' ), ) return cythonize(ext_modules, **cy_kwargs), extensions_dict return ext_modules, extensions_dict def minify_js_file(js_file, jsmin_func): return jsmin_func(js_file, quote_chars=\"'\\\"`\") def minify_css_file(css_file, cssmin_func): return cssmin_func(css_file) def minify_static_files(base_dir, files, exclude=None): exclude=exclude or[] patterns=dict() try: from jsmin import jsmin as jsmin_func patterns['*.js']=(minify_js_file, jsmin_func) except: pass try: from csscompressor import compress as csscompressor_func patterns['*.css']=(minify_css_file, csscompressor_func) except: pass regex_exclude=[re.compile(r, re.MULTILINE) for r in exclude] for fnext, funcs in patterns.items(): for fext_file in filter(lambda f: fnmatch.fnmatch(f, fnext), files): if fnmatch.fnmatch(fext_file, '*.min.*'): continue fext_file=os.path.join(base_dir, fext_file) if os.path.exists(fext_file): if not any(filter(lambda fp: bool(fp.search(fext_file)), regex_exclude)): func, subfunc=funcs with codecs.open(fext_file, 'r', encoding='utf-8') as static_file_fd: minified=func(static_file_fd.read(), subfunc) with codecs.open(fext_file, 'w', encoding='utf-8') as static_file_fd: static_file_fd.write(minified) print('Minfied file{fext_file}.'.format(fext_file=fext_file)) with open(fext_file, 'rb') as f_in: with gzip.open(\"{}.gz\".format(fext_file), 'wb') as f_out: shutil.copyfileobj(f_in, f_out) print('Compressed file{fext_file}.'.format(fext_file=fext_file)) def compile_py_func(fullname, compile_file_func): if compile_file_func(fullname, ddir=os.path.dirname(fullname), legacy=True, optimize=0): os.remove(fullname) def compile_python_sources(base_dir, files, exclude=None): exclude=exclude or[] patterns=dict() try: from compileall import compile_file patterns['*.py']=(compile_py_func, compile_file) except: pass regex_exclude=[re.compile(r, re.MULTILINE) for r in exclude] for fnext, funcs in patterns.items(): for fext_file in filter(lambda f: fnmatch.fnmatch(f, fnext), files): fext_file=os.path.join(base_dir, fext_file) if os.path.exists(fext_file): if not any(filter(lambda fp: bool(fp.search(fext_file)), regex_exclude)): func, subfunc=funcs funcs[0](fext_file, funcs[1]) print('Compiled{fext_file}.'.format(fext_file=fext_file)) class _Compile(_sdist): extensions_dict=dict() static_exclude=[] def __filter_files(self, files): for _files in self.extensions_dict.values(): for file in _files: if file in files: files.remove(file) return files def make_release_tree(self, base_dir, files): if has_cython: files=self.__filter_files(files) _sdist.make_release_tree(self, base_dir, files) minify_static_files(base_dir, files, self.static_exclude) def run(self): return _sdist.run(self) class GithubRelease(Command): ''' Make release on github via githubrelease ''' description='Make release on github via githubrelease' user_options=[ ('body=', 'b', 'Body message.'), ('assets=', 'a', 'Release assets patterns.'), ('repo=', 'r', 'Repository for release.'), ('release=', 'R', 'Release version.'), ('dry-run=', 'd', 'Dry run.'), ('publish=', 'p', 'Publish release or just create draft.'), ] def initialize_options(self): self.body=None or os.getenv('CI_COMMIT_DESCRIPTION', None) self.assets=None self.repo=None self.dry_run=False self.publish=False self.release=None or self.distribution.metadata.version def finalize_options(self): if self.repo is None: raise Exception(\"Parameter --repo is missing\") if self.release is None: raise Exception(\"Parameter --release is missing\") self._gh_args=(self.repo, self.release) self._gh_kwargs=dict( publish=self.publish, name=self.release, dry_run=self.dry_run ) if self.assets: assets=self.assets.format(release=self.release) assets=list(filter(bool, assets.split('\\n'))) self._gh_kwargs['asset_pattern']=assets if self.body: self._gh_kwargs['body']=self.body def run(self): from github_release import gh_release_create gh_release_create(*self._gh_args, **self._gh_kwargs) class build_py(build_py_orig): exclude=[] compile_extentions_types=['.py', '.pyx'] wheel_extentions_types=['.c', '.cpp'] +compile_extentions_types def _filter_modules(self, module_tuple): pkg, mod, file=module_tuple try: file_name, file_ext=os.path.splitext(file) module_name=file_name.replace('\/', '.') except: return True if 'bdist_wheel' in sys.argv: exclude_list=self.wheel_extentions_types elif 'compile' in sys.argv: exclude_list=self.compile_extentions_types else: return True if module_name in self.exclude and file_ext in exclude_list: return False return True def find_package_modules(self, package, package_dir): modules=build_py_orig.find_package_modules(self, package, package_dir) return list(filter(self._filter_modules, modules)) class install_lib(_install_lib): exclude=[] static_exclude=[] compile_exclude=[] def _filter_files_with_ext(self, filename): _filename, _fext=os.path.splitext(filename) if _fext in build_py.wheel_extentions_types: return True return False def install(self): result=_install_lib.install(self) files=list(listfiles(self.install_dir)) so_extentions=list(filter(lambda f: fnmatch.fnmatch(f, '*.so'), files)) for source in filter(self._filter_files_with_ext, files): _source_name, _source_ext=os.path.splitext(source) if any(filter(lambda f: fnmatch.fnmatch(f, _source_name+\"*.so\"), so_extentions)): print('Removing extention sources[{}].'.format(source)) os.remove(source) minify_static_files('', files, self.static_exclude) if os.getenv('BUILD_COMPILE', '')=='true': compile_python_sources('', files, self.compile_exclude) return result def get_compile_command(extensions_dict=None): extensions_dict=extensions_dict or dict() compile_class=_Compile compile_class.extensions_dict=extensions_dict return compile_class def make_setup(**opts): if 'packages' not in opts: opts['packages']=find_packages() ext_modules_list=opts.pop('ext_modules_list',[]) ext_mod, ext_mod_dict=make_extensions(ext_modules_list, opts['packages']) opts['ext_modules']=opts.get('ext_modules',[]) +ext_mod cmdclass=opts.get('cmdclass', dict()) static_exclude=opts.pop('static_exclude_min',[]) if 'compile' not in cmdclass: compile_class=get_compile_command(ext_mod_dict) compile_class.static_exclude=static_exclude cmdclass.update({\"compile\": get_compile_command(ext_mod_dict)}) if has_cython: build_py.exclude=ext_modules_list install_lib.static_exclude=static_exclude install_lib.compile_exclude=opts.pop('compile_modules_exclude',[]) cmdclass.update({ 'build_ext': _build_ext, 'build_py': build_py, 'install_lib': install_lib }) if has_sphinx and 'build_sphinx' not in cmdclass: cmdclass['build_sphinx']=BuildDoc cmdclass['githubrelease']=GithubRelease opts['cmdclass']=cmdclass webpack_path=os.path.join(os.getcwd(), 'webpack.config.js') if os.path.exists(webpack_path) and is_build and os.environ.get('DONT_YARN', \"\") !='true': yarn_build_command='devBuild' if is_develop else 'build' try: os.system('yarn install --pure-lockfile') os.system('yarn ' +yarn_build_command) except Extension as err: print(err) setup(**opts) ext_list=[] if 'develop' in sys.argv: ext_list=[] kwargs=dict( packages=find_packages(exclude=['tests', 'test_proj']+ext_list), ext_modules_list=ext_list, static_exclude_min=[ 'vstutils\/templates\/.*\\.js$', 'vstutils\/static\/bundle\/.*\\.js$' ], install_requires=[ \"django~=\" +(os.environ.get('DJANGO_DEP', \"\") or \"3.2.11\"), ] +load_requirements('requirements.txt') +load_requirements('requirements-doc.txt'), extras_require={ 'test': load_requirements('requirements-test.txt'), 'rpc': load_requirements('requirements-rpc.txt'), 'ldap': load_requirements('requirements-ldap.txt'), 'doc':['django-docs==0.3.1'] +load_requirements('requirements-doc.txt'), 'prod': load_requirements('requirements-prod.txt'), 'stubs': load_requirements('requirements-stubs.txt'), 'pil':['Pillow~=8.4.0;python_version<\"3.7\"', 'Pillow~=9.0.0;python_version>\"3.6\"'], 'boto3':[ i.replace('libcloud', 'libcloud,boto3') for i in load_requirements('requirements.txt') if isinstance(i, str) and 'django-storages' in i ], 'sqs':[ i.replace('redis', 'sqs,redis') if isinstance(i, str) and 'celery' in i else i for i in load_requirements('requirements-rpc.txt') ], }, dependency_links=[ ] +load_requirements('requirements-git.txt'), entry_points={ 'console_scripts':['vstutilsctl=vstutils.__main__:cmd_execution'] }, project_urls={ \"Issue Tracker\": \"https:\/\/gitlab.com\/vstconsulting\/vstutils\/issues\", \"Source Code\": \"https:\/\/gitlab.com\/vstconsulting\/vstutils\", \"Releases\": \"https:\/\/pypi.org\/project\/vstutils\/ \"Documentation\": \"https:\/\/vstutils.vstconsulting.net\/\", } ) all_deps=[] for key, deps in kwargs['extras_require'].items(): if key not in('sqs',): all_deps +=deps kwargs['extras_require']['all']=all_deps make_setup(**kwargs) ","sourceWithComments":"# Compilation block\n########################################################################################\nimport re\nimport os\nimport sys\nimport fnmatch\nimport codecs\nimport gzip\nimport glob\nimport shutil\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nfrom setuptools import find_packages, setup, Command\nfrom setuptools.extension import Extension\nfrom setuptools.command.sdist import sdist as _sdist\nfrom setuptools.command.build_py import build_py as build_py_orig\nfrom setuptools.command.install_lib import install_lib as _install_lib\ntry:\n    from Cython.Build import cythonize, build_ext as _build_ext\nexcept ImportError:\n    has_cython = False\nelse:\n    has_cython = True\n\ntry:\n    from sphinx.setup_command import BuildDoc\n    import sphinx  # noqa: F401\n    has_sphinx = True\nexcept ImportError:\n    has_sphinx = False\n\n\nignored_keys = ['-h', '--help', '--version']\nis_help = any([a for a in ignored_keys if a in sys.argv])\nis_develop = 'develop' in sys.argv\nis_build = (any([a for a in ['compile', 'bdist_wheel', 'bdist'] if a in sys.argv]) or is_develop) and not is_help\n\n\ndef get_discription(file_path='README.rst', folder=os.getcwd()):\n    with codecs.open(\"{}\/{}\".format(folder, file_path), 'r', encoding='utf-8') as readme:\n        return readme.read()\n\n\ndef load_requirements(file_name, folder=os.getcwd()):\n    with codecs.open(os.path.join(folder, file_name), 'r', encoding='utf-8')as req_file:\n        return req_file.read().strip().split('\\n')\n\n\ndef get_file_ext(ext):\n    file_types = [\".py\", \".pyx\", \".c\", '.cpp'] if has_cython else [\".c\", '.cpp', \".py\"]\n    for ftype in file_types:\n        fname = ext.replace(\".\", \"\/\") + ftype\n        if os.path.exists(fname):\n            return fname\n    return None\n\n\ndef listfiles(folder):\n    if not isinstance(folder, (list, tuple)):\n        folder = [folder]\n    folder = filter(lambda p: os.path.isdir(p), folder)\n    for one_folder in folder:\n        for root, folders, files in os.walk(one_folder):\n            for filename in folders + files:\n                yield os.path.join(root, filename)\n\n\ndef clear_old_extentions(extensions_list, packages):\n    for filename in listfiles(packages):\n        _filename, _f_ext = os.path.splitext(filename)\n        if os.path.isdir(_filename) or _f_ext not in ['.c', '.cpp']:\n            continue\n        has_py = (\n            os.path.exists('{}.py'.format(_filename)) or\n            os.path.exists('{}.pyx'.format(_filename))\n        )\n\n        if has_py and filename.replace('\/', '.').replace(_f_ext, '') in extensions_list:\n            print('Removing old extention [{}].'.format(filename))\n            os.remove(filename)\n\n\ndef make_extention(module_name, files, extra_compile_args, main_include_dir=os.path.join(os.getcwd(), 'include')):\n    include_dirs = list(filter(\n        lambda f: bool(f) and os.path.exists(f) and os.path.isdir(f),\n        [os.path.join(module_name.split('.')[0], 'include'), main_include_dir]\n    ))\n\n    return Extension(\n        module_name, files,\n        extra_compile_args=extra_compile_args,\n        include_dirs=include_dirs\n    )\n\n\ndef make_extensions(extensions_list, packages):\n    if not isinstance(extensions_list, list):\n        raise Exception(\"Extension list should be `list`.\")\n\n    if not is_help:\n        clear_old_extentions(extensions_list, packages)\n\n    extensions_dict = {}\n    for ext in extensions_list:\n        files = []\n        module_name = ext\n        if isinstance(ext, (list, tuple)):\n            module_name = ext[0]\n            for file_module in ext[1]:\n                file_name = get_file_ext(file_module)\n                files += [file_name] if file_name else []\n        else:\n            file_name = get_file_ext(ext)\n            files += [file_name] if file_name else []\n        if files:\n            extensions_dict[module_name] = files\n\n    extra_compile_args = [\n        '-g0', '-ggdb1',\n        \"-fno-strict-aliasing\",\n        \"-fno-var-tracking-assignments\",\n        \"-pipe\", \"-std=c99\", '-Werror=sign-compare'\n    ]\n    ext_modules = list(\n        make_extention(m, f, extra_compile_args)\n        for m, f in extensions_dict.items()\n    )\n    ext_count = len(ext_modules)\n    nthreads = ext_count if ext_count < 10 else 10\n\n    language_level = 3\n    if is_help:\n        pass\n    elif has_cython and ('compile' in sys.argv or 'bdist_wheel' in sys.argv or 'build_ext' in sys.argv):\n        cy_kwargs = dict(\n            nthreads=nthreads,\n            force=True,\n            language_level=language_level,\n            compiler_directives=dict(\n                linetrace='CYTHON_TRACE_NOGIL' in sys.argv,\n                profile=True,\n                c_string_type='str',\n                c_string_encoding='utf8'\n            ),\n        )\n        return cythonize(ext_modules, **cy_kwargs), extensions_dict\n    return ext_modules, extensions_dict\n\n\ndef minify_js_file(js_file, jsmin_func):\n    return jsmin_func(js_file, quote_chars=\"'\\\"`\")\n\n\ndef minify_css_file(css_file, cssmin_func):\n    return cssmin_func(css_file)\n\n\ndef minify_static_files(base_dir, files, exclude=None):\n    exclude = exclude or []\n    patterns = dict()\n    try:\n        from jsmin import jsmin as jsmin_func\n        patterns['*.js'] = (minify_js_file, jsmin_func)\n    except:\n        pass\n    try:\n        from csscompressor import compress as csscompressor_func\n        patterns['*.css'] = (minify_css_file, csscompressor_func)\n    except:\n        pass\n\n    regex_exclude = [re.compile(r, re.MULTILINE) for r in exclude]\n\n    for fnext, funcs in patterns.items():\n        for fext_file in filter(lambda f: fnmatch.fnmatch(f, fnext), files):\n            if fnmatch.fnmatch(fext_file, '*.min.*'):\n                continue\n            fext_file = os.path.join(base_dir, fext_file)\n            if os.path.exists(fext_file):\n                if not any(filter(lambda fp: bool(fp.search(fext_file)), regex_exclude)):\n                    func, subfunc = funcs\n                    with codecs.open(fext_file, 'r', encoding='utf-8') as static_file_fd:\n                        minified = func(static_file_fd.read(), subfunc)\n                    with codecs.open(fext_file, 'w', encoding='utf-8') as static_file_fd:\n                        static_file_fd.write(minified)\n                    print('Minfied file {fext_file}.'.format(fext_file=fext_file))\n                with open(fext_file, 'rb') as f_in:\n                    with gzip.open(\"{}.gz\".format(fext_file), 'wb') as f_out:\n                        shutil.copyfileobj(f_in, f_out)\n                print('Compressed file {fext_file}.'.format(fext_file=fext_file))\n\n\ndef compile_py_func(fullname, compile_file_func):\n    if compile_file_func(fullname, ddir=os.path.dirname(fullname), legacy=True, optimize=0):\n        os.remove(fullname)\n\n\ndef compile_python_sources(base_dir, files, exclude=None):\n    exclude = exclude or []\n    patterns = dict()\n    try:\n        from compileall import compile_file\n        patterns['*.py'] = (compile_py_func, compile_file)\n    except:\n        pass\n\n    regex_exclude = [re.compile(r, re.MULTILINE) for r in exclude]\n\n    for fnext, funcs in patterns.items():\n        for fext_file in filter(lambda f: fnmatch.fnmatch(f, fnext), files):\n            fext_file = os.path.join(base_dir, fext_file)\n            if os.path.exists(fext_file):\n                if not any(filter(lambda fp: bool(fp.search(fext_file)), regex_exclude)):\n                    func, subfunc = funcs\n                    funcs[0](fext_file, funcs[1])\n                    print('Compiled {fext_file}.'.format(fext_file=fext_file))\n\n\nclass _Compile(_sdist):\n    extensions_dict = dict()\n    static_exclude = []\n\n    def __filter_files(self, files):\n        for _files in self.extensions_dict.values():\n            for file in _files:\n                if file in files:\n                    files.remove(file)\n        return files\n\n    def make_release_tree(self, base_dir, files):\n        if has_cython:\n            files = self.__filter_files(files)\n        _sdist.make_release_tree(self, base_dir, files)\n        minify_static_files(base_dir, files, self.static_exclude)\n\n    def run(self):\n        return _sdist.run(self)\n\n\nclass GithubRelease(Command):\n    '''\n    Make release on github via githubrelease\n    '''\n    description = 'Make release on github via githubrelease'\n\n    user_options = [\n        ('body=', 'b', 'Body message.'),\n        ('assets=', 'a', 'Release assets patterns.'),\n        ('repo=', 'r', 'Repository for release.'),\n        ('release=', 'R', 'Release version.'),\n        ('dry-run=', 'd', 'Dry run.'),\n        ('publish=', 'p', 'Publish release or just create draft.'),\n    ]\n\n    def initialize_options(self):\n        self.body = None or os.getenv('CI_COMMIT_DESCRIPTION', None)\n        self.assets = None\n        self.repo = None\n        self.dry_run = False\n        self.publish = False\n        self.release = None or self.distribution.metadata.version\n\n    def finalize_options(self):\n        if self.repo is None:\n            raise Exception(\"Parameter --repo is missing\")\n        if self.release is None:\n            raise Exception(\"Parameter --release is missing\")\n        self._gh_args = (self.repo, self.release)\n        self._gh_kwargs = dict(\n            publish=self.publish, name=self.release, dry_run=self.dry_run\n        )\n        if self.assets:\n            assets = self.assets.format(release=self.release)\n            assets = list(filter(bool, assets.split('\\n')))\n            self._gh_kwargs['asset_pattern'] = assets\n        if self.body:\n            self._gh_kwargs['body'] = self.body\n\n    def run(self):\n        from github_release import gh_release_create\n        gh_release_create(*self._gh_args, **self._gh_kwargs)\n\n\nclass build_py(build_py_orig):\n    exclude = []\n    compile_extentions_types = ['.py', '.pyx']\n    wheel_extentions_types = ['.c', '.cpp'] + compile_extentions_types\n\n    def _filter_modules(self, module_tuple):\n        pkg, mod, file = module_tuple\n        try:\n            file_name, file_ext = os.path.splitext(file)\n            module_name = file_name.replace('\/', '.')\n        except:\n            return True\n        if 'bdist_wheel' in sys.argv:\n            exclude_list = self.wheel_extentions_types\n        elif 'compile' in sys.argv:\n            exclude_list = self.compile_extentions_types\n        else:\n            return True\n        if module_name in self.exclude and file_ext in exclude_list:\n            return False\n        return True\n\n    def find_package_modules(self, package, package_dir):\n        modules = build_py_orig.find_package_modules(self, package, package_dir)\n        return list(filter(self._filter_modules, modules))\n\n\nclass install_lib(_install_lib):\n    exclude = []\n    static_exclude = []\n    compile_exclude = []\n\n    def _filter_files_with_ext(self, filename):\n        _filename, _fext = os.path.splitext(filename)\n        if _fext in build_py.wheel_extentions_types:\n            return True\n        return False\n\n    def install(self):\n        result = _install_lib.install(self)\n        files = list(listfiles(self.install_dir))\n        so_extentions = list(filter(lambda f: fnmatch.fnmatch(f, '*.so'), files))\n        for source in filter(self._filter_files_with_ext, files):\n            _source_name, _source_ext = os.path.splitext(source)\n            if any(filter(lambda f: fnmatch.fnmatch(f, _source_name+\"*.so\"), so_extentions)):\n                print('Removing extention sources [{}].'.format(source))\n                os.remove(source)\n        minify_static_files('', files, self.static_exclude)\n        if os.getenv('BUILD_COMPILE', '') == 'true':\n            compile_python_sources('', files, self.compile_exclude)\n        return result\n\n\ndef get_compile_command(extensions_dict=None):\n    extensions_dict = extensions_dict or dict()\n    compile_class = _Compile\n    compile_class.extensions_dict = extensions_dict\n    return compile_class\n\n\ndef make_setup(**opts):\n    if 'packages' not in opts:\n        opts['packages'] = find_packages()\n    ext_modules_list = opts.pop('ext_modules_list', [])\n    ext_mod, ext_mod_dict = make_extensions(ext_modules_list, opts['packages'])\n    opts['ext_modules'] = opts.get('ext_modules', []) + ext_mod\n    cmdclass = opts.get('cmdclass', dict())\n    static_exclude = opts.pop('static_exclude_min', [])\n    if 'compile' not in cmdclass:\n        compile_class = get_compile_command(ext_mod_dict)\n        compile_class.static_exclude = static_exclude\n        cmdclass.update({\"compile\": get_compile_command(ext_mod_dict)})\n    if has_cython:\n        build_py.exclude = ext_modules_list\n        install_lib.static_exclude = static_exclude\n        install_lib.compile_exclude = opts.pop('compile_modules_exclude', [])\n        cmdclass.update({\n            'build_ext': _build_ext,\n            'build_py': build_py,\n            'install_lib': install_lib\n        })\n    if has_sphinx and 'build_sphinx' not in cmdclass:\n        cmdclass['build_sphinx'] = BuildDoc\n    cmdclass['githubrelease'] = GithubRelease\n    opts['cmdclass'] = cmdclass\n\n    webpack_path = os.path.join(os.getcwd(), 'webpack.config.js')\n    if os.path.exists(webpack_path) and is_build and os.environ.get('DONT_YARN', \"\") != 'true':\n        yarn_build_command = 'devBuild' if is_develop else 'build'\n        try:\n            os.system('yarn install --pure-lockfile')\n            os.system('yarn ' + yarn_build_command)\n        except Extension as err:\n            print(err)\n\n    setup(**opts)\n\n########################################################################################\n# end block\n\next_list = []\n\nif 'develop' in sys.argv:\n    ext_list = []\n\nkwargs = dict(\n    packages=find_packages(exclude=['tests', 'test_proj']+ext_list),\n    ext_modules_list=ext_list,\n    static_exclude_min=[\n        'vstutils\/templates\/.*\\.js$',\n        'vstutils\/static\/bundle\/.*\\.js$'\n    ],\n    install_requires=[\n        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.11\"),\n    ]\n    + load_requirements('requirements.txt')\n    + load_requirements('requirements-doc.txt'),\n    extras_require={\n        'test': load_requirements('requirements-test.txt'),\n        'rpc': load_requirements('requirements-rpc.txt'),\n        'ldap': load_requirements('requirements-ldap.txt'),\n        'doc': ['django-docs==0.3.1'] + load_requirements('requirements-doc.txt'),\n        'prod': load_requirements('requirements-prod.txt'),\n        'stubs': load_requirements('requirements-stubs.txt'),\n        'pil': ['Pillow~=8.4.0;python_version<\"3.7\"', 'Pillow~=9.0.0;python_version>\"3.6\"'],\n        'boto3': [\n            i.replace('libcloud', 'libcloud,boto3')\n            for i in load_requirements('requirements.txt')\n            if isinstance(i, str) and 'django-storages' in i\n        ],\n        'sqs': [\n            i.replace('redis', 'sqs,redis')\n            if isinstance(i, str) and 'celery' in i\n            else i\n            for i in load_requirements('requirements-rpc.txt')\n        ],\n    },\n    dependency_links=[\n    ] + load_requirements('requirements-git.txt'),\n    entry_points={\n        'console_scripts': ['vstutilsctl=vstutils.__main__:cmd_execution']\n    },\n    project_urls={\n        \"Issue Tracker\": \"https:\/\/gitlab.com\/vstconsulting\/vstutils\/issues\",\n        \"Source Code\": \"https:\/\/gitlab.com\/vstconsulting\/vstutils\",\n        \"Releases\": \"https:\/\/pypi.org\/project\/vstutils\/#history\",\n        \"Documentation\": \"https:\/\/vstutils.vstconsulting.net\/\",\n    }\n)\n\nall_deps = []\nfor key, deps in kwargs['extras_require'].items():\n    if key not in ('sqs',):\n        all_deps += deps\n\nkwargs['extras_require']['all'] = all_deps\n\nmake_setup(**kwargs)\n"},"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b116'\n+__version__: str = '5.0.0b117'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b116'"],"goodparts":["__version__: str = '5.0.0b117'"]}],"source":"\n\n__version__: str='5.0.0b116' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b116'\n"}},"msg":"Release 5.0.0 Beta 117\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n\n### TODO:\n* Optimize bundle size."},"1cb0304a341f3ad9b1dfc8a72595deeb0b194bf5":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/1cb0304a341f3ad9b1dfc8a72595deeb0b194bf5","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/1cb0304a341f3ad9b1dfc8a72595deeb0b194bf5","sha":"1cb0304a341f3ad9b1dfc8a72595deeb0b194bf5","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex bc95eaf7..320bad3c 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b118'\n+__version__: str = '5.0.0b119'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b118'\n+__version__: str = '5.0.0b119'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b118'"],"goodparts":["__version__: str = '5.0.0b119'"]}],"source":"\n\n__version__: str='5.0.0b118' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b118'\n"}},"msg":"Release 5.0.0 Beta 119\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n\n### TODO:\n* Optimize bundle size."},"f2812ad756f026946b4ad71382fada39996d3a78":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/f2812ad756f026946b4ad71382fada39996d3a78","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/f2812ad756f026946b4ad71382fada39996d3a78","sha":"f2812ad756f026946b4ad71382fada39996d3a78","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 320bad3c..cefb099b 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b119'\n+__version__: str = '5.0.0b120'\ndiff --git a\/vstutils\/api\/schema\/inspectors.py b\/vstutils\/api\/schema\/inspectors.py\nindex 0d2a6fb8..9afd021c 100644\n--- a\/vstutils\/api\/schema\/inspectors.py\n+++ b\/vstutils\/api\/schema\/inspectors.py\n@@ -418,7 +418,7 @@ def field_to_swagger_object(self, field, swagger_object_type, use_references, **\n         if not isinstance(field, fields.CSVFileField):\n             return NotHandled\n \n-        format = FORMAT_CSV_FILE\n+        x_format = FORMAT_CSV_FILE\n         items = self.probe_field_inspectors(field.items, swagger_object_type, False)\n         x_options = {\n             'delimiter': field.delimiter,\n@@ -432,7 +432,7 @@ def field_to_swagger_object(self, field, swagger_object_type, use_references, **\n         if field.inner_as_array:\n             kwargs = {\n                 'type': openapi.TYPE_ARRAY,\n-                'x-format': format,\n+                'x-format': x_format,\n                 'items': items,\n                 X_OPTIONS: x_options\n             }\n@@ -440,7 +440,7 @@ def field_to_swagger_object(self, field, swagger_object_type, use_references, **\n             x_options['items'] = items\n             kwargs = {\n                 'type': openapi.TYPE_STRING,\n-                'format': format,\n+                'format': x_format,\n                 X_OPTIONS: x_options\n             }\n \n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b119'\n+__version__: str = '5.0.0b120'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b119'"],"goodparts":["__version__: str = '5.0.0b120'"]}],"source":"\n\n__version__: str='5.0.0b119' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b119'\n"},"\/vstutils\/api\/schema\/inspectors.py":{"changes":[{"diff":"\n         if not isinstance(field, fields.CSVFileField):\n             return NotHandled\n \n-        format = FORMAT_CSV_FILE\n+        x_format = FORMAT_CSV_FILE\n         items = self.probe_field_inspectors(field.items, swagger_object_type, False)\n         x_options = {\n             'delimiter': field.delimiter,\n","add":1,"remove":1,"filename":"\/vstutils\/api\/schema\/inspectors.py","badparts":["        format = FORMAT_CSV_FILE"],"goodparts":["        x_format = FORMAT_CSV_FILE"]},{"diff":"\n         if field.inner_as_array:\n             kwargs = {\n                 'type': openapi.TYPE_ARRAY,\n-                'x-format': format,\n+                'x-format': x_format,\n                 'items': items,\n                 X_OPTIONS: x_options\n             }\n","add":1,"remove":1,"filename":"\/vstutils\/api\/schema\/inspectors.py","badparts":["                'x-format': format,"],"goodparts":["                'x-format': x_format,"]},{"diff":"\n             x_options['items'] = items\n             kwargs = {\n                 'type': openapi.TYPE_STRING,\n-                'format': format,\n+                'format': x_format,\n                 X_OPTIONS: x_options\n             }\n \n","add":1,"remove":1,"filename":"\/vstutils\/api\/schema\/inspectors.py","badparts":["                'format': format,"],"goodparts":["                'format': x_format,"]}],"source":"\nfrom copy import deepcopy from typing import Dict, Type, Text, Any from collections import OrderedDict from django.http import FileResponse from django.db import models from django.utils.functional import cached_property from drf_yasg.inspectors.base import FieldInspector, NotHandled from drf_yasg.inspectors.field import ReferencingSerializerInspector, decimal_field_type from drf_yasg import openapi from drf_yasg.inspectors.query import CoreAPICompatInspector, force_real_str, coreschema from rest_framework.fields import Field, JSONField, DecimalField, empty from.. import fields, serializers, validators from...models.base import get_first_match_name FORMAT_FILE=openapi.TYPE_FILE FORMAT_SECRET_FILE='secretfile' FORMAT_BIN_FILE='binfile' FORMAT_CSV_FILE='csvfile' FORMAT_NAMED_BIN_FILE='namedbinfile' FORMAT_NAMED_BIN_IMAGE='namedbinimage' FORMAT_AUTOCOMPLETE='autocomplete' FORMAT_FK_AUTOCOMPLETE='fk_autocomplete' FORMAT_MULTISELECT='multiselect' FORMAT_HTML='html' FORMAT_JSON='json' FORMAT_TEXTAREA='textarea' FORMAT_DYN='dynamic' FORMAT_DYN_FK='dynamic_fk' FORMAT_FK='fk' FORMAT_UPTIME='uptime' FORMAT_RELATED_LIST='related_list' FORMAT_RATING='rating' FORMAT_PHONE='phone' FORMAT_MASKED='masked' FORMAT_DEEP_FK='deep_fk' FORMAT_DECIMAL='decimal' X_OPTIONS='x-options' basic_type_info: Dict[Type[Field], Dict[Text, Any]]=OrderedDict() basic_type_info[fields.FileInStringField]={ 'type': openapi.TYPE_STRING, 'format': FORMAT_FILE } basic_type_info[fields.SecretFileInString]={ 'type': openapi.TYPE_STRING, 'format': FORMAT_SECRET_FILE } basic_type_info[fields.BinFileInStringField]={ 'type': openapi.TYPE_STRING, 'format': FORMAT_BIN_FILE } basic_type_info[fields.NamedBinaryFileInJsonField]={ 'type': openapi.TYPE_OBJECT, 'x-format': FORMAT_NAMED_BIN_FILE, 'properties':{ k: openapi.Schema( type=openapi.TYPE_STRING, default=v, ) for k, v in fields.DEFAULT_NAMED_FILE_DATA.items() } } basic_type_info[fields.MultipleNamedBinaryFileInJsonField]={ 'type': openapi.TYPE_ARRAY, 'items': openapi.Items( **basic_type_info[fields.NamedBinaryFileInJsonField] ) } basic_type_info[fields.HtmlField]={ 'type': openapi.TYPE_STRING, 'format': FORMAT_HTML } basic_type_info[serializers.JsonObjectSerializer]={ 'type': openapi.TYPE_OBJECT, 'format': FORMAT_JSON } basic_type_info[JSONField]={ 'type': openapi.TYPE_STRING, 'format': FORMAT_JSON } basic_type_info[fields.TextareaField]={ 'type': openapi.TYPE_STRING, 'format': FORMAT_TEXTAREA } basic_type_info[fields.UptimeField]={ 'type': openapi.TYPE_INTEGER, 'format': FORMAT_UPTIME } basic_type_info[fields.RedirectIntegerField]={ 'type': openapi.TYPE_INTEGER } basic_type_info[fields.RedirectCharField]={ 'type': openapi.TYPE_STRING } basic_type_info[fields.PasswordField]={ 'type': openapi.TYPE_STRING, 'format': openapi.FORMAT_PASSWORD } basic_type_info[fields.PhoneField]={ 'type': openapi.TYPE_STRING, 'format': FORMAT_PHONE, } def field_have_redirect(field, **kwargs): if not getattr(field, 'redirect', False): return kwargs if kwargs.get(X_OPTIONS, None) is None: kwargs[X_OPTIONS]={} operation_name=getattr(field, 'operation_name', None) if operation_name is None: operation_name=field.field_name splitted_operation_name=operation_name.split('_') if len(tuple(filter(bool, splitted_operation_name))) > 1: operation_name='_'.join(splitted_operation_name[:-1]) kwargs[X_OPTIONS]['redirect']={ 'operation_name': operation_name, 'depend_field': getattr(field, 'depend_field', None), 'concat_field_name': getattr(field, 'concat_field_name', False), } return kwargs def field_extra_handler(field, **kwargs): kwargs=field_have_redirect(field, **kwargs) if kwargs['type'] in(openapi.TYPE_ARRAY, openapi.TYPE_OBJECT): kwargs['title']=force_real_str(field.label) if field.label else None return kwargs def _get_handled_props(group_mapping): for group_name, props in(group_mapping or{}).items(): if group_name=='': continue yield from props class VSTFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): type_info=basic_type_info.get(field.__class__, None) if type_info is None: return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) return SwaggerType(**field_extra_handler(field, **deepcopy(type_info))) class AutoCompletionFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, fields.AutoCompletionField): return NotHandled SwaggerType, _=self._get_partial_types( field, swagger_object_type, use_references, **kw ) kwargs={ 'type': openapi.TYPE_STRING, 'format': FORMAT_AUTOCOMPLETE } if isinstance(field.autocomplete,(list, tuple)): kwargs['enum']=list(field.autocomplete) else: kwargs['format']=FORMAT_FK_AUTOCOMPLETE kwargs[X_OPTIONS]={ 'model': openapi.SchemaRef( self.components.with_scope(openapi.SCHEMA_DEFINITIONS), field.autocomplete, ignore_unresolved=True ), 'value_field': field.autocomplete_property, 'view_field': field.autocomplete_represent, 'usePrefetch': field.use_prefetch, } return SwaggerType(**field_extra_handler(field, **kwargs)) class DynamicJsonTypeFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, fields.DynamicJsonTypeField): return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) options={'field': field.field} if isinstance(field, fields.DependFromFkField): field_format=FORMAT_DYN_FK options['field_attribute']=field.field_attribute else: field_format=FORMAT_DYN options['choices']=field.choices options['types']={} for name, field_type in field.types.items(): if isinstance(field_type, Field): field_type=self.probe_field_inspectors(field_type, swagger_object_type, False) options['types'][name]=field_type kwargs={ 'type': openapi.TYPE_STRING, 'format': field_format, X_OPTIONS: options } return SwaggerType(**field_extra_handler(field, **kwargs)) class FkFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, fields.FkField): return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) field_format=FORMAT_FK options={ 'model': openapi.SchemaRef( self.components.with_scope(openapi.SCHEMA_DEFINITIONS), field.select_model, ignore_unresolved=True ), 'value_field': field.autocomplete_property, 'view_field': field.autocomplete_represent, 'usePrefetch': field.use_prefetch, 'makeLink': field.make_link, 'dependence': field.dependence, 'filters': field.filters, } if isinstance(field, fields.DeepFkField): field_format=FORMAT_DEEP_FK options={ **options, 'only_last_child': field.only_last_child, 'parent_field_name': field.parent_field_name, } del options['dependence'] kwargs={ 'type': openapi.TYPE_INTEGER, 'format': field_format, X_OPTIONS: options, } return SwaggerType(**field_extra_handler(field, **kwargs)) class CommaMultiSelectFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, fields.CommaMultiSelect): return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) kwargs={ 'type': 'array', 'x-collectionFormat': 'csv', X_OPTIONS:{ 'viewSeparator': field.select_separator, }, 'items':{ \"type\": openapi.TYPE_INTEGER, \"format\": FORMAT_FK, X_OPTIONS:{ 'model': openapi.SchemaRef( self.components.with_scope(openapi.SCHEMA_DEFINITIONS), field.select_model, ignore_unresolved=True, ), \"value_field\": field.select_property, \"view_field\": field.select_represent, 'usePrefetch': field.use_prefetch, 'makeLink': field.make_link, 'dependence': field.dependence, }, } } return SwaggerType(**field_extra_handler(field, **kwargs)) class RelatedListFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, fields.RelatedListField): return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) serializer_schema=VSTReferencingSerializerInspector( self.view, self.path, self.method, self.components, self.request, self.field_inspectors ).field_to_swagger_object(field.serializer_class(), swagger_object_type, False, **kw) kwargs={ 'type': openapi.TYPE_ARRAY, 'x-format': field.view_type, 'items': serializer_schema, } return SwaggerType(**field_extra_handler(field, **kwargs)) class RatingFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, fields.RatingField): return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) kwargs={ 'type': openapi.TYPE_NUMBER, 'format': FORMAT_RATING, X_OPTIONS:{ 'min_value': field.min_value, 'max_value': field.max_value, 'step': field.step, 'style': field.front_style, 'color': field.color, 'fa_class': field.fa_class } } return SwaggerType(**field_extra_handler(field, **kwargs)) class NamedBinaryImageInJsonFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if isinstance(field, fields.NamedBinaryImageInJsonField): kwargs=items=deepcopy(basic_type_info[fields.NamedBinaryFileInJsonField]) elif isinstance(field, fields.MultipleNamedBinaryImageInJsonField): kwargs=deepcopy(basic_type_info[fields.MultipleNamedBinaryFileInJsonField]) items=kwargs['items'] else: return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) items['x-format']=FORMAT_NAMED_BIN_IMAGE x_validators=items['x-validators']={ 'extensions': set() } for validator in filter(lambda x: isinstance(x, validators.ImageBaseSizeValidator), field.validators): for orientation in validator.orientation: for size_type, default_size in(('min', 1),('max', float('inf'))): size_name=f'{size_type}_{orientation}' img_size=getattr(validator, size_name, default_size) if size_name in x_validators: if size_type=='min' and x_validators[size_name] > img_size: continue elif size_type=='max' and x_validators[size_name] < img_size: continue x_validators[size_name]=img_size if x_validators['extensions']: x_validators['extensions']=x_validators['extensions'].intersection(validator.extensions) else: x_validators['extensions']=set(validator.extensions) x_validators['extensions']=tuple(x_validators['extensions']) if not x_validators['extensions']: del x_validators['extensions'] return SwaggerType(**field_extra_handler(field, **kwargs)) class MaskedFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, fields.MaskedField): return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) kwargs={ 'type': openapi.TYPE_STRING, 'format': FORMAT_MASKED, X_OPTIONS:{ 'mask': field.mask } } return SwaggerType(**field_extra_handler(field, **kwargs)) class CSVFileFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, fields.CSVFileField): return NotHandled format=FORMAT_CSV_FILE items=self.probe_field_inspectors(field.items, swagger_object_type, False) x_options={ 'delimiter': field.delimiter, 'minColumnWidth': field.min_column_width, } SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) if field.inner_as_array: kwargs={ 'type': openapi.TYPE_ARRAY, 'x-format': format, 'items': items, X_OPTIONS: x_options } else: x_options['items']=items kwargs={ 'type': openapi.TYPE_STRING, 'format': format, X_OPTIONS: x_options } return SwaggerType(**field_extra_handler(field, **kwargs)) class DecimalFieldInspector(FieldInspector): def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw): if not isinstance(field, DecimalField): return NotHandled SwaggerType, ChildSwaggerType=self._get_partial_types( field, swagger_object_type, use_references, **kw ) kwargs={ 'type': decimal_field_type(field), 'format': FORMAT_DECIMAL, X_OPTIONS:{ 'decimal_places': field.decimal_places, 'max_digits': field.max_digits } } if field.default !=empty: kwargs['default']=str(field.default) return SwaggerType(**field_extra_handler(field, **kwargs)) class NestedFilterInspector(CoreAPICompatInspector): def get_filter_parameters(self, filter_backend): subaction_list_actions=[ f'{name}_list' for name in getattr(self.view, '_nested_args',{}).keys() ] if self.view.action not in subaction_list_actions: return NotHandled if self.method !='GET': return NotHandled nested_view=getattr(self.view, self.view.action, None) nested_view_filter_class=getattr(nested_view, '_nested_filter_class', None) filter_class=getattr(self.view, 'filterset_class', getattr(self.view, 'filter_class', None)) self.view.filter_class=nested_view_filter_class result=super().get_filter_parameters(filter_backend) self.view.filter_class=filter_class return result class ArrayFilterQueryInspector(CoreAPICompatInspector): @cached_property def fields_map(self): return{ f.name: f for f in self.view.get_queryset().model._meta.fields } def coreapi_field_to_parameter(self, field, schema=None): \"\"\" Convert an instance of `coreapi.Field` to a swagger:class:`.Parameter` object. :param coreapi.Field field: :param coreschema..Schema schema: :rtype: openapi.Parameter \"\"\" location_to_in={ 'query': openapi.IN_QUERY, 'path': openapi.IN_PATH, 'form': openapi.IN_FORM, 'body': openapi.IN_FORM, } coreapi_types={ coreschema.Integer: openapi.TYPE_INTEGER, coreschema.Number: openapi.TYPE_NUMBER, coreschema.String: openapi.TYPE_STRING, coreschema.Boolean: openapi.TYPE_BOOLEAN, coreschema.Array: openapi.TYPE_ARRAY, } coreschema_attrs=['format', 'pattern', 'enum', 'min_length', 'max_length'] schema_field=schema or field.schema attributes={} if isinstance(schema_field, coreschema.Array): attributes['collectionFormat']='csv' param=self.coreapi_field_to_parameter(field, schema_field.items) attributes['items']=openapi.Items(**OrderedDict( (attr, getattr(param, attr, None)) for attr in coreschema_attrs +['type'] )) attributes['minItems']=schema_field.min_items attributes['maxItems']=schema_field.max_items attributes['uniqueItems']=schema_field.unique_items coreschema_attrs=() schema_type=coreapi_types.get(type(schema_field), openapi.TYPE_STRING) if schema is not None and \\ field.name in('id', 'id__not') and \\ isinstance(self.fields_map.get(field.name.split('__')[0]),(models.AutoField, models.IntegerField)): schema_type=openapi.TYPE_INTEGER return openapi.Parameter( name=field.name, in_=location_to_in[field.location], required=field.required, description=force_real_str(schema_field.description) if schema_field else None, type=schema_type, **OrderedDict((attr, getattr(schema_field, attr, None)) for attr in coreschema_attrs), **attributes ) class VSTReferencingSerializerInspector(ReferencingSerializerInspector): def get_serializer_ref_name(self, serializer: Any): if isinstance(serializer, serializers.serializers.ListSerializer): return super().get_serializer_ref_name(serializer.child) return super().get_serializer_ref_name(serializer) def handle_schema(self, field: Any): ref_name=self.get_serializer_ref_name(field) definitions=self.components.with_scope(openapi.SCHEMA_DEFINITIONS) if ref_name not in definitions: return schema=definitions[ref_name] if getattr(schema, '_handled', False): return schema_properties=tuple(schema['properties'].keys()) serializer_class=schema._NP_serializer non_bulk_methods=getattr(serializer_class, '_non_bulk_methods', None) schema_properties_groups=OrderedDict( getattr(serializer_class, '_schema_properties_groups', None) or{'': schema_properties} ) translate_model=getattr(serializer_class, '_translate_model', None) view_field_name=getattr(serializer_class, '_view_field_name', None) if view_field_name is None and schema_properties: view_field_name=get_first_match_name(schema_properties, schema_properties[0]) if schema_properties_groups: not_handled=set(schema['properties']) -set(_get_handled_props(schema_properties_groups)) if not_handled: schema_properties_groups['']=[ prop for prop in schema['properties'] if prop in not_handled ] schema['x-properties-groups']=schema_properties_groups schema['x-view-field-name']=view_field_name if non_bulk_methods: schema['x-non-bulk-methods']=non_bulk_methods if translate_model: schema['x-translate-model']=translate_model schema._handled=True def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): if isinstance(field, FileResponse): return openapi.Schema(type='file') result=super().field_to_swagger_object(field, swagger_object_type, use_references, **kwargs) if result !=NotHandled: self.handle_schema(field) return result ","sourceWithComments":"from copy import deepcopy\nfrom typing import Dict, Type, Text, Any\nfrom collections import OrderedDict\n\nfrom django.http import FileResponse\nfrom django.db import models\nfrom django.utils.functional import cached_property\nfrom drf_yasg.inspectors.base import FieldInspector, NotHandled\nfrom drf_yasg.inspectors.field import ReferencingSerializerInspector, decimal_field_type\nfrom drf_yasg import openapi\nfrom drf_yasg.inspectors.query import CoreAPICompatInspector, force_real_str, coreschema  # type: ignore\nfrom rest_framework.fields import Field, JSONField, DecimalField, empty\n\nfrom .. import fields, serializers, validators\nfrom ...models.base import get_first_match_name\n\n\n# Extra types\n\n# Extra formats\nFORMAT_FILE = openapi.TYPE_FILE\nFORMAT_SECRET_FILE = 'secretfile'  # nosec\nFORMAT_BIN_FILE = 'binfile'\nFORMAT_CSV_FILE = 'csvfile'\nFORMAT_NAMED_BIN_FILE = 'namedbinfile'\nFORMAT_NAMED_BIN_IMAGE = 'namedbinimage'\nFORMAT_AUTOCOMPLETE = 'autocomplete'\nFORMAT_FK_AUTOCOMPLETE = 'fk_autocomplete'\nFORMAT_MULTISELECT = 'multiselect'\nFORMAT_HTML = 'html'\nFORMAT_JSON = 'json'\nFORMAT_TEXTAREA = 'textarea'\nFORMAT_DYN = 'dynamic'\nFORMAT_DYN_FK = 'dynamic_fk'\nFORMAT_FK = 'fk'\nFORMAT_UPTIME = 'uptime'\nFORMAT_RELATED_LIST = 'related_list'\nFORMAT_RATING = 'rating'\nFORMAT_PHONE = 'phone'\nFORMAT_MASKED = 'masked'\nFORMAT_DEEP_FK = 'deep_fk'\nFORMAT_DECIMAL = 'decimal'\n\nX_OPTIONS = 'x-options'\n\n\n# Base types\nbasic_type_info: Dict[Type[Field], Dict[Text, Any]] = OrderedDict()\nbasic_type_info[fields.FileInStringField] = {\n    'type': openapi.TYPE_STRING,\n    'format': FORMAT_FILE\n}\nbasic_type_info[fields.SecretFileInString] = {\n    'type': openapi.TYPE_STRING,\n    'format': FORMAT_SECRET_FILE\n}\nbasic_type_info[fields.BinFileInStringField] = {\n    'type': openapi.TYPE_STRING,\n    'format': FORMAT_BIN_FILE\n}\n\nbasic_type_info[fields.NamedBinaryFileInJsonField] = {\n    'type': openapi.TYPE_OBJECT,\n    'x-format': FORMAT_NAMED_BIN_FILE,\n    'properties': {\n        k: openapi.Schema(\n            type=openapi.TYPE_STRING,\n            default=v,\n        )\n        for k, v in fields.DEFAULT_NAMED_FILE_DATA.items()\n    }\n}\nbasic_type_info[fields.MultipleNamedBinaryFileInJsonField] = {\n    'type': openapi.TYPE_ARRAY,\n    'items': openapi.Items(\n        **basic_type_info[fields.NamedBinaryFileInJsonField]\n    )\n}\nbasic_type_info[fields.HtmlField] = {\n    'type': openapi.TYPE_STRING,\n    'format': FORMAT_HTML\n}\nbasic_type_info[serializers.JsonObjectSerializer] = {\n    'type': openapi.TYPE_OBJECT,\n    'format': FORMAT_JSON\n}\nbasic_type_info[JSONField] = {\n    'type': openapi.TYPE_STRING,\n    'format': FORMAT_JSON\n}\nbasic_type_info[fields.TextareaField] = {\n    'type': openapi.TYPE_STRING,\n    'format': FORMAT_TEXTAREA\n}\nbasic_type_info[fields.UptimeField] = {\n    'type': openapi.TYPE_INTEGER,\n    'format': FORMAT_UPTIME\n}\nbasic_type_info[fields.RedirectIntegerField] = {\n    'type': openapi.TYPE_INTEGER\n}\nbasic_type_info[fields.RedirectCharField] = {\n    'type': openapi.TYPE_STRING\n}\nbasic_type_info[fields.PasswordField] = {\n    'type': openapi.TYPE_STRING,\n    'format': openapi.FORMAT_PASSWORD\n}\nbasic_type_info[fields.PhoneField] = {\n    'type': openapi.TYPE_STRING,\n    'format': FORMAT_PHONE,\n}\n\n\ndef field_have_redirect(field, **kwargs):\n    if not getattr(field, 'redirect', False):\n        return kwargs\n\n    if kwargs.get(X_OPTIONS, None) is None:\n        kwargs[X_OPTIONS] = {}\n    operation_name = getattr(field, 'operation_name', None)\n    if operation_name is None:\n        operation_name = field.field_name\n        splitted_operation_name = operation_name.split('_')\n        if len(tuple(filter(bool, splitted_operation_name))) > 1:\n            operation_name = '_'.join(splitted_operation_name[:-1])\n    kwargs[X_OPTIONS]['redirect'] = {\n        'operation_name': operation_name,\n        'depend_field': getattr(field, 'depend_field', None),\n        'concat_field_name': getattr(field, 'concat_field_name', False),\n    }\n\n    return kwargs\n\n\ndef field_extra_handler(field, **kwargs):\n    kwargs = field_have_redirect(field, **kwargs)\n    if kwargs['type'] in (openapi.TYPE_ARRAY, openapi.TYPE_OBJECT):\n        kwargs['title'] = force_real_str(field.label) if field.label else None\n    return kwargs\n\n\ndef _get_handled_props(group_mapping):\n    for group_name, props in (group_mapping or {}).items():\n        if group_name == '':\n            continue\n        yield from props\n\n\nclass VSTFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=invalid-name,unused-variable\n        type_info = basic_type_info.get(field.__class__, None)\n        if type_info is None:\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n        return SwaggerType(**field_extra_handler(field, **deepcopy(type_info)))\n\n\nclass AutoCompletionFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=invalid-name\n        if not isinstance(field, fields.AutoCompletionField):\n            return NotHandled\n\n        SwaggerType, _ = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n        kwargs = {\n            'type': openapi.TYPE_STRING,\n            'format': FORMAT_AUTOCOMPLETE\n        }\n        if isinstance(field.autocomplete, (list, tuple)):\n            kwargs['enum'] = list(field.autocomplete)\n        else:\n            kwargs['format'] = FORMAT_FK_AUTOCOMPLETE\n            kwargs[X_OPTIONS] = {\n                'model': openapi.SchemaRef(\n                    self.components.with_scope(openapi.SCHEMA_DEFINITIONS),\n                    field.autocomplete, ignore_unresolved=True\n                ),\n                'value_field': field.autocomplete_property,\n                'view_field': field.autocomplete_represent,\n                'usePrefetch': field.use_prefetch,\n            }\n\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass DynamicJsonTypeFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=unused-variable,invalid-name\n        if not isinstance(field, fields.DynamicJsonTypeField):\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n        options = {'field': field.field}\n\n        if isinstance(field, fields.DependFromFkField):\n            field_format = FORMAT_DYN_FK\n            options['field_attribute'] = field.field_attribute\n\n        else:\n            field_format = FORMAT_DYN\n            options['choices'] = field.choices\n            options['types'] = {}\n            for name, field_type in field.types.items():\n                if isinstance(field_type, Field):\n                    field_type = self.probe_field_inspectors(field_type, swagger_object_type, False)\n                options['types'][name] = field_type\n\n        kwargs = {\n            'type': openapi.TYPE_STRING,\n            'format': field_format,\n            X_OPTIONS: options\n        }\n\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass FkFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=unused-variable,invalid-name\n        if not isinstance(field, fields.FkField):\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n\n        field_format = FORMAT_FK\n        options = {\n            'model': openapi.SchemaRef(\n                self.components.with_scope(openapi.SCHEMA_DEFINITIONS),\n                field.select_model, ignore_unresolved=True\n            ),\n            'value_field': field.autocomplete_property,\n            'view_field': field.autocomplete_represent,\n            'usePrefetch': field.use_prefetch,\n            'makeLink': field.make_link,\n            'dependence': field.dependence,\n            'filters': field.filters,\n        }\n\n        if isinstance(field, fields.DeepFkField):\n            field_format = FORMAT_DEEP_FK\n            options = {\n                **options,\n                'only_last_child': field.only_last_child,\n                'parent_field_name': field.parent_field_name,\n            }\n            del options['dependence']\n\n        kwargs = {\n            'type': openapi.TYPE_INTEGER,\n            'format': field_format,\n            X_OPTIONS: options,\n        }\n\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass CommaMultiSelectFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=unused-variable,invalid-name\n        if not isinstance(field, fields.CommaMultiSelect):\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n        kwargs = {\n            'type': 'array',\n            'x-collectionFormat': 'csv',\n            X_OPTIONS: {\n                'viewSeparator': field.select_separator,\n            },\n            'items': {\n                \"type\": openapi.TYPE_INTEGER,\n                \"format\": FORMAT_FK,\n                X_OPTIONS: {\n                    'model': openapi.SchemaRef(\n                        self.components.with_scope(openapi.SCHEMA_DEFINITIONS),\n                        field.select_model,\n                        ignore_unresolved=True,\n                    ),\n                    \"value_field\": field.select_property,\n                    \"view_field\": field.select_represent,\n                    'usePrefetch': field.use_prefetch,\n                    'makeLink': field.make_link,\n                    'dependence': field.dependence,\n                },\n            }\n        }\n\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass RelatedListFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=unused-variable,invalid-name\n        if not isinstance(field, fields.RelatedListField):\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n        serializer_schema = VSTReferencingSerializerInspector(\n            self.view,\n            self.path,\n            self.method,\n            self.components,\n            self.request,\n            self.field_inspectors\n        ).field_to_swagger_object(field.serializer_class(), swagger_object_type, False, **kw)\n\n        kwargs = {\n            'type': openapi.TYPE_ARRAY,\n            'x-format': field.view_type,\n            'items': serializer_schema,\n        }\n\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass RatingFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=unused-variable,invalid-name\n        if not isinstance(field, fields.RatingField):\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n        kwargs = {\n            'type': openapi.TYPE_NUMBER,\n            'format': FORMAT_RATING,\n            X_OPTIONS: {\n                'min_value': field.min_value,\n                'max_value': field.max_value,\n                'step': field.step,\n                'style': field.front_style,\n                'color': field.color,\n                'fa_class': field.fa_class\n            }\n        }\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass NamedBinaryImageInJsonFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=unused-variable,invalid-name\n        if isinstance(field, fields.NamedBinaryImageInJsonField):\n            kwargs = items = deepcopy(basic_type_info[fields.NamedBinaryFileInJsonField])\n        elif isinstance(field, fields.MultipleNamedBinaryImageInJsonField):\n            kwargs = deepcopy(basic_type_info[fields.MultipleNamedBinaryFileInJsonField])\n            items = kwargs['items']\n        else:\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n\n        items['x-format'] = FORMAT_NAMED_BIN_IMAGE\n        x_validators = items['x-validators'] = {\n            'extensions': set()\n        }\n        for validator in filter(lambda x: isinstance(x, validators.ImageBaseSizeValidator), field.validators):\n            for orientation in validator.orientation:\n                for size_type, default_size in (('min', 1), ('max', float('inf'))):\n                    size_name = f'{size_type}_{orientation}'\n                    img_size = getattr(validator, size_name, default_size)\n                    if size_name in x_validators:\n                        if size_type == 'min' and x_validators[size_name] > img_size:\n                            continue\n                        elif size_type == 'max' and x_validators[size_name] < img_size:\n                            continue\n                    x_validators[size_name] = img_size\n            if x_validators['extensions']:\n                x_validators['extensions'] = x_validators['extensions'].intersection(validator.extensions)\n            else:\n                x_validators['extensions'] = set(validator.extensions)\n\n        x_validators['extensions'] = tuple(x_validators['extensions'])\n        if not x_validators['extensions']:\n            del x_validators['extensions']\n\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass MaskedFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=unused-variable,invalid-name\n        if not isinstance(field, fields.MaskedField):\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n        kwargs = {\n            'type': openapi.TYPE_STRING,\n            'format': FORMAT_MASKED,\n            X_OPTIONS: {\n                'mask': field.mask\n            }\n        }\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass CSVFileFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        if not isinstance(field, fields.CSVFileField):\n            return NotHandled\n\n        format = FORMAT_CSV_FILE\n        items = self.probe_field_inspectors(field.items, swagger_object_type, False)\n        x_options = {\n            'delimiter': field.delimiter,\n            'minColumnWidth': field.min_column_width,\n        }\n        # pylint: disable=unused-variable,invalid-name\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n\n        if field.inner_as_array:\n            kwargs = {\n                'type': openapi.TYPE_ARRAY,\n                'x-format': format,\n                'items': items,\n                X_OPTIONS: x_options\n            }\n        else:\n            x_options['items'] = items\n            kwargs = {\n                'type': openapi.TYPE_STRING,\n                'format': format,\n                X_OPTIONS: x_options\n            }\n\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass DecimalFieldInspector(FieldInspector):\n    def field_to_swagger_object(self, field, swagger_object_type, use_references, **kw):\n        # pylint: disable=unused-variable,invalid-name\n        if not isinstance(field, DecimalField):\n            return NotHandled\n\n        SwaggerType, ChildSwaggerType = self._get_partial_types(\n            field, swagger_object_type, use_references, **kw\n        )\n        kwargs = {\n            'type': decimal_field_type(field),\n            'format': FORMAT_DECIMAL,\n            X_OPTIONS: {\n                'decimal_places': field.decimal_places,\n                'max_digits': field.max_digits\n            }\n        }\n\n        if field.default != empty:\n            kwargs['default'] = str(field.default)\n\n        return SwaggerType(**field_extra_handler(field, **kwargs))\n\n\nclass NestedFilterInspector(CoreAPICompatInspector):\n    def get_filter_parameters(self, filter_backend):  # nocv\n        subaction_list_actions = [\n            f'{name}_list'\n            for name in getattr(self.view, '_nested_args', {}).keys()\n        ]\n        if self.view.action not in subaction_list_actions:\n            return NotHandled\n        if self.method != 'GET':\n            return NotHandled\n        nested_view = getattr(self.view, self.view.action, None)\n        nested_view_filter_class = getattr(nested_view, '_nested_filter_class', None)\n        filter_class = getattr(self.view, 'filterset_class', getattr(self.view, 'filter_class', None))\n        self.view.filter_class = nested_view_filter_class\n        result = super().get_filter_parameters(filter_backend)\n        self.view.filter_class = filter_class\n        return result\n\n\nclass ArrayFilterQueryInspector(CoreAPICompatInspector):\n    @cached_property\n    def fields_map(self):\n        return {\n            f.name: f\n            for f in self.view.get_queryset().model._meta.fields\n        }\n\n    def coreapi_field_to_parameter(self, field, schema=None):\n        \"\"\"\n        Convert an instance of `coreapi.Field` to a swagger :class:`.Parameter` object.\n\n        :param coreapi.Field field:\n        :param coreschema..Schema schema:\n        :rtype: openapi.Parameter\n        \"\"\"\n        location_to_in = {\n            'query': openapi.IN_QUERY,\n            'path': openapi.IN_PATH,\n            'form': openapi.IN_FORM,\n            'body': openapi.IN_FORM,\n        }\n        coreapi_types = {\n            coreschema.Integer: openapi.TYPE_INTEGER,\n            coreschema.Number: openapi.TYPE_NUMBER,\n            coreschema.String: openapi.TYPE_STRING,\n            coreschema.Boolean: openapi.TYPE_BOOLEAN,\n            coreschema.Array: openapi.TYPE_ARRAY,\n        }\n\n        coreschema_attrs = ['format', 'pattern', 'enum', 'min_length', 'max_length']\n        schema_field = schema or field.schema\n        attributes = {}\n        if isinstance(schema_field, coreschema.Array):\n            attributes['collectionFormat'] = 'csv'\n            param = self.coreapi_field_to_parameter(field, schema_field.items)\n            attributes['items'] = openapi.Items(**OrderedDict(\n                (attr, getattr(param, attr, None))\n                for attr in coreschema_attrs + ['type']\n            ))\n            attributes['minItems'] = schema_field.min_items\n            attributes['maxItems'] = schema_field.max_items\n            attributes['uniqueItems'] = schema_field.unique_items\n            coreschema_attrs = ()\n\n        schema_type = coreapi_types.get(type(schema_field), openapi.TYPE_STRING)\n        if schema is not None and \\\n           field.name in ('id', 'id__not') and \\\n           isinstance(self.fields_map.get(field.name.split('__')[0]), (models.AutoField, models.IntegerField)):\n            schema_type = openapi.TYPE_INTEGER\n\n        return openapi.Parameter(\n            name=field.name,\n            in_=location_to_in[field.location],\n            required=field.required,\n            description=force_real_str(schema_field.description) if schema_field else None,\n            type=schema_type,\n            **OrderedDict((attr, getattr(schema_field, attr, None)) for attr in coreschema_attrs),\n            **attributes\n        )\n\n\nclass VSTReferencingSerializerInspector(ReferencingSerializerInspector):\n    def get_serializer_ref_name(self, serializer: Any):\n        if isinstance(serializer, serializers.serializers.ListSerializer):\n            return super().get_serializer_ref_name(serializer.child)\n        return super().get_serializer_ref_name(serializer)\n\n    def handle_schema(self, field: Any):\n        ref_name = self.get_serializer_ref_name(field)\n        definitions = self.components.with_scope(openapi.SCHEMA_DEFINITIONS)\n\n        if ref_name not in definitions:\n            return\n\n        schema = definitions[ref_name]\n\n        if getattr(schema, '_handled', False):\n            return\n\n        schema_properties = tuple(schema['properties'].keys())\n        serializer_class = schema._NP_serializer  # pylint: disable=protected-access\n\n        non_bulk_methods = getattr(serializer_class, '_non_bulk_methods', None)\n        schema_properties_groups = OrderedDict(\n            getattr(serializer_class, '_schema_properties_groups', None) or {'': schema_properties}\n        )\n        translate_model = getattr(serializer_class, '_translate_model', None)\n\n        view_field_name = getattr(serializer_class, '_view_field_name', None)\n\n        if view_field_name is None and schema_properties:\n            view_field_name = get_first_match_name(schema_properties, schema_properties[0])\n\n        if schema_properties_groups:\n            not_handled = set(schema['properties']) - set(_get_handled_props(schema_properties_groups))\n\n            if not_handled:\n                schema_properties_groups[''] = [\n                    prop\n                    for prop in schema['properties']\n                    if prop in not_handled\n                ]\n        schema['x-properties-groups'] = schema_properties_groups\n        schema['x-view-field-name'] = view_field_name\n\n        if non_bulk_methods:\n            schema['x-non-bulk-methods'] = non_bulk_methods\n\n        if translate_model:\n            schema['x-translate-model'] = translate_model\n\n        schema._handled = True  # pylint: disable=protected-access\n\n    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any):\n        if isinstance(field, FileResponse):\n            return openapi.Schema(type='file')\n\n        result = super().field_to_swagger_object(field, swagger_object_type, use_references, **kwargs)\n\n        if result != NotHandled:\n            self.handle_schema(field)\n\n        return result\n"}},"msg":"Release 5.0.0 Beta 120\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n\nParsed bundle size: 3.6 MB\n\n### TODO:\n* Optimize bundle size."},"26844ceea74f82d7c04cf01fb453a0fe9d2c0950":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/26844ceea74f82d7c04cf01fb453a0fe9d2c0950","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/26844ceea74f82d7c04cf01fb453a0fe9d2c0950","sha":"26844ceea74f82d7c04cf01fb453a0fe9d2c0950","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex cefb099b..36c8cf05 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b120'\n+__version__: str = '5.0.0b121'\ndiff --git a\/vstutils\/management\/commands\/runrpc.py b\/vstutils\/management\/commands\/runrpc.py\nindex 1d85af9b..2eca25fd 100644\n--- a\/vstutils\/management\/commands\/runrpc.py\n+++ b\/vstutils\/management\/commands\/runrpc.py\n@@ -21,13 +21,18 @@ def add_arguments(self, parser):\n             help=\"Do NOT run docker command for migration of databases.\",\n         )\n \n-    def handle(self, *uwsgi_args, **opts):\n-        super().handle(*uwsgi_args, **opts)\n+    def handle(self, *args, **opts):\n+        super().handle(*args, **opts)\n \n         if opts['migrate']:\n             self.migrate(opts)\n \n-        cmd = f'{sys.executable} -m {get_celery_command()}'\n+        cmd_args = dict(\n+            arg.split('=')\n+            for arg in args\n+        )\n+\n+        cmd = f'{sys.executable} -m {get_celery_command(**cmd_args)}'\n         self._print(f'Execute: {cmd}')\n         sys.exit(check_call(\n             cmd,\ndiff --git a\/vstutils\/management\/commands\/web.py b\/vstutils\/management\/commands\/web.py\nindex eb8809a8..c30e869b 100644\n--- a\/vstutils\/management\/commands\/web.py\n+++ b\/vstutils\/management\/commands\/web.py\n@@ -35,20 +35,24 @@ def wait(proc, timeout=None, delay=0.01):\n     return proc.poll()\n \n \n-def get_celery_command(celery_path='celery'):\n+def get_celery_command(celery_path='celery', **kwargs):\n     # Format args string.\n     options = ''\n     app_option = f'--app={settings.VST_PROJECT}.wapp:app'\n-    for key, value in settings.WORKER_OPTIONS.items():\n+    worker_options_dict = {\n+        **settings.WORKER_OPTIONS,\n+        **kwargs\n+    }\n+    for key, value in worker_options_dict.items():\n         if key == 'app':\n             app_option = \"--app={}\".format(value.replace(',', r'\\,'))\n             continue\n         is_boolean = isinstance(value, bool)\n         if (is_boolean and value) or value:\n-            options += f' --{key}'\n+            options += f' -{\"-\" if key != \"O\" else \"\"}{key}'\n         if is_boolean:\n             continue\n-        options += \"={}\".format(value.replace(',', r'\\,'))\n+        options += \"{}{}\".format('=' if key != 'O' else '', value.replace(',', r'\\,'))\n \n     # Add queues list to celery args\n     if '--queues' not in options:\ndiff --git a\/vstutils\/templates\/newproject\/setup.cfg.template b\/vstutils\/templates\/newproject\/setup.cfg.template\nindex 8c7c99b9..ee6ffe8e 100644\n--- a\/vstutils\/templates\/newproject\/setup.cfg.template\n+++ b\/vstutils\/templates\/newproject\/setup.cfg.template\n@@ -9,7 +9,7 @@ keywords = web, app\n classifiers =\n     Environment :: Web Environment\n     Framework :: Django\n-    Framework :: Django :: 2.2\n+    Framework :: Django :: 3.2\n     Operating System :: POSIX\n     Programming Language :: Cython\n     Programming Language :: Python\n@@ -18,6 +18,8 @@ classifiers =\n     Programming Language :: Python :: 3.6\n     Programming Language :: Python :: 3.7\n     Programming Language :: Python :: 3.8\n+    Programming Language :: Python :: 3.9\n+    Programming Language :: Python :: 3.10\n     Topic :: Software Development :: Libraries\n     Topic :: Internet :: WWW\/HTTP\n     Topic :: Internet :: WWW\/HTTP :: Dynamic Content\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b120'\n+__version__: str = '5.0.0b121'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b120'"],"goodparts":["__version__: str = '5.0.0b121'"]}],"source":"\n\n__version__: str='5.0.0b120' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b120'\n"},"\/vstutils\/management\/commands\/runrpc.py":{"changes":[{"diff":"\n             help=\"Do NOT run docker command for migration of databases.\",\n         )\n \n-    def handle(self, *uwsgi_args, **opts):\n-        super().handle(*uwsgi_args, **opts)\n+    def handle(self, *args, **opts):\n+        super().handle(*args, **opts)\n \n         if opts['migrate']:\n             self.migrate(opts)\n \n-        cmd = f'{sys.executable} -m {get_celery_command()}'\n+        cmd_args = dict(\n+            arg.split('=')\n+            for arg in args\n+        )\n+\n+        cmd = f'{sys.executable} -m {get_celery_command(**cmd_args)}'\n         self._print(f'Execute: {cmd}')\n         sys.exit(check_call(\n             cmd","add":8,"remove":3,"filename":"\/vstutils\/management\/commands\/runrpc.py","badparts":["    def handle(self, *uwsgi_args, **opts):","        super().handle(*uwsgi_args, **opts)","        cmd = f'{sys.executable} -m {get_celery_command()}'"],"goodparts":["    def handle(self, *args, **opts):","        super().handle(*args, **opts)","        cmd_args = dict(","            arg.split('=')","            for arg in args","        )","        cmd = f'{sys.executable} -m {get_celery_command(**cmd_args)}'"]}],"source":"\nimport sys from subprocess import check_call from._base import DockerCommand from.web import get_celery_command class Command(DockerCommand): help=\"Run Celery for web-application\" def add_arguments(self, parser): super().add_arguments(parser) parser.add_argument( 'args', metavar='celery_arg=value', nargs='*', help='Args \"name=value\" for the celery app.', ) parser.add_argument( '--nomigrate', action='store_false', dest='migrate', default=True, help=\"Do NOT run docker command for migration of databases.\", ) def handle(self, *uwsgi_args, **opts): super().handle(*uwsgi_args, **opts) if opts['migrate']: self.migrate(opts) cmd=f'{sys.executable} -m{get_celery_command()}' self._print(f'Execute:{cmd}') sys.exit(check_call( cmd, stdout=sys.stdout, stderr=sys.stderr, stdin=sys.stdin, shell=True, )) ","sourceWithComments":"import sys\nfrom subprocess import check_call\n\nfrom ._base import DockerCommand\nfrom .web import get_celery_command\n\n\nclass Command(DockerCommand):\n    help = \"Run Celery for web-application\"\n\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\n            'args',\n            metavar='celery_arg=value', nargs='*',\n            help='Args \"name=value\" for the celery app.',\n        )\n        parser.add_argument(\n            '--nomigrate',\n            action='store_false', dest='migrate', default=True,\n            help=\"Do NOT run docker command for migration of databases.\",\n        )\n\n    def handle(self, *uwsgi_args, **opts):\n        super().handle(*uwsgi_args, **opts)\n\n        if opts['migrate']:\n            self.migrate(opts)\n\n        cmd = f'{sys.executable} -m {get_celery_command()}'\n        self._print(f'Execute: {cmd}')\n        sys.exit(check_call(\n            cmd,\n            stdout=sys.stdout,\n            stderr=sys.stderr,\n            stdin=sys.stdin,\n            shell=True,  # nosec\n        ))\n"},"\/vstutils\/management\/commands\/web.py":{"changes":[{"diff":"\n     return proc.poll()\n \n \n-def get_celery_command(celery_path='celery'):\n+def get_celery_command(celery_path='celery', **kwargs):\n     # Format args string.\n     options = ''\n     app_option = f'--app={settings.VST_PROJECT}.wapp:app'\n-    for key, value in settings.WORKER_OPTIONS.items():\n+    worker_options_dict = {\n+        **settings.WORKER_OPTIONS,\n+        **kwargs\n+    }\n+    for key, value in worker_options_dict.items():\n         if key == 'app':\n             app_option = \"--app={}\".format(value.replace(',', r'\\,'))\n             continue\n         is_boolean = isinstance(value, bool)\n         if (is_boolean and value) or value:\n-            options += f' --{key}'\n+            options += f' -{\"-\" if key != \"O\" else \"\"}{key}'\n         if is_boolean:\n             continue\n-        options += \"={}\".format(value.replace(',', r'\\,'))\n+        options += \"{}{}\".format('=' if key != 'O' else '', value.replace(',', r'\\,'))\n \n     # Add queues list to celery args\n     if '--queues' not in option","add":8,"remove":4,"filename":"\/vstutils\/management\/commands\/web.py","badparts":["def get_celery_command(celery_path='celery'):","    for key, value in settings.WORKER_OPTIONS.items():","            options += f' --{key}'","        options += \"={}\".format(value.replace(',', r'\\,'))"],"goodparts":["def get_celery_command(celery_path='celery', **kwargs):","    worker_options_dict = {","        **settings.WORKER_OPTIONS,","        **kwargs","    }","    for key, value in worker_options_dict.items():","            options += f' -{\"-\" if key != \"O\" else \"\"}{key}'","        options += \"{}{}\".format('=' if key != 'O' else '', value.replace(',', r'\\,'))"]}],"source":"\n import os import sys import time from pathlib import Path from subprocess import CalledProcessError import subprocess import signal from django.conf import settings from._base import BaseCommand from...utils import raise_context python_exec_dir=Path(os.path.dirname(settings.PYTHON_INTERPRETER)) python_subexec_dir=Path('\/usr\/local\/bin') _uwsgi_default_path=python_exec_dir \/ 'uwsgi' _uwsgi_default_path_alt=python_exec_dir \/ 'pyuwsgi' _uwsgi_default_path_alt2=python_subexec_dir \/ 'uwsgi' _uwsgi_default_path_alt3=python_subexec_dir \/ 'pyuwsgi' if not _uwsgi_default_path.exists() and _uwsgi_default_path_alt.exists(): _uwsgi_default_path=_uwsgi_default_path_alt elif _uwsgi_default_path_alt2.exists(): _uwsgi_default_path=_uwsgi_default_path_alt2 elif _uwsgi_default_path_alt3.exists(): _uwsgi_default_path=_uwsgi_default_path_alt3 def wait(proc, timeout=None, delay=0.01): while proc.poll() is None and(timeout or timeout is None): time.sleep(delay) if timeout is not None: timeout -=delay return proc.poll() def get_celery_command(celery_path='celery'): options='' app_option=f'--app={settings.VST_PROJECT}.wapp:app' for key, value in settings.WORKER_OPTIONS.items(): if key=='app': app_option=\"--app={}\".format(value.replace(',', r'\\,')) continue is_boolean=isinstance(value, bool) if(is_boolean and value) or value: options +=f' --{key}' if is_boolean: continue options +=\"={}\".format(value.replace(',', r'\\,')) if '--queues' not in options: options +=' --queues={}'.format(r'\\,'.join(settings.WORKER_QUEUES)) return f'{celery_path}{app_option} worker{options}' class Command(BaseCommand): help=\"Backend web-server.\" _uwsgi_default_path=_uwsgi_default_path uwsgi_default_config=Path(os.path.dirname(__file__)).parent.parent \/ 'web.ini' default_addrport=settings.WEB_ADDRPORT prefix=getattr(settings, 'VST_PROJECT_LIB', 'vstutils').upper() def add_arguments(self, parser): super().add_arguments(parser) parser.add_argument( 'args', metavar='uwsgi_arg=value', nargs='*', help='Args \"name=value\" uwsgi server.', ) parser.add_argument( '--uwsgi-path', '-s', default=self._uwsgi_default_path, dest='script', help='Specifies the uwsgi script.', ) parser.add_argument( '--uwsgi-config', '-c', default=str(Path(settings.VST_PROJECT_DIR) \/ 'web.ini'), dest='config', help='Specifies the uwsgi script.', ) parser.add_argument( '--addrport', '-p', default=self.default_addrport, dest='addrport', help='Specifies the uwsgi address:port. Default:[:8080]', ) def _get_uwsgi_arg(self, arg): return arg if isinstance(arg, str) else None def _get_uwsgi_args(self, *uwsgi_args): args=[] if settings.WEB_DAEMON: args.append(f'daemonize={settings.WEB_DAEMON_LOGFILE}') args +=[self._get_uwsgi_arg(arg) for arg in uwsgi_args] return args def _get_worker_options(self): cmd=[] if not getattr(settings, 'RUN_WORKER', False): return cmd cmd.append('--attach-daemon2') cmd.append(f'stopsignal=15,reloadsignal=1,exec={get_celery_command()}') return cmd def handle(self, *uwsgi_args, **opts): super().handle(*uwsgi_args, **opts) env=os.environ.copy() cmd=[ str(opts['script']), f'--set-ph=program_name={settings.VST_PROJECT}', f'--set-ph=lib_name={settings.VST_PROJECT_LIB}', f'--set-ph=api_path={settings.API_URL}', f'--set-ph=vstutils_version={settings.VSTUTILS_VERSION}', f'--module={settings.UWSGI_APPLICATION}', ] addrport=opts['addrport'] cmd +=[f'--{\"https\" if len(addrport.split(\",\")) > 1 else \"http\"}={addrport}'] cmd +=[ f'--{arg}' for arg in self._get_uwsgi_args(*uwsgi_args) if arg is not None ] if opts['config'] and Path(opts['config']).exists(): cmd +=[f'--ini={opts[\"config\"]}'] if settings.STATIC_URL.startswith('\/'): cmd +=[f'--set-ph=static_url={settings.STATIC_URL}'] for static_path in settings.STATIC_FILES_FOLDERS: if f\"{settings.STATIC_URL}={static_path}\" not in cmd: cmd +=['--static-map', f\"{settings.STATIC_URL}={static_path}\"] if settings.MEDIA_URL.startswith('\/') and settings.MEDIA_ROOT: cmd +=['--static-map', f\"{settings.MEDIA_URL}={settings.MEDIA_ROOT}\"] if 'docs' in settings.INSTALLED_APPS and getattr(settings, 'DOCS_ACCESS', 'public')=='public': cmd +=['--static-map', f\"{settings.DOC_URL}={settings.DOCS_ROOT}\"] for config_file in map(Path, settings.CONFIG_FILES): option=f'--ini={str(config_file)}' if config_file.exists() and config_file.suffix=='.ini' and option not in cmd: cmd.append(option) if self.uwsgi_default_config.exists(): cmd.append(str(self.uwsgi_default_config)) else: self._print(f'File{str(self.uwsgi_default_config)} doesnt exists.', 'ERROR') cmd +=self._get_worker_options() cmd +=['--ini', '-'] if sys.prefix !='\/usr': cmd +=[f'--virtualenv={sys.prefix}'] if sys.prefix not in env[\"PATH\"]: env['PATH']=f'{sys.prefix}\/bin:{env[\"PATH\"]}' read, write=os.pipe() os.write(write, os.environ.get(self._settings('CONFIG_ENV_DATA_NAME'), '').encode('utf-8')) os.close(write) try: self._print('Execute: ' +' '.join(cmd)) with subprocess.Popen(cmd, env=env, stdin=read) as proc: try: wait(proc) except BaseException as exc: proc.send_signal(signal.SIGTERM) wait(proc, 10) with raise_context(): proc.kill() wait(proc) raise exc except KeyboardInterrupt: self._print('Exit by user...', 'WARNING') except CalledProcessError as err: raise self.CommandError(str(err)) except BaseException as err: self._print(str(err), 'ERROR') raise ","sourceWithComments":"# pylint: disable=no-member\n\nimport os\nimport sys\nimport time\nfrom pathlib import Path\nfrom subprocess import CalledProcessError\nimport subprocess\nimport signal\n\nfrom django.conf import settings\n\nfrom ._base import BaseCommand\nfrom ...utils import raise_context\n\npython_exec_dir = Path(os.path.dirname(settings.PYTHON_INTERPRETER))\npython_subexec_dir = Path('\/usr\/local\/bin')\n_uwsgi_default_path = python_exec_dir \/ 'uwsgi'\n_uwsgi_default_path_alt = python_exec_dir \/ 'pyuwsgi'\n_uwsgi_default_path_alt2 = python_subexec_dir \/ 'uwsgi'\n_uwsgi_default_path_alt3 = python_subexec_dir \/ 'pyuwsgi'\nif not _uwsgi_default_path.exists() and _uwsgi_default_path_alt.exists():\n    _uwsgi_default_path = _uwsgi_default_path_alt\nelif _uwsgi_default_path_alt2.exists():\n    _uwsgi_default_path = _uwsgi_default_path_alt2\nelif _uwsgi_default_path_alt3.exists():\n    _uwsgi_default_path = _uwsgi_default_path_alt3\n\n\ndef wait(proc, timeout=None, delay=0.01):\n    while proc.poll() is None and (timeout or timeout is None):\n        time.sleep(delay)\n        if timeout is not None:\n            timeout -= delay\n    return proc.poll()\n\n\ndef get_celery_command(celery_path='celery'):\n    # Format args string.\n    options = ''\n    app_option = f'--app={settings.VST_PROJECT}.wapp:app'\n    for key, value in settings.WORKER_OPTIONS.items():\n        if key == 'app':\n            app_option = \"--app={}\".format(value.replace(',', r'\\,'))\n            continue\n        is_boolean = isinstance(value, bool)\n        if (is_boolean and value) or value:\n            options += f' --{key}'\n        if is_boolean:\n            continue\n        options += \"={}\".format(value.replace(',', r'\\,'))\n\n    # Add queues list to celery args\n    if '--queues' not in options:\n        options += ' --queues={}'.format(r'\\,'.join(settings.WORKER_QUEUES))\n\n    # Add arguments to uwsgi cmd list.\n    return f'{celery_path} {app_option} worker {options}'\n\n\nclass Command(BaseCommand):\n    help = \"Backend web-server.\"\n    _uwsgi_default_path = _uwsgi_default_path\n    uwsgi_default_config = Path(os.path.dirname(__file__)).parent.parent \/ 'web.ini'\n    default_addrport = settings.WEB_ADDRPORT\n    prefix = getattr(settings, 'VST_PROJECT_LIB', 'vstutils').upper()\n\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\n            'args',\n            metavar='uwsgi_arg=value', nargs='*',\n            help='Args \"name=value\" uwsgi server.',\n        )\n        parser.add_argument(\n            '--uwsgi-path', '-s',\n            default=self._uwsgi_default_path, dest='script',\n            help='Specifies the uwsgi script.',\n        )\n        parser.add_argument(\n            '--uwsgi-config', '-c',\n            default=str(Path(settings.VST_PROJECT_DIR) \/ 'web.ini'),\n            dest='config', help='Specifies the uwsgi script.',\n        )\n        parser.add_argument(\n            '--addrport', '-p',\n            default=self.default_addrport,\n            dest='addrport', help='Specifies the uwsgi address:port. Default: [:8080]',\n        )\n\n    def _get_uwsgi_arg(self, arg):\n        return arg if isinstance(arg, str) else None\n\n    def _get_uwsgi_args(self, *uwsgi_args):\n        args = []\n\n        # Set `--daemonize` to logfile if `daemon = true`\n        if settings.WEB_DAEMON:\n            args.append(f'daemonize={settings.WEB_DAEMON_LOGFILE}')\n\n        # Parse command args and setup to uwsgi\n        args += [self._get_uwsgi_arg(arg) for arg in uwsgi_args]\n\n        return args\n\n    def _get_worker_options(self):\n        cmd = []\n\n        # Check that worker is enabled in settings.\n        if not getattr(settings, 'RUN_WORKER', False):\n            return cmd\n\n        # Add arguments to uwsgi cmd list.\n        cmd.append('--attach-daemon2')\n        cmd.append(f'stopsignal=15,reloadsignal=1,exec={get_celery_command()}')\n\n        return cmd\n\n    def handle(self, *uwsgi_args, **opts):\n        # pylint: disable=too-many-branches\n        super().handle(*uwsgi_args, **opts)\n\n        # Environment\n        env = os.environ.copy()\n\n        # Build default uwsgi-command options.\n        cmd = [\n            str(opts['script']),\n            f'--set-ph=program_name={settings.VST_PROJECT}',\n            f'--set-ph=lib_name={settings.VST_PROJECT_LIB}',\n            f'--set-ph=api_path={settings.API_URL}',\n            f'--set-ph=vstutils_version={settings.VSTUTILS_VERSION}',\n            f'--module={settings.UWSGI_APPLICATION}',\n        ]\n        #  Setup http addr:port.\n        addrport = opts['addrport']\n        cmd += [f'--{\"https\" if len(addrport.split(\",\")) > 1 else \"http\"}={addrport}']\n\n        # Import uwsgi-args from this command args (key=value).\n        cmd += [\n            f'--{arg}' for arg in self._get_uwsgi_args(*uwsgi_args)\n            if arg is not None\n        ]\n        # Import config from project.\n        if opts['config'] and Path(opts['config']).exists():\n            cmd += [f'--ini={opts[\"config\"]}']\n\n        # Connect static files.\n        if settings.STATIC_URL.startswith('\/'):\n            cmd += [f'--set-ph=static_url={settings.STATIC_URL}']\n            for static_path in settings.STATIC_FILES_FOLDERS:\n                if f\"{settings.STATIC_URL}={static_path}\" not in cmd:\n                    cmd += ['--static-map', f\"{settings.STATIC_URL}={static_path}\"]\n\n        if settings.MEDIA_URL.startswith('\/') and settings.MEDIA_ROOT:\n            cmd += ['--static-map', f\"{settings.MEDIA_URL}={settings.MEDIA_ROOT}\"]\n\n        if 'docs' in settings.INSTALLED_APPS and getattr(settings, 'DOCS_ACCESS', 'public') == 'public':\n            cmd += ['--static-map', f\"{settings.DOC_URL}={settings.DOCS_ROOT}\"]\n\n        # Append uwsgi configs.\n        for config_file in map(Path, settings.CONFIG_FILES):\n            option = f'--ini={str(config_file)}'\n            if config_file.exists() and config_file.suffix == '.ini' and option not in cmd:\n                cmd.append(option)\n\n        if self.uwsgi_default_config.exists():\n            cmd.append(str(self.uwsgi_default_config))\n        else:\n            self._print(f'File {str(self.uwsgi_default_config)} doesnt exists.', 'ERROR')\n\n        # Attach worker.\n        cmd += self._get_worker_options()\n\n        # Load config data from stdin.\n        cmd += ['--ini', '-']\n\n        # Check if it is run under virtualenv\n        if sys.prefix != '\/usr':\n            cmd += [f'--virtualenv={sys.prefix}']\n            if sys.prefix not in env[\"PATH\"]:\n                env['PATH'] = f'{sys.prefix}\/bin:{env[\"PATH\"]}'\n\n        # Get config from env\n        read, write = os.pipe()\n        os.write(write, os.environ.get(self._settings('CONFIG_ENV_DATA_NAME'), '').encode('utf-8'))\n        os.close(write)\n\n        # Run web server\n        try:\n            self._print('Execute: ' + ' '.join(cmd))\n            with subprocess.Popen(cmd, env=env, stdin=read) as proc:\n                try:\n                    wait(proc)\n                except BaseException as exc:\n                    proc.send_signal(signal.SIGTERM)\n                    wait(proc, 10)\n                    with raise_context():\n                        proc.kill()\n                    wait(proc)\n                    raise exc\n        except KeyboardInterrupt:\n            self._print('Exit by user...', 'WARNING')\n        except CalledProcessError as err:\n            raise self.CommandError(str(err))\n        except BaseException as err:\n            self._print(str(err), 'ERROR')\n            raise\n"}},"msg":"Release 5.0.0 Beta 121\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n\nParsed bundle size: 3.6 MB\n\n### TODO:\n* Optimize bundle size."},"ff5e8967c7dc743cef25cfc2e459978c011e4095":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/ff5e8967c7dc743cef25cfc2e459978c011e4095","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/ff5e8967c7dc743cef25cfc2e459978c011e4095","sha":"ff5e8967c7dc743cef25cfc2e459978c011e4095","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 36c8cf05..9a88b378 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b121'\n+__version__: str = '5.0.0b122'\ndiff --git a\/vstutils\/api\/base.py b\/vstutils\/api\/base.py\nindex c38373c0..7bc6082e 100644\n--- a\/vstutils\/api\/base.py\n+++ b\/vstutils\/api\/base.py\n@@ -380,10 +380,11 @@ def get_serializer_class(self):\n                 return serializer_class\n \n         if action_name not in main_actions:\n-            view_func = getattr(self, action_name)\n-            serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n-            if serializer_class:\n-                return serializer_class\n+            view_func = getattr(self, action_name, None)\n+            if view_func is not None:\n+                serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n+                if serializer_class:\n+                    return serializer_class\n \n         is_detail = (\n             hasattr(self, 'serializer_class_one') and\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b121'\n+__version__: str = '5.0.0b122'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b121'"],"goodparts":["__version__: str = '5.0.0b122'"]}],"source":"\n\n__version__: str='5.0.0b121' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b121'\n"},"\/vstutils\/api\/base.py":{"changes":[{"diff":"\n                 return serializer_class\n \n         if action_name not in main_actions:\n-            view_func = getattr(self, action_name)\n-            serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n-            if serializer_class:\n-                return serializer_class\n+            view_func = getattr(self, action_name, None)\n+            if view_func is not None:\n+                serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n+                if serializer_class:\n+                    return serializer_class\n \n         is_detail = (\n             hasattr(self, 'serializer_class_one') and\n","add":5,"remove":4,"filename":"\/vstutils\/api\/base.py","badparts":["            view_func = getattr(self, action_name)","            serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)","            if serializer_class:","                return serializer_class"],"goodparts":["            view_func = getattr(self, action_name, None)","            if view_func is not None:","                serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)","                if serializer_class:","                    return serializer_class"]}],"source":"\n\"\"\" Default ViewSets for web-api. \"\"\" import re import io import json import logging import inspect import traceback import datetime import typing as _t from functools import partial from copy import deepcopy import orjson from django.conf import settings from django.core import exceptions as djexcs from django.http.response import Http404, FileResponse, HttpResponseNotModified from django.db.models.query import QuerySet from django.db import transaction, models from django.utils.functional import cached_property, lazy from rest_framework.reverse import reverse from rest_framework import viewsets as vsets, views as rvs, exceptions, status from rest_framework.serializers import BaseSerializer from rest_framework.response import Response as RestResponse from rest_framework.request import Request from rest_framework.decorators import action from rest_framework.schemas import AutoSchema as DRFAutoSchema from rest_framework.utils.serializer_helpers import ReturnList, ReturnDict from..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator from. import responses, fields from.serializers import( ErrorSerializer, ValidationErrorSerializer, OtherErrorsSerializer, serializers ) default_methods: _t.List[_t.Text]=[ 'get', 'post', 'put', 'patch', 'delete', 'options', 'head' ] detail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text]=( 'create', 'retrieve', 'update', 'partial_update' ) main_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text]=('list',) +detail_actions query_check_params=( 'extra_select', 'annotations_select' ) default_cache_control_header_data='private, no-cache' non_optimizeable_fields=( fields.NamedBinaryFileInJsonField, serializers.PrimaryKeyRelatedField, serializers.BaseSerializer, serializers.SerializerMethodField, ) logger: logging.Logger=logging.getLogger(settings.VST_PROJECT) http404_re_translate=re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE) def _get_cleared(qs): return getattr(qs, 'cleared', lambda: qs)() def apply_translation(obj: _t.Any, trans_function: _t.Callable): recursive_call=partial(apply_translation, trans_function=trans_function) if isinstance(obj, dict): return{ trans_function(k): recursive_call(v) for k, v in obj.items() } elif isinstance(obj,(tuple, list)): return type(obj)(recursive_call(v) for v in obj) elif isinstance(obj,(exceptions.ErrorDetail, ReturnList, ReturnDict)): with raise_context_decorator_with_default(): obj=orjson.loads(json.dumps(obj)) return recursive_call(obj) return trans_function(obj) def exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]: traceback_str: _t.Text=traceback.format_exc() default_exc=(exceptions.APIException, djexcs.PermissionDenied) serializer_class=ErrorSerializer data: _t.Optional[_t.Dict[_t.Text, _t.Any]]=None code: _t.SupportsInt=status.HTTP_400_BAD_REQUEST lang=getattr(context.get('request'), 'language', None) translate=getattr(lang, 'translate', lambda text: text) if isinstance(exc, exceptions.APIException): if isinstance(exc.detail, ReturnDict): for key, value in exc.detail.items(): exc.detail[key]=apply_translation(value, translate) else: exc.detail=apply_translation(exc.detail, translate) elif isinstance(exc, djexcs.PermissionDenied): data={\"detail\": translate(str(exc))} code=status.HTTP_403_FORBIDDEN logger.debug(traceback_str) elif isinstance(exc, Http404): text=getattr(exc, 'msg', str(exc)) with raise_context_decorator_with_default(): instance_type=http404_re_translate.match(text).group(1) if instance_type: instance_type=str(instance_type) instance_type_format=translate(instance_type.lower()) if instance_type.istitle(): instance_type_format=instance_type_format.title() text=translate(text.replace(instance_type, '{0}')).format(instance_type_format) elif text: text=translate(text) data={\"detail\": text} code=status.HTTP_404_NOT_FOUND logger.debug(traceback_str) elif isinstance(exc, djexcs.ValidationError): if hasattr(exc, 'error_dict'): errors=apply_translation(dict(exc), translate) elif hasattr(exc, 'error_list'): errors={'other_errors': apply_translation(list(exc), translate)} else: errors={'other_errors': apply_translation(str(exc), translate)} data={\"detail\": errors} serializer_class=ValidationErrorSerializer logger.debug(traceback_str) elif not isinstance(exc, default_exc) and isinstance(exc, Exception): data={ 'detail': translate(str(exc)), 'error_type': type(exc).__name__ } code=getattr(exc, 'status', code) serializer_class=OtherErrorsSerializer logger.debug(traceback_str) if data is not None: serializer=serializer_class(data=data) try: serializer.is_valid(raise_exception=True) except: logger.debug(\"Cannot serialize error data.\") else: return responses.BaseResponseClass(serializer.data, code) logger.info(traceback_str) if getattr(exc, 'status_code', 400) >=400 else None default_response=rvs.exception_handler(exc, context) if isinstance(exc, exceptions.NotAuthenticated): default_response[\"X-Anonymous\"]=\"true\" return default_response class AutoSchema(DRFAutoSchema): __slots__=() def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text: method_name: _t.Text=getattr(self.view, 'action', method.lower()) method_obj: _t.Optional[_t.Callable]=getattr(self.view, method_name, None) method_view: _t.Optional[_t.Type[rvs.APIView]]=( getattr(method_obj, '_nested_view', None) if method_obj else None ) method_view=get_if_lazy(method_view) if method_obj.__doc__: return method_obj.__doc__.strip() if not method_view: if not self.view.__class__.__doc__: model=getattr(self.view, 'model', None) if model is not None and model.__doc__: self.view.__class__.__doc__=model.__doc__ return super().get_description(path, method) method_view_obj=method_view() action=path.split('\/')[-2] submethod=getattr(method_view, action, None) if submethod.__doc__: return str(submethod.__doc__).strip() if method=='GET' and '{' not in path[:-1].split('\/')[-1]: action='list' elif method=='POST': action='create' elif method=='GET': action='retrieve' elif method=='PUT': action='update' elif method=='PATCH': action='partial_update' elif method=='DELETE': action='destroy' method_view_obj.action=action if method_view_obj.schema is None: return 'No description' return method_view_obj.schema.get_description(path, method) class QuerySetMixin(rvs.APIView): \"\"\" Instance REST operations. \"\"\" __slots__=() queryset: _t.Optional[QuerySet] _queryset: _t.Optional[QuerySet]=None model: _t.Optional[_t.Type[models.Model]]=None @classproperty def queryset(self) -> QuerySet: if self._queryset is not None: return _get_cleared(self._queryset) return _get_cleared(self.model.objects.all()) @queryset.setter def queryset(self, value): self._queryset=value def _base_get_queryset(self) -> QuerySet: assert self.queryset is not None,( \"'%s' should either include a `queryset` attribute, \" \"or override the `get_queryset()` method.\" % self.__class__.__name__ ) queryset=self.queryset if isinstance(queryset, QuerySet): queryset=queryset.all() return queryset def get_extra_queryset(self) -> _t.Optional[QuerySet]: return self.queryset def get_queryset(self) -> QuerySet: if self.queryset is None: assert self.model is not None,( \"'%s' should either include a `queryset` or `model` attribute,\" \" or override the `get_queryset()` method.\" % self.__class__.__name__ ) self.queryset=_get_cleared(self.model.objects.all()) self.queryset=self.get_extra_queryset() return self._base_get_queryset() class GenericViewSetMeta(type(vsets.GenericViewSet)): __slots__=() def __new__(mcs, name, bases, attrs): new_class=super().__new__(mcs, name, bases, attrs) for detail in(True, False): setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None) return new_class def __get_http_methods_attr_name(cls, detail): return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) class GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta): \"\"\" The base class for all views. Extends the standard features of the DRF class. Here are some of the possibilities: -Provides ``model`` attribute instead of ``queryset``. -Provides to set serializers for each action separately through a dictionary ``action_serializers`` or attributes starting with ``serializer_class_[action name]``. -Provides to specify a serializer for lists and detail views separately. -Optimizes the database query for GET requests, if possible, by selecting only the fields necessary for the serializer. \"\"\" __slots__=() optimize_get_by_values=settings.OPTIMIZE_GET_BY_VALUES select_related=False serializer_class: _t.Type[serializers.Serializer] _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]]=None model: _t.Optional[_t.Type[models.Model]]=None action_serializers: _t.Dict[_t.Text, serializers.Serializer]={} _nested_args: _t.Dict[_t.Text, _t.Any] _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]] nested_detail: bool def create_action_serializer(self, *args, **kwargs): \"\"\" A method that implements the standard logic for actions. It relies on the passed arguments to build logic. So, if the named argument data was passed, then the serializer will be validated and saved. :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed. Enabled by default. :type autosave: bool :param: data: Default serializer class argument with serializable data. Enables validation and saving. :type data: dict :param: instance: Default serializer class argument with serializable instance. :type instance: typing.Any :param custom_data: Dict with data which will passed to `validated_data` without validation. :type custom_data: dict :param serializer_class: Serializer class for this execution. May be usefull when request and response serializers is different. :type serializer_class: None,type[rest_framework.serializers.Serializer] :return: Ready serializer with default logic performed. :rtype: rest_framework.serializers.Serializer \"\"\" self.serializer_class=kwargs.pop('serializer_class', None) or self.get_serializer_class() save_kwargs=kwargs.pop('custom_data',{}) should_save=kwargs.pop('autosave', True) or save_kwargs serializer=self.get_serializer(*args, **kwargs) if 'data' in kwargs: serializer.is_valid(raise_exception=True) if should_save: serializer.save(**save_kwargs) return serializer def filter_for_filter_backends(self, backend): return getattr(backend, 'required', False) @raise_context_decorator_with_default(default=set()) def _get_selectable_fields(self, qs): result={f.name for f in qs.model._meta.fields} for extra in filter(bool, map(lambda x: getattr(qs.query, x, None), query_check_params)): result.update(extra.keys()) return result def filter_queryset(self, queryset: QuerySet): if hasattr(self, 'nested_name'): self.filter_backends=filter( self.filter_for_filter_backends, self.filter_backends ) qs=super().filter_queryset(queryset) if self.action in('list', 'retrieve') and self.optimize_get_by_values: serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer): serializer=serializer_class() read_fields={f.field_name for f in serializer._readable_fields} model_fields={ f.field_name for f in serializer._readable_fields if isinstance(f, non_optimizeable_fields) } if read_fields.issubset(self._get_selectable_fields(qs)) and not(read_fields & model_fields): qs=qs.values(*read_fields) return qs def get_serializer_class(self): \"\"\" Provides to setup serializer class for each action. \"\"\" lookup_field=self.lookup_url_kwarg or self.lookup_field or 'pk' action_name=getattr(self, 'action', None) serializer_class=getattr(self, f'serializer_class_{action_name}', None) if serializer_class: return serializer_class if action_name in self.action_serializers: serializer_class=self.action_serializers.get(action_name, None) if serializer_class: return serializer_class if action_name not in main_actions: view_func=getattr(self, action_name) serializer_class=getattr(view_func, 'kwargs',{}).get('serializer_class', None) if serializer_class: return serializer_class is_detail=( hasattr(self, 'serializer_class_one') and self.request and ( action_name in detail_actions or ( self.kwargs.get(lookup_field, False) and action_name in main_actions ) ) ) if is_detail: return self.serializer_class_one return super().get_serializer_class() def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer: \"\"\" Return the serializer instance that should be used for validating and deserializing input, and for serializing output. Provide to use:class:`django.http.StreamingHttpResponse` as serializer init. \"\"\" serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer): kwargs.setdefault('context', self.get_serializer_context()) return serializer_class(*args, **kwargs) def nested_allow_check(self): \"\"\" Just raise or pass. Used for nested views for easier access checking. \"\"\" @classmethod def get_view_methods(cls, detail=False) -> _t.List[_t.Text]: attr_name=''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) methods=getattr(cls, attr_name, None) if methods is not None: return methods methods=[] if not detail and hasattr(cls, 'create'): methods.append('post') if hasattr(cls, 'list') or hasattr(cls, 'retrieve'): methods.append('get') if detail and hasattr(cls, 'update'): methods.append('put') if detail and hasattr(cls, 'partial_update'): methods.append('patch') if detail and hasattr(cls, 'destroy'): methods.append('delete') setattr(cls, attr_name, methods) return methods @classmethod def get_extra_actions(cls): return super().get_extra_actions() @classmethod def as_view(cls, actions=None, **initkwargs): return super().as_view(actions, **initkwargs) class CachableHeadMixin(GenericViewSet): \"\"\" Mixin which cache GET responses. Uses standard HTTP-caching mechanism which response 304 when Etag match. .. warning:: This works only with models based on:class:`vstutils.models.BModel`. \"\"\" class NotModifiedException(exceptions.APIException): status_code=304 default_detail='' default_code='cached' @cached_property def model_class(self): return getattr(self, 'model', None) or self.queryset.model @cached_property @raise_context_decorator_with_default(default=False) def is_main_action(self): return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None def get_etag_value(self, model_class, request): return( f'{model_class.get_etag_value()}' f'_' f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}' ) def check_etag(self, request): etag_data=self.get_etag_value(self.model_class, request) if request.method==\"GET\" and etag_data==str(request.headers.get(\"If-None-Match\", None)): raise self.NotModifiedException(\"\") def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse: result_response=super().finalize_response(request, response, *args, **kwargs) if self.is_main_action and 'ETag' not in result_response.headers: result_response.headers['ETag']=lazy(self.get_etag_value, str)(self.model_class, request) return result_response def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None: super().initial(request, *args, **kwargs) if self.is_main_action: self.check_etag(request) class CopyMixin(GenericViewSet): \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\" __slots__=() copy_prefix='copy-' copy_field_name='name' copy_related: _t.Iterable[_t.Text]=() def copy_instance(self, instance): new_instance=deepcopy(instance) new_instance.pk=None name=getattr(instance, self.copy_field_name, None) if isinstance(name, str): name=f'{self.copy_prefix}{name}' setattr(new_instance, self.copy_field_name, name) new_instance.save() for related_name in self.copy_related: new_related_manager=getattr(new_instance, related_name, None) if new_related_manager is not None: new_related_manager.set(getattr(instance, related_name).all()) return new_instance @action(methods=['post'], detail=True) @transaction.atomic() def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass: \"\"\" Endpoint which copy instance with deps. \"\"\" instance=self.copy_instance(self.get_object()) serializer=self.get_serializer(instance, data=request.data, partial=True) serializer.is_valid() serializer.save() return responses.HTTP_201_CREATED(serializer.data) class FileResponseRetrieveMixin(GenericViewSet): \"\"\" ViewSet mixin for retriving FileResponse from models with file fields data. Example: .. literalinclude::..\/test_src\/test_proj\/models\/files.py :lines: 1-22,59-77 \"\"\" __slots__=() instance_field_data: _t.Text instance_field_filename: _t.Text='filename' instance_field_timestamp: _t.Optional[_t.Text]=None cache_control_header_data: _t.Optional[_t.Text]=None serializer_class_retrieve=FileResponse def get_file_response_kwargs(self, instance): data=getattr(instance, self.instance_field_data) if isinstance(data, str): data=data.encode('utf-8') if isinstance(data,(bytes, bytearray)): data=io.BytesIO(data) return{ \"streaming_content\": data, \"as_attachment\": True, \"filename\": getattr(instance, self.instance_field_filename, ''), } @patch_gzip_response_decorator def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]: instance=self.get_object() instance_edit_timestamp=None if self.instance_field_timestamp: instance_edit: datetime.datetime=getattr(instance, self.instance_field_timestamp, None) instance_edit_timestamp=instance_edit.timestamp() if instance_edit else None if instance_edit_timestamp and instance_edit_timestamp==float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')): return HttpResponseNotModified() response: FileResponse=self.get_serializer(**self.get_file_response_kwargs(instance)) if self.instance_field_timestamp and instance_edit_timestamp: cache_control_header_data=getattr(self, 'cache_control_header_data', None) if cache_control_header_data is None: cache_control_header_data=default_cache_control_header_data response['Cache-Control']=cache_control_header_data response['ETag']=str(instance_edit_timestamp) return response class ModelViewSet(GenericViewSet, vsets.ModelViewSet): \"\"\" A viewset that provides CRUD actions under model. Inherited from:class:`.GenericViewSet`. :var model: DB model with data. :vartype model: vstutils.models.BModel :var serializer_class: Serializer for view of Model data. :vartype serializer_class: vstutils.api.serializers.VSTSerializer :var serializer_class_one: Serializer for view one instance of Model data. :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`. :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer Examples: .. sourcecode:: python from vstutils.api.base import ModelViewSet from. import serializers as sers class StageViewSet(ModelViewSet): model=sers.models.Stage serializer_class=sers.StageSerializer serializer_class_one=sers.StageSerializer \"\"\" __slots__=() class NonModelsViewSet(GenericViewSet): __slots__=() base_name=None def get_queryset(self) -> QuerySet: return QuerySet() class ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin): __slots__=() schema=None @property def methods(self) -> _t.Iterable[_t.Text]: def is_list_action(attr): if not inspect.isfunction(attr): return False elif not hasattr(attr, 'url_path'): return False elif getattr(attr, 'detail', True): return False return True return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action)) def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass: routes={ method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request) for method in self.methods } return responses.HTTP_200_OK(routes) class ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for readonly models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for list only models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin): \"\"\" Default viewset like ReadOnlyModelViewSet but for historical data (allow to delete, but can't create and update). Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() ","sourceWithComments":"\"\"\"\nDefault ViewSets for web-api.\n\"\"\"\n\nimport re\nimport io\nimport json\nimport logging\nimport inspect\nimport traceback\nimport datetime\nimport typing as _t\nfrom functools import partial\nfrom copy import deepcopy\n\nimport orjson\nfrom django.conf import settings\nfrom django.core import exceptions as djexcs\nfrom django.http.response import Http404, FileResponse, HttpResponseNotModified\nfrom django.db.models.query import QuerySet\nfrom django.db import transaction, models\nfrom django.utils.functional import cached_property, lazy\nfrom rest_framework.reverse import reverse\nfrom rest_framework import viewsets as vsets, views as rvs, exceptions, status\nfrom rest_framework.serializers import BaseSerializer\nfrom rest_framework.response import Response as RestResponse\nfrom rest_framework.request import Request\nfrom rest_framework.decorators import action\nfrom rest_framework.schemas import AutoSchema as DRFAutoSchema\nfrom rest_framework.utils.serializer_helpers import ReturnList, ReturnDict\n\nfrom ..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator\nfrom . import responses, fields\nfrom .serializers import (\n    ErrorSerializer,\n    ValidationErrorSerializer,\n    OtherErrorsSerializer,\n    serializers\n)\n\ndefault_methods: _t.List[_t.Text] = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'delete',\n    'options',\n    'head'\n]\ndetail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text] = (\n    'create',\n    'retrieve',\n    'update',\n    'partial_update'\n)\nmain_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text] = ('list',) + detail_actions\nquery_check_params = (\n    'extra_select',\n    'annotations_select'\n)\ndefault_cache_control_header_data = 'private, no-cache'\nnon_optimizeable_fields = (\n    fields.NamedBinaryFileInJsonField,\n    serializers.PrimaryKeyRelatedField,\n    serializers.BaseSerializer,\n    serializers.SerializerMethodField,\n)\nlogger: logging.Logger = logging.getLogger(settings.VST_PROJECT)\nhttp404_re_translate = re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE)\n\n\ndef _get_cleared(qs):\n    return getattr(qs, 'cleared', lambda: qs)()\n\n\ndef apply_translation(obj: _t.Any, trans_function: _t.Callable):\n    recursive_call = partial(apply_translation, trans_function=trans_function)\n    if isinstance(obj, dict):\n        return {\n            trans_function(k): recursive_call(v)\n            for k, v in obj.items()\n        }\n    elif isinstance(obj, (tuple, list)):\n        return type(obj)(recursive_call(v) for v in obj)\n    elif isinstance(obj, (exceptions.ErrorDetail, ReturnList, ReturnDict)):\n        with raise_context_decorator_with_default():\n            obj = orjson.loads(json.dumps(obj))\n            return recursive_call(obj)\n    return trans_function(obj)\n\n\ndef exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]:\n    # pylint: disable=too-many-branches\n    traceback_str: _t.Text = traceback.format_exc()\n    default_exc = (exceptions.APIException, djexcs.PermissionDenied)\n    serializer_class = ErrorSerializer\n    data: _t.Optional[_t.Dict[_t.Text, _t.Any]] = None\n    code: _t.SupportsInt = status.HTTP_400_BAD_REQUEST\n    lang = getattr(context.get('request'), 'language', None)\n    translate = getattr(lang, 'translate', lambda text: text)\n\n    if isinstance(exc, exceptions.APIException):\n        if isinstance(exc.detail, ReturnDict):\n            for key, value in exc.detail.items():\n                exc.detail[key] = apply_translation(value, translate)\n        else:\n            exc.detail = apply_translation(exc.detail, translate)\n\n    elif isinstance(exc, djexcs.PermissionDenied):  # pragma: no cover\n        data = {\"detail\": translate(str(exc))}\n        code = status.HTTP_403_FORBIDDEN\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, Http404):\n        text = getattr(exc, 'msg', str(exc))\n        with raise_context_decorator_with_default():\n            instance_type = http404_re_translate.match(text).group(1)  # type: ignore\n            if instance_type:\n                instance_type = str(instance_type)\n                instance_type_format = translate(instance_type.lower())\n                if instance_type.istitle():\n                    instance_type_format = instance_type_format.title()\n                text = translate(text.replace(instance_type, '{0}')).format(instance_type_format)\n            elif text:  # nocv\n                text = translate(text)\n        data = {\"detail\": text}\n        code = status.HTTP_404_NOT_FOUND\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, djexcs.ValidationError):\n        if hasattr(exc, 'error_dict'):  # nocv\n            errors = apply_translation(dict(exc), translate)  # type: ignore\n        elif hasattr(exc, 'error_list'):\n            errors = {'other_errors': apply_translation(list(exc), translate)}\n        else:  # nocv\n            errors = {'other_errors': apply_translation(str(exc), translate)}\n        data = {\"detail\": errors}\n        serializer_class = ValidationErrorSerializer\n        logger.debug(traceback_str)\n\n    elif not isinstance(exc, default_exc) and isinstance(exc, Exception):\n        data = {\n            'detail': translate(str(exc)),\n            'error_type': type(exc).__name__\n        }\n        code = getattr(exc, 'status', code)\n        serializer_class = OtherErrorsSerializer\n        logger.debug(traceback_str)\n\n    if data is not None:\n        serializer = serializer_class(data=data)\n        try:\n            serializer.is_valid(raise_exception=True)\n        except:  # nocv\n            logger.debug(\"Cannot serialize error data.\")\n        else:\n            return responses.BaseResponseClass(serializer.data, code)\n\n    logger.info(traceback_str) if getattr(exc, 'status_code', 400) >= 400 else None\n    default_response = rvs.exception_handler(exc, context)\n\n    if isinstance(exc, exceptions.NotAuthenticated):  # nocv\n        default_response[\"X-Anonymous\"] = \"true\"  # type: ignore\n\n    return default_response\n\n\nclass AutoSchema(DRFAutoSchema):\n    __slots__ = ()\n\n    def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text:\n        # pylint: disable=simplifiable-if-statement,redefined-outer-name\n        method_name: _t.Text = getattr(self.view, 'action', method.lower())\n        method_obj: _t.Optional[_t.Callable] = getattr(self.view, method_name, None)\n        method_view: _t.Optional[_t.Type[rvs.APIView]] = (\n            getattr(method_obj, '_nested_view', None)\n            if method_obj else None\n        )\n        method_view = get_if_lazy(method_view)\n\n        if method_obj.__doc__:\n            return method_obj.__doc__.strip()\n        if not method_view:\n            if not self.view.__class__.__doc__:\n                model = getattr(self.view, 'model', None)\n                if model is not None and model.__doc__:\n                    self.view.__class__.__doc__ = model.__doc__\n            return super().get_description(path, method)\n\n        method_view_obj = method_view()\n        action = path.split('\/')[-2]\n        submethod = getattr(method_view, action, None)\n        if submethod.__doc__:\n            return str(submethod.__doc__).strip()  # nocv\n        if method == 'GET' and '{' not in path[:-1].split('\/')[-1]:\n            action = 'list'\n        elif method == 'POST':\n            action = 'create'\n        elif method == 'GET':\n            action = 'retrieve'\n        elif method == 'PUT':\n            action = 'update'\n        elif method == 'PATCH':\n            action = 'partial_update'\n        elif method == 'DELETE':\n            action = 'destroy'\n        method_view_obj.action = action  # type: ignore\n        if method_view_obj.schema is None:\n            return 'No description'  # nocv\n        return method_view_obj.schema.get_description(path, method)  # type: ignore\n\n\nclass QuerySetMixin(rvs.APIView):\n    \"\"\"\n    Instance REST operations.\n    \"\"\"\n    __slots__ = ()\n    queryset: _t.Optional[QuerySet]\n    _queryset: _t.Optional[QuerySet] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n\n    @classproperty  # type: ignore\n    def queryset(self) -> QuerySet:\n        # pylint: disable=method-hidden,function-redefined\n        if self._queryset is not None:\n            return _get_cleared(self._queryset)\n        return _get_cleared(self.model.objects.all())\n\n    @queryset.setter  # type: ignore\n    def queryset(self, value):\n        self._queryset = value\n\n    def _base_get_queryset(self) -> QuerySet:\n        assert self.queryset is not None, (\n            \"'%s' should either include a `queryset` attribute, \"\n            \"or override the `get_queryset()` method.\"\n            % self.__class__.__name__\n        )\n\n        queryset = self.queryset\n        if isinstance(queryset, QuerySet):\n            # Ensure queryset is re-evaluated on each request.\n            queryset = queryset.all()\n        return queryset\n\n    def get_extra_queryset(self) -> _t.Optional[QuerySet]:\n        return self.queryset\n\n    def get_queryset(self) -> QuerySet:\n        if self.queryset is None:  # nocv\n            assert self.model is not None, (\n                \"'%s' should either include a `queryset` or `model` attribute,\"\n                \" or override the `get_queryset()` method.\"\n                % self.__class__.__name__\n            )\n            self.queryset = _get_cleared(self.model.objects.all())\n        self.queryset = self.get_extra_queryset()\n        return self._base_get_queryset()\n\n\nclass GenericViewSetMeta(type(vsets.GenericViewSet)):  # type: ignore\n    __slots__ = ()\n\n    def __new__(mcs, name, bases, attrs):\n        new_class = super().__new__(mcs, name, bases, attrs)\n        for detail in (True, False):\n            setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None)\n        return new_class\n\n    def __get_http_methods_attr_name(cls, detail):\n        return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n\n\nclass GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta):\n    \"\"\"\n    The base class for all views. Extends the standard features of the DRF class.\n    Here are some of the possibilities:\n\n    - Provides ``model`` attribute instead of ``queryset``.\n    - Provides to set serializers for each action separately through a dictionary ``action_serializers`` or\n      attributes starting with ``serializer_class_[action name]``.\n    - Provides to specify a serializer for lists and detail views separately.\n    - Optimizes the database query for GET requests, if possible,\n      by selecting only the fields necessary for the serializer.\n    \"\"\"\n    __slots__ = ()\n    optimize_get_by_values = settings.OPTIMIZE_GET_BY_VALUES\n    select_related = False\n    serializer_class: _t.Type[serializers.Serializer]\n    _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n    action_serializers: _t.Dict[_t.Text, serializers.Serializer] = {}\n    _nested_args: _t.Dict[_t.Text, _t.Any]\n    _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]]\n    nested_detail: bool\n\n    def create_action_serializer(self, *args, **kwargs):\n        \"\"\"\n        A method that implements the standard logic for actions.\n        It relies on the passed arguments to build logic.\n        So, if the named argument data was passed, then the serializer will be validated and saved.\n\n        :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed.\n                         Enabled by default.\n        :type autosave: bool\n        :param: data: Default serializer class argument with serializable data. Enables validation and saving.\n        :type data: dict\n        :param: instance: Default serializer class argument with serializable instance.\n        :type instance: typing.Any\n        :param custom_data: Dict with data which will passed to `validated_data` without validation.\n        :type custom_data: dict\n        :param serializer_class: Serializer class for this execution.\n                                 May be usefull when request and response serializers is different.\n        :type serializer_class: None,type[rest_framework.serializers.Serializer]\n        :return: Ready serializer with default logic performed.\n        :rtype: rest_framework.serializers.Serializer\n        \"\"\"\n        self.serializer_class = kwargs.pop('serializer_class', None) or self.get_serializer_class()\n        save_kwargs = kwargs.pop('custom_data', {})\n        should_save = kwargs.pop('autosave', True) or save_kwargs\n        serializer = self.get_serializer(*args, **kwargs)\n        if 'data' in kwargs:\n            serializer.is_valid(raise_exception=True)\n            if should_save:\n                serializer.save(**save_kwargs)\n        return serializer\n\n    def filter_for_filter_backends(self, backend):\n        return getattr(backend, 'required', False)\n\n    @raise_context_decorator_with_default(default=set())\n    def _get_selectable_fields(self, qs):\n        result = {f.name for f in qs.model._meta.fields}\n\n        for extra in filter(bool, map(lambda x: getattr(qs.query, x, None), query_check_params)):\n            result.update(extra.keys())\n\n        return result\n\n    def filter_queryset(self, queryset: QuerySet):\n        if hasattr(self, 'nested_name'):\n            self.filter_backends = filter(  # type: ignore\n                self.filter_for_filter_backends,\n                self.filter_backends\n            )\n        qs = super().filter_queryset(queryset)\n\n        if self.action in ('list', 'retrieve') and self.optimize_get_by_values:\n            # pylint: disable=protected-access\n\n            serializer_class = self.get_serializer_class()\n            if issubclass(serializer_class, BaseSerializer):\n                serializer = serializer_class()\n                read_fields = {f.field_name for f in serializer._readable_fields}\n                model_fields = {\n                    f.field_name  # type: ignore\n                    for f in serializer._readable_fields\n                    if isinstance(f, non_optimizeable_fields)\n                }\n\n                if read_fields.issubset(self._get_selectable_fields(qs)) and not (read_fields & model_fields):\n                    qs = qs.values(*read_fields)\n\n        return qs\n\n    def get_serializer_class(self):\n        \"\"\"\n        Provides to setup serializer class for each action.\n        \"\"\"\n        lookup_field = self.lookup_url_kwarg or self.lookup_field or 'pk'\n        action_name = getattr(self, 'action', None)\n\n        # Try to get overloaded serializer from 'action_serializers' or from attrs\n        serializer_class = getattr(self, f'serializer_class_{action_name}', None)\n        if serializer_class:\n            return serializer_class\n        if action_name in self.action_serializers:\n            serializer_class = self.action_serializers.get(action_name, None)\n            if serializer_class:\n                return serializer_class\n\n        if action_name not in main_actions:\n            view_func = getattr(self, action_name)\n            serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n            if serializer_class:\n                return serializer_class\n\n        is_detail = (\n            hasattr(self, 'serializer_class_one') and\n            self.request and\n            (\n                action_name in detail_actions or\n                (\n                    self.kwargs.get(lookup_field, False) and\n                    action_name in main_actions\n                )\n            )\n        )\n\n        # Get 'serializer_class_one' for detail operations\n        if is_detail:\n            return self.serializer_class_one  # pylint: disable=no-member\n        return super().get_serializer_class()\n\n    def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer:\n        \"\"\"\n        Return the serializer instance that should be used for validating and\n        deserializing input, and for serializing output.\n\n        Provide to use :class:`django.http.StreamingHttpResponse` as serializer init.\n        \"\"\"\n        serializer_class = self.get_serializer_class()\n        if issubclass(serializer_class, BaseSerializer):\n            kwargs.setdefault('context', self.get_serializer_context())\n        return serializer_class(*args, **kwargs)\n\n    def nested_allow_check(self):\n        \"\"\"\n        Just raise or pass. Used for nested views for easier access checking.\n        \"\"\"\n\n    @classmethod\n    def get_view_methods(cls, detail=False) -> _t.List[_t.Text]:\n        attr_name = ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n        methods = getattr(cls, attr_name, None)\n        if methods is not None:\n            return methods\n        methods = []\n        if not detail and hasattr(cls, 'create'):\n            methods.append('post')\n        if hasattr(cls, 'list') or hasattr(cls, 'retrieve'):\n            methods.append('get')\n        if detail and hasattr(cls, 'update'):\n            methods.append('put')\n        if detail and hasattr(cls, 'partial_update'):\n            methods.append('patch')\n        if detail and hasattr(cls, 'destroy'):\n            methods.append('delete')\n        setattr(cls, attr_name, methods)\n        return methods\n\n    @classmethod\n    def get_extra_actions(cls):\n        return super().get_extra_actions()\n\n    @classmethod\n    def as_view(cls, actions=None, **initkwargs):\n        return super().as_view(actions, **initkwargs)\n\n\nclass CachableHeadMixin(GenericViewSet):\n    \"\"\"\n    Mixin which cache GET responses.\n    Uses standard HTTP-caching mechanism which response 304 when Etag match.\n\n    .. warning::\n        This works only with models based on :class:`vstutils.models.BModel`.\n    \"\"\"\n\n    class NotModifiedException(exceptions.APIException):\n        status_code = 304\n        default_detail = ''\n        default_code = 'cached'\n\n    @cached_property\n    def model_class(self):\n        return getattr(self, 'model', None) or self.queryset.model\n\n    @cached_property\n    @raise_context_decorator_with_default(default=False)\n    def is_main_action(self):\n        return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None\n\n    def get_etag_value(self, model_class, request):\n        return (\n            f'{model_class.get_etag_value()}'\n            f'_'\n            f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}'\n        )\n\n    def check_etag(self, request):\n        etag_data = self.get_etag_value(self.model_class, request)  # type: ignore\n\n        if request.method == \"GET\" and etag_data == str(request.headers.get(\"If-None-Match\", None)):\n            raise self.NotModifiedException(\"\")\n        # TODO: Workflow with ETag on PUT\/PATCH\n\n    def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse:\n        result_response = super().finalize_response(request, response, *args, **kwargs)\n        if self.is_main_action and 'ETag' not in result_response.headers:\n            result_response.headers['ETag'] = lazy(self.get_etag_value, str)(self.model_class, request)\n        return result_response\n\n    def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None:\n        super().initial(request, *args, **kwargs)\n\n        if self.is_main_action:\n            self.check_etag(request)\n\n\nclass CopyMixin(GenericViewSet):\n    \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\"\n\n    __slots__ = ()\n    #: Value of prefix which will be added to new instance name.\n    copy_prefix = 'copy-'\n    #: Name of field which will get a prefix.\n    copy_field_name = 'name'\n    #: List of related names which will be copied to new instance.\n    copy_related: _t.Iterable[_t.Text] = ()\n\n    def copy_instance(self, instance):\n        new_instance = deepcopy(instance)\n        new_instance.pk = None\n        name = getattr(instance, self.copy_field_name, None)\n        if isinstance(name, str):\n            name = f'{self.copy_prefix}{name}'\n        setattr(new_instance, self.copy_field_name, name)\n        new_instance.save()\n        for related_name in self.copy_related:\n            new_related_manager = getattr(new_instance, related_name, None)\n            if new_related_manager is not None:\n                new_related_manager.set(getattr(instance, related_name).all())\n        return new_instance\n\n    @action(methods=['post'], detail=True)\n    @transaction.atomic()\n    def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass:\n        # pylint: disable=unused-argument\n        \"\"\"\n        Endpoint which copy instance with deps.\n        \"\"\"\n        instance = self.copy_instance(self.get_object())\n        serializer = self.get_serializer(instance, data=request.data, partial=True)\n        serializer.is_valid()\n        serializer.save()\n        return responses.HTTP_201_CREATED(serializer.data)\n\n\nclass FileResponseRetrieveMixin(GenericViewSet):\n    \"\"\"\n    ViewSet mixin for retriving FileResponse from models with file fields data.\n\n    Example:\n\n        .. literalinclude:: ..\/test_src\/test_proj\/models\/files.py\n           :lines: 1-22,59-77\n    \"\"\"\n    __slots__ = ()\n\n    instance_field_data: _t.Text\n    instance_field_filename: _t.Text = 'filename'\n    instance_field_timestamp: _t.Optional[_t.Text] = None\n    cache_control_header_data: _t.Optional[_t.Text] = None\n    serializer_class_retrieve = FileResponse\n\n    def get_file_response_kwargs(self, instance):\n        data = getattr(instance, self.instance_field_data)\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        if isinstance(data, (bytes, bytearray)):\n            data = io.BytesIO(data)\n        return {\n            \"streaming_content\": data,\n            \"as_attachment\": True,\n            \"filename\": getattr(instance, self.instance_field_filename, ''),\n        }\n\n    @patch_gzip_response_decorator\n    def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]:\n        instance = self.get_object()\n\n        instance_edit_timestamp = None\n        if self.instance_field_timestamp:\n            instance_edit: datetime.datetime = getattr(instance, self.instance_field_timestamp, None)\n            instance_edit_timestamp = instance_edit.timestamp() if instance_edit else None\n\n        if instance_edit_timestamp and instance_edit_timestamp == float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')):\n            return HttpResponseNotModified()\n\n        response: FileResponse = self.get_serializer(**self.get_file_response_kwargs(instance))  # type: ignore\n\n        if self.instance_field_timestamp and instance_edit_timestamp:\n            cache_control_header_data = getattr(self, 'cache_control_header_data', None)\n            if cache_control_header_data is None:\n                cache_control_header_data = default_cache_control_header_data\n            response['Cache-Control'] = cache_control_header_data\n            response['ETag'] = str(instance_edit_timestamp)\n        return response\n\n\nclass ModelViewSet(GenericViewSet, vsets.ModelViewSet):\n    # pylint: disable=useless-super-delegation\n\n    \"\"\"\n    A viewset that provides CRUD actions under model. Inherited from :class:`.GenericViewSet`.\n\n    :var model: DB model with data.\n    :vartype model: vstutils.models.BModel\n    :var serializer_class: Serializer for view of Model data.\n    :vartype serializer_class: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_one: Serializer for view one instance of Model data.\n    :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`.\n    :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer\n\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.api.base import ModelViewSet\n            from . import serializers as sers\n\n\n            class StageViewSet(ModelViewSet):\n                # This is difference with DRF:\n                # we use model instead of queryset\n                model = sers.models.Stage\n                # Serializer for list view (view for a list of Model instances\n                serializer_class = sers.StageSerializer\n                # Serializer for page view (view for one Model instance).\n                # This property is not required, if its value is the same as `serializer_class`.\n                serializer_class_one = sers.StageSerializer\n                # Allowed to set decorator to custom endpoint like this:\n                # serializer_class_create - for create method\n                # serializer_class_copy - for detail endpoint `copy`.\n                # etc...\n\n    \"\"\"\n\n    __slots__ = ()\n\n\nclass NonModelsViewSet(GenericViewSet):\n    __slots__ = ()\n    base_name = None\n\n    def get_queryset(self) -> QuerySet:\n        return QuerySet()  # nocv\n\n\nclass ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin):\n    # pylint: disable=abstract-method\n    __slots__ = ()\n    schema = None  # type: ignore\n\n    @property\n    def methods(self) -> _t.Iterable[_t.Text]:\n        def is_list_action(attr):\n            if not inspect.isfunction(attr):\n                return False\n            elif not hasattr(attr, 'url_path'):\n                return False\n            elif getattr(attr, 'detail', True):\n                return False\n            return True\n\n        return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action))\n\n    def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass:\n        routes = {\n            method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request)\n            for method in self.methods\n        }\n        return responses.HTTP_200_OK(routes)\n\n\nclass ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for readonly models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for list only models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin):\n    \"\"\"\n    Default viewset like ReadOnlyModelViewSet but for historical data\n    (allow to delete, but can't create and update).\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n"}},"msg":"Release 5.0.0 Beta 122\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n\nParsed bundle size: 3.6 MB\n\n### TODO:\n* Optimize bundle size."},"002d405bec5aaf4a2b4d0baf4e8fb4ee4ee05d90":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/002d405bec5aaf4a2b4d0baf4e8fb4ee4ee05d90","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/002d405bec5aaf4a2b4d0baf4e8fb4ee4ee05d90","sha":"002d405bec5aaf4a2b4d0baf4e8fb4ee4ee05d90","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 9a88b378..a337afab 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b122'\n+__version__: str = '5.0.0b123'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b122'\n+__version__: str = '5.0.0b123'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b122'"],"goodparts":["__version__: str = '5.0.0b123'"]}],"source":"\n\n__version__: str='5.0.0b122' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b122'\n"}},"msg":"Release 5.0.0 Beta 123\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n\nParsed bundle size: 3.6 MB\n\n### TODO:\n* Optimize bundle size."},"412f1d51eef800c216501932af93bbae0be1b6ff":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/412f1d51eef800c216501932af93bbae0be1b6ff","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/412f1d51eef800c216501932af93bbae0be1b6ff","sha":"412f1d51eef800c216501932af93bbae0be1b6ff","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex a337afab..5fee02f1 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b123'\n+__version__: str = '5.0.0b124'\ndiff --git a\/vstutils\/api\/pagination.py b\/vstutils\/api\/pagination.py\nindex 286715e7..00b01709 100644\n--- a\/vstutils\/api\/pagination.py\n+++ b\/vstutils\/api\/pagination.py\n@@ -6,6 +6,9 @@\n \n \n class LimitOffsetPagination(DRFLimitOffsetPagination):\n+    def get_count(self, queryset):\n+        return super().get_count(queryset.values(queryset.model._meta.pk.name))\n+\n     def paginate_queryset(self, queryset, request, view=None):\n         self.identifier = request.headers.get('Identifiers-List-Name')\n         return super().paginate_queryset(queryset, request, view)\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b123'\n+__version__: str = '5.0.0b124'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b123'"],"goodparts":["__version__: str = '5.0.0b124'"]}],"source":"\n\n__version__: str='5.0.0b123' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b123'\n"}},"msg":"Release 5.0.0 Beta 124\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Fix: Subquery in pagination count get.\n\nParsed bundle size: 3.6 MB\n\n### TODO:\n* Optimize bundle size."},"e1ec5a8d568ff884b8e1cc8f7ed94feca3ab4e0a":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/e1ec5a8d568ff884b8e1cc8f7ed94feca3ab4e0a","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/e1ec5a8d568ff884b8e1cc8f7ed94feca3ab4e0a","sha":"e1ec5a8d568ff884b8e1cc8f7ed94feca3ab4e0a","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex f213f794..ffbbebb2 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b125'\n+__version__: str = '5.0.0b126'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b125'\n+__version__: str = '5.0.0b126'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b125'"],"goodparts":["__version__: str = '5.0.0b126'"]}],"source":"\n\n__version__: str='5.0.0b125' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b125'\n"}},"msg":"Release 5.0.0 Beta 126\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n\nParsed bundle size: 3.6 MB\n\n### TODO:\n* Optimize bundle size."},"af0df815ba57a90c568897d49ad92a965964b45c":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/af0df815ba57a90c568897d49ad92a965964b45c","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/af0df815ba57a90c568897d49ad92a965964b45c","sha":"af0df815ba57a90c568897d49ad92a965964b45c","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex ffbbebb2..08e204eb 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b126'\n+__version__: str = '5.0.0b127'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b126'\n+__version__: str = '5.0.0b127'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b126'"],"goodparts":["__version__: str = '5.0.0b127'"]}],"source":"\n\n__version__: str='5.0.0b126' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b126'\n"}},"msg":"Release 5.0.0 Beta 127\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n\nParsed bundle size: 3.6 MB\n\n### TODO:\n* Optimize bundle size."},"22d9466414300f0edeffba69b222276855c566ae":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/22d9466414300f0edeffba69b222276855c566ae","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/22d9466414300f0edeffba69b222276855c566ae","sha":"22d9466414300f0edeffba69b222276855c566ae","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 08e204eb..3c6c7b80 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b127'\n+__version__: str = '5.0.0b128'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b127'\n+__version__: str = '5.0.0b128'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b127'"],"goodparts":["__version__: str = '5.0.0b128'"]}],"source":"\n\n__version__: str='5.0.0b127' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b127'\n"}},"msg":"Release 5.0.0 Beta 128\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"63d24623c907b33528bca5005203e2531bd95ffb":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/63d24623c907b33528bca5005203e2531bd95ffb","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/63d24623c907b33528bca5005203e2531bd95ffb","sha":"63d24623c907b33528bca5005203e2531bd95ffb","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex ee6fa3c5..eb439a34 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b129'\n+__version__: str = '5.0.0b130'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b129'\n+__version__: str = '5.0.0b130'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b129'"],"goodparts":["__version__: str = '5.0.0b130'"]}],"source":"\n\n__version__: str='5.0.0b129' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b129'\n"}},"msg":"Release 5.0.0 Beta 130\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"f22d0eddd82c5d81934cc4732f4420c197df8118":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/f22d0eddd82c5d81934cc4732f4420c197df8118","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/f22d0eddd82c5d81934cc4732f4420c197df8118","sha":"f22d0eddd82c5d81934cc4732f4420c197df8118","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex eb439a34..ce7b3fad 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b130'\n+__version__: str = '5.0.0b131'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b130'\n+__version__: str = '5.0.0b131'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b130'"],"goodparts":["__version__: str = '5.0.0b131'"]}],"source":"\n\n__version__: str='5.0.0b130' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b130'\n"}},"msg":"Release 5.0.0 Beta 131\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"207a7121a28b255eb8274122dd89a9ca3192602d":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/207a7121a28b255eb8274122dd89a9ca3192602d","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/207a7121a28b255eb8274122dd89a9ca3192602d","sha":"207a7121a28b255eb8274122dd89a9ca3192602d","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex ce7b3fad..8e8130f2 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b131'\n+__version__: str = '5.0.0b132'\ndiff --git a\/vstutils\/models\/base.py b\/vstutils\/models\/base.py\nindex ecd7fd3a..3f69f2f1 100644\n--- a\/vstutils\/models\/base.py\n+++ b\/vstutils\/models\/base.py\n@@ -140,7 +140,6 @@ def update_cache_for_model(instance, **kwargs):\n \n \n def get_first_match_name(field_names, default=None):\n-    field_names = tuple(i for i in field_names if i != 'hidden')\n     return next(\n         (i for i in field_names if i in DEFAULT_VIEW_FIELD_NAMES),\n         next(iter(field_names[1:]), default)\n@@ -467,7 +466,11 @@ class Meta:\n             serializer = serializers['serializer_class']()\n             for field_name, field in cls.get_model_fields_mapping(iteration_filter_handler).items():\n                 if isinstance(field, ForeignKey):\n-                    related_name = get_first_match_name([f.name for f in field.related_model._meta.fields])\n+                    related_name = get_first_match_name([\n+                        f.name\n+                        for f in field.related_model._meta.fields\n+                        if isinstance(f, django_model_fields.CharField)\n+                    ])\n                     filterset_fields_types[field_name] = api_filters.CharFilter(\n                         method=api_filters.FkFilterHandler(\n                             related_pk=field.target_field.attname,\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b131'\n+__version__: str = '5.0.0b132'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b131'"],"goodparts":["__version__: str = '5.0.0b132'"]}],"source":"\n\n__version__: str='5.0.0b131' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b131'\n"},"\/vstutils\/models\/base.py":{"changes":[{"diff":"\n \n \n def get_first_match_name(field_names, default=None):\n-    field_names = tuple(i for i in field_names if i != 'hidden')\n     return next(\n         (i for i in field_names if i in DEFAULT_VIEW_FIELD_NAMES),\n         next(iter(field_names[1:]), default)\n","add":0,"remove":1,"filename":"\/vstutils\/models\/base.py","badparts":["    field_names = tuple(i for i in field_names if i != 'hidden')"],"goodparts":[]},{"diff":"\n             serializer = serializers['serializer_class']()\n             for field_name, field in cls.get_model_fields_mapping(iteration_filter_handler).items():\n                 if isinstance(field, ForeignKey):\n-                    related_name = get_first_match_name([f.name for f in field.related_model._meta.fields])\n+                    related_name = get_first_match_name([\n+                        f.name\n+                        for f in field.related_model._meta.fields\n+                        if isinstance(f, django_model_fields.CharField)\n+                    ])\n                     filterset_fields_types[field_name] = api_filters.CharFilter(\n                         method=api_filters.FkFilterHandler(\n                             related_pk=field.target_field.attname,\n","add":5,"remove":1,"filename":"\/vstutils\/models\/base.py","badparts":["                    related_name = get_first_match_name([f.name for f in field.related_model._meta.fields])"],"goodparts":["                    related_name = get_first_match_name([","                        f.name","                        for f in field.related_model._meta.fields","                        if isinstance(f, django_model_fields.CharField)","                    ])"]}],"source":"\n\nimport operator import uuid from functools import lru_cache, partial, reduce from itertools import chain from copy import deepcopy from django_filters import rest_framework as filters, filterset from django.core.cache import caches as django_caches from django.db.models.base import ModelBase from django.db.models import fields as django_model_fields from django.db.models.fields.related import ManyToManyField, OneToOneField, ForeignKey from django.utils.functional import SimpleLazyObject, lazy from django.db.models.signals import post_save, post_delete from django.dispatch import receiver from rest_framework.fields import ModelField, JSONField, CharField as drfCharField, ChoiceField from rest_framework.mixins import CreateModelMixin, UpdateModelMixin, DestroyModelMixin from vstutils.utils import translate as _ from..api.fields import( NamedBinaryFileInJsonField, NamedBinaryImageInJsonField, MultipleNamedBinaryFileInJsonField, MultipleNamedBinaryImageInJsonField, FkField, PasswordField, RelatedListField, ) from..utils import( import_class, apply_decorators, classproperty, get_if_lazy, raise_context_decorator_with_default, ) from..api import( base as api_base, filters as api_filters, serializers as api_serializers, decorators as api_decorators, ) from..api.filter_backends import DeepViewFilterBackend LAZY_MODEL=object() DEFAULT_VIEW_FIELD_NAMES=( 'name', 'title', 'username', 'email', 'key', ) EXCLUDED_FIELDS=( NamedBinaryFileInJsonField, NamedBinaryImageInJsonField, MultipleNamedBinaryFileInJsonField, MultipleNamedBinaryImageInJsonField, ModelField, JSONField, PasswordField, RelatedListField, ) CHANGE_MIXINS=( CreateModelMixin, UpdateModelMixin, DestroyModelMixin ) view_settings=( 'filter_backends', 'permission_classes', 'authentication_classes', 'throttle_classes', 'renderer_classes', 'parser_classes', ) default_extra_metadata: dict={ \"view_class\": None, \"serializer_class\": None, \"serializer_class_name\": None, \"list_fields\": None, \"override_list_fields\": None, \"detail_fields\": None, \"override_detail_fields\": None, \"view_field_name\": None, \"non_bulk_methods\": None, \"properties_groups\": None, \"extra_serializer_classes\": None, \"filterset_fields\": 'serializer', \"search_fields\": None, \"copy_attrs\": None, \"nested\": None, **dict(reduce(operator.add,[((f'pre_{i}', None),(i, None),(f'override_{i}', False)) for i in view_settings])) } def _translate_search_help_text(field_name, related_name): return _(\"Search by{}'s primary key or{}\").format(_(field_name), _(related_name)) def is_append_to_view(item): return bool(getattr(item[1], '_append_to_view', False)) def is_inherit_append_to_view(item): return bool(getattr(item[1], '_inherit', False)) and is_append_to_view(item) def get_append_to_view(items, handler=is_append_to_view): return dict(filter(handler, items)) def get_parents_append_to_view(mro_items): result={} for items in reversed(list(mro_items)): result.update(get_append_to_view(items, is_inherit_append_to_view)) return result def update_cache_for_model(instance, **kwargs): kwargs.get('cached_model_class', instance.__class__).set_etag_value() def get_first_match_name(field_names, default=None): field_names=tuple(i for i in field_names if i !='hidden') return next( (i for i in field_names if i in DEFAULT_VIEW_FIELD_NAMES), next(iter(field_names[1:]), default) ) def _get_unicode(obj): return obj.__unicode__() def _ensure_pk_in_fields(model_class, fields): if fields is None or fields=='__all__': return fields=list(fields) primary_key_name=model_class._meta.pk.attname if primary_key_name not in fields: fields.insert(0, primary_key_name) return fields def _import_class_if_string(value): if isinstance(value, str): return SimpleLazyObject(lambda: import_class(value)) return value def _load_settings_for_view(metadataobject): return list(map(_import_class_if_string, metadataobject)) def _get_setting_for_view(metatype, metadata, views): override=metadata[f'override_{metatype}'] metadataobject=metadata[metatype] or[] if metadataobject: metadataobject=_load_settings_for_view(metadataobject) pre_metadataobject=metadata[f'pre_{metatype}'] or[] if override: return pre_metadataobject +metadataobject if metadataobject or pre_metadataobject: for view in views: if hasattr(view, metatype): return list(chain(pre_metadataobject, getattr(view, metatype), metadataobject)) return pre_metadataobject +metadataobject def _result_with_arg_decorator(func): def wrapper(*args, **kwargs): return(func(*args, **kwargs), *args) return wrapper def _bool_first(item): return item and item[0] def _get_decorator(data): path, deco_kwargs=data assert not('model' in deco_kwargs and 'view' in deco_kwargs),( \"Invalid model configuration: \" f\"Unable to set 'model' and 'view' at the same time for path[{path}].\" ) if 'model' in deco_kwargs: model=_import_class_if_string(deco_kwargs.pop('model')) assert isinstance(model, ModelBaseClass),( f\"Invalid model type{type(model)} for path[{path}].\" ) deco_kwargs['view']=model.lazy_generated_view if 'arg' not in deco_kwargs: deco_kwargs['arg']=model._meta.pk.name else: deco_kwargs['view']=_import_class_if_string(deco_kwargs.pop('view')) return api_decorators.nested_view(path, **deco_kwargs) def get_proxy_labels(model): labels=[] if model._meta.proxy: labels.append(model._meta.proxy_for_model._meta.label) labels +=get_proxy_labels(model._meta.proxy_for_model) return labels class ApplyNestedDecorators(apply_decorators): def __init__(self, nested: dict): super().__init__( *map(_get_decorator, nested.items()) ) class ModelBaseClass(ModelBase, metaclass=classproperty.meta): \"\"\" Metaclass for all models. Read more in:class:`vstutils.models.BModel` \"\"\" def __new__(mcs, name, bases, attrs, **kwargs): if \"__slots__\" not in attrs: attrs['__slots__']=() if \"__unicode__\" in attrs and '__str__' not in attrs: attrs['__str__']=_get_unicode extra_metadata: dict={**default_extra_metadata} meta=None if \"Meta\" in attrs: meta=attrs['Meta'] extra_metadata['proxy']=getattr(meta, 'proxy', False) if not getattr(meta, 'abstract', False): for extra_name in filter(lambda y: hasattr(meta, y), map(lambda x: f'_{x}', extra_metadata.keys())): extra_metadata[extra_name[1:]]=getattr(meta, extra_name) attrs['__extra_metadata__']=deepcopy(extra_metadata) model_class=super(ModelBaseClass, mcs).__new__(mcs, name, bases, attrs, **kwargs) model_class.OriginalMeta=meta if meta is not None else model_class.Meta if hasattr(model_class, '__prepare_model__'): model_class.__prepare_model__() if getattr(model_class, '_cache_responses', False): receiver(post_save, sender=model_class)(update_cache_for_model) receiver(post_delete, sender=model_class)(update_cache_for_model) cache_related_labels=getattr(model_class, '_cache_related_labels',()) update_cache_for_model_related=partial(update_cache_for_model, cached_model_class=model_class) for label in cache_related_labels: receiver(post_save, sender=label)(update_cache_for_model_related) receiver(post_delete, sender=label)(update_cache_for_model_related) return model_class def get_proxy_labels(cls): return get_proxy_labels(cls) def get_api_cache_name(cls): return f'api_caching_table_{cls._meta.db_table}' def get_etag_value(cls): return str(django_caches['etag'].get_or_set(cls.get_api_cache_name(), str(uuid.uuid4()))) def set_etag_value(cls): new_value=str(uuid.uuid4()) django_caches['etag'].set(cls.get_api_cache_name(), new_value) return new_value @classproperty @lru_cache() def generated_view(cls): return cls.get_view_class() @classproperty @lru_cache() def lazy_generated_view(cls, **extra_metadata): return SimpleLazyObject(lambda: cls.get_view_class(**extra_metadata)) def get_model_fields_mapping(cls, filter_handler=lambda f: True, fields_getter=None): fields_getter=fields_getter if fields_getter is not None else lambda: cls._meta.fields return{ f.name: f for f in fields_getter() if filter_handler(f) } def get_all_view_fields_lazy(cls): return SimpleLazyObject( lambda: tuple(cls.get_model_fields_mapping( lambda f: not isinstance(f,(ManyToManyField, OneToOneField)) and not getattr(f, '_hide', False) ).keys()) ) def get_serializer_class( cls, serializer_class, serializer_class_name=None, fields=None, field_overrides=None, view_field_name=None, non_bulk_methods=None, metadata=None, ): attributes={} if view_field_name: attributes['_view_field_name']=view_field_name if serializer_class is None: serializer_class=api_serializers.VSTSerializer serializer_class=_import_class_if_string(serializer_class) serializer_class_name=cls.__name__ +'Serializer' if serializer_class_name is None else serializer_class_name if fields and fields !='__all__': fields=list(fields) else: fields=cls.get_all_view_fields_lazy() meta=type('Meta',(),{ 'model': cls, 'ref_name': serializer_class_name.replace('Serializer', ''), 'fields': fields }) serializer_class=get_if_lazy(serializer_class) properties_groups=(metadata if isinstance(metadata, dict) else cls.get_extra_metadata())['properties_groups'] translate_model=getattr(cls, '_translate_model', None) if properties_groups: attributes['_schema_properties_groups']=dict(**properties_groups) if non_bulk_methods: attributes['_non_bulk_methods']=non_bulk_methods if translate_model: attributes['_translate_model']=translate_model return type(serializer_class)( serializer_class_name, (serializer_class,), { \"Meta\": meta, **attributes, **(field_overrides or{}) } ) def _update_serializers(cls, metadata: dict, serializers: dict): \"\"\" Setup extra serializers. \"\"\" for serializer_name, extra_serializer_class in(metadata['extra_serializer_classes'] or{}).items(): if issubclass(extra_serializer_class, api_serializers.VSTSerializer) and \\ getattr(extra_serializer_class.Meta, 'model', None) is None: inject_from=getattr(extra_serializer_class.Meta, '__inject_from__', None) field_overrides={ n: f for n, f in(metadata.get(f'override_{inject_from}_fields',{}) or{}).items() if extra_serializer_class._declared_fields.get(n, None) is None } or None extra_serializer_class=cls.get_serializer_class( serializer_class=extra_serializer_class, serializer_class_name=extra_serializer_class.__name__, fields=_ensure_pk_in_fields( cls, getattr(extra_serializer_class.Meta, 'fields', None) or metadata.get(f'{inject_from}_fields', None) ), field_overrides=field_overrides, view_field_name=( metadata['view_field_name'] if inject_from is not None else getattr(extra_serializer_class, '_view_field_name', None) ), non_bulk_methods=( getattr(extra_serializer_class, '_non_bulk_methods', None) or metadata['non_bulk_methods'] if inject_from is not None and metadata['non_bulk_methods'] else getattr(extra_serializer_class, '_non_bulk_methods', None) ), metadata=metadata, ) elif issubclass(extra_serializer_class, api_serializers.VSTSerializer) and \\ getattr(extra_serializer_class.Meta, 'model', None) is LAZY_MODEL: meta_class=type(extra_serializer_class.Meta)( 'Meta', (extra_serializer_class.Meta,), {'model': cls} ) extra_serializer_class=type(extra_serializer_class)( extra_serializer_class.__name__, (extra_serializer_class,), {'Meta': meta_class} ) serializers[serializer_name]=extra_serializer_class def get_extra_metadata(cls): return cls.__extra_metadata__.copy() def get_list_serializer_name(cls, metadata=None): serializer_class_name=(metadata or cls.get_extra_metadata())['serializer_class_name'] if serializer_class_name is None: serializer_class_name=cls.__name__ +'Serializer' return serializer_class_name @raise_context_decorator_with_default(default=None) def _get_filterset_class(cls, filterset_fields, serializers): \"\"\" Logic with generating filterset class. Returns `None` if class is not generated by any reason. \"\"\" if filterset_fields=='serializer': serializer=serializers['serializer_class'] filterset_fields=serializer.Meta.fields if not isinstance(filterset_fields, str): model_fields=tuple(cls.get_model_fields_mapping().keys()) filterset_fields=tuple( f for f in filterset_fields if f in model_fields and not isinstance(serializer().fields.get(f), EXCLUDED_FIELDS) ) if filterset_fields: if isinstance(filterset_fields, dict): filterset_fields_list=tuple(filterset_fields.keys()) filterset_fields_types={k: v for k, v in filterset_fields.items() if v is not None} else: filterset_fields_list, filterset_fields_types=filterset_fields,{} class Meta: model=cls if not cls._meta.proxy else cls._meta.proxy_for_model fields=filterset_fields_list filter_base_classes=[] if 'id' in filterset_fields_list: filter_base_classes.append(api_filters.DefaultIDFilter) if 'name' in filterset_fields_list: filter_base_classes.append(api_filters.DefaultNameFilter) if not filter_base_classes: filter_base_classes.append(filters.FilterSet) iteration_filter_handler=( lambda f: f.name not in filterset_fields_types and f.name in filterset_fields_list ) serializer=serializers['serializer_class']() for field_name, field in cls.get_model_fields_mapping(iteration_filter_handler).items(): if isinstance(field, ForeignKey): related_name=get_first_match_name([f.name for f in field.related_model._meta.fields]) filterset_fields_types[field_name]=api_filters.CharFilter( method=api_filters.FkFilterHandler( related_pk=field.target_field.attname, related_name=related_name ), help_text=lazy(_translate_search_help_text)(field_name, related_name) ) elif isinstance(field, django_model_fields.BooleanField): filterset_fields_types[field_name]=filters.BooleanFilter() elif isinstance(serializer.fields.get(field_name), ChoiceField): filterset_fields_types[field_name]=filters.ChoiceFilter( choices=tuple(serializer.fields.get(field_name).choices.items()) ) return filterset.FilterSetMetaclass( f'{cls.__name__}FilterSetClass', tuple(filter_base_classes), {'Meta': Meta, **filterset_fields_types} ) def _get_search_fields(cls, serializer, fields=None): if fields is not None: yield from fields else: model_fields=cls.get_model_fields_mapping() serializer_fields=serializer().fields avail_fields=filter( tuple(model_fields.keys()).__contains__, tuple( k if v.source is None or v.source=='*' else v.source for k, v in serializer_fields.items() if not isinstance(v, EXCLUDED_FIELDS) ) ) for field in avail_fields: serializer_field=serializer_fields[field] if isinstance(serializer_field, FkField): yield f'{field}__{serializer_field.autocomplete_represent}' elif isinstance(serializer_field, drfCharField): yield field def _get_view_class(cls, view_base_class): \"\"\" Get one item of view base class for inheritance. \"\"\" if view_base_class is None: return api_base.ModelViewSet elif view_base_class=='read_only': return api_base.ReadOnlyModelViewSet elif view_base_class=='list_only': return api_base.ListOnlyModelViewSet elif view_base_class=='history': return api_base.HistoryModelViewSet elif isinstance(view_base_class, str): return import_class(view_base_class) return view_base_class def get_view_class(cls, **extra_options): \"\"\" Method which return autogenerated ViewSet based on model's Meta class. \"\"\" metadata=cls.get_extra_metadata() metadata.update(extra_options) list_fields=_ensure_pk_in_fields(cls, metadata['list_fields']) detail_fields=_ensure_pk_in_fields(cls, metadata['detail_fields'] or list_fields) view_attributes={'model': cls, **metadata.get('extra_view_attributes',{})} serializer_class=metadata['serializer_class'] serializers={ 'serializer_class': cls.get_serializer_class( serializer_class=serializer_class, serializer_class_name=cls.get_list_serializer_name(metadata), fields=list_fields, field_overrides=metadata['override_list_fields'] or{}, view_field_name=metadata['view_field_name'], non_bulk_methods=metadata['non_bulk_methods'], metadata=metadata, ) } detail_fields_override=metadata['override_detail_fields'] if not detail_fields_override and not metadata['detail_fields']: detail_fields_override=metadata['override_list_fields'] serializers['serializer_class_one']=cls.get_serializer_class( serializer_class=serializer_class, serializer_class_name=f'One{serializers[\"serializer_class\"].__name__}', fields=detail_fields, field_overrides=detail_fields_override or{}, view_field_name=metadata['view_field_name'], non_bulk_methods=metadata['non_bulk_methods'], metadata=metadata, ) cls._update_serializers(metadata, serializers) view_class_data=metadata['view_class'] if not isinstance(view_class_data,(tuple, list)): view_class_data=(view_class_data,) view_class=[cls._get_view_class(v) for v in view_class_data] if getattr(cls, '_cache_responses', False): view_class.insert(0, api_base.CachableHeadMixin) if metadata['copy_attrs']: view_attributes.update(map(lambda r:(f'copy_{r[0]}', r[1]), metadata['copy_attrs'].items())) view_class.append(api_base.CopyMixin) filterset_class=cls._get_filterset_class(metadata['filterset_fields'], serializers) if filterset_class is not None: view_attributes['filterset_class']=filterset_class if hasattr(cls, 'deep_parent_field'): metadata['pre_filter_backends']=metadata['pre_filter_backends'] or[] metadata['pre_filter_backends'].insert(0, DeepViewFilterBackend) get_setting_for_view=partial( _result_with_arg_decorator(_get_setting_for_view), metadata=metadata, views=view_class ) for value, name in filter(_bool_first, map(get_setting_for_view, view_settings)): view_attributes[name]=SimpleLazyObject(lambda obj=value: list(map(get_if_lazy, obj))) view_attributes['search_fields']=SimpleLazyObject(lambda: tuple(cls._get_search_fields( serializers['serializer_class_one'], metadata['search_fields'] ))) generated_view=type( f'{cls.__name__}ViewSet', tuple(view_class), { **view_attributes, **serializers, **get_append_to_view(vars(cls).items()), **get_parents_append_to_view([vars(c).items() for c in cls.mro()]), } ) generated_view=apply_decorators( *map(_import_class_if_string, getattr(cls, 'generated_view_decorators',[])) )(ApplyNestedDecorators(metadata['nested'] or{})(generated_view)) if hasattr(cls, 'deep_parent_field') and issubclass(generated_view, CHANGE_MIXINS): remote_name: str=cls.get_model_fields_mapping( fields_getter=cls._meta.get_fields )[cls.deep_parent_field].remote_field.related_name parent_view=type( f'Parent{cls.__name__}ViewSet', (generated_view,), {'deep_nested_subview': remote_name} ) return ApplyNestedDecorators({remote_name:{ 'view': generated_view, 'arg': cls._meta.pk.attname, 'manager_name': remote_name, 'allow_append': getattr(cls, 'deep_parent_allow_append', False), }})(parent_view) return generated_view ","sourceWithComments":"# pylint: disable=no-member,no-classmethod-decorator,protected-access\nimport operator\nimport uuid\nfrom functools import lru_cache, partial, reduce\nfrom itertools import chain\nfrom copy import deepcopy\n\nfrom django_filters import rest_framework as filters, filterset\nfrom django.core.cache import caches as django_caches\nfrom django.db.models.base import ModelBase\nfrom django.db.models import fields as django_model_fields\nfrom django.db.models.fields.related import ManyToManyField, OneToOneField, ForeignKey\nfrom django.utils.functional import SimpleLazyObject, lazy\nfrom django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom rest_framework.fields import ModelField, JSONField, CharField as drfCharField, ChoiceField\nfrom rest_framework.mixins import CreateModelMixin, UpdateModelMixin, DestroyModelMixin\nfrom vstutils.utils import translate as _\n\nfrom ..api.fields import (\n    NamedBinaryFileInJsonField,\n    NamedBinaryImageInJsonField,\n    MultipleNamedBinaryFileInJsonField,\n    MultipleNamedBinaryImageInJsonField,\n    FkField,\n    PasswordField,\n    RelatedListField,\n)\nfrom ..utils import (\n    import_class,\n    apply_decorators,\n    classproperty,\n    get_if_lazy,\n    raise_context_decorator_with_default,\n)\nfrom ..api import (\n    base as api_base,\n    filters as api_filters,\n    serializers as api_serializers,\n    decorators as api_decorators,\n)\nfrom ..api.filter_backends import DeepViewFilterBackend\n\n# Constants\nLAZY_MODEL = object()\nDEFAULT_VIEW_FIELD_NAMES = (\n    'name',\n    'title',\n    'username',\n    'email',\n    'key',\n)\nEXCLUDED_FIELDS = (\n    NamedBinaryFileInJsonField,\n    NamedBinaryImageInJsonField,\n    MultipleNamedBinaryFileInJsonField,\n    MultipleNamedBinaryImageInJsonField,\n    ModelField,\n    JSONField,\n    PasswordField,\n    RelatedListField,\n)\nCHANGE_MIXINS = (\n    CreateModelMixin,\n    UpdateModelMixin,\n    DestroyModelMixin\n)\n\nview_settings = (\n    'filter_backends',\n    'permission_classes',\n    'authentication_classes',\n    'throttle_classes',\n    'renderer_classes',\n    'parser_classes',\n)\n\ndefault_extra_metadata: dict = {\n    # list or class which is base for view\n    \"view_class\": None,\n    # base class for serializers\n    \"serializer_class\": None,\n    # name of openapi model\n    \"serializer_class_name\": None,\n    # tuple or list of fields in list view\n    \"list_fields\": None,\n    # dict which override fields types of list view serializer\n    \"override_list_fields\": None,\n    # tuple or list of fields in detail view\n    \"detail_fields\": None,\n    # dict which override fields types of detail view serializer\n    \"override_detail_fields\": None,\n    # name of default view field\n    \"view_field_name\": None,\n    # list or tuple of non-bulk methods from gui\n    \"non_bulk_methods\": None,\n    # dict which indicates about properties groups\n    \"properties_groups\": None,\n    # key-value of actions serializers (key - action, value - serializer class)\n    \"extra_serializer_classes\": None,\n    # tuple or list of filters on list\n    \"filterset_fields\": 'serializer',\n    # tuple or list of fields using for search requests\n    \"search_fields\": None,\n    # additional attrs which means that this view allowed to copy elements\n    \"copy_attrs\": None,\n    # key-value mapping with nested views (key - nested name, kwargs for nested decorator)\n    \"nested\": None,\n    # additional view's settings\n    **dict(reduce(operator.add, [((f'pre_{i}', None), (i, None), (f'override_{i}', False)) for i in view_settings]))\n}\n\n\n# Handlers\ndef _translate_search_help_text(field_name, related_name):\n    return _(\"Search by {}'s primary key or {}\").format(_(field_name), _(related_name))\n\n\ndef is_append_to_view(item):\n    return bool(getattr(item[1], '_append_to_view', False))\n\n\ndef is_inherit_append_to_view(item):\n    return bool(getattr(item[1], '_inherit', False)) and is_append_to_view(item)\n\n\ndef get_append_to_view(items, handler=is_append_to_view):\n    return dict(filter(handler, items))\n\n\ndef get_parents_append_to_view(mro_items):\n    result = {}\n    for items in reversed(list(mro_items)):\n        result.update(get_append_to_view(items, is_inherit_append_to_view))\n    return result\n\n\ndef update_cache_for_model(instance, **kwargs):\n    kwargs.get('cached_model_class', instance.__class__).set_etag_value()\n\n\ndef get_first_match_name(field_names, default=None):\n    field_names = tuple(i for i in field_names if i != 'hidden')\n    return next(\n        (i for i in field_names if i in DEFAULT_VIEW_FIELD_NAMES),\n        next(iter(field_names[1:]), default)\n    )\n\n\ndef _get_unicode(obj):\n    return obj.__unicode__()\n\n\ndef _ensure_pk_in_fields(model_class, fields):\n    if fields is None or fields == '__all__':\n        return\n    fields = list(fields)\n    primary_key_name = model_class._meta.pk.attname\n    if primary_key_name not in fields:\n        fields.insert(0, primary_key_name)\n    return fields\n\n\ndef _import_class_if_string(value):\n    if isinstance(value, str):\n        return SimpleLazyObject(lambda: import_class(value))\n    return value\n\n\ndef _load_settings_for_view(metadataobject):\n    return list(map(_import_class_if_string, metadataobject))\n\n\ndef _get_setting_for_view(metatype, metadata, views):\n    override = metadata[f'override_{metatype}']\n    metadataobject = metadata[metatype] or []\n    if metadataobject:\n        metadataobject = _load_settings_for_view(metadataobject)\n    pre_metadataobject = metadata[f'pre_{metatype}'] or []\n    if override:\n        return pre_metadataobject + metadataobject  # nocv\n    if metadataobject or pre_metadataobject:\n        for view in views:\n            if hasattr(view, metatype):  # pragma: no branch\n                return list(chain(pre_metadataobject, getattr(view, metatype), metadataobject))\n        return pre_metadataobject + metadataobject  # nocv\n\n\ndef _result_with_arg_decorator(func):\n    def wrapper(*args, **kwargs):\n        return (func(*args, **kwargs), *args)\n\n    return wrapper\n\n\ndef _bool_first(item):\n    return item and item[0]\n\n\ndef _get_decorator(data):\n    path, deco_kwargs = data\n\n    assert not ('model' in deco_kwargs and 'view' in deco_kwargs), (\n        \"Invalid model configuration: \"\n        f\"Unable to set 'model' and 'view' at the same time for path [{path}].\"\n    )\n    if 'model' in deco_kwargs:\n        model = _import_class_if_string(deco_kwargs.pop('model'))\n        assert isinstance(model, ModelBaseClass), (\n            f\"Invalid model type {type(model)} for path [{path}].\"\n        )\n        deco_kwargs['view'] = model.lazy_generated_view\n        if 'arg' not in deco_kwargs:\n            deco_kwargs['arg'] = model._meta.pk.name\n    else:\n        deco_kwargs['view'] = _import_class_if_string(deco_kwargs.pop('view'))\n    return api_decorators.nested_view(path, **deco_kwargs)\n\n\ndef get_proxy_labels(model):\n    labels = []\n    if model._meta.proxy:\n        labels.append(model._meta.proxy_for_model._meta.label)\n        labels += get_proxy_labels(model._meta.proxy_for_model)\n    return labels\n\n\n# Classes\nclass ApplyNestedDecorators(apply_decorators):\n    def __init__(self, nested: dict):\n        super().__init__(\n            *map(_get_decorator, nested.items())\n        )\n\n\nclass ModelBaseClass(ModelBase, metaclass=classproperty.meta):\n    \"\"\"\n    Metaclass for all models. Read more in :class:`vstutils.models.BModel`\n    \"\"\"\n\n    def __new__(mcs, name, bases, attrs, **kwargs):\n        if \"__slots__\" not in attrs:\n            attrs['__slots__'] = ()\n        if \"__unicode__\" in attrs and '__str__' not in attrs:\n            attrs['__str__'] = _get_unicode\n        extra_metadata: dict = {**default_extra_metadata}\n        meta = None\n        if \"Meta\" in attrs:\n            meta = attrs['Meta']\n            extra_metadata['proxy'] = getattr(meta, 'proxy', False)\n            if not getattr(meta, 'abstract', False):\n                for extra_name in filter(lambda y: hasattr(meta, y), map(lambda x: f'_{x}', extra_metadata.keys())):\n                    extra_metadata[extra_name[1:]] = getattr(meta, extra_name)\n        attrs['__extra_metadata__'] = deepcopy(extra_metadata)\n        model_class = super(ModelBaseClass, mcs).__new__(mcs, name, bases, attrs, **kwargs)\n        model_class.OriginalMeta = meta if meta is not None else model_class.Meta\n        if hasattr(model_class, '__prepare_model__'):\n            model_class.__prepare_model__()\n        if getattr(model_class, '_cache_responses', False):\n            receiver(post_save, sender=model_class)(update_cache_for_model)\n            receiver(post_delete, sender=model_class)(update_cache_for_model)\n            cache_related_labels = getattr(model_class, '_cache_related_labels', ())\n            update_cache_for_model_related = partial(update_cache_for_model, cached_model_class=model_class)\n            for label in cache_related_labels:\n                receiver(post_save, sender=label)(update_cache_for_model_related)\n                receiver(post_delete, sender=label)(update_cache_for_model_related)\n        return model_class\n\n    def get_proxy_labels(cls):\n        return get_proxy_labels(cls)  # nocv\n\n    def get_api_cache_name(cls):\n        return f'api_caching_table_{cls._meta.db_table}'\n\n    def get_etag_value(cls):\n        # pylint: disable=no-value-for-parameter\n        return str(django_caches['etag'].get_or_set(cls.get_api_cache_name(), str(uuid.uuid4())))\n\n    def set_etag_value(cls):\n        # pylint: disable=no-value-for-parameter\n        new_value = str(uuid.uuid4())\n        django_caches['etag'].set(cls.get_api_cache_name(), new_value)\n        return new_value\n\n    @classproperty\n    @lru_cache()\n    def generated_view(cls):\n        # pylint: disable=no-value-for-parameter\n        return cls.get_view_class()\n\n    @classproperty\n    @lru_cache()\n    def lazy_generated_view(cls, **extra_metadata):\n        # pylint: disable=unnecessary-lambda,no-value-for-parameter\n        return SimpleLazyObject(lambda: cls.get_view_class(**extra_metadata))\n\n    def get_model_fields_mapping(cls, filter_handler=lambda f: True, fields_getter=None):\n        fields_getter = fields_getter if fields_getter is not None else lambda: cls._meta.fields\n        return {\n            f.name: f\n            for f in fields_getter()\n            if filter_handler(f)\n        }\n\n    def get_all_view_fields_lazy(cls):\n        return SimpleLazyObject(\n            lambda: tuple(cls.get_model_fields_mapping(\n                lambda f: not isinstance(f, (ManyToManyField, OneToOneField)) and not getattr(f, '_hide', False)\n            ).keys())\n        )\n\n    def get_serializer_class(  # noqa: CFQ002\n            cls,\n            serializer_class,\n            serializer_class_name=None,\n            fields=None,\n            field_overrides=None,\n            view_field_name=None,\n            non_bulk_methods=None,\n            metadata=None,\n    ):\n        # pylint: disable=no-value-for-parameter,too-many-arguments\n        attributes = {}\n\n        if view_field_name:\n            attributes['_view_field_name'] = view_field_name\n\n        if serializer_class is None:\n            serializer_class = api_serializers.VSTSerializer\n\n        serializer_class = _import_class_if_string(serializer_class)\n\n        serializer_class_name = cls.__name__ + 'Serializer' if serializer_class_name is None else serializer_class_name\n\n        if fields and fields != '__all__':\n            fields = list(fields)\n        else:\n            fields = cls.get_all_view_fields_lazy()\n\n        meta = type('Meta', (), {\n            'model': cls,\n            'ref_name': serializer_class_name.replace('Serializer', ''),\n            'fields': fields\n        })\n\n        serializer_class = get_if_lazy(serializer_class)\n        properties_groups = (metadata if isinstance(metadata, dict) else cls.get_extra_metadata())['properties_groups']\n        translate_model = getattr(cls, '_translate_model', None)\n\n        if properties_groups:\n            attributes['_schema_properties_groups'] = dict(**properties_groups)\n\n        if non_bulk_methods:\n            attributes['_non_bulk_methods'] = non_bulk_methods\n\n        if translate_model:\n            attributes['_translate_model'] = translate_model\n\n        return type(serializer_class)(\n            serializer_class_name,\n            (serializer_class,),\n            {\n                \"Meta\": meta,\n                **attributes,\n                **(field_overrides or {})\n            }\n        )\n\n    def _update_serializers(cls, metadata: dict, serializers: dict):\n        \"\"\"\n        Setup extra serializers.\n        \"\"\"\n        for serializer_name, extra_serializer_class in (metadata['extra_serializer_classes'] or {}).items():\n            if issubclass(extra_serializer_class, api_serializers.VSTSerializer) and \\\n                    getattr(extra_serializer_class.Meta, 'model', None) is None:\n                inject_from = getattr(extra_serializer_class.Meta, '__inject_from__', None)\n                field_overrides = {\n                    n: f\n                    for n, f in (metadata.get(f'override_{inject_from}_fields', {}) or {}).items()\n                    if extra_serializer_class._declared_fields.get(n, None) is None\n                } or None\n                extra_serializer_class = cls.get_serializer_class(  # pylint: disable=no-value-for-parameter\n                    serializer_class=extra_serializer_class,\n                    serializer_class_name=extra_serializer_class.__name__,\n                    fields=_ensure_pk_in_fields(\n                        cls,\n                        getattr(extra_serializer_class.Meta, 'fields', None) or\n                        metadata.get(f'{inject_from}_fields', None)\n                    ),\n                    field_overrides=field_overrides,\n                    view_field_name=(\n                        metadata['view_field_name']\n                        if inject_from is not None\n                        else getattr(extra_serializer_class, '_view_field_name', None)\n                    ),\n                    non_bulk_methods=(\n                        getattr(extra_serializer_class, '_non_bulk_methods', None) or metadata['non_bulk_methods']\n                        if inject_from is not None and metadata['non_bulk_methods']\n                        else getattr(extra_serializer_class, '_non_bulk_methods', None)\n                    ),\n                    metadata=metadata,\n                )\n            elif issubclass(extra_serializer_class, api_serializers.VSTSerializer) and \\\n                    getattr(extra_serializer_class.Meta, 'model', None) is LAZY_MODEL:\n                meta_class = type(extra_serializer_class.Meta)(\n                    'Meta',\n                    (extra_serializer_class.Meta,),\n                    {'model': cls}\n                )\n                extra_serializer_class = type(extra_serializer_class)(\n                    extra_serializer_class.__name__,\n                    (extra_serializer_class,),\n                    {'Meta': meta_class}\n                )\n            serializers[serializer_name] = extra_serializer_class\n\n    def get_extra_metadata(cls):\n        return cls.__extra_metadata__.copy()\n\n    def get_list_serializer_name(cls, metadata=None):\n        # pylint: disable=no-value-for-parameter\n        serializer_class_name = (metadata or cls.get_extra_metadata())['serializer_class_name']\n        if serializer_class_name is None:\n            serializer_class_name = cls.__name__ + 'Serializer'\n        return serializer_class_name\n\n    @raise_context_decorator_with_default(default=None)\n    def _get_filterset_class(cls, filterset_fields, serializers):\n        \"\"\"\n        Logic with generating filterset class. Returns `None` if class is not generated by any reason.\n        \"\"\"\n        if filterset_fields == 'serializer':\n            serializer = serializers['serializer_class']\n            filterset_fields = serializer.Meta.fields\n\n            if not isinstance(filterset_fields, str):  # pragma: no branch\n                model_fields = tuple(cls.get_model_fields_mapping().keys())  # pylint: disable=no-value-for-parameter\n                # fields are added to tuple if field in model_fields and not in EXCLUDED_FIELDS\n                filterset_fields = tuple(\n                    f for f in filterset_fields if f in model_fields and\n                    not isinstance(serializer().fields.get(f), EXCLUDED_FIELDS)\n                )\n\n        if filterset_fields:\n\n            if isinstance(filterset_fields, dict):\n                filterset_fields_list = tuple(filterset_fields.keys())\n                filterset_fields_types = {k: v for k, v in filterset_fields.items() if v is not None}\n            else:\n                filterset_fields_list, filterset_fields_types = filterset_fields, {}\n\n            class Meta:\n                model = cls if not cls._meta.proxy else cls._meta.proxy_for_model\n                fields = filterset_fields_list\n\n            filter_base_classes = []\n            if 'id' in filterset_fields_list:\n                filter_base_classes.append(api_filters.DefaultIDFilter)\n            if 'name' in filterset_fields_list:\n                filter_base_classes.append(api_filters.DefaultNameFilter)\n            if not filter_base_classes:\n                filter_base_classes.append(filters.FilterSet)\n\n            iteration_filter_handler = (\n                lambda f: f.name not in filterset_fields_types and f.name in filterset_fields_list\n            )\n            serializer = serializers['serializer_class']()\n            for field_name, field in cls.get_model_fields_mapping(iteration_filter_handler).items():\n                if isinstance(field, ForeignKey):\n                    related_name = get_first_match_name([f.name for f in field.related_model._meta.fields])\n                    filterset_fields_types[field_name] = api_filters.CharFilter(\n                        method=api_filters.FkFilterHandler(\n                            related_pk=field.target_field.attname,\n                            related_name=related_name\n                        ),\n                        help_text=lazy(_translate_search_help_text)(field_name, related_name)\n                    )\n                elif isinstance(field, django_model_fields.BooleanField):\n                    filterset_fields_types[field_name] = filters.BooleanFilter()\n                elif isinstance(serializer.fields.get(field_name), ChoiceField):\n                    filterset_fields_types[field_name] = filters.ChoiceFilter(\n                        choices=tuple(serializer.fields.get(field_name).choices.items())\n                    )\n\n            return filterset.FilterSetMetaclass(\n                f'{cls.__name__}FilterSetClass',\n                tuple(filter_base_classes),\n                {'Meta': Meta, **filterset_fields_types}\n            )\n\n    def _get_search_fields(cls, serializer, fields=None):\n        if fields is not None:\n            yield from fields\n        else:\n            model_fields = cls.get_model_fields_mapping()  # pylint: disable=no-value-for-parameter\n            serializer_fields = serializer().fields\n            avail_fields = filter(\n                tuple(model_fields.keys()).__contains__,\n                tuple(\n                    k if v.source is None or v.source == '*' else v.source\n                    for k, v in serializer_fields.items()\n                    if not isinstance(v, EXCLUDED_FIELDS)\n                )\n            )\n            for field in avail_fields:\n                serializer_field = serializer_fields[field]\n                if isinstance(serializer_field, FkField):\n                    yield f'{field}__{serializer_field.autocomplete_represent}'\n                elif isinstance(serializer_field, drfCharField):\n                    yield field\n\n    def _get_view_class(cls, view_base_class):\n        \"\"\"\n        Get one item of view base class for inheritance.\n        \"\"\"\n        if view_base_class is None:\n            return api_base.ModelViewSet\n        elif view_base_class == 'read_only':\n            return api_base.ReadOnlyModelViewSet\n        elif view_base_class == 'list_only':\n            return api_base.ListOnlyModelViewSet\n        elif view_base_class == 'history':\n            return api_base.HistoryModelViewSet  # nocv\n        elif isinstance(view_base_class, str):\n            return import_class(view_base_class)\n        return view_base_class\n\n    def get_view_class(cls, **extra_options):  # noqa: CFQ001\n        \"\"\"\n        Method which return autogenerated ViewSet based on model's Meta class.\n        \"\"\"\n        # pylint: disable=no-value-for-parameter\n        metadata = cls.get_extra_metadata()\n        metadata.update(extra_options)\n        list_fields = _ensure_pk_in_fields(cls, metadata['list_fields'])\n        detail_fields = _ensure_pk_in_fields(cls, metadata['detail_fields'] or list_fields)\n\n        view_attributes = {'model': cls, **metadata.get('extra_view_attributes', {})}\n\n        serializer_class = metadata['serializer_class']\n        serializers = {\n            'serializer_class': cls.get_serializer_class(  # pylint: disable=no-value-for-parameter\n                serializer_class=serializer_class,\n                serializer_class_name=cls.get_list_serializer_name(metadata),  # pylint: disable=no-value-for-parameter\n                fields=list_fields,\n                field_overrides=metadata['override_list_fields'] or {},\n                view_field_name=metadata['view_field_name'],\n                non_bulk_methods=metadata['non_bulk_methods'],\n                metadata=metadata,\n            )\n        }\n        detail_fields_override = metadata['override_detail_fields']\n        if not detail_fields_override and not metadata['detail_fields']:\n            detail_fields_override = metadata['override_list_fields']\n\n        serializers['serializer_class_one'] = cls.get_serializer_class(  # pylint: disable=no-value-for-parameter\n            serializer_class=serializer_class,\n            serializer_class_name=f'One{serializers[\"serializer_class\"].__name__}',\n            fields=detail_fields,\n            field_overrides=detail_fields_override or {},\n            view_field_name=metadata['view_field_name'],\n            non_bulk_methods=metadata['non_bulk_methods'],\n            metadata=metadata,\n        )\n        cls._update_serializers(metadata, serializers)\n\n        view_class_data = metadata['view_class']\n\n        if not isinstance(view_class_data, (tuple, list)):\n            view_class_data = (view_class_data,)\n\n        view_class = [cls._get_view_class(v) for v in view_class_data]\n        if getattr(cls, '_cache_responses', False):\n            view_class.insert(0, api_base.CachableHeadMixin)\n\n        if metadata['copy_attrs']:\n            view_attributes.update(map(lambda r: (f'copy_{r[0]}', r[1]), metadata['copy_attrs'].items()))\n            view_class.append(api_base.CopyMixin)\n\n        filterset_class = cls._get_filterset_class(metadata['filterset_fields'], serializers)\n        if filterset_class is not None:\n            view_attributes['filterset_class'] = filterset_class\n\n        if hasattr(cls, 'deep_parent_field'):\n            metadata['pre_filter_backends'] = metadata['pre_filter_backends'] or []\n            metadata['pre_filter_backends'].insert(0, DeepViewFilterBackend)\n\n        get_setting_for_view = partial(\n            _result_with_arg_decorator(_get_setting_for_view),\n            metadata=metadata,\n            views=view_class\n        )\n        for value, name in filter(_bool_first, map(get_setting_for_view, view_settings)):\n            view_attributes[name] = SimpleLazyObject(lambda obj=value: list(map(get_if_lazy, obj)))\n\n        view_attributes['search_fields'] = SimpleLazyObject(lambda: tuple(cls._get_search_fields(\n            serializers['serializer_class_one'],\n            metadata['search_fields']\n        )))\n\n        generated_view = type(\n            f'{cls.__name__}ViewSet',\n            tuple(view_class),\n            {\n                **view_attributes,\n                **serializers,\n                **get_append_to_view(vars(cls).items()),\n                **get_parents_append_to_view([vars(c).items() for c in cls.mro()]),\n            }\n        )\n\n        generated_view = apply_decorators(\n            *map(_import_class_if_string, getattr(cls, 'generated_view_decorators', []))\n        )(ApplyNestedDecorators(metadata['nested'] or {})(generated_view))\n\n        if hasattr(cls, 'deep_parent_field') and issubclass(generated_view, CHANGE_MIXINS):\n            remote_name: str = cls.get_model_fields_mapping(\n                fields_getter=cls._meta.get_fields\n            )[cls.deep_parent_field].remote_field.related_name\n\n            parent_view = type(\n                f'Parent{cls.__name__}ViewSet',\n                (generated_view,),\n                {'deep_nested_subview': remote_name}\n            )\n            return ApplyNestedDecorators({remote_name: {\n                'view': generated_view,\n                'arg': cls._meta.pk.attname,\n                'manager_name': remote_name,\n                'allow_append': getattr(cls, 'deep_parent_allow_append', False),\n            }})(parent_view)\n\n        return generated_view\n"}},"msg":"Release 5.0.0 Beta 132\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"1bfbffb034a0f04da5e967bcb77874ce9cca66c6":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/1bfbffb034a0f04da5e967bcb77874ce9cca66c6","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/1bfbffb034a0f04da5e967bcb77874ce9cca66c6","sha":"1bfbffb034a0f04da5e967bcb77874ce9cca66c6","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 8e8130f2..56d60d96 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b132'\n+__version__: str = '5.0.0b133'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b132'\n+__version__: str = '5.0.0b133'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b132'"],"goodparts":["__version__: str = '5.0.0b133'"]}],"source":"\n\n__version__: str='5.0.0b132' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b132'\n"}},"msg":"Release 5.0.0 Beta 133\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Feature: Migrate to `.only()` optimization instead of `.values()`.\n* Fix: Infinite loading after registration confirmation.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"4b897602212a927b6a2fbefd24dc6c154fab4b76":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/4b897602212a927b6a2fbefd24dc6c154fab4b76","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/4b897602212a927b6a2fbefd24dc6c154fab4b76","sha":"4b897602212a927b6a2fbefd24dc6c154fab4b76","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 56d60d96..151daec5 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b133'\n+__version__: str = '5.0.0b134'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b133'\n+__version__: str = '5.0.0b134'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b133'"],"goodparts":["__version__: str = '5.0.0b134'"]}],"source":"\n\n__version__: str='5.0.0b133' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b133'\n"}},"msg":"Release 5.0.0 Beta 134\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Feature: Migrate to `.only()` optimization instead of `.values()`.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"43b0206a3067da93690b642e2e6dde86d9352484":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/43b0206a3067da93690b642e2e6dde86d9352484","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/43b0206a3067da93690b642e2e6dde86d9352484","sha":"43b0206a3067da93690b642e2e6dde86d9352484","keyword":"execution after redirect prevent","diff":"diff --git a\/test_src\/test_proj\/tests.py b\/test_src\/test_proj\/tests.py\nindex 32fc11e0..b3e07c90 100644\n--- a\/test_src\/test_proj\/tests.py\n+++ b\/test_src\/test_proj\/tests.py\n@@ -69,6 +69,7 @@\n     Host,\n     HostGroup,\n     List,\n+    ListOfFiles,\n     Author,\n     Post,\n     OverridenModelWithBinaryFiles,\n@@ -3498,7 +3499,7 @@ def test_fk_filtering(self):\n                 author_2_post_count,\n                 author_2_post_count,\n         )):\n-            self.assertEqual(results[pos]['status'], 200)\n+            self.assertEqual(results[pos]['status'], 200, results[pos]['data'])\n             self.assertEqual(results[pos]['data']['count'], count)\n         self.assertEqual(results[-1]['status'], 200, results[-1]['data'])\n         self.assertEqual(results[-1]['data']['count'], author_1_post_count)\n@@ -4616,6 +4617,13 @@ def test_custom_model_values_and_only(self):\n         self.assertEqual(list_qs.values('value').first(), {'value': \"0\"})\n         self.assertEqual(list_qs.only('value').first().value, \"0\")\n \n+        lf_qs = ListOfFiles.objects.all()\n+        first = lf_qs.defer('updated', 'value').first()\n+        self.assertEqual(first.id, 0)\n+        self.assertEqual(first.test, '1')\n+        self.assertEqual(first.value, '')\n+        self.assertEqual(lf_qs.first().value, 'File data')\n+\n     def test_custom(self):\n         self.client.logout()\n         results = self.bulk([\ndiff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 151daec5..22a30e40 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b134'\n+__version__: str = '5.0.0b135'\ndiff --git a\/vstutils\/api\/base.py b\/vstutils\/api\/base.py\nindex 7838cbd1..d36a5dc9 100644\n--- a\/vstutils\/api\/base.py\n+++ b\/vstutils\/api\/base.py\n@@ -348,14 +348,9 @@ def filter_queryset(self, queryset: QuerySet):\n                     f.name\n                     for f in queryset.model._meta.get_fields()\n                 }\n-                related_fields = {\n-                    f.name\n-                    for f in queryset.model._meta.get_fields()\n-                    if isinstance(f, models.ForeignObjectRel)\n-                }\n-                selectable_fields = tuple(read_fields.intersection(model_fields))\n-                if not related_fields.intersection(selectable_fields):\n-                    qs = qs.only(*selectable_fields)\n+                deferable_fields = model_fields - read_fields\n+                if deferable_fields:\n+                    return qs.defer(*deferable_fields)\n \n         return qs\n \ndiff --git a\/vstutils\/custom_model.py b\/vstutils\/custom_model.py\nindex a2c3194b..2c049555 100644\n--- a\/vstutils\/custom_model.py\n+++ b\/vstutils\/custom_model.py\n@@ -12,6 +12,7 @@\n \n from .models import BQuerySet, BaseModel\n from .models.base import ModelBaseClass\n+from .utils import raise_context\n from .tools import get_file_value, multikeysort  # pylint: disable=import-error\n \n \n@@ -120,9 +121,15 @@ def values_handler(self, unit):\n         # pylint: disable=no-member\n         return {f: unit.get(f) for f in self.fields}\n \n-    def construct_instance(self, data, model, only_fields):\n+    def construct_instance(self, data, model, only_fields, defer_fields):\n         if only_fields is not None:\n             data = {k: v for k, v in data.items() if k in only_fields}\n+        elif defer_fields is not None:\n+            data = {k: v for k, v in data.items() if k not in defer_fields}\n+        for field in model._meta.get_fields():\n+            if field.attname in data:\n+                with raise_context():\n+                    data[field.attname] = field.to_python(data[field.attname])\n         return model(**data)\n \n     def __iter__(self):\n@@ -155,7 +162,12 @@ def __iter__(self):\n         high = query.get('high_mark', len(model_data))\n         fields = getattr(self, 'fields', None)\n         if fields is None:\n-            handler = partial(self.construct_instance, model=model, only_fields=getattr(self, 'only_fields', None))\n+            handler = partial(\n+                self.construct_instance,\n+                model=model,\n+                only_fields=getattr(self, 'only_fields', None),\n+                defer_fields=getattr(self, 'defer_fields', None),\n+            )\n         else:\n             handler = self.values_handler\n         for data in model_data[low:high]:\n@@ -203,6 +215,11 @@ def only(self, *fields):\n         clone.__iterable_class__ = type('CustomModelIterable', (CustomModelIterable,), {'only_fields': fields})\n         return clone\n \n+    def defer(self, *fields):\n+        clone = self._clone()\n+        clone.__iterable_class__ = type('CustomModelIterable', (CustomModelIterable,), {'defer_fields': fields})\n+        return clone\n+\n \n class CustomModelBase(ModelBaseClass):\n     def __new__(mcs, name, bases, attrs, **kwargs):\n","message":"","files":{"\/test_src\/test_proj\/tests.py":{"changes":[{"diff":"\n                 author_2_post_count,\n                 author_2_post_count,\n         )):\n-            self.assertEqual(results[pos]['status'], 200)\n+            self.assertEqual(results[pos]['status'], 200, results[pos]['data'])\n             self.assertEqual(results[pos]['data']['count'], count)\n         self.assertEqual(results[-1]['status'], 200, results[-1]['data'])\n         self.assertEqual(results[-1]['data']['count'], author_1_post_count)\n","add":1,"remove":1,"filename":"\/test_src\/test_proj\/tests.py","badparts":["            self.assertEqual(results[pos]['status'], 200)"],"goodparts":["            self.assertEqual(results[pos]['status'], 200, results[pos]['data'])"]}]},"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b134'\n+__version__: str = '5.0.0b135","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b134'"],"goodparts":["__version__: str = '5.0.0b135"]}],"source":"\n\n__version__: str='5.0.0b134' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b134'\n"},"\/vstutils\/api\/base.py":{"changes":[{"diff":"\n                     f.name\n                     for f in queryset.model._meta.get_fields()\n                 }\n-                related_fields = {\n-                    f.name\n-                    for f in queryset.model._meta.get_fields()\n-                    if isinstance(f, models.ForeignObjectRel)\n-                }\n-                selectable_fields = tuple(read_fields.intersection(model_fields))\n-                if not related_fields.intersection(selectable_fields):\n-                    qs = qs.only(*selectable_fields)\n+                deferable_fields = model_fields - read_fields\n+                if deferable_fields:\n+                    return qs.defer(*deferable_fields)\n \n         return qs","add":3,"remove":8,"filename":"\/vstutils\/api\/base.py","badparts":["                related_fields = {","                    f.name","                    for f in queryset.model._meta.get_fields()","                    if isinstance(f, models.ForeignObjectRel)","                }","                selectable_fields = tuple(read_fields.intersection(model_fields))","                if not related_fields.intersection(selectable_fields):","                    qs = qs.only(*selectable_fields)"],"goodparts":["                deferable_fields = model_fields - read_fields","                if deferable_fields:","                    return qs.defer(*deferable_fields)"]}],"source":"\n\"\"\" Default ViewSets for web-api. \"\"\" import re import io import json import logging import inspect import traceback import datetime import typing as _t from functools import partial from copy import deepcopy import orjson from django.conf import settings from django.core import exceptions as djexcs from django.http.response import Http404, FileResponse, HttpResponseNotModified from django.db.models.query import QuerySet from django.db import transaction, models from django.utils.functional import cached_property, lazy from rest_framework.reverse import reverse from rest_framework import viewsets as vsets, views as rvs, exceptions, status from rest_framework.serializers import BaseSerializer from rest_framework.response import Response as RestResponse from rest_framework.request import Request from rest_framework.decorators import action from rest_framework.schemas import AutoSchema as DRFAutoSchema from rest_framework.utils.serializer_helpers import ReturnList, ReturnDict from..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator from. import responses, fields from.serializers import( ErrorSerializer, ValidationErrorSerializer, OtherErrorsSerializer, serializers ) default_methods: _t.List[_t.Text]=[ 'get', 'post', 'put', 'patch', 'delete', 'options', 'head' ] detail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text]=( 'create', 'retrieve', 'update', 'partial_update' ) main_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text]=('list',) +detail_actions query_check_params=( 'extra_select', 'annotations_select' ) default_cache_control_header_data='private, no-cache' non_optimizeable_fields=( fields.NamedBinaryFileInJsonField, serializers.PrimaryKeyRelatedField, serializers.BaseSerializer, serializers.SerializerMethodField, ) logger: logging.Logger=logging.getLogger(settings.VST_PROJECT) http404_re_translate=re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE) def _get_cleared(qs): return getattr(qs, 'cleared', lambda: qs)() def apply_translation(obj: _t.Any, trans_function: _t.Callable): recursive_call=partial(apply_translation, trans_function=trans_function) if isinstance(obj, dict): return{ trans_function(k): recursive_call(v) for k, v in obj.items() } elif isinstance(obj,(tuple, list)): return type(obj)(recursive_call(v) for v in obj) elif isinstance(obj,(exceptions.ErrorDetail, ReturnList, ReturnDict)): with raise_context_decorator_with_default(): obj=orjson.loads(json.dumps(obj)) return recursive_call(obj) return trans_function(obj) def exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]: traceback_str: _t.Text=traceback.format_exc() default_exc=(exceptions.APIException, djexcs.PermissionDenied) serializer_class=ErrorSerializer data: _t.Optional[_t.Dict[_t.Text, _t.Any]]=None code: _t.SupportsInt=status.HTTP_400_BAD_REQUEST lang=getattr(context.get('request'), 'language', None) translate=getattr(lang, 'translate', lambda text: text) if isinstance(exc, exceptions.APIException): if isinstance(exc.detail, ReturnDict): for key, value in exc.detail.items(): exc.detail[key]=apply_translation(value, translate) else: exc.detail=apply_translation(exc.detail, translate) elif isinstance(exc, djexcs.PermissionDenied): data={\"detail\": translate(str(exc))} code=status.HTTP_403_FORBIDDEN logger.debug(traceback_str) elif isinstance(exc, Http404): text=getattr(exc, 'msg', str(exc)) with raise_context_decorator_with_default(): instance_type=http404_re_translate.match(text).group(1) if instance_type: instance_type=str(instance_type) instance_type_format=translate(instance_type.lower()) if instance_type.istitle(): instance_type_format=instance_type_format.title() text=translate(text.replace(instance_type, '{0}')).format(instance_type_format) elif text: text=translate(text) data={\"detail\": text} code=status.HTTP_404_NOT_FOUND logger.debug(traceback_str) elif isinstance(exc, djexcs.ValidationError): if hasattr(exc, 'error_dict'): errors=apply_translation(dict(exc), translate) elif hasattr(exc, 'error_list'): errors={'other_errors': apply_translation(list(exc), translate)} else: errors={'other_errors': apply_translation(str(exc), translate)} data={\"detail\": errors} serializer_class=ValidationErrorSerializer logger.debug(traceback_str) elif not isinstance(exc, default_exc) and isinstance(exc, Exception): data={ 'detail': translate(str(exc)), 'error_type': type(exc).__name__ } code=getattr(exc, 'status', code) serializer_class=OtherErrorsSerializer logger.debug(traceback_str) if data is not None: serializer=serializer_class(data=data) try: serializer.is_valid(raise_exception=True) except: logger.debug(\"Cannot serialize error data.\") else: return responses.BaseResponseClass(serializer.data, code) logger.info(traceback_str) if getattr(exc, 'status_code', 400) >=400 else None default_response=rvs.exception_handler(exc, context) if isinstance(exc, exceptions.NotAuthenticated): default_response[\"X-Anonymous\"]=\"true\" return default_response class AutoSchema(DRFAutoSchema): __slots__=() def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text: method_name: _t.Text=getattr(self.view, 'action', method.lower()) method_obj: _t.Optional[_t.Callable]=getattr(self.view, method_name, None) method_view: _t.Optional[_t.Type[rvs.APIView]]=( getattr(method_obj, '_nested_view', None) if method_obj else None ) method_view=get_if_lazy(method_view) if method_obj.__doc__: return method_obj.__doc__.strip() if not method_view: if not self.view.__class__.__doc__: model=getattr(self.view, 'model', None) if model is not None and model.__doc__: self.view.__class__.__doc__=model.__doc__ return super().get_description(path, method) method_view_obj=method_view() action=path.split('\/')[-2] submethod=getattr(method_view, action, None) if submethod.__doc__: return str(submethod.__doc__).strip() if method=='GET' and '{' not in path[:-1].split('\/')[-1]: action='list' elif method=='POST': action='create' elif method=='GET': action='retrieve' elif method=='PUT': action='update' elif method=='PATCH': action='partial_update' elif method=='DELETE': action='destroy' method_view_obj.action=action if method_view_obj.schema is None: return 'No description' return method_view_obj.schema.get_description(path, method) class QuerySetMixin(rvs.APIView): \"\"\" Instance REST operations. \"\"\" __slots__=() queryset: _t.Optional[QuerySet] _queryset: _t.Optional[QuerySet]=None model: _t.Optional[_t.Type[models.Model]]=None @classproperty def queryset(self) -> QuerySet: if self._queryset is not None: return _get_cleared(self._queryset) return _get_cleared(self.model.objects.all()) @queryset.setter def queryset(self, value): self._queryset=value def _base_get_queryset(self) -> QuerySet: assert self.queryset is not None,( \"'%s' should either include a `queryset` attribute, \" \"or override the `get_queryset()` method.\" % self.__class__.__name__ ) queryset=self.queryset if isinstance(queryset, QuerySet): queryset=queryset.all() return queryset def get_extra_queryset(self) -> _t.Optional[QuerySet]: return self.queryset def get_queryset(self) -> QuerySet: if self.queryset is None: assert self.model is not None,( \"'%s' should either include a `queryset` or `model` attribute,\" \" or override the `get_queryset()` method.\" % self.__class__.__name__ ) self.queryset=_get_cleared(self.model.objects.all()) self.queryset=self.get_extra_queryset() return self._base_get_queryset() class GenericViewSetMeta(type(vsets.GenericViewSet)): __slots__=() def __new__(mcs, name, bases, attrs): new_class=super().__new__(mcs, name, bases, attrs) for detail in(True, False): setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None) return new_class def __get_http_methods_attr_name(cls, detail): return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) class GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta): \"\"\" The base class for all views. Extends the standard features of the DRF class. Here are some of the possibilities: -Provides ``model`` attribute instead of ``queryset``. -Provides to set serializers for each action separately through a dictionary ``action_serializers`` or attributes starting with ``serializer_class_[action name]``. -Provides to specify a serializer for lists and detail views separately. -Optimizes the database query for GET requests, if possible, by selecting only the fields necessary for the serializer. \"\"\" __slots__=() optimize_get_by_values=settings.OPTIMIZE_GET_BY_VALUES optimize_get_by_values_actions=() select_related=False serializer_class: _t.Type[serializers.Serializer] _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]]=None model: _t.Optional[_t.Type[models.Model]]=None action_serializers: _t.Dict[_t.Text, serializers.Serializer]={} _nested_args: _t.Dict[_t.Text, _t.Any] _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]] nested_detail: bool def create_action_serializer(self, *args, **kwargs): \"\"\" A method that implements the standard logic for actions. It relies on the passed arguments to build logic. So, if the named argument data was passed, then the serializer will be validated and saved. :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed. Enabled by default. :type autosave: bool :param: data: Default serializer class argument with serializable data. Enables validation and saving. :type data: dict :param: instance: Default serializer class argument with serializable instance. :type instance: typing.Any :param custom_data: Dict with data which will passed to `validated_data` without validation. :type custom_data: dict :param serializer_class: Serializer class for this execution. May be usefull when request and response serializers is different. :type serializer_class: None,type[rest_framework.serializers.Serializer] :return: Ready serializer with default logic performed. :rtype: rest_framework.serializers.Serializer \"\"\" self.serializer_class=kwargs.pop('serializer_class', None) or self.get_serializer_class() save_kwargs=kwargs.pop('custom_data',{}) should_save=kwargs.pop('autosave', True) or save_kwargs serializer=self.get_serializer(*args, **kwargs) if 'data' in kwargs: serializer.is_valid(raise_exception=True) if should_save: serializer.save(**save_kwargs) return serializer def filter_for_filter_backends(self, backend): return getattr(backend, 'required', False) def filter_queryset(self, queryset: QuerySet): if hasattr(self, 'nested_name'): self.filter_backends=filter( self.filter_for_filter_backends, self.filter_backends ) qs=super().filter_queryset(queryset) if self.action in('list', 'retrieve') +self.optimize_get_by_values_actions and self.optimize_get_by_values: serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related: serializer=serializer_class() read_fields={f.field_name for f in serializer._readable_fields} model_fields={ f.name for f in queryset.model._meta.get_fields() } related_fields={ f.name for f in queryset.model._meta.get_fields() if isinstance(f, models.ForeignObjectRel) } selectable_fields=tuple(read_fields.intersection(model_fields)) if not related_fields.intersection(selectable_fields): qs=qs.only(*selectable_fields) return qs def get_serializer_class(self): \"\"\" Provides to setup serializer class for each action. \"\"\" lookup_field=self.lookup_url_kwarg or self.lookup_field or 'pk' action_name=getattr(self, 'action', None) serializer_class=getattr(self, f'serializer_class_{action_name}', None) if serializer_class: return serializer_class if action_name in self.action_serializers: serializer_class=self.action_serializers.get(action_name, None) if serializer_class: return serializer_class if action_name not in main_actions: view_func=getattr(self, action_name, None) if view_func is not None: serializer_class=getattr(view_func, 'kwargs',{}).get('serializer_class', None) if serializer_class: return serializer_class is_detail=( hasattr(self, 'serializer_class_one') and self.request and ( action_name in detail_actions or ( self.kwargs.get(lookup_field, False) and action_name in main_actions ) ) ) if is_detail: return self.serializer_class_one return super().get_serializer_class() def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer: \"\"\" Return the serializer instance that should be used for validating and deserializing input, and for serializing output. Provide to use:class:`django.http.StreamingHttpResponse` as serializer init. \"\"\" serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer): kwargs.setdefault('context', self.get_serializer_context()) return serializer_class(*args, **kwargs) def nested_allow_check(self): \"\"\" Just raise or pass. Used for nested views for easier access checking. \"\"\" @classmethod def get_view_methods(cls, detail=False) -> _t.List[_t.Text]: attr_name=''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) methods=getattr(cls, attr_name, None) if methods is not None: return methods methods=[] if not detail and hasattr(cls, 'create'): methods.append('post') if hasattr(cls, 'list') or hasattr(cls, 'retrieve'): methods.append('get') if detail and hasattr(cls, 'update'): methods.append('put') if detail and hasattr(cls, 'partial_update'): methods.append('patch') if detail and hasattr(cls, 'destroy'): methods.append('delete') setattr(cls, attr_name, methods) return methods @classmethod def get_extra_actions(cls): return super().get_extra_actions() @classmethod def as_view(cls, actions=None, **initkwargs): return super().as_view(actions, **initkwargs) class CachableHeadMixin(GenericViewSet): \"\"\" Mixin which cache GET responses. Uses standard HTTP-caching mechanism which response 304 when Etag match. .. warning:: This works only with models based on:class:`vstutils.models.BModel`. \"\"\" class NotModifiedException(exceptions.APIException): status_code=304 default_detail='' default_code='cached' @cached_property def model_class(self): return getattr(self, 'model', None) or self.queryset.model @cached_property @raise_context_decorator_with_default(default=False) def is_main_action(self): if hasattr(self, 'should_cache') and not self.should_cache(): return False return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None def get_etag_value(self, model_class, request): return( f'{model_class.get_etag_value()}' f'_' f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}' ) def check_etag(self, request): etag_data=self.get_etag_value(self.model_class, request) if request.method==\"GET\" and etag_data==str(request.headers.get(\"If-None-Match\", None)): raise self.NotModifiedException(\"\") def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse: result_response=super().finalize_response(request, response, *args, **kwargs) if self.is_main_action and 'ETag' not in result_response.headers: result_response.headers['ETag']=lazy(self.get_etag_value, str)(self.model_class, request) return result_response def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None: super().initial(request, *args, **kwargs) if self.is_main_action: self.check_etag(request) class CopyMixin(GenericViewSet): \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\" __slots__=() copy_prefix='copy-' copy_field_name='name' copy_related: _t.Iterable[_t.Text]=() def copy_instance(self, instance): new_instance=deepcopy(instance) new_instance.pk=None name=getattr(instance, self.copy_field_name, None) if isinstance(name, str): name=f'{self.copy_prefix}{name}' setattr(new_instance, self.copy_field_name, name) new_instance.save() for related_name in self.copy_related: new_related_manager=getattr(new_instance, related_name, None) if new_related_manager is not None: new_related_manager.set(getattr(instance, related_name).all()) return new_instance @action(methods=['post'], detail=True) @transaction.atomic() def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass: \"\"\" Endpoint which copy instance with deps. \"\"\" instance=self.copy_instance(self.get_object()) serializer=self.get_serializer(instance, data=request.data, partial=True) serializer.is_valid() serializer.save() return responses.HTTP_201_CREATED(serializer.data) class FileResponseRetrieveMixin(GenericViewSet): \"\"\" ViewSet mixin for retriving FileResponse from models with file fields data. Example: .. literalinclude::..\/test_src\/test_proj\/models\/files.py :lines: 1-22,59-77 \"\"\" __slots__=() instance_field_data: _t.Text instance_field_filename: _t.Text='filename' instance_field_timestamp: _t.Optional[_t.Text]=None cache_control_header_data: _t.Optional[_t.Text]=None serializer_class_retrieve=FileResponse def get_file_response_kwargs(self, instance): data=getattr(instance, self.instance_field_data) if isinstance(data, str): data=data.encode('utf-8') if isinstance(data,(bytes, bytearray)): data=io.BytesIO(data) return{ \"streaming_content\": data, \"as_attachment\": True, \"filename\": getattr(instance, self.instance_field_filename, ''), } @patch_gzip_response_decorator def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]: instance=self.get_object() instance_edit_timestamp=None if self.instance_field_timestamp: instance_edit: datetime.datetime=getattr(instance, self.instance_field_timestamp, None) instance_edit_timestamp=instance_edit.timestamp() if instance_edit else None if instance_edit_timestamp and instance_edit_timestamp==float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')): return HttpResponseNotModified() response: FileResponse=self.get_serializer(**self.get_file_response_kwargs(instance)) if self.instance_field_timestamp and instance_edit_timestamp: cache_control_header_data=getattr(self, 'cache_control_header_data', None) if cache_control_header_data is None: cache_control_header_data=default_cache_control_header_data response['Cache-Control']=cache_control_header_data response['ETag']=str(instance_edit_timestamp) return response class ModelViewSet(GenericViewSet, vsets.ModelViewSet): \"\"\" A viewset that provides CRUD actions under model. Inherited from:class:`.GenericViewSet`. :var model: DB model with data. :vartype model: vstutils.models.BModel :var serializer_class: Serializer for view of Model data. :vartype serializer_class: vstutils.api.serializers.VSTSerializer :var serializer_class_one: Serializer for view one instance of Model data. :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`. :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer Examples: .. sourcecode:: python from vstutils.api.base import ModelViewSet from. import serializers as sers class StageViewSet(ModelViewSet): model=sers.models.Stage serializer_class=sers.StageSerializer serializer_class_one=sers.StageSerializer \"\"\" __slots__=() class NonModelsViewSet(GenericViewSet): __slots__=() base_name=None def get_queryset(self) -> QuerySet: return QuerySet() class ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin): __slots__=() schema=None @property def methods(self) -> _t.Iterable[_t.Text]: def is_list_action(attr): if not inspect.isfunction(attr): return False elif not hasattr(attr, 'url_path'): return False elif getattr(attr, 'detail', True): return False return True return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action)) def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass: routes={ method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request) for method in self.methods } return responses.HTTP_200_OK(routes) class ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for readonly models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for list only models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin): \"\"\" Default viewset like ReadOnlyModelViewSet but for historical data (allow to delete, but can't create and update). Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() ","sourceWithComments":"\"\"\"\nDefault ViewSets for web-api.\n\"\"\"\n\nimport re\nimport io\nimport json\nimport logging\nimport inspect\nimport traceback\nimport datetime\nimport typing as _t\nfrom functools import partial\nfrom copy import deepcopy\n\nimport orjson\nfrom django.conf import settings\nfrom django.core import exceptions as djexcs\nfrom django.http.response import Http404, FileResponse, HttpResponseNotModified\nfrom django.db.models.query import QuerySet\nfrom django.db import transaction, models\nfrom django.utils.functional import cached_property, lazy\nfrom rest_framework.reverse import reverse\nfrom rest_framework import viewsets as vsets, views as rvs, exceptions, status\nfrom rest_framework.serializers import BaseSerializer\nfrom rest_framework.response import Response as RestResponse\nfrom rest_framework.request import Request\nfrom rest_framework.decorators import action\nfrom rest_framework.schemas import AutoSchema as DRFAutoSchema\nfrom rest_framework.utils.serializer_helpers import ReturnList, ReturnDict\n\nfrom ..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator\nfrom . import responses, fields\nfrom .serializers import (\n    ErrorSerializer,\n    ValidationErrorSerializer,\n    OtherErrorsSerializer,\n    serializers\n)\n\ndefault_methods: _t.List[_t.Text] = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'delete',\n    'options',\n    'head'\n]\ndetail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text] = (\n    'create',\n    'retrieve',\n    'update',\n    'partial_update'\n)\nmain_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text] = ('list',) + detail_actions\nquery_check_params = (\n    'extra_select',\n    'annotations_select'\n)\ndefault_cache_control_header_data = 'private, no-cache'\nnon_optimizeable_fields = (\n    fields.NamedBinaryFileInJsonField,\n    serializers.PrimaryKeyRelatedField,\n    serializers.BaseSerializer,\n    serializers.SerializerMethodField,\n)\nlogger: logging.Logger = logging.getLogger(settings.VST_PROJECT)\nhttp404_re_translate = re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE)\n\n\ndef _get_cleared(qs):\n    return getattr(qs, 'cleared', lambda: qs)()\n\n\ndef apply_translation(obj: _t.Any, trans_function: _t.Callable):\n    recursive_call = partial(apply_translation, trans_function=trans_function)\n    if isinstance(obj, dict):\n        return {\n            trans_function(k): recursive_call(v)\n            for k, v in obj.items()\n        }\n    elif isinstance(obj, (tuple, list)):\n        return type(obj)(recursive_call(v) for v in obj)\n    elif isinstance(obj, (exceptions.ErrorDetail, ReturnList, ReturnDict)):\n        with raise_context_decorator_with_default():\n            obj = orjson.loads(json.dumps(obj))\n            return recursive_call(obj)\n    return trans_function(obj)\n\n\ndef exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]:\n    # pylint: disable=too-many-branches\n    traceback_str: _t.Text = traceback.format_exc()\n    default_exc = (exceptions.APIException, djexcs.PermissionDenied)\n    serializer_class = ErrorSerializer\n    data: _t.Optional[_t.Dict[_t.Text, _t.Any]] = None\n    code: _t.SupportsInt = status.HTTP_400_BAD_REQUEST\n    lang = getattr(context.get('request'), 'language', None)\n    translate = getattr(lang, 'translate', lambda text: text)\n\n    if isinstance(exc, exceptions.APIException):\n        if isinstance(exc.detail, ReturnDict):\n            for key, value in exc.detail.items():\n                exc.detail[key] = apply_translation(value, translate)\n        else:\n            exc.detail = apply_translation(exc.detail, translate)\n\n    elif isinstance(exc, djexcs.PermissionDenied):  # pragma: no cover\n        data = {\"detail\": translate(str(exc))}\n        code = status.HTTP_403_FORBIDDEN\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, Http404):\n        text = getattr(exc, 'msg', str(exc))\n        with raise_context_decorator_with_default():\n            instance_type = http404_re_translate.match(text).group(1)  # type: ignore\n            if instance_type:\n                instance_type = str(instance_type)\n                instance_type_format = translate(instance_type.lower())\n                if instance_type.istitle():\n                    instance_type_format = instance_type_format.title()\n                text = translate(text.replace(instance_type, '{0}')).format(instance_type_format)\n            elif text:  # nocv\n                text = translate(text)\n        data = {\"detail\": text}\n        code = status.HTTP_404_NOT_FOUND\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, djexcs.ValidationError):\n        if hasattr(exc, 'error_dict'):  # nocv\n            errors = apply_translation(dict(exc), translate)  # type: ignore\n        elif hasattr(exc, 'error_list'):\n            errors = {'other_errors': apply_translation(list(exc), translate)}\n        else:  # nocv\n            errors = {'other_errors': apply_translation(str(exc), translate)}\n        data = {\"detail\": errors}\n        serializer_class = ValidationErrorSerializer\n        logger.debug(traceback_str)\n\n    elif not isinstance(exc, default_exc) and isinstance(exc, Exception):\n        data = {\n            'detail': translate(str(exc)),\n            'error_type': type(exc).__name__\n        }\n        code = getattr(exc, 'status', code)\n        serializer_class = OtherErrorsSerializer\n        logger.debug(traceback_str)\n\n    if data is not None:\n        serializer = serializer_class(data=data)\n        try:\n            serializer.is_valid(raise_exception=True)\n        except:  # nocv\n            logger.debug(\"Cannot serialize error data.\")\n        else:\n            return responses.BaseResponseClass(serializer.data, code)\n\n    logger.info(traceback_str) if getattr(exc, 'status_code', 400) >= 400 else None\n    default_response = rvs.exception_handler(exc, context)\n\n    if isinstance(exc, exceptions.NotAuthenticated):  # nocv\n        default_response[\"X-Anonymous\"] = \"true\"  # type: ignore\n\n    return default_response\n\n\nclass AutoSchema(DRFAutoSchema):\n    __slots__ = ()\n\n    def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text:\n        # pylint: disable=simplifiable-if-statement,redefined-outer-name\n        method_name: _t.Text = getattr(self.view, 'action', method.lower())\n        method_obj: _t.Optional[_t.Callable] = getattr(self.view, method_name, None)\n        method_view: _t.Optional[_t.Type[rvs.APIView]] = (\n            getattr(method_obj, '_nested_view', None)\n            if method_obj else None\n        )\n        method_view = get_if_lazy(method_view)\n\n        if method_obj.__doc__:\n            return method_obj.__doc__.strip()\n        if not method_view:\n            if not self.view.__class__.__doc__:\n                model = getattr(self.view, 'model', None)\n                if model is not None and model.__doc__:\n                    self.view.__class__.__doc__ = model.__doc__\n            return super().get_description(path, method)\n\n        method_view_obj = method_view()\n        action = path.split('\/')[-2]\n        submethod = getattr(method_view, action, None)\n        if submethod.__doc__:\n            return str(submethod.__doc__).strip()  # nocv\n        if method == 'GET' and '{' not in path[:-1].split('\/')[-1]:\n            action = 'list'\n        elif method == 'POST':\n            action = 'create'\n        elif method == 'GET':\n            action = 'retrieve'\n        elif method == 'PUT':\n            action = 'update'\n        elif method == 'PATCH':\n            action = 'partial_update'\n        elif method == 'DELETE':\n            action = 'destroy'\n        method_view_obj.action = action  # type: ignore\n        if method_view_obj.schema is None:\n            return 'No description'  # nocv\n        return method_view_obj.schema.get_description(path, method)  # type: ignore\n\n\nclass QuerySetMixin(rvs.APIView):\n    \"\"\"\n    Instance REST operations.\n    \"\"\"\n    __slots__ = ()\n    queryset: _t.Optional[QuerySet]\n    _queryset: _t.Optional[QuerySet] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n\n    @classproperty  # type: ignore\n    def queryset(self) -> QuerySet:\n        # pylint: disable=method-hidden,function-redefined\n        if self._queryset is not None:\n            return _get_cleared(self._queryset)\n        return _get_cleared(self.model.objects.all())\n\n    @queryset.setter  # type: ignore\n    def queryset(self, value):\n        self._queryset = value\n\n    def _base_get_queryset(self) -> QuerySet:\n        assert self.queryset is not None, (\n            \"'%s' should either include a `queryset` attribute, \"\n            \"or override the `get_queryset()` method.\"\n            % self.__class__.__name__\n        )\n\n        queryset = self.queryset\n        if isinstance(queryset, QuerySet):\n            # Ensure queryset is re-evaluated on each request.\n            queryset = queryset.all()\n        return queryset\n\n    def get_extra_queryset(self) -> _t.Optional[QuerySet]:\n        return self.queryset\n\n    def get_queryset(self) -> QuerySet:\n        if self.queryset is None:  # nocv\n            assert self.model is not None, (\n                \"'%s' should either include a `queryset` or `model` attribute,\"\n                \" or override the `get_queryset()` method.\"\n                % self.__class__.__name__\n            )\n            self.queryset = _get_cleared(self.model.objects.all())\n        self.queryset = self.get_extra_queryset()\n        return self._base_get_queryset()\n\n\nclass GenericViewSetMeta(type(vsets.GenericViewSet)):  # type: ignore\n    __slots__ = ()\n\n    def __new__(mcs, name, bases, attrs):\n        new_class = super().__new__(mcs, name, bases, attrs)\n        for detail in (True, False):\n            setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None)\n        return new_class\n\n    def __get_http_methods_attr_name(cls, detail):\n        return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n\n\nclass GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta):\n    \"\"\"\n    The base class for all views. Extends the standard features of the DRF class.\n    Here are some of the possibilities:\n\n    - Provides ``model`` attribute instead of ``queryset``.\n    - Provides to set serializers for each action separately through a dictionary ``action_serializers`` or\n      attributes starting with ``serializer_class_[action name]``.\n    - Provides to specify a serializer for lists and detail views separately.\n    - Optimizes the database query for GET requests, if possible,\n      by selecting only the fields necessary for the serializer.\n    \"\"\"\n    __slots__ = ()\n    optimize_get_by_values = settings.OPTIMIZE_GET_BY_VALUES\n    optimize_get_by_values_actions = ()\n    select_related = False\n    serializer_class: _t.Type[serializers.Serializer]\n    _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n    action_serializers: _t.Dict[_t.Text, serializers.Serializer] = {}\n    _nested_args: _t.Dict[_t.Text, _t.Any]\n    _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]]\n    nested_detail: bool\n\n    def create_action_serializer(self, *args, **kwargs):\n        \"\"\"\n        A method that implements the standard logic for actions.\n        It relies on the passed arguments to build logic.\n        So, if the named argument data was passed, then the serializer will be validated and saved.\n\n        :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed.\n                         Enabled by default.\n        :type autosave: bool\n        :param: data: Default serializer class argument with serializable data. Enables validation and saving.\n        :type data: dict\n        :param: instance: Default serializer class argument with serializable instance.\n        :type instance: typing.Any\n        :param custom_data: Dict with data which will passed to `validated_data` without validation.\n        :type custom_data: dict\n        :param serializer_class: Serializer class for this execution.\n                                 May be usefull when request and response serializers is different.\n        :type serializer_class: None,type[rest_framework.serializers.Serializer]\n        :return: Ready serializer with default logic performed.\n        :rtype: rest_framework.serializers.Serializer\n        \"\"\"\n        self.serializer_class = kwargs.pop('serializer_class', None) or self.get_serializer_class()\n        save_kwargs = kwargs.pop('custom_data', {})\n        should_save = kwargs.pop('autosave', True) or save_kwargs\n        serializer = self.get_serializer(*args, **kwargs)\n        if 'data' in kwargs:\n            serializer.is_valid(raise_exception=True)\n            if should_save:\n                serializer.save(**save_kwargs)\n        return serializer\n\n    def filter_for_filter_backends(self, backend):\n        return getattr(backend, 'required', False)\n\n    def filter_queryset(self, queryset: QuerySet):\n        if hasattr(self, 'nested_name'):\n            self.filter_backends = filter(  # type: ignore\n                self.filter_for_filter_backends,\n                self.filter_backends\n            )\n        qs = super().filter_queryset(queryset)\n\n        if self.action in ('list', 'retrieve') + self.optimize_get_by_values_actions and self.optimize_get_by_values:\n            # pylint: disable=protected-access\n\n            serializer_class = self.get_serializer_class()\n            if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related:\n                serializer = serializer_class()\n                read_fields = {f.field_name for f in serializer._readable_fields}\n                model_fields = {\n                    f.name\n                    for f in queryset.model._meta.get_fields()\n                }\n                related_fields = {\n                    f.name\n                    for f in queryset.model._meta.get_fields()\n                    if isinstance(f, models.ForeignObjectRel)\n                }\n                selectable_fields = tuple(read_fields.intersection(model_fields))\n                if not related_fields.intersection(selectable_fields):\n                    qs = qs.only(*selectable_fields)\n\n        return qs\n\n    def get_serializer_class(self):\n        \"\"\"\n        Provides to setup serializer class for each action.\n        \"\"\"\n        lookup_field = self.lookup_url_kwarg or self.lookup_field or 'pk'\n        action_name = getattr(self, 'action', None)\n\n        # Try to get overloaded serializer from 'action_serializers' or from attrs\n        serializer_class = getattr(self, f'serializer_class_{action_name}', None)\n        if serializer_class:\n            return serializer_class\n        if action_name in self.action_serializers:\n            serializer_class = self.action_serializers.get(action_name, None)\n            if serializer_class:\n                return serializer_class\n\n        if action_name not in main_actions:\n            view_func = getattr(self, action_name, None)\n            if view_func is not None:\n                serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n                if serializer_class:\n                    return serializer_class\n\n        is_detail = (\n            hasattr(self, 'serializer_class_one') and\n            self.request and\n            (\n                action_name in detail_actions or\n                (\n                    self.kwargs.get(lookup_field, False) and\n                    action_name in main_actions\n                )\n            )\n        )\n\n        # Get 'serializer_class_one' for detail operations\n        if is_detail:\n            return self.serializer_class_one  # pylint: disable=no-member\n        return super().get_serializer_class()\n\n    def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer:\n        \"\"\"\n        Return the serializer instance that should be used for validating and\n        deserializing input, and for serializing output.\n\n        Provide to use :class:`django.http.StreamingHttpResponse` as serializer init.\n        \"\"\"\n        serializer_class = self.get_serializer_class()\n        if issubclass(serializer_class, BaseSerializer):\n            kwargs.setdefault('context', self.get_serializer_context())\n        return serializer_class(*args, **kwargs)\n\n    def nested_allow_check(self):\n        \"\"\"\n        Just raise or pass. Used for nested views for easier access checking.\n        \"\"\"\n\n    @classmethod\n    def get_view_methods(cls, detail=False) -> _t.List[_t.Text]:\n        attr_name = ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n        methods = getattr(cls, attr_name, None)\n        if methods is not None:\n            return methods\n        methods = []\n        if not detail and hasattr(cls, 'create'):\n            methods.append('post')\n        if hasattr(cls, 'list') or hasattr(cls, 'retrieve'):\n            methods.append('get')\n        if detail and hasattr(cls, 'update'):\n            methods.append('put')\n        if detail and hasattr(cls, 'partial_update'):\n            methods.append('patch')\n        if detail and hasattr(cls, 'destroy'):\n            methods.append('delete')\n        setattr(cls, attr_name, methods)\n        return methods\n\n    @classmethod\n    def get_extra_actions(cls):\n        return super().get_extra_actions()\n\n    @classmethod\n    def as_view(cls, actions=None, **initkwargs):\n        return super().as_view(actions, **initkwargs)\n\n\nclass CachableHeadMixin(GenericViewSet):\n    \"\"\"\n    Mixin which cache GET responses.\n    Uses standard HTTP-caching mechanism which response 304 when Etag match.\n\n    .. warning::\n        This works only with models based on :class:`vstutils.models.BModel`.\n    \"\"\"\n\n    class NotModifiedException(exceptions.APIException):\n        status_code = 304\n        default_detail = ''\n        default_code = 'cached'\n\n    @cached_property\n    def model_class(self):\n        return getattr(self, 'model', None) or self.queryset.model\n\n    @cached_property\n    @raise_context_decorator_with_default(default=False)\n    def is_main_action(self):\n        if hasattr(self, 'should_cache') and not self.should_cache():\n            return False\n        return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None\n\n    def get_etag_value(self, model_class, request):\n        return (\n            f'{model_class.get_etag_value()}'\n            f'_'\n            f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}'\n        )\n\n    def check_etag(self, request):\n        etag_data = self.get_etag_value(self.model_class, request)  # type: ignore\n\n        if request.method == \"GET\" and etag_data == str(request.headers.get(\"If-None-Match\", None)):\n            raise self.NotModifiedException(\"\")\n        # TODO: Workflow with ETag on PUT\/PATCH\n\n    def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse:\n        result_response = super().finalize_response(request, response, *args, **kwargs)\n        if self.is_main_action and 'ETag' not in result_response.headers:\n            result_response.headers['ETag'] = lazy(self.get_etag_value, str)(self.model_class, request)\n        return result_response\n\n    def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None:\n        super().initial(request, *args, **kwargs)\n\n        if self.is_main_action:\n            self.check_etag(request)\n\n\nclass CopyMixin(GenericViewSet):\n    \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\"\n\n    __slots__ = ()\n    #: Value of prefix which will be added to new instance name.\n    copy_prefix = 'copy-'\n    #: Name of field which will get a prefix.\n    copy_field_name = 'name'\n    #: List of related names which will be copied to new instance.\n    copy_related: _t.Iterable[_t.Text] = ()\n\n    def copy_instance(self, instance):\n        new_instance = deepcopy(instance)\n        new_instance.pk = None\n        name = getattr(instance, self.copy_field_name, None)\n        if isinstance(name, str):\n            name = f'{self.copy_prefix}{name}'\n        setattr(new_instance, self.copy_field_name, name)\n        new_instance.save()\n        for related_name in self.copy_related:\n            new_related_manager = getattr(new_instance, related_name, None)\n            if new_related_manager is not None:\n                new_related_manager.set(getattr(instance, related_name).all())\n        return new_instance\n\n    @action(methods=['post'], detail=True)\n    @transaction.atomic()\n    def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass:\n        # pylint: disable=unused-argument\n        \"\"\"\n        Endpoint which copy instance with deps.\n        \"\"\"\n        instance = self.copy_instance(self.get_object())\n        serializer = self.get_serializer(instance, data=request.data, partial=True)\n        serializer.is_valid()\n        serializer.save()\n        return responses.HTTP_201_CREATED(serializer.data)\n\n\nclass FileResponseRetrieveMixin(GenericViewSet):\n    \"\"\"\n    ViewSet mixin for retriving FileResponse from models with file fields data.\n\n    Example:\n\n        .. literalinclude:: ..\/test_src\/test_proj\/models\/files.py\n           :lines: 1-22,59-77\n    \"\"\"\n    __slots__ = ()\n\n    instance_field_data: _t.Text\n    instance_field_filename: _t.Text = 'filename'\n    instance_field_timestamp: _t.Optional[_t.Text] = None\n    cache_control_header_data: _t.Optional[_t.Text] = None\n    serializer_class_retrieve = FileResponse\n\n    def get_file_response_kwargs(self, instance):\n        data = getattr(instance, self.instance_field_data)\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        if isinstance(data, (bytes, bytearray)):\n            data = io.BytesIO(data)\n        return {\n            \"streaming_content\": data,\n            \"as_attachment\": True,\n            \"filename\": getattr(instance, self.instance_field_filename, ''),\n        }\n\n    @patch_gzip_response_decorator\n    def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]:\n        instance = self.get_object()\n\n        instance_edit_timestamp = None\n        if self.instance_field_timestamp:\n            instance_edit: datetime.datetime = getattr(instance, self.instance_field_timestamp, None)\n            instance_edit_timestamp = instance_edit.timestamp() if instance_edit else None\n\n        if instance_edit_timestamp and instance_edit_timestamp == float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')):\n            return HttpResponseNotModified()\n\n        response: FileResponse = self.get_serializer(**self.get_file_response_kwargs(instance))  # type: ignore\n\n        if self.instance_field_timestamp and instance_edit_timestamp:\n            cache_control_header_data = getattr(self, 'cache_control_header_data', None)\n            if cache_control_header_data is None:\n                cache_control_header_data = default_cache_control_header_data\n            response['Cache-Control'] = cache_control_header_data\n            response['ETag'] = str(instance_edit_timestamp)\n        return response\n\n\nclass ModelViewSet(GenericViewSet, vsets.ModelViewSet):\n    # pylint: disable=useless-super-delegation\n\n    \"\"\"\n    A viewset that provides CRUD actions under model. Inherited from :class:`.GenericViewSet`.\n\n    :var model: DB model with data.\n    :vartype model: vstutils.models.BModel\n    :var serializer_class: Serializer for view of Model data.\n    :vartype serializer_class: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_one: Serializer for view one instance of Model data.\n    :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`.\n    :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer\n\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.api.base import ModelViewSet\n            from . import serializers as sers\n\n\n            class StageViewSet(ModelViewSet):\n                # This is difference with DRF:\n                # we use model instead of queryset\n                model = sers.models.Stage\n                # Serializer for list view (view for a list of Model instances\n                serializer_class = sers.StageSerializer\n                # Serializer for page view (view for one Model instance).\n                # This property is not required, if its value is the same as `serializer_class`.\n                serializer_class_one = sers.StageSerializer\n                # Allowed to set decorator to custom endpoint like this:\n                # serializer_class_create - for create method\n                # serializer_class_copy - for detail endpoint `copy`.\n                # etc...\n\n    \"\"\"\n\n    __slots__ = ()\n\n\nclass NonModelsViewSet(GenericViewSet):\n    __slots__ = ()\n    base_name = None\n\n    def get_queryset(self) -> QuerySet:\n        return QuerySet()  # nocv\n\n\nclass ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin):\n    # pylint: disable=abstract-method\n    __slots__ = ()\n    schema = None  # type: ignore\n\n    @property\n    def methods(self) -> _t.Iterable[_t.Text]:\n        def is_list_action(attr):\n            if not inspect.isfunction(attr):\n                return False\n            elif not hasattr(attr, 'url_path'):\n                return False\n            elif getattr(attr, 'detail', True):\n                return False\n            return True\n\n        return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action))\n\n    def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass:\n        routes = {\n            method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request)\n            for method in self.methods\n        }\n        return responses.HTTP_200_OK(routes)\n\n\nclass ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for readonly models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for list only models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin):\n    \"\"\"\n    Default viewset like ReadOnlyModelViewSet but for historical data\n    (allow to delete, but can't create and update).\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n"},"\/vstutils\/custom_model.py":{"changes":[{"diff":"\n         # pylint: disable=no-member\n         return {f: unit.get(f) for f in self.fields}\n \n-    def construct_instance(self, data, model, only_fields):\n+    def construct_instance(self, data, model, only_fields, defer_fields):\n         if only_fields is not None:\n             data = {k: v for k, v in data.items() if k in only_fields}\n+        elif defer_fields is not None:\n+            data = {k: v for k, v in data.items() if k not in defer_fields}\n+        for field in model._meta.get_fields():\n+            if field.attname in data:\n+                with raise_context():\n+                    data[field.attname] = field.to_python(data[field.attname])\n         return model(**data)\n \n     def __iter__(self):\n","add":7,"remove":1,"filename":"\/vstutils\/custom_model.py","badparts":["    def construct_instance(self, data, model, only_fields):"],"goodparts":["    def construct_instance(self, data, model, only_fields, defer_fields):","        elif defer_fields is not None:","            data = {k: v for k, v in data.items() if k not in defer_fields}","        for field in model._meta.get_fields():","            if field.attname in data:","                with raise_context():","                    data[field.attname] = field.to_python(data[field.attname])"]},{"diff":"\n         high = query.get('high_mark', len(model_data))\n         fields = getattr(self, 'fields', None)\n         if fields is None:\n-            handler = partial(self.construct_instance, model=model, only_fields=getattr(self, 'only_fields', None))\n+            handler = partial(\n+                self.construct_instance,\n+                model=model,\n+                only_fields=getattr(self, 'only_fields', None),\n+                defer_fields=getattr(self, 'defer_fields', None),\n+            )\n         else:\n             handler = self.values_handler\n         for data in model_data[low:high]:\n","add":6,"remove":1,"filename":"\/vstutils\/custom_model.py","badparts":["            handler = partial(self.construct_instance, model=model, only_fields=getattr(self, 'only_fields', None))"],"goodparts":["            handler = partial(","                self.construct_instance,","                model=model,","                only_fields=getattr(self, 'only_fields', None),","                defer_fields=getattr(self, 'defer_fields', None),","            )"]}],"source":"\n\nfrom copy import deepcopy from functools import partial from yaml import load try: from yaml import CSafeLoader as Loader except ImportError: from yaml import SafeLoader as Loader from django.db.models.query import ModelIterable from django.db.models.fields import CharField, TextField, IntegerField, BooleanField, AutoField from.models import BQuerySet, BaseModel from.models.base import ModelBaseClass from.tools import get_file_value, multikeysort class Query(dict): __slots__='queryset', 'combinator', 'is_sliced', 'select_for_update', 'select_related', 'empty' distinct_fields=False def __init__(self, queryset, *args, **kwargs): super().__init__(*args, **kwargs) self.queryset=queryset self.combinator=None self.is_sliced=False self.select_for_update=False self.select_related=False self['standard_ordering']=True @property def model(self): return self.queryset.model @property def standard_ordering(self): return self['standard_ordering'] @standard_ordering.setter def standard_ordering(self, value): self['standard_ordering']=bool(value) def chain(self): return self.clone() def clone(self): query=deepcopy(self) if 'custom_queryset_kwargs' in self: query['custom_queryset_kwargs']=self['custom_queryset_kwargs'] return query def _check_data(self, check_type, data): if getattr(self, 'empty', False): return False check_data=self.get(check_type,{}) if check_type=='exclude' and not check_data: return False meta=self.model._meta for filter_name, filter_data in check_data.items(): filter_name=filter_name.replace('__exact', '') filter_name__cleared=filter_name.split('__')[0] if filter_name__cleared=='pk': filter_name='__'.join( [meta.pk.attname] +filter_name.split('__')[1:] ) filter_name__cleared=meta.pk.attname try: value=data[filter_name__cleared] except KeyError: continue field=meta._forward_fields_map[filter_name__cleared] if isinstance(filter_data,(list, tuple, set)): filter_data=map(field.to_python, filter_data) else: filter_data=field.to_python(filter_data) if '__in' in filter_name and value not in filter_data: return False elif '__in' not in filter_name and value !=filter_data: return False return True def check_in_query(self, data): return self._check_data('filter', data) and not self._check_data('exclude', data) def set_empty(self): self.empty=True def set_limits(self, low: int=None, high: int=None): self['low_mark'], self['high_mark']=low, high self.is_sliced=True def has_results(self, *args, **kwargs): return bool(self.queryset.all()[:2]) def get_count(self, using): return len(self.queryset.all()) def can_filter(self): return self.get('low_mark', None) is None and self.get('high_mark', None) is None def clear_ordering(self, *args, **kwargs): self['ordering']=[] def add_ordering(self, *ordering): self['ordering']=ordering @property def order_by(self): return self.get('ordering',()) class CustomModelIterable(ModelIterable): __slots__=() def values_handler(self, unit): return{f: unit.get(f) for f in self.fields} def construct_instance(self, data, model, only_fields): if only_fields is not None: data={k: v for k, v in data.items() if k in only_fields} return model(**data) def __iter__(self): queryset=self.queryset model=queryset.model query=queryset.query model_data=model._get_data( chunked_fetch=self.chunked_fetch, **query.get('custom_queryset_kwargs',{}) ) if isinstance(model._meta.pk, AutoField): for idx, item in enumerate(model_data, 1): item[model._meta.pk.attname]=idx model_data=list(filter(query.check_in_query, model_data)) ordering=query.order_by if ordering: ordering=list(ordering) for idx, value in enumerate(ordering): if value in('pk', '-pk'): ordering[idx]=value.replace('pk', model._meta.pk.name) model_data=multikeysort( model_data, ordering, not query.standard_ordering ) elif not query.standard_ordering: model_data.reverse() low=query.get('low_mark', 0) high=query.get('high_mark', len(model_data)) fields=getattr(self, 'fields', None) if fields is None: handler=partial(self.construct_instance, model=model, only_fields=getattr(self, 'only_fields', None)) else: handler=self.values_handler for data in model_data[low:high]: yield handler(data) class CustomQuerySet(BQuerySet): __slots__=() custom_iterable_class=CustomModelIterable custom_query_class=Query def _filter_or_exclude(self, negate, *args, **kwargs): clone=self._chain() if negate: filter_type='exclude' else: filter_type='filter' clone.query[filter_type]=clone.query.get(filter_type,{}) clone.query[filter_type].update(kwargs) for q_arg in filter(lambda x: isinstance(x, dict), filter(bool, args)): clone.query[filter_type].update(q_arg) return clone _filter_or_exclude_inplace=_filter_or_exclude def last(self): return self.reverse().first() def first(self): return next(iter(self), None) def values(self, *fields, **expressions): assert not expressions, 'Expressions is not supported on custom non-database models.' clone=self._clone() clone.__iterable_class__=type('CustomModelIterableValues',(CustomModelIterable,),{'fields': fields}) return clone def setup_custom_queryset_kwargs(self, **kwargs): qs=self._chain() qs.query['custom_queryset_kwargs']=kwargs return qs def only(self, *fields): clone=self._clone() clone.__iterable_class__=type('CustomModelIterable',(CustomModelIterable,),{'only_fields': fields}) return clone class CustomModelBase(ModelBaseClass): def __new__(mcs, name, bases, attrs, **kwargs): new_class=super(CustomModelBase, mcs).__new__(mcs, name, bases, attrs, **kwargs) if not new_class._meta.abstract: pk_name=new_class._meta.pk.attname new_class.add_to_class( pk_name, property(new_class.get_pk_value, new_class.set_pk_value) ) return new_class class ListModel(BaseModel, metaclass=CustomModelBase): \"\"\" Custom model which uses a list of dicts with data(attribute `ListModel.data`) instead of database records. Useful when you have a simple list of data. Examples: .. sourcecode:: python from vstutils.custom_model import ListModel, CharField class Authors(ListModel): name=CharField(max_length=512) data=[ {\"name\": \"Sergey Klyuykov\"}, {\"name\": \"Michael Taran\"}, ] Sometimes, it may be necessary to switch the data source. For these purposes, you should use the `setup_custom_queryset_kwargs` function, which takes various named arguments, which are also passed to the data initialization function. One such argument for:class:`ListModel` is date_source, which takes any iterable object. Examples: .. sourcecode:: python from vstutils.custom_model import ListModel, CharField class Authors(ListModel): name=CharField(max_length=512) qs=Authors.objects.setup_custom_queryset_kwargs(data_source=[ {\"name\": \"Sergey Klyuykov\"}, {\"name\": \"Michael Taran\"}, ]) In this case, we setup source list via `setup_custom_queryset_kwargs` function, and any other chained call is going to work with this data. \"\"\" data=[] objects=CustomQuerySet.as_manager() class Meta: abstract=True def get_pk_value(self): return getattr( self, f'_{self.__class__._meta.pk.attname}', None ) def set_pk_value(self, value): setattr( self, f'_{self.__class__._meta.pk.attname}', value ) @classmethod def _get_data(cls, chunked_fetch=False, data_source=None): return deepcopy(cls.data if data_source is None else data_source) class FileModel(ListModel): \"\"\" Custom model which loads data from YAML-file instead of database. Path to the file stored in `FileModel.file_path` attribute. Examples: Source file stored in `\/etc\/authors.yaml` with content: .. sourcecode:: YAML -name: \"Sergey Klyuykov\" -name: \"Michael Taran\" Example: .. sourcecode:: python from vstutils.custom_model import FileModel, CharField class Authors(FileModel): name=CharField(max_length=512) file_path='\/etc\/authors.yaml' \"\"\" class Meta: abstract=True @classmethod def load_file_data(cls): return get_file_value(cls.file_path, strip=False) @classmethod def _get_data(cls, chunked_fetch=False): return load(cls.load_file_data(), Loader=Loader) ","sourceWithComments":"# pylint: disable=unused-import\nfrom copy import deepcopy\nfrom functools import partial\n\nfrom yaml import load\ntry:\n    from yaml import CSafeLoader as Loader\nexcept ImportError:  # nocv\n    from yaml import SafeLoader as Loader\nfrom django.db.models.query import ModelIterable\nfrom django.db.models.fields import CharField, TextField, IntegerField, BooleanField, AutoField    # noqa: F401\n\nfrom .models import BQuerySet, BaseModel\nfrom .models.base import ModelBaseClass\nfrom .tools import get_file_value, multikeysort  # pylint: disable=import-error\n\n\nclass Query(dict):\n    __slots__ = 'queryset', 'combinator', 'is_sliced', 'select_for_update', 'select_related', 'empty'\n    distinct_fields = False\n\n    def __init__(self, queryset, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.queryset = queryset\n        self.combinator = None\n        self.is_sliced = False\n        self.select_for_update = False\n        self.select_related = False\n        self['standard_ordering'] = True\n\n    @property\n    def model(self):\n        return self.queryset.model\n\n    @property\n    def standard_ordering(self):\n        return self['standard_ordering']\n\n    @standard_ordering.setter\n    def standard_ordering(self, value):\n        self['standard_ordering'] = bool(value)\n\n    def chain(self):\n        return self.clone()\n\n    def clone(self):\n        query = deepcopy(self)\n        if 'custom_queryset_kwargs' in self:\n            query['custom_queryset_kwargs'] = self['custom_queryset_kwargs']\n        return query\n\n    def _check_data(self, check_type, data):\n        # pylint: disable=protected-access\n        if getattr(self, 'empty', False):\n            return False\n        check_data = self.get(check_type, {})\n        if check_type == 'exclude' and not check_data:\n            return False\n        meta = self.model._meta\n        for filter_name, filter_data in check_data.items():\n            filter_name = filter_name.replace('__exact', '')\n            filter_name__cleared = filter_name.split('__')[0]\n            if filter_name__cleared == 'pk':\n                filter_name = '__'.join(\n                    [meta.pk.attname] + filter_name.split('__')[1:]\n                )\n                filter_name__cleared = meta.pk.attname\n            try:\n                value = data[filter_name__cleared]\n            except KeyError:\n                continue\n            field = meta._forward_fields_map[filter_name__cleared]\n            if isinstance(filter_data, (list, tuple, set)):\n                filter_data = map(field.to_python, filter_data)\n            else:\n                filter_data = field.to_python(filter_data)\n            if '__in' in filter_name and value not in filter_data:\n                return False\n            elif '__in' not in filter_name and value != filter_data:\n                return False\n        return True\n\n    def check_in_query(self, data):\n        return self._check_data('filter', data) and not self._check_data('exclude', data)\n\n    def set_empty(self):\n        self.empty = True\n\n    def set_limits(self, low: int = None, high: int = None):\n        self['low_mark'], self['high_mark'] = low, high\n        self.is_sliced = True\n\n    def has_results(self, *args, **kwargs):\n        # pylint: disable=unused-argument\n        return bool(self.queryset.all()[:2])\n\n    def get_count(self, using):\n        # pylint: disable=unused-argument\n        return len(self.queryset.all())\n\n    def can_filter(self):\n        return self.get('low_mark', None) is None and self.get('high_mark', None) is None\n\n    def clear_ordering(self, *args, **kwargs):\n        # pylint: disable=unused-argument\n        self['ordering'] = []\n\n    def add_ordering(self, *ordering):\n        self['ordering'] = ordering\n\n    @property\n    def order_by(self):\n        return self.get('ordering', ())\n\n\nclass CustomModelIterable(ModelIterable):\n    __slots__ = ()\n\n    def values_handler(self, unit):\n        # pylint: disable=no-member\n        return {f: unit.get(f) for f in self.fields}\n\n    def construct_instance(self, data, model, only_fields):\n        if only_fields is not None:\n            data = {k: v for k, v in data.items() if k in only_fields}\n        return model(**data)\n\n    def __iter__(self):\n        # pylint: disable=protected-access\n        queryset = self.queryset\n        model = queryset.model\n        query = queryset.query\n        model_data = model._get_data(\n            chunked_fetch=self.chunked_fetch,\n            **query.get('custom_queryset_kwargs', {})\n        )\n        if isinstance(model._meta.pk, AutoField):\n            for idx, item in enumerate(model_data, 1):\n                item[model._meta.pk.attname] = idx\n        model_data = list(filter(query.check_in_query, model_data))\n        ordering = query.order_by\n        if ordering:\n            ordering = list(ordering)\n            for idx, value in enumerate(ordering):\n                if value in ('pk', '-pk'):\n                    ordering[idx] = value.replace('pk', model._meta.pk.name)\n            model_data = multikeysort(\n                model_data,\n                ordering,\n                not query.standard_ordering\n            )\n        elif not query.standard_ordering:\n            model_data.reverse()\n        low = query.get('low_mark', 0)\n        high = query.get('high_mark', len(model_data))\n        fields = getattr(self, 'fields', None)\n        if fields is None:\n            handler = partial(self.construct_instance, model=model, only_fields=getattr(self, 'only_fields', None))\n        else:\n            handler = self.values_handler\n        for data in model_data[low:high]:\n            yield handler(data)\n\n\nclass CustomQuerySet(BQuerySet):\n    __slots__ = ()\n    custom_iterable_class = CustomModelIterable\n    custom_query_class = Query\n\n    def _filter_or_exclude(self, negate, *args, **kwargs):\n        clone = self._chain()\n        if negate:\n            filter_type = 'exclude'\n        else:\n            filter_type = 'filter'\n        clone.query[filter_type] = clone.query.get(filter_type, {})\n        clone.query[filter_type].update(kwargs)\n        for q_arg in filter(lambda x: isinstance(x, dict), filter(bool, args)):\n            clone.query[filter_type].update(q_arg)  # nocv\n        return clone\n\n    _filter_or_exclude_inplace = _filter_or_exclude\n\n    def last(self):\n        return self.reverse().first()\n\n    def first(self):\n        return next(iter(self), None)\n\n    def values(self, *fields, **expressions):\n        assert not expressions, 'Expressions is not supported on custom non-database models.'\n        clone = self._clone()\n        clone.__iterable_class__ = type('CustomModelIterableValues', (CustomModelIterable,), {'fields': fields})\n        return clone\n\n    def setup_custom_queryset_kwargs(self, **kwargs):\n        qs = self._chain()\n        qs.query['custom_queryset_kwargs'] = kwargs\n        return qs\n\n    def only(self, *fields):\n        clone = self._clone()\n        clone.__iterable_class__ = type('CustomModelIterable', (CustomModelIterable,), {'only_fields': fields})\n        return clone\n\n\nclass CustomModelBase(ModelBaseClass):\n    def __new__(mcs, name, bases, attrs, **kwargs):\n        new_class = super(CustomModelBase, mcs).__new__(mcs, name, bases, attrs, **kwargs)\n        if not new_class._meta.abstract:\n            pk_name = new_class._meta.pk.attname\n            new_class.add_to_class(\n                pk_name,\n                property(new_class.get_pk_value, new_class.set_pk_value)\n            )\n        return new_class\n\n\nclass ListModel(BaseModel, metaclass=CustomModelBase):\n    \"\"\"\n    Custom model which uses a list of dicts with data (attribute `ListModel.data`) instead of database records.\n    Useful when you have a simple list of data.\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.custom_model import ListModel, CharField\n\n\n            class Authors(ListModel):\n                name = CharField(max_length=512)\n\n                data = [\n                    {\"name\": \"Sergey Klyuykov\"},\n                    {\"name\": \"Michael Taran\"},\n                ]\n\n    Sometimes, it may be necessary to switch the data source. For these purposes,\n    you should use the `setup_custom_queryset_kwargs` function, which takes various named arguments,\n    which are also passed to the data initialization function.\n    One such argument for :class:`ListModel` is date_source, which takes any iterable object.\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.custom_model import ListModel, CharField\n\n\n            class Authors(ListModel):\n                name = CharField(max_length=512)\n\n            qs = Authors.objects.setup_custom_queryset_kwargs(data_source=[\n                {\"name\": \"Sergey Klyuykov\"},\n                {\"name\": \"Michael Taran\"},\n            ])\n\n    In this case, we setup source list via `setup_custom_queryset_kwargs` function, and any other chained call\n    is going to work with this data.\n    \"\"\"\n\n    #: List with data dicts. Empty by default.\n    data = []\n    objects = CustomQuerySet.as_manager()\n\n    class Meta:\n        abstract = True\n\n    def get_pk_value(self):\n        return getattr(\n            self,\n            f'_{self.__class__._meta.pk.attname}',\n            None\n        )\n\n    def set_pk_value(self, value):\n        setattr(\n            self,\n            f'_{self.__class__._meta.pk.attname}',\n            value\n        )\n\n    @classmethod\n    def _get_data(cls, chunked_fetch=False, data_source=None):\n        # pylint: disable=unused-argument\n        return deepcopy(cls.data if data_source is None else data_source)\n\n\nclass FileModel(ListModel):\n    \"\"\"\n    Custom model which loads data from YAML-file instead of database.\n    Path to the file stored in `FileModel.file_path` attribute.\n\n\n    Examples:\n        Source file stored in `\/etc\/authors.yaml` with content:\n\n        .. sourcecode:: YAML\n\n            - name: \"Sergey Klyuykov\"\n            - name: \"Michael Taran\"\n\n        Example:\n\n        .. sourcecode:: python\n\n            from vstutils.custom_model import FileModel, CharField\n\n\n            class Authors(FileModel):\n                name = CharField(max_length=512)\n\n                file_path = '\/etc\/authors.yaml'\n\n    \"\"\"\n\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def load_file_data(cls):\n        # pylint: disable=no-member\n        return get_file_value(cls.file_path, strip=False)\n\n    @classmethod\n    def _get_data(cls, chunked_fetch=False):\n        return load(cls.load_file_data(), Loader=Loader)\n"}},"msg":"Release 5.0.0 Beta 135\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"abf348767931e41136cc7fdfa5653f9d508c6090":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/abf348767931e41136cc7fdfa5653f9d508c6090","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/abf348767931e41136cc7fdfa5653f9d508c6090","sha":"abf348767931e41136cc7fdfa5653f9d508c6090","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 22a30e40..9d9b608b 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b135'\n+__version__: str = '5.0.0b136'\ndiff --git a\/vstutils\/api\/base.py b\/vstutils\/api\/base.py\nindex d36a5dc9..28e96878 100644\n--- a\/vstutils\/api\/base.py\n+++ b\/vstutils\/api\/base.py\n@@ -343,12 +343,20 @@ def filter_queryset(self, queryset: QuerySet):\n             serializer_class = self.get_serializer_class()\n             if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related:\n                 serializer = serializer_class()\n-                read_fields = {f.field_name for f in serializer._readable_fields}\n+                read_fields = {\n+                    f.field_name\n+                    for f in serializer._readable_fields\n+                }\n                 model_fields = {\n                     f.name\n                     for f in queryset.model._meta.get_fields()\n                 }\n-                deferable_fields = model_fields - read_fields\n+                fk_related_fields = {\n+                    f.name\n+                    for f in queryset.model._meta.get_fields()\n+                    if isinstance(f, models.ForeignKey)\n+                }\n+                deferable_fields = model_fields - read_fields - fk_related_fields\n                 if deferable_fields:\n                     return qs.defer(*deferable_fields)\n \n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b135'\n+__version__: str = '5.0.0b136'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b135'"],"goodparts":["__version__: str = '5.0.0b136'"]}],"source":"\n\n__version__: str='5.0.0b135' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b135'\n"},"\/vstutils\/api\/base.py":{"changes":[{"diff":"\n             serializer_class = self.get_serializer_class()\n             if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related:\n                 serializer = serializer_class()\n-                read_fields = {f.field_name for f in serializer._readable_fields}\n+                read_fields = {\n+                    f.field_name\n+                    for f in serializer._readable_fields\n+                }\n                 model_fields = {\n                     f.name\n                     for f in queryset.model._meta.get_fields()\n                 }\n-                deferable_fields = model_fields - read_fields\n+                fk_related_fields = {\n+                    f.name\n+                    for f in queryset.model._meta.get_fields()\n+                    if isinstance(f, models.ForeignKey)\n+                }\n+                deferable_fields = model_fields - read_fields - fk_related_fields\n                 if deferable_fields:\n                     return qs.defer(*deferable_fields)\n \n","add":10,"remove":2,"filename":"\/vstutils\/api\/base.py","badparts":["                read_fields = {f.field_name for f in serializer._readable_fields}","                deferable_fields = model_fields - read_fields"],"goodparts":["                read_fields = {","                    f.field_name","                    for f in serializer._readable_fields","                }","                fk_related_fields = {","                    f.name","                    for f in queryset.model._meta.get_fields()","                    if isinstance(f, models.ForeignKey)","                }","                deferable_fields = model_fields - read_fields - fk_related_fields"]}],"source":"\n\"\"\" Default ViewSets for web-api. \"\"\" import re import io import json import logging import inspect import traceback import datetime import typing as _t from functools import partial from copy import deepcopy import orjson from django.conf import settings from django.core import exceptions as djexcs from django.http.response import Http404, FileResponse, HttpResponseNotModified from django.db.models.query import QuerySet from django.db import transaction, models from django.utils.functional import cached_property, lazy from rest_framework.reverse import reverse from rest_framework import viewsets as vsets, views as rvs, exceptions, status from rest_framework.serializers import BaseSerializer from rest_framework.response import Response as RestResponse from rest_framework.request import Request from rest_framework.decorators import action from rest_framework.schemas import AutoSchema as DRFAutoSchema from rest_framework.utils.serializer_helpers import ReturnList, ReturnDict from..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator from. import responses, fields from.serializers import( ErrorSerializer, ValidationErrorSerializer, OtherErrorsSerializer, serializers ) default_methods: _t.List[_t.Text]=[ 'get', 'post', 'put', 'patch', 'delete', 'options', 'head' ] detail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text]=( 'create', 'retrieve', 'update', 'partial_update' ) main_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text]=('list',) +detail_actions query_check_params=( 'extra_select', 'annotations_select' ) default_cache_control_header_data='private, no-cache' non_optimizeable_fields=( fields.NamedBinaryFileInJsonField, serializers.PrimaryKeyRelatedField, serializers.BaseSerializer, serializers.SerializerMethodField, ) logger: logging.Logger=logging.getLogger(settings.VST_PROJECT) http404_re_translate=re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE) def _get_cleared(qs): return getattr(qs, 'cleared', lambda: qs)() def apply_translation(obj: _t.Any, trans_function: _t.Callable): recursive_call=partial(apply_translation, trans_function=trans_function) if isinstance(obj, dict): return{ trans_function(k): recursive_call(v) for k, v in obj.items() } elif isinstance(obj,(tuple, list)): return type(obj)(recursive_call(v) for v in obj) elif isinstance(obj,(exceptions.ErrorDetail, ReturnList, ReturnDict)): with raise_context_decorator_with_default(): obj=orjson.loads(json.dumps(obj)) return recursive_call(obj) return trans_function(obj) def exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]: traceback_str: _t.Text=traceback.format_exc() default_exc=(exceptions.APIException, djexcs.PermissionDenied) serializer_class=ErrorSerializer data: _t.Optional[_t.Dict[_t.Text, _t.Any]]=None code: _t.SupportsInt=status.HTTP_400_BAD_REQUEST lang=getattr(context.get('request'), 'language', None) translate=getattr(lang, 'translate', lambda text: text) if isinstance(exc, exceptions.APIException): if isinstance(exc.detail, ReturnDict): for key, value in exc.detail.items(): exc.detail[key]=apply_translation(value, translate) else: exc.detail=apply_translation(exc.detail, translate) elif isinstance(exc, djexcs.PermissionDenied): data={\"detail\": translate(str(exc))} code=status.HTTP_403_FORBIDDEN logger.debug(traceback_str) elif isinstance(exc, Http404): text=getattr(exc, 'msg', str(exc)) with raise_context_decorator_with_default(): instance_type=http404_re_translate.match(text).group(1) if instance_type: instance_type=str(instance_type) instance_type_format=translate(instance_type.lower()) if instance_type.istitle(): instance_type_format=instance_type_format.title() text=translate(text.replace(instance_type, '{0}')).format(instance_type_format) elif text: text=translate(text) data={\"detail\": text} code=status.HTTP_404_NOT_FOUND logger.debug(traceback_str) elif isinstance(exc, djexcs.ValidationError): if hasattr(exc, 'error_dict'): errors=apply_translation(dict(exc), translate) elif hasattr(exc, 'error_list'): errors={'other_errors': apply_translation(list(exc), translate)} else: errors={'other_errors': apply_translation(str(exc), translate)} data={\"detail\": errors} serializer_class=ValidationErrorSerializer logger.debug(traceback_str) elif not isinstance(exc, default_exc) and isinstance(exc, Exception): data={ 'detail': translate(str(exc)), 'error_type': type(exc).__name__ } code=getattr(exc, 'status', code) serializer_class=OtherErrorsSerializer logger.debug(traceback_str) if data is not None: serializer=serializer_class(data=data) try: serializer.is_valid(raise_exception=True) except: logger.debug(\"Cannot serialize error data.\") else: return responses.BaseResponseClass(serializer.data, code) logger.info(traceback_str) if getattr(exc, 'status_code', 400) >=400 else None default_response=rvs.exception_handler(exc, context) if isinstance(exc, exceptions.NotAuthenticated): default_response[\"X-Anonymous\"]=\"true\" return default_response class AutoSchema(DRFAutoSchema): __slots__=() def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text: method_name: _t.Text=getattr(self.view, 'action', method.lower()) method_obj: _t.Optional[_t.Callable]=getattr(self.view, method_name, None) method_view: _t.Optional[_t.Type[rvs.APIView]]=( getattr(method_obj, '_nested_view', None) if method_obj else None ) method_view=get_if_lazy(method_view) if method_obj.__doc__: return method_obj.__doc__.strip() if not method_view: if not self.view.__class__.__doc__: model=getattr(self.view, 'model', None) if model is not None and model.__doc__: self.view.__class__.__doc__=model.__doc__ return super().get_description(path, method) method_view_obj=method_view() action=path.split('\/')[-2] submethod=getattr(method_view, action, None) if submethod.__doc__: return str(submethod.__doc__).strip() if method=='GET' and '{' not in path[:-1].split('\/')[-1]: action='list' elif method=='POST': action='create' elif method=='GET': action='retrieve' elif method=='PUT': action='update' elif method=='PATCH': action='partial_update' elif method=='DELETE': action='destroy' method_view_obj.action=action if method_view_obj.schema is None: return 'No description' return method_view_obj.schema.get_description(path, method) class QuerySetMixin(rvs.APIView): \"\"\" Instance REST operations. \"\"\" __slots__=() queryset: _t.Optional[QuerySet] _queryset: _t.Optional[QuerySet]=None model: _t.Optional[_t.Type[models.Model]]=None @classproperty def queryset(self) -> QuerySet: if self._queryset is not None: return _get_cleared(self._queryset) return _get_cleared(self.model.objects.all()) @queryset.setter def queryset(self, value): self._queryset=value def _base_get_queryset(self) -> QuerySet: assert self.queryset is not None,( \"'%s' should either include a `queryset` attribute, \" \"or override the `get_queryset()` method.\" % self.__class__.__name__ ) queryset=self.queryset if isinstance(queryset, QuerySet): queryset=queryset.all() return queryset def get_extra_queryset(self) -> _t.Optional[QuerySet]: return self.queryset def get_queryset(self) -> QuerySet: if self.queryset is None: assert self.model is not None,( \"'%s' should either include a `queryset` or `model` attribute,\" \" or override the `get_queryset()` method.\" % self.__class__.__name__ ) self.queryset=_get_cleared(self.model.objects.all()) self.queryset=self.get_extra_queryset() return self._base_get_queryset() class GenericViewSetMeta(type(vsets.GenericViewSet)): __slots__=() def __new__(mcs, name, bases, attrs): new_class=super().__new__(mcs, name, bases, attrs) for detail in(True, False): setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None) return new_class def __get_http_methods_attr_name(cls, detail): return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) class GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta): \"\"\" The base class for all views. Extends the standard features of the DRF class. Here are some of the possibilities: -Provides ``model`` attribute instead of ``queryset``. -Provides to set serializers for each action separately through a dictionary ``action_serializers`` or attributes starting with ``serializer_class_[action name]``. -Provides to specify a serializer for lists and detail views separately. -Optimizes the database query for GET requests, if possible, by selecting only the fields necessary for the serializer. \"\"\" __slots__=() optimize_get_by_values=settings.OPTIMIZE_GET_BY_VALUES optimize_get_by_values_actions=() select_related=False serializer_class: _t.Type[serializers.Serializer] _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]]=None model: _t.Optional[_t.Type[models.Model]]=None action_serializers: _t.Dict[_t.Text, serializers.Serializer]={} _nested_args: _t.Dict[_t.Text, _t.Any] _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]] nested_detail: bool def create_action_serializer(self, *args, **kwargs): \"\"\" A method that implements the standard logic for actions. It relies on the passed arguments to build logic. So, if the named argument data was passed, then the serializer will be validated and saved. :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed. Enabled by default. :type autosave: bool :param: data: Default serializer class argument with serializable data. Enables validation and saving. :type data: dict :param: instance: Default serializer class argument with serializable instance. :type instance: typing.Any :param custom_data: Dict with data which will passed to `validated_data` without validation. :type custom_data: dict :param serializer_class: Serializer class for this execution. May be usefull when request and response serializers is different. :type serializer_class: None,type[rest_framework.serializers.Serializer] :return: Ready serializer with default logic performed. :rtype: rest_framework.serializers.Serializer \"\"\" self.serializer_class=kwargs.pop('serializer_class', None) or self.get_serializer_class() save_kwargs=kwargs.pop('custom_data',{}) should_save=kwargs.pop('autosave', True) or save_kwargs serializer=self.get_serializer(*args, **kwargs) if 'data' in kwargs: serializer.is_valid(raise_exception=True) if should_save: serializer.save(**save_kwargs) return serializer def filter_for_filter_backends(self, backend): return getattr(backend, 'required', False) def filter_queryset(self, queryset: QuerySet): if hasattr(self, 'nested_name'): self.filter_backends=filter( self.filter_for_filter_backends, self.filter_backends ) qs=super().filter_queryset(queryset) if self.action in('list', 'retrieve') +self.optimize_get_by_values_actions and self.optimize_get_by_values: serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related: serializer=serializer_class() read_fields={f.field_name for f in serializer._readable_fields} model_fields={ f.name for f in queryset.model._meta.get_fields() } deferable_fields=model_fields -read_fields if deferable_fields: return qs.defer(*deferable_fields) return qs def get_serializer_class(self): \"\"\" Provides to setup serializer class for each action. \"\"\" lookup_field=self.lookup_url_kwarg or self.lookup_field or 'pk' action_name=getattr(self, 'action', None) serializer_class=getattr(self, f'serializer_class_{action_name}', None) if serializer_class: return serializer_class if action_name in self.action_serializers: serializer_class=self.action_serializers.get(action_name, None) if serializer_class: return serializer_class if action_name not in main_actions: view_func=getattr(self, action_name, None) if view_func is not None: serializer_class=getattr(view_func, 'kwargs',{}).get('serializer_class', None) if serializer_class: return serializer_class is_detail=( hasattr(self, 'serializer_class_one') and self.request and ( action_name in detail_actions or ( self.kwargs.get(lookup_field, False) and action_name in main_actions ) ) ) if is_detail: return self.serializer_class_one return super().get_serializer_class() def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer: \"\"\" Return the serializer instance that should be used for validating and deserializing input, and for serializing output. Provide to use:class:`django.http.StreamingHttpResponse` as serializer init. \"\"\" serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer): kwargs.setdefault('context', self.get_serializer_context()) return serializer_class(*args, **kwargs) def nested_allow_check(self): \"\"\" Just raise or pass. Used for nested views for easier access checking. \"\"\" @classmethod def get_view_methods(cls, detail=False) -> _t.List[_t.Text]: attr_name=''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) methods=getattr(cls, attr_name, None) if methods is not None: return methods methods=[] if not detail and hasattr(cls, 'create'): methods.append('post') if hasattr(cls, 'list') or hasattr(cls, 'retrieve'): methods.append('get') if detail and hasattr(cls, 'update'): methods.append('put') if detail and hasattr(cls, 'partial_update'): methods.append('patch') if detail and hasattr(cls, 'destroy'): methods.append('delete') setattr(cls, attr_name, methods) return methods @classmethod def get_extra_actions(cls): return super().get_extra_actions() @classmethod def as_view(cls, actions=None, **initkwargs): return super().as_view(actions, **initkwargs) class CachableHeadMixin(GenericViewSet): \"\"\" Mixin which cache GET responses. Uses standard HTTP-caching mechanism which response 304 when Etag match. .. warning:: This works only with models based on:class:`vstutils.models.BModel`. \"\"\" class NotModifiedException(exceptions.APIException): status_code=304 default_detail='' default_code='cached' @cached_property def model_class(self): return getattr(self, 'model', None) or self.queryset.model @cached_property @raise_context_decorator_with_default(default=False) def is_main_action(self): if hasattr(self, 'should_cache') and not self.should_cache(): return False return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None def get_etag_value(self, model_class, request): return( f'{model_class.get_etag_value()}' f'_' f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}' ) def check_etag(self, request): etag_data=self.get_etag_value(self.model_class, request) if request.method==\"GET\" and etag_data==str(request.headers.get(\"If-None-Match\", None)): raise self.NotModifiedException(\"\") def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse: result_response=super().finalize_response(request, response, *args, **kwargs) if self.is_main_action and 'ETag' not in result_response.headers: result_response.headers['ETag']=lazy(self.get_etag_value, str)(self.model_class, request) return result_response def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None: super().initial(request, *args, **kwargs) if self.is_main_action: self.check_etag(request) class CopyMixin(GenericViewSet): \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\" __slots__=() copy_prefix='copy-' copy_field_name='name' copy_related: _t.Iterable[_t.Text]=() def copy_instance(self, instance): new_instance=deepcopy(instance) new_instance.pk=None name=getattr(instance, self.copy_field_name, None) if isinstance(name, str): name=f'{self.copy_prefix}{name}' setattr(new_instance, self.copy_field_name, name) new_instance.save() for related_name in self.copy_related: new_related_manager=getattr(new_instance, related_name, None) if new_related_manager is not None: new_related_manager.set(getattr(instance, related_name).all()) return new_instance @action(methods=['post'], detail=True) @transaction.atomic() def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass: \"\"\" Endpoint which copy instance with deps. \"\"\" instance=self.copy_instance(self.get_object()) serializer=self.get_serializer(instance, data=request.data, partial=True) serializer.is_valid() serializer.save() return responses.HTTP_201_CREATED(serializer.data) class FileResponseRetrieveMixin(GenericViewSet): \"\"\" ViewSet mixin for retriving FileResponse from models with file fields data. Example: .. literalinclude::..\/test_src\/test_proj\/models\/files.py :lines: 1-22,59-77 \"\"\" __slots__=() instance_field_data: _t.Text instance_field_filename: _t.Text='filename' instance_field_timestamp: _t.Optional[_t.Text]=None cache_control_header_data: _t.Optional[_t.Text]=None serializer_class_retrieve=FileResponse def get_file_response_kwargs(self, instance): data=getattr(instance, self.instance_field_data) if isinstance(data, str): data=data.encode('utf-8') if isinstance(data,(bytes, bytearray)): data=io.BytesIO(data) return{ \"streaming_content\": data, \"as_attachment\": True, \"filename\": getattr(instance, self.instance_field_filename, ''), } @patch_gzip_response_decorator def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]: instance=self.get_object() instance_edit_timestamp=None if self.instance_field_timestamp: instance_edit: datetime.datetime=getattr(instance, self.instance_field_timestamp, None) instance_edit_timestamp=instance_edit.timestamp() if instance_edit else None if instance_edit_timestamp and instance_edit_timestamp==float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')): return HttpResponseNotModified() response: FileResponse=self.get_serializer(**self.get_file_response_kwargs(instance)) if self.instance_field_timestamp and instance_edit_timestamp: cache_control_header_data=getattr(self, 'cache_control_header_data', None) if cache_control_header_data is None: cache_control_header_data=default_cache_control_header_data response['Cache-Control']=cache_control_header_data response['ETag']=str(instance_edit_timestamp) return response class ModelViewSet(GenericViewSet, vsets.ModelViewSet): \"\"\" A viewset that provides CRUD actions under model. Inherited from:class:`.GenericViewSet`. :var model: DB model with data. :vartype model: vstutils.models.BModel :var serializer_class: Serializer for view of Model data. :vartype serializer_class: vstutils.api.serializers.VSTSerializer :var serializer_class_one: Serializer for view one instance of Model data. :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`. :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer Examples: .. sourcecode:: python from vstutils.api.base import ModelViewSet from. import serializers as sers class StageViewSet(ModelViewSet): model=sers.models.Stage serializer_class=sers.StageSerializer serializer_class_one=sers.StageSerializer \"\"\" __slots__=() class NonModelsViewSet(GenericViewSet): __slots__=() base_name=None def get_queryset(self) -> QuerySet: return QuerySet() class ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin): __slots__=() schema=None @property def methods(self) -> _t.Iterable[_t.Text]: def is_list_action(attr): if not inspect.isfunction(attr): return False elif not hasattr(attr, 'url_path'): return False elif getattr(attr, 'detail', True): return False return True return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action)) def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass: routes={ method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request) for method in self.methods } return responses.HTTP_200_OK(routes) class ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for readonly models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for list only models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin): \"\"\" Default viewset like ReadOnlyModelViewSet but for historical data (allow to delete, but can't create and update). Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() ","sourceWithComments":"\"\"\"\nDefault ViewSets for web-api.\n\"\"\"\n\nimport re\nimport io\nimport json\nimport logging\nimport inspect\nimport traceback\nimport datetime\nimport typing as _t\nfrom functools import partial\nfrom copy import deepcopy\n\nimport orjson\nfrom django.conf import settings\nfrom django.core import exceptions as djexcs\nfrom django.http.response import Http404, FileResponse, HttpResponseNotModified\nfrom django.db.models.query import QuerySet\nfrom django.db import transaction, models\nfrom django.utils.functional import cached_property, lazy\nfrom rest_framework.reverse import reverse\nfrom rest_framework import viewsets as vsets, views as rvs, exceptions, status\nfrom rest_framework.serializers import BaseSerializer\nfrom rest_framework.response import Response as RestResponse\nfrom rest_framework.request import Request\nfrom rest_framework.decorators import action\nfrom rest_framework.schemas import AutoSchema as DRFAutoSchema\nfrom rest_framework.utils.serializer_helpers import ReturnList, ReturnDict\n\nfrom ..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator\nfrom . import responses, fields\nfrom .serializers import (\n    ErrorSerializer,\n    ValidationErrorSerializer,\n    OtherErrorsSerializer,\n    serializers\n)\n\ndefault_methods: _t.List[_t.Text] = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'delete',\n    'options',\n    'head'\n]\ndetail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text] = (\n    'create',\n    'retrieve',\n    'update',\n    'partial_update'\n)\nmain_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text] = ('list',) + detail_actions\nquery_check_params = (\n    'extra_select',\n    'annotations_select'\n)\ndefault_cache_control_header_data = 'private, no-cache'\nnon_optimizeable_fields = (\n    fields.NamedBinaryFileInJsonField,\n    serializers.PrimaryKeyRelatedField,\n    serializers.BaseSerializer,\n    serializers.SerializerMethodField,\n)\nlogger: logging.Logger = logging.getLogger(settings.VST_PROJECT)\nhttp404_re_translate = re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE)\n\n\ndef _get_cleared(qs):\n    return getattr(qs, 'cleared', lambda: qs)()\n\n\ndef apply_translation(obj: _t.Any, trans_function: _t.Callable):\n    recursive_call = partial(apply_translation, trans_function=trans_function)\n    if isinstance(obj, dict):\n        return {\n            trans_function(k): recursive_call(v)\n            for k, v in obj.items()\n        }\n    elif isinstance(obj, (tuple, list)):\n        return type(obj)(recursive_call(v) for v in obj)\n    elif isinstance(obj, (exceptions.ErrorDetail, ReturnList, ReturnDict)):\n        with raise_context_decorator_with_default():\n            obj = orjson.loads(json.dumps(obj))\n            return recursive_call(obj)\n    return trans_function(obj)\n\n\ndef exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]:\n    # pylint: disable=too-many-branches\n    traceback_str: _t.Text = traceback.format_exc()\n    default_exc = (exceptions.APIException, djexcs.PermissionDenied)\n    serializer_class = ErrorSerializer\n    data: _t.Optional[_t.Dict[_t.Text, _t.Any]] = None\n    code: _t.SupportsInt = status.HTTP_400_BAD_REQUEST\n    lang = getattr(context.get('request'), 'language', None)\n    translate = getattr(lang, 'translate', lambda text: text)\n\n    if isinstance(exc, exceptions.APIException):\n        if isinstance(exc.detail, ReturnDict):\n            for key, value in exc.detail.items():\n                exc.detail[key] = apply_translation(value, translate)\n        else:\n            exc.detail = apply_translation(exc.detail, translate)\n\n    elif isinstance(exc, djexcs.PermissionDenied):  # pragma: no cover\n        data = {\"detail\": translate(str(exc))}\n        code = status.HTTP_403_FORBIDDEN\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, Http404):\n        text = getattr(exc, 'msg', str(exc))\n        with raise_context_decorator_with_default():\n            instance_type = http404_re_translate.match(text).group(1)  # type: ignore\n            if instance_type:\n                instance_type = str(instance_type)\n                instance_type_format = translate(instance_type.lower())\n                if instance_type.istitle():\n                    instance_type_format = instance_type_format.title()\n                text = translate(text.replace(instance_type, '{0}')).format(instance_type_format)\n            elif text:  # nocv\n                text = translate(text)\n        data = {\"detail\": text}\n        code = status.HTTP_404_NOT_FOUND\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, djexcs.ValidationError):\n        if hasattr(exc, 'error_dict'):  # nocv\n            errors = apply_translation(dict(exc), translate)  # type: ignore\n        elif hasattr(exc, 'error_list'):\n            errors = {'other_errors': apply_translation(list(exc), translate)}\n        else:  # nocv\n            errors = {'other_errors': apply_translation(str(exc), translate)}\n        data = {\"detail\": errors}\n        serializer_class = ValidationErrorSerializer\n        logger.debug(traceback_str)\n\n    elif not isinstance(exc, default_exc) and isinstance(exc, Exception):\n        data = {\n            'detail': translate(str(exc)),\n            'error_type': type(exc).__name__\n        }\n        code = getattr(exc, 'status', code)\n        serializer_class = OtherErrorsSerializer\n        logger.debug(traceback_str)\n\n    if data is not None:\n        serializer = serializer_class(data=data)\n        try:\n            serializer.is_valid(raise_exception=True)\n        except:  # nocv\n            logger.debug(\"Cannot serialize error data.\")\n        else:\n            return responses.BaseResponseClass(serializer.data, code)\n\n    logger.info(traceback_str) if getattr(exc, 'status_code', 400) >= 400 else None\n    default_response = rvs.exception_handler(exc, context)\n\n    if isinstance(exc, exceptions.NotAuthenticated):  # nocv\n        default_response[\"X-Anonymous\"] = \"true\"  # type: ignore\n\n    return default_response\n\n\nclass AutoSchema(DRFAutoSchema):\n    __slots__ = ()\n\n    def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text:\n        # pylint: disable=simplifiable-if-statement,redefined-outer-name\n        method_name: _t.Text = getattr(self.view, 'action', method.lower())\n        method_obj: _t.Optional[_t.Callable] = getattr(self.view, method_name, None)\n        method_view: _t.Optional[_t.Type[rvs.APIView]] = (\n            getattr(method_obj, '_nested_view', None)\n            if method_obj else None\n        )\n        method_view = get_if_lazy(method_view)\n\n        if method_obj.__doc__:\n            return method_obj.__doc__.strip()\n        if not method_view:\n            if not self.view.__class__.__doc__:\n                model = getattr(self.view, 'model', None)\n                if model is not None and model.__doc__:\n                    self.view.__class__.__doc__ = model.__doc__\n            return super().get_description(path, method)\n\n        method_view_obj = method_view()\n        action = path.split('\/')[-2]\n        submethod = getattr(method_view, action, None)\n        if submethod.__doc__:\n            return str(submethod.__doc__).strip()  # nocv\n        if method == 'GET' and '{' not in path[:-1].split('\/')[-1]:\n            action = 'list'\n        elif method == 'POST':\n            action = 'create'\n        elif method == 'GET':\n            action = 'retrieve'\n        elif method == 'PUT':\n            action = 'update'\n        elif method == 'PATCH':\n            action = 'partial_update'\n        elif method == 'DELETE':\n            action = 'destroy'\n        method_view_obj.action = action  # type: ignore\n        if method_view_obj.schema is None:\n            return 'No description'  # nocv\n        return method_view_obj.schema.get_description(path, method)  # type: ignore\n\n\nclass QuerySetMixin(rvs.APIView):\n    \"\"\"\n    Instance REST operations.\n    \"\"\"\n    __slots__ = ()\n    queryset: _t.Optional[QuerySet]\n    _queryset: _t.Optional[QuerySet] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n\n    @classproperty  # type: ignore\n    def queryset(self) -> QuerySet:\n        # pylint: disable=method-hidden,function-redefined\n        if self._queryset is not None:\n            return _get_cleared(self._queryset)\n        return _get_cleared(self.model.objects.all())\n\n    @queryset.setter  # type: ignore\n    def queryset(self, value):\n        self._queryset = value\n\n    def _base_get_queryset(self) -> QuerySet:\n        assert self.queryset is not None, (\n            \"'%s' should either include a `queryset` attribute, \"\n            \"or override the `get_queryset()` method.\"\n            % self.__class__.__name__\n        )\n\n        queryset = self.queryset\n        if isinstance(queryset, QuerySet):\n            # Ensure queryset is re-evaluated on each request.\n            queryset = queryset.all()\n        return queryset\n\n    def get_extra_queryset(self) -> _t.Optional[QuerySet]:\n        return self.queryset\n\n    def get_queryset(self) -> QuerySet:\n        if self.queryset is None:  # nocv\n            assert self.model is not None, (\n                \"'%s' should either include a `queryset` or `model` attribute,\"\n                \" or override the `get_queryset()` method.\"\n                % self.__class__.__name__\n            )\n            self.queryset = _get_cleared(self.model.objects.all())\n        self.queryset = self.get_extra_queryset()\n        return self._base_get_queryset()\n\n\nclass GenericViewSetMeta(type(vsets.GenericViewSet)):  # type: ignore\n    __slots__ = ()\n\n    def __new__(mcs, name, bases, attrs):\n        new_class = super().__new__(mcs, name, bases, attrs)\n        for detail in (True, False):\n            setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None)\n        return new_class\n\n    def __get_http_methods_attr_name(cls, detail):\n        return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n\n\nclass GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta):\n    \"\"\"\n    The base class for all views. Extends the standard features of the DRF class.\n    Here are some of the possibilities:\n\n    - Provides ``model`` attribute instead of ``queryset``.\n    - Provides to set serializers for each action separately through a dictionary ``action_serializers`` or\n      attributes starting with ``serializer_class_[action name]``.\n    - Provides to specify a serializer for lists and detail views separately.\n    - Optimizes the database query for GET requests, if possible,\n      by selecting only the fields necessary for the serializer.\n    \"\"\"\n    __slots__ = ()\n    optimize_get_by_values = settings.OPTIMIZE_GET_BY_VALUES\n    optimize_get_by_values_actions = ()\n    select_related = False\n    serializer_class: _t.Type[serializers.Serializer]\n    _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n    action_serializers: _t.Dict[_t.Text, serializers.Serializer] = {}\n    _nested_args: _t.Dict[_t.Text, _t.Any]\n    _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]]\n    nested_detail: bool\n\n    def create_action_serializer(self, *args, **kwargs):\n        \"\"\"\n        A method that implements the standard logic for actions.\n        It relies on the passed arguments to build logic.\n        So, if the named argument data was passed, then the serializer will be validated and saved.\n\n        :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed.\n                         Enabled by default.\n        :type autosave: bool\n        :param: data: Default serializer class argument with serializable data. Enables validation and saving.\n        :type data: dict\n        :param: instance: Default serializer class argument with serializable instance.\n        :type instance: typing.Any\n        :param custom_data: Dict with data which will passed to `validated_data` without validation.\n        :type custom_data: dict\n        :param serializer_class: Serializer class for this execution.\n                                 May be usefull when request and response serializers is different.\n        :type serializer_class: None,type[rest_framework.serializers.Serializer]\n        :return: Ready serializer with default logic performed.\n        :rtype: rest_framework.serializers.Serializer\n        \"\"\"\n        self.serializer_class = kwargs.pop('serializer_class', None) or self.get_serializer_class()\n        save_kwargs = kwargs.pop('custom_data', {})\n        should_save = kwargs.pop('autosave', True) or save_kwargs\n        serializer = self.get_serializer(*args, **kwargs)\n        if 'data' in kwargs:\n            serializer.is_valid(raise_exception=True)\n            if should_save:\n                serializer.save(**save_kwargs)\n        return serializer\n\n    def filter_for_filter_backends(self, backend):\n        return getattr(backend, 'required', False)\n\n    def filter_queryset(self, queryset: QuerySet):\n        if hasattr(self, 'nested_name'):\n            self.filter_backends = filter(  # type: ignore\n                self.filter_for_filter_backends,\n                self.filter_backends\n            )\n        qs = super().filter_queryset(queryset)\n\n        if self.action in ('list', 'retrieve') + self.optimize_get_by_values_actions and self.optimize_get_by_values:\n            # pylint: disable=protected-access\n\n            serializer_class = self.get_serializer_class()\n            if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related:\n                serializer = serializer_class()\n                read_fields = {f.field_name for f in serializer._readable_fields}\n                model_fields = {\n                    f.name\n                    for f in queryset.model._meta.get_fields()\n                }\n                deferable_fields = model_fields - read_fields\n                if deferable_fields:\n                    return qs.defer(*deferable_fields)\n\n        return qs\n\n    def get_serializer_class(self):\n        \"\"\"\n        Provides to setup serializer class for each action.\n        \"\"\"\n        lookup_field = self.lookup_url_kwarg or self.lookup_field or 'pk'\n        action_name = getattr(self, 'action', None)\n\n        # Try to get overloaded serializer from 'action_serializers' or from attrs\n        serializer_class = getattr(self, f'serializer_class_{action_name}', None)\n        if serializer_class:\n            return serializer_class\n        if action_name in self.action_serializers:\n            serializer_class = self.action_serializers.get(action_name, None)\n            if serializer_class:\n                return serializer_class\n\n        if action_name not in main_actions:\n            view_func = getattr(self, action_name, None)\n            if view_func is not None:\n                serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n                if serializer_class:\n                    return serializer_class\n\n        is_detail = (\n            hasattr(self, 'serializer_class_one') and\n            self.request and\n            (\n                action_name in detail_actions or\n                (\n                    self.kwargs.get(lookup_field, False) and\n                    action_name in main_actions\n                )\n            )\n        )\n\n        # Get 'serializer_class_one' for detail operations\n        if is_detail:\n            return self.serializer_class_one  # pylint: disable=no-member\n        return super().get_serializer_class()\n\n    def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer:\n        \"\"\"\n        Return the serializer instance that should be used for validating and\n        deserializing input, and for serializing output.\n\n        Provide to use :class:`django.http.StreamingHttpResponse` as serializer init.\n        \"\"\"\n        serializer_class = self.get_serializer_class()\n        if issubclass(serializer_class, BaseSerializer):\n            kwargs.setdefault('context', self.get_serializer_context())\n        return serializer_class(*args, **kwargs)\n\n    def nested_allow_check(self):\n        \"\"\"\n        Just raise or pass. Used for nested views for easier access checking.\n        \"\"\"\n\n    @classmethod\n    def get_view_methods(cls, detail=False) -> _t.List[_t.Text]:\n        attr_name = ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n        methods = getattr(cls, attr_name, None)\n        if methods is not None:\n            return methods\n        methods = []\n        if not detail and hasattr(cls, 'create'):\n            methods.append('post')\n        if hasattr(cls, 'list') or hasattr(cls, 'retrieve'):\n            methods.append('get')\n        if detail and hasattr(cls, 'update'):\n            methods.append('put')\n        if detail and hasattr(cls, 'partial_update'):\n            methods.append('patch')\n        if detail and hasattr(cls, 'destroy'):\n            methods.append('delete')\n        setattr(cls, attr_name, methods)\n        return methods\n\n    @classmethod\n    def get_extra_actions(cls):\n        return super().get_extra_actions()\n\n    @classmethod\n    def as_view(cls, actions=None, **initkwargs):\n        return super().as_view(actions, **initkwargs)\n\n\nclass CachableHeadMixin(GenericViewSet):\n    \"\"\"\n    Mixin which cache GET responses.\n    Uses standard HTTP-caching mechanism which response 304 when Etag match.\n\n    .. warning::\n        This works only with models based on :class:`vstutils.models.BModel`.\n    \"\"\"\n\n    class NotModifiedException(exceptions.APIException):\n        status_code = 304\n        default_detail = ''\n        default_code = 'cached'\n\n    @cached_property\n    def model_class(self):\n        return getattr(self, 'model', None) or self.queryset.model\n\n    @cached_property\n    @raise_context_decorator_with_default(default=False)\n    def is_main_action(self):\n        if hasattr(self, 'should_cache') and not self.should_cache():\n            return False\n        return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None\n\n    def get_etag_value(self, model_class, request):\n        return (\n            f'{model_class.get_etag_value()}'\n            f'_'\n            f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}'\n        )\n\n    def check_etag(self, request):\n        etag_data = self.get_etag_value(self.model_class, request)  # type: ignore\n\n        if request.method == \"GET\" and etag_data == str(request.headers.get(\"If-None-Match\", None)):\n            raise self.NotModifiedException(\"\")\n        # TODO: Workflow with ETag on PUT\/PATCH\n\n    def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse:\n        result_response = super().finalize_response(request, response, *args, **kwargs)\n        if self.is_main_action and 'ETag' not in result_response.headers:\n            result_response.headers['ETag'] = lazy(self.get_etag_value, str)(self.model_class, request)\n        return result_response\n\n    def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None:\n        super().initial(request, *args, **kwargs)\n\n        if self.is_main_action:\n            self.check_etag(request)\n\n\nclass CopyMixin(GenericViewSet):\n    \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\"\n\n    __slots__ = ()\n    #: Value of prefix which will be added to new instance name.\n    copy_prefix = 'copy-'\n    #: Name of field which will get a prefix.\n    copy_field_name = 'name'\n    #: List of related names which will be copied to new instance.\n    copy_related: _t.Iterable[_t.Text] = ()\n\n    def copy_instance(self, instance):\n        new_instance = deepcopy(instance)\n        new_instance.pk = None\n        name = getattr(instance, self.copy_field_name, None)\n        if isinstance(name, str):\n            name = f'{self.copy_prefix}{name}'\n        setattr(new_instance, self.copy_field_name, name)\n        new_instance.save()\n        for related_name in self.copy_related:\n            new_related_manager = getattr(new_instance, related_name, None)\n            if new_related_manager is not None:\n                new_related_manager.set(getattr(instance, related_name).all())\n        return new_instance\n\n    @action(methods=['post'], detail=True)\n    @transaction.atomic()\n    def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass:\n        # pylint: disable=unused-argument\n        \"\"\"\n        Endpoint which copy instance with deps.\n        \"\"\"\n        instance = self.copy_instance(self.get_object())\n        serializer = self.get_serializer(instance, data=request.data, partial=True)\n        serializer.is_valid()\n        serializer.save()\n        return responses.HTTP_201_CREATED(serializer.data)\n\n\nclass FileResponseRetrieveMixin(GenericViewSet):\n    \"\"\"\n    ViewSet mixin for retriving FileResponse from models with file fields data.\n\n    Example:\n\n        .. literalinclude:: ..\/test_src\/test_proj\/models\/files.py\n           :lines: 1-22,59-77\n    \"\"\"\n    __slots__ = ()\n\n    instance_field_data: _t.Text\n    instance_field_filename: _t.Text = 'filename'\n    instance_field_timestamp: _t.Optional[_t.Text] = None\n    cache_control_header_data: _t.Optional[_t.Text] = None\n    serializer_class_retrieve = FileResponse\n\n    def get_file_response_kwargs(self, instance):\n        data = getattr(instance, self.instance_field_data)\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        if isinstance(data, (bytes, bytearray)):\n            data = io.BytesIO(data)\n        return {\n            \"streaming_content\": data,\n            \"as_attachment\": True,\n            \"filename\": getattr(instance, self.instance_field_filename, ''),\n        }\n\n    @patch_gzip_response_decorator\n    def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]:\n        instance = self.get_object()\n\n        instance_edit_timestamp = None\n        if self.instance_field_timestamp:\n            instance_edit: datetime.datetime = getattr(instance, self.instance_field_timestamp, None)\n            instance_edit_timestamp = instance_edit.timestamp() if instance_edit else None\n\n        if instance_edit_timestamp and instance_edit_timestamp == float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')):\n            return HttpResponseNotModified()\n\n        response: FileResponse = self.get_serializer(**self.get_file_response_kwargs(instance))  # type: ignore\n\n        if self.instance_field_timestamp and instance_edit_timestamp:\n            cache_control_header_data = getattr(self, 'cache_control_header_data', None)\n            if cache_control_header_data is None:\n                cache_control_header_data = default_cache_control_header_data\n            response['Cache-Control'] = cache_control_header_data\n            response['ETag'] = str(instance_edit_timestamp)\n        return response\n\n\nclass ModelViewSet(GenericViewSet, vsets.ModelViewSet):\n    # pylint: disable=useless-super-delegation\n\n    \"\"\"\n    A viewset that provides CRUD actions under model. Inherited from :class:`.GenericViewSet`.\n\n    :var model: DB model with data.\n    :vartype model: vstutils.models.BModel\n    :var serializer_class: Serializer for view of Model data.\n    :vartype serializer_class: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_one: Serializer for view one instance of Model data.\n    :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`.\n    :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer\n\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.api.base import ModelViewSet\n            from . import serializers as sers\n\n\n            class StageViewSet(ModelViewSet):\n                # This is difference with DRF:\n                # we use model instead of queryset\n                model = sers.models.Stage\n                # Serializer for list view (view for a list of Model instances\n                serializer_class = sers.StageSerializer\n                # Serializer for page view (view for one Model instance).\n                # This property is not required, if its value is the same as `serializer_class`.\n                serializer_class_one = sers.StageSerializer\n                # Allowed to set decorator to custom endpoint like this:\n                # serializer_class_create - for create method\n                # serializer_class_copy - for detail endpoint `copy`.\n                # etc...\n\n    \"\"\"\n\n    __slots__ = ()\n\n\nclass NonModelsViewSet(GenericViewSet):\n    __slots__ = ()\n    base_name = None\n\n    def get_queryset(self) -> QuerySet:\n        return QuerySet()  # nocv\n\n\nclass ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin):\n    # pylint: disable=abstract-method\n    __slots__ = ()\n    schema = None  # type: ignore\n\n    @property\n    def methods(self) -> _t.Iterable[_t.Text]:\n        def is_list_action(attr):\n            if not inspect.isfunction(attr):\n                return False\n            elif not hasattr(attr, 'url_path'):\n                return False\n            elif getattr(attr, 'detail', True):\n                return False\n            return True\n\n        return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action))\n\n    def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass:\n        routes = {\n            method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request)\n            for method in self.methods\n        }\n        return responses.HTTP_200_OK(routes)\n\n\nclass ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for readonly models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for list only models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin):\n    \"\"\"\n    Default viewset like ReadOnlyModelViewSet but for historical data\n    (allow to delete, but can't create and update).\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n"}},"msg":"Release 5.0.0 Beta 136\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"75092362a1ad1745ecdba81db652a252ce0d7f8d":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/75092362a1ad1745ecdba81db652a252ce0d7f8d","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/75092362a1ad1745ecdba81db652a252ce0d7f8d","sha":"75092362a1ad1745ecdba81db652a252ce0d7f8d","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 9d9b608b..8df4dde8 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b136'\n+__version__: str = '5.0.0b137'\ndiff --git a\/vstutils\/api\/base.py b\/vstutils\/api\/base.py\nindex 28e96878..39e48037 100644\n--- a\/vstutils\/api\/base.py\n+++ b\/vstutils\/api\/base.py\n@@ -341,7 +341,7 @@ def filter_queryset(self, queryset: QuerySet):\n             # pylint: disable=protected-access\n \n             serializer_class = self.get_serializer_class()\n-            if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related:\n+            if issubclass(serializer_class, BaseSerializer):\n                 serializer = serializer_class()\n                 read_fields = {\n                     f.field_name\ndiff --git a\/vstutils\/middleware.py b\/vstutils\/middleware.py\nindex 5303f5b9..97a155b6 100644\n--- a\/vstutils\/middleware.py\n+++ b\/vstutils\/middleware.py\n@@ -256,6 +256,7 @@ def __init__(self, *args, **kwargs):\n \n     def get_response_handler(self, request: HttpRequest) -> HttpResponse:\n         if settings.CENTRIFUGO_CLIENT_KWARGS:\n-            with self.notificator_class([]):\n+            with self.notificator_class([]) as notificator:\n+                request.notificator = notificator  # type: ignore\n                 return super().get_response_handler(request)\n         return super().get_response_handler(request)\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b136'\n+__version__: str = '5.0.0b137'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b136'"],"goodparts":["__version__: str = '5.0.0b137'"]}],"source":"\n\n__version__: str='5.0.0b136' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b136'\n"},"\/vstutils\/api\/base.py":{"changes":[{"diff":"\n             # pylint: disable=protected-access\n \n             serializer_class = self.get_serializer_class()\n-            if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related:\n+            if issubclass(serializer_class, BaseSerializer):\n                 serializer = serializer_class()\n                 read_fields = {\n                     f.field_nam","add":1,"remove":1,"filename":"\/vstutils\/api\/base.py","badparts":["            if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related:"],"goodparts":["            if issubclass(serializer_class, BaseSerializer):"]}],"source":"\n\"\"\" Default ViewSets for web-api. \"\"\" import re import io import json import logging import inspect import traceback import datetime import typing as _t from functools import partial from copy import deepcopy import orjson from django.conf import settings from django.core import exceptions as djexcs from django.http.response import Http404, FileResponse, HttpResponseNotModified from django.db.models.query import QuerySet from django.db import transaction, models from django.utils.functional import cached_property, lazy from rest_framework.reverse import reverse from rest_framework import viewsets as vsets, views as rvs, exceptions, status from rest_framework.serializers import BaseSerializer from rest_framework.response import Response as RestResponse from rest_framework.request import Request from rest_framework.decorators import action from rest_framework.schemas import AutoSchema as DRFAutoSchema from rest_framework.utils.serializer_helpers import ReturnList, ReturnDict from..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator from. import responses, fields from.serializers import( ErrorSerializer, ValidationErrorSerializer, OtherErrorsSerializer, serializers ) default_methods: _t.List[_t.Text]=[ 'get', 'post', 'put', 'patch', 'delete', 'options', 'head' ] detail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text]=( 'create', 'retrieve', 'update', 'partial_update' ) main_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text]=('list',) +detail_actions query_check_params=( 'extra_select', 'annotations_select' ) default_cache_control_header_data='private, no-cache' non_optimizeable_fields=( fields.NamedBinaryFileInJsonField, serializers.PrimaryKeyRelatedField, serializers.BaseSerializer, serializers.SerializerMethodField, ) logger: logging.Logger=logging.getLogger(settings.VST_PROJECT) http404_re_translate=re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE) def _get_cleared(qs): return getattr(qs, 'cleared', lambda: qs)() def apply_translation(obj: _t.Any, trans_function: _t.Callable): recursive_call=partial(apply_translation, trans_function=trans_function) if isinstance(obj, dict): return{ trans_function(k): recursive_call(v) for k, v in obj.items() } elif isinstance(obj,(tuple, list)): return type(obj)(recursive_call(v) for v in obj) elif isinstance(obj,(exceptions.ErrorDetail, ReturnList, ReturnDict)): with raise_context_decorator_with_default(): obj=orjson.loads(json.dumps(obj)) return recursive_call(obj) return trans_function(obj) def exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]: traceback_str: _t.Text=traceback.format_exc() default_exc=(exceptions.APIException, djexcs.PermissionDenied) serializer_class=ErrorSerializer data: _t.Optional[_t.Dict[_t.Text, _t.Any]]=None code: _t.SupportsInt=status.HTTP_400_BAD_REQUEST lang=getattr(context.get('request'), 'language', None) translate=getattr(lang, 'translate', lambda text: text) if isinstance(exc, exceptions.APIException): if isinstance(exc.detail, ReturnDict): for key, value in exc.detail.items(): exc.detail[key]=apply_translation(value, translate) else: exc.detail=apply_translation(exc.detail, translate) elif isinstance(exc, djexcs.PermissionDenied): data={\"detail\": translate(str(exc))} code=status.HTTP_403_FORBIDDEN logger.debug(traceback_str) elif isinstance(exc, Http404): text=getattr(exc, 'msg', str(exc)) with raise_context_decorator_with_default(): instance_type=http404_re_translate.match(text).group(1) if instance_type: instance_type=str(instance_type) instance_type_format=translate(instance_type.lower()) if instance_type.istitle(): instance_type_format=instance_type_format.title() text=translate(text.replace(instance_type, '{0}')).format(instance_type_format) elif text: text=translate(text) data={\"detail\": text} code=status.HTTP_404_NOT_FOUND logger.debug(traceback_str) elif isinstance(exc, djexcs.ValidationError): if hasattr(exc, 'error_dict'): errors=apply_translation(dict(exc), translate) elif hasattr(exc, 'error_list'): errors={'other_errors': apply_translation(list(exc), translate)} else: errors={'other_errors': apply_translation(str(exc), translate)} data={\"detail\": errors} serializer_class=ValidationErrorSerializer logger.debug(traceback_str) elif not isinstance(exc, default_exc) and isinstance(exc, Exception): data={ 'detail': translate(str(exc)), 'error_type': type(exc).__name__ } code=getattr(exc, 'status', code) serializer_class=OtherErrorsSerializer logger.debug(traceback_str) if data is not None: serializer=serializer_class(data=data) try: serializer.is_valid(raise_exception=True) except: logger.debug(\"Cannot serialize error data.\") else: return responses.BaseResponseClass(serializer.data, code) logger.info(traceback_str) if getattr(exc, 'status_code', 400) >=400 else None default_response=rvs.exception_handler(exc, context) if isinstance(exc, exceptions.NotAuthenticated): default_response[\"X-Anonymous\"]=\"true\" return default_response class AutoSchema(DRFAutoSchema): __slots__=() def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text: method_name: _t.Text=getattr(self.view, 'action', method.lower()) method_obj: _t.Optional[_t.Callable]=getattr(self.view, method_name, None) method_view: _t.Optional[_t.Type[rvs.APIView]]=( getattr(method_obj, '_nested_view', None) if method_obj else None ) method_view=get_if_lazy(method_view) if method_obj.__doc__: return method_obj.__doc__.strip() if not method_view: if not self.view.__class__.__doc__: model=getattr(self.view, 'model', None) if model is not None and model.__doc__: self.view.__class__.__doc__=model.__doc__ return super().get_description(path, method) method_view_obj=method_view() action=path.split('\/')[-2] submethod=getattr(method_view, action, None) if submethod.__doc__: return str(submethod.__doc__).strip() if method=='GET' and '{' not in path[:-1].split('\/')[-1]: action='list' elif method=='POST': action='create' elif method=='GET': action='retrieve' elif method=='PUT': action='update' elif method=='PATCH': action='partial_update' elif method=='DELETE': action='destroy' method_view_obj.action=action if method_view_obj.schema is None: return 'No description' return method_view_obj.schema.get_description(path, method) class QuerySetMixin(rvs.APIView): \"\"\" Instance REST operations. \"\"\" __slots__=() queryset: _t.Optional[QuerySet] _queryset: _t.Optional[QuerySet]=None model: _t.Optional[_t.Type[models.Model]]=None @classproperty def queryset(self) -> QuerySet: if self._queryset is not None: return _get_cleared(self._queryset) return _get_cleared(self.model.objects.all()) @queryset.setter def queryset(self, value): self._queryset=value def _base_get_queryset(self) -> QuerySet: assert self.queryset is not None,( \"'%s' should either include a `queryset` attribute, \" \"or override the `get_queryset()` method.\" % self.__class__.__name__ ) queryset=self.queryset if isinstance(queryset, QuerySet): queryset=queryset.all() return queryset def get_extra_queryset(self) -> _t.Optional[QuerySet]: return self.queryset def get_queryset(self) -> QuerySet: if self.queryset is None: assert self.model is not None,( \"'%s' should either include a `queryset` or `model` attribute,\" \" or override the `get_queryset()` method.\" % self.__class__.__name__ ) self.queryset=_get_cleared(self.model.objects.all()) self.queryset=self.get_extra_queryset() return self._base_get_queryset() class GenericViewSetMeta(type(vsets.GenericViewSet)): __slots__=() def __new__(mcs, name, bases, attrs): new_class=super().__new__(mcs, name, bases, attrs) for detail in(True, False): setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None) return new_class def __get_http_methods_attr_name(cls, detail): return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) class GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta): \"\"\" The base class for all views. Extends the standard features of the DRF class. Here are some of the possibilities: -Provides ``model`` attribute instead of ``queryset``. -Provides to set serializers for each action separately through a dictionary ``action_serializers`` or attributes starting with ``serializer_class_[action name]``. -Provides to specify a serializer for lists and detail views separately. -Optimizes the database query for GET requests, if possible, by selecting only the fields necessary for the serializer. \"\"\" __slots__=() optimize_get_by_values=settings.OPTIMIZE_GET_BY_VALUES optimize_get_by_values_actions=() select_related=False serializer_class: _t.Type[serializers.Serializer] _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]]=None model: _t.Optional[_t.Type[models.Model]]=None action_serializers: _t.Dict[_t.Text, serializers.Serializer]={} _nested_args: _t.Dict[_t.Text, _t.Any] _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]] nested_detail: bool def create_action_serializer(self, *args, **kwargs): \"\"\" A method that implements the standard logic for actions. It relies on the passed arguments to build logic. So, if the named argument data was passed, then the serializer will be validated and saved. :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed. Enabled by default. :type autosave: bool :param: data: Default serializer class argument with serializable data. Enables validation and saving. :type data: dict :param: instance: Default serializer class argument with serializable instance. :type instance: typing.Any :param custom_data: Dict with data which will passed to `validated_data` without validation. :type custom_data: dict :param serializer_class: Serializer class for this execution. May be usefull when request and response serializers is different. :type serializer_class: None,type[rest_framework.serializers.Serializer] :return: Ready serializer with default logic performed. :rtype: rest_framework.serializers.Serializer \"\"\" self.serializer_class=kwargs.pop('serializer_class', None) or self.get_serializer_class() save_kwargs=kwargs.pop('custom_data',{}) should_save=kwargs.pop('autosave', True) or save_kwargs serializer=self.get_serializer(*args, **kwargs) if 'data' in kwargs: serializer.is_valid(raise_exception=True) if should_save: serializer.save(**save_kwargs) return serializer def filter_for_filter_backends(self, backend): return getattr(backend, 'required', False) def filter_queryset(self, queryset: QuerySet): if hasattr(self, 'nested_name'): self.filter_backends=filter( self.filter_for_filter_backends, self.filter_backends ) qs=super().filter_queryset(queryset) if self.action in('list', 'retrieve') +self.optimize_get_by_values_actions and self.optimize_get_by_values: serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related: serializer=serializer_class() read_fields={ f.field_name for f in serializer._readable_fields } model_fields={ f.name for f in queryset.model._meta.get_fields() } fk_related_fields={ f.name for f in queryset.model._meta.get_fields() if isinstance(f, models.ForeignKey) } deferable_fields=model_fields -read_fields -fk_related_fields if deferable_fields: return qs.defer(*deferable_fields) return qs def get_serializer_class(self): \"\"\" Provides to setup serializer class for each action. \"\"\" lookup_field=self.lookup_url_kwarg or self.lookup_field or 'pk' action_name=getattr(self, 'action', None) serializer_class=getattr(self, f'serializer_class_{action_name}', None) if serializer_class: return serializer_class if action_name in self.action_serializers: serializer_class=self.action_serializers.get(action_name, None) if serializer_class: return serializer_class if action_name not in main_actions: view_func=getattr(self, action_name, None) if view_func is not None: serializer_class=getattr(view_func, 'kwargs',{}).get('serializer_class', None) if serializer_class: return serializer_class is_detail=( hasattr(self, 'serializer_class_one') and self.request and ( action_name in detail_actions or ( self.kwargs.get(lookup_field, False) and action_name in main_actions ) ) ) if is_detail: return self.serializer_class_one return super().get_serializer_class() def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer: \"\"\" Return the serializer instance that should be used for validating and deserializing input, and for serializing output. Provide to use:class:`django.http.StreamingHttpResponse` as serializer init. \"\"\" serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer): kwargs.setdefault('context', self.get_serializer_context()) return serializer_class(*args, **kwargs) def nested_allow_check(self): \"\"\" Just raise or pass. Used for nested views for easier access checking. \"\"\" @classmethod def get_view_methods(cls, detail=False) -> _t.List[_t.Text]: attr_name=''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) methods=getattr(cls, attr_name, None) if methods is not None: return methods methods=[] if not detail and hasattr(cls, 'create'): methods.append('post') if hasattr(cls, 'list') or hasattr(cls, 'retrieve'): methods.append('get') if detail and hasattr(cls, 'update'): methods.append('put') if detail and hasattr(cls, 'partial_update'): methods.append('patch') if detail and hasattr(cls, 'destroy'): methods.append('delete') setattr(cls, attr_name, methods) return methods @classmethod def get_extra_actions(cls): return super().get_extra_actions() @classmethod def as_view(cls, actions=None, **initkwargs): return super().as_view(actions, **initkwargs) class CachableHeadMixin(GenericViewSet): \"\"\" Mixin which cache GET responses. Uses standard HTTP-caching mechanism which response 304 when Etag match. .. warning:: This works only with models based on:class:`vstutils.models.BModel`. \"\"\" class NotModifiedException(exceptions.APIException): status_code=304 default_detail='' default_code='cached' @cached_property def model_class(self): return getattr(self, 'model', None) or self.queryset.model @cached_property @raise_context_decorator_with_default(default=False) def is_main_action(self): if hasattr(self, 'should_cache') and not self.should_cache(): return False return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None def get_etag_value(self, model_class, request): return( f'{model_class.get_etag_value()}' f'_' f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}' ) def check_etag(self, request): etag_data=self.get_etag_value(self.model_class, request) if request.method==\"GET\" and etag_data==str(request.headers.get(\"If-None-Match\", None)): raise self.NotModifiedException(\"\") def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse: result_response=super().finalize_response(request, response, *args, **kwargs) if self.is_main_action and 'ETag' not in result_response.headers: result_response.headers['ETag']=lazy(self.get_etag_value, str)(self.model_class, request) return result_response def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None: super().initial(request, *args, **kwargs) if self.is_main_action: self.check_etag(request) class CopyMixin(GenericViewSet): \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\" __slots__=() copy_prefix='copy-' copy_field_name='name' copy_related: _t.Iterable[_t.Text]=() def copy_instance(self, instance): new_instance=deepcopy(instance) new_instance.pk=None name=getattr(instance, self.copy_field_name, None) if isinstance(name, str): name=f'{self.copy_prefix}{name}' setattr(new_instance, self.copy_field_name, name) new_instance.save() for related_name in self.copy_related: new_related_manager=getattr(new_instance, related_name, None) if new_related_manager is not None: new_related_manager.set(getattr(instance, related_name).all()) return new_instance @action(methods=['post'], detail=True) @transaction.atomic() def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass: \"\"\" Endpoint which copy instance with deps. \"\"\" instance=self.copy_instance(self.get_object()) serializer=self.get_serializer(instance, data=request.data, partial=True) serializer.is_valid() serializer.save() return responses.HTTP_201_CREATED(serializer.data) class FileResponseRetrieveMixin(GenericViewSet): \"\"\" ViewSet mixin for retriving FileResponse from models with file fields data. Example: .. literalinclude::..\/test_src\/test_proj\/models\/files.py :lines: 1-22,59-77 \"\"\" __slots__=() instance_field_data: _t.Text instance_field_filename: _t.Text='filename' instance_field_timestamp: _t.Optional[_t.Text]=None cache_control_header_data: _t.Optional[_t.Text]=None serializer_class_retrieve=FileResponse def get_file_response_kwargs(self, instance): data=getattr(instance, self.instance_field_data) if isinstance(data, str): data=data.encode('utf-8') if isinstance(data,(bytes, bytearray)): data=io.BytesIO(data) return{ \"streaming_content\": data, \"as_attachment\": True, \"filename\": getattr(instance, self.instance_field_filename, ''), } @patch_gzip_response_decorator def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]: instance=self.get_object() instance_edit_timestamp=None if self.instance_field_timestamp: instance_edit: datetime.datetime=getattr(instance, self.instance_field_timestamp, None) instance_edit_timestamp=instance_edit.timestamp() if instance_edit else None if instance_edit_timestamp and instance_edit_timestamp==float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')): return HttpResponseNotModified() response: FileResponse=self.get_serializer(**self.get_file_response_kwargs(instance)) if self.instance_field_timestamp and instance_edit_timestamp: cache_control_header_data=getattr(self, 'cache_control_header_data', None) if cache_control_header_data is None: cache_control_header_data=default_cache_control_header_data response['Cache-Control']=cache_control_header_data response['ETag']=str(instance_edit_timestamp) return response class ModelViewSet(GenericViewSet, vsets.ModelViewSet): \"\"\" A viewset that provides CRUD actions under model. Inherited from:class:`.GenericViewSet`. :var model: DB model with data. :vartype model: vstutils.models.BModel :var serializer_class: Serializer for view of Model data. :vartype serializer_class: vstutils.api.serializers.VSTSerializer :var serializer_class_one: Serializer for view one instance of Model data. :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`. :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer Examples: .. sourcecode:: python from vstutils.api.base import ModelViewSet from. import serializers as sers class StageViewSet(ModelViewSet): model=sers.models.Stage serializer_class=sers.StageSerializer serializer_class_one=sers.StageSerializer \"\"\" __slots__=() class NonModelsViewSet(GenericViewSet): __slots__=() base_name=None def get_queryset(self) -> QuerySet: return QuerySet() class ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin): __slots__=() schema=None @property def methods(self) -> _t.Iterable[_t.Text]: def is_list_action(attr): if not inspect.isfunction(attr): return False elif not hasattr(attr, 'url_path'): return False elif getattr(attr, 'detail', True): return False return True return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action)) def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass: routes={ method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request) for method in self.methods } return responses.HTTP_200_OK(routes) class ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for readonly models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for list only models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin): \"\"\" Default viewset like ReadOnlyModelViewSet but for historical data (allow to delete, but can't create and update). Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() ","sourceWithComments":"\"\"\"\nDefault ViewSets for web-api.\n\"\"\"\n\nimport re\nimport io\nimport json\nimport logging\nimport inspect\nimport traceback\nimport datetime\nimport typing as _t\nfrom functools import partial\nfrom copy import deepcopy\n\nimport orjson\nfrom django.conf import settings\nfrom django.core import exceptions as djexcs\nfrom django.http.response import Http404, FileResponse, HttpResponseNotModified\nfrom django.db.models.query import QuerySet\nfrom django.db import transaction, models\nfrom django.utils.functional import cached_property, lazy\nfrom rest_framework.reverse import reverse\nfrom rest_framework import viewsets as vsets, views as rvs, exceptions, status\nfrom rest_framework.serializers import BaseSerializer\nfrom rest_framework.response import Response as RestResponse\nfrom rest_framework.request import Request\nfrom rest_framework.decorators import action\nfrom rest_framework.schemas import AutoSchema as DRFAutoSchema\nfrom rest_framework.utils.serializer_helpers import ReturnList, ReturnDict\n\nfrom ..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator\nfrom . import responses, fields\nfrom .serializers import (\n    ErrorSerializer,\n    ValidationErrorSerializer,\n    OtherErrorsSerializer,\n    serializers\n)\n\ndefault_methods: _t.List[_t.Text] = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'delete',\n    'options',\n    'head'\n]\ndetail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text] = (\n    'create',\n    'retrieve',\n    'update',\n    'partial_update'\n)\nmain_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text] = ('list',) + detail_actions\nquery_check_params = (\n    'extra_select',\n    'annotations_select'\n)\ndefault_cache_control_header_data = 'private, no-cache'\nnon_optimizeable_fields = (\n    fields.NamedBinaryFileInJsonField,\n    serializers.PrimaryKeyRelatedField,\n    serializers.BaseSerializer,\n    serializers.SerializerMethodField,\n)\nlogger: logging.Logger = logging.getLogger(settings.VST_PROJECT)\nhttp404_re_translate = re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE)\n\n\ndef _get_cleared(qs):\n    return getattr(qs, 'cleared', lambda: qs)()\n\n\ndef apply_translation(obj: _t.Any, trans_function: _t.Callable):\n    recursive_call = partial(apply_translation, trans_function=trans_function)\n    if isinstance(obj, dict):\n        return {\n            trans_function(k): recursive_call(v)\n            for k, v in obj.items()\n        }\n    elif isinstance(obj, (tuple, list)):\n        return type(obj)(recursive_call(v) for v in obj)\n    elif isinstance(obj, (exceptions.ErrorDetail, ReturnList, ReturnDict)):\n        with raise_context_decorator_with_default():\n            obj = orjson.loads(json.dumps(obj))\n            return recursive_call(obj)\n    return trans_function(obj)\n\n\ndef exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]:\n    # pylint: disable=too-many-branches\n    traceback_str: _t.Text = traceback.format_exc()\n    default_exc = (exceptions.APIException, djexcs.PermissionDenied)\n    serializer_class = ErrorSerializer\n    data: _t.Optional[_t.Dict[_t.Text, _t.Any]] = None\n    code: _t.SupportsInt = status.HTTP_400_BAD_REQUEST\n    lang = getattr(context.get('request'), 'language', None)\n    translate = getattr(lang, 'translate', lambda text: text)\n\n    if isinstance(exc, exceptions.APIException):\n        if isinstance(exc.detail, ReturnDict):\n            for key, value in exc.detail.items():\n                exc.detail[key] = apply_translation(value, translate)\n        else:\n            exc.detail = apply_translation(exc.detail, translate)\n\n    elif isinstance(exc, djexcs.PermissionDenied):  # pragma: no cover\n        data = {\"detail\": translate(str(exc))}\n        code = status.HTTP_403_FORBIDDEN\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, Http404):\n        text = getattr(exc, 'msg', str(exc))\n        with raise_context_decorator_with_default():\n            instance_type = http404_re_translate.match(text).group(1)  # type: ignore\n            if instance_type:\n                instance_type = str(instance_type)\n                instance_type_format = translate(instance_type.lower())\n                if instance_type.istitle():\n                    instance_type_format = instance_type_format.title()\n                text = translate(text.replace(instance_type, '{0}')).format(instance_type_format)\n            elif text:  # nocv\n                text = translate(text)\n        data = {\"detail\": text}\n        code = status.HTTP_404_NOT_FOUND\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, djexcs.ValidationError):\n        if hasattr(exc, 'error_dict'):  # nocv\n            errors = apply_translation(dict(exc), translate)  # type: ignore\n        elif hasattr(exc, 'error_list'):\n            errors = {'other_errors': apply_translation(list(exc), translate)}\n        else:  # nocv\n            errors = {'other_errors': apply_translation(str(exc), translate)}\n        data = {\"detail\": errors}\n        serializer_class = ValidationErrorSerializer\n        logger.debug(traceback_str)\n\n    elif not isinstance(exc, default_exc) and isinstance(exc, Exception):\n        data = {\n            'detail': translate(str(exc)),\n            'error_type': type(exc).__name__\n        }\n        code = getattr(exc, 'status', code)\n        serializer_class = OtherErrorsSerializer\n        logger.debug(traceback_str)\n\n    if data is not None:\n        serializer = serializer_class(data=data)\n        try:\n            serializer.is_valid(raise_exception=True)\n        except:  # nocv\n            logger.debug(\"Cannot serialize error data.\")\n        else:\n            return responses.BaseResponseClass(serializer.data, code)\n\n    logger.info(traceback_str) if getattr(exc, 'status_code', 400) >= 400 else None\n    default_response = rvs.exception_handler(exc, context)\n\n    if isinstance(exc, exceptions.NotAuthenticated):  # nocv\n        default_response[\"X-Anonymous\"] = \"true\"  # type: ignore\n\n    return default_response\n\n\nclass AutoSchema(DRFAutoSchema):\n    __slots__ = ()\n\n    def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text:\n        # pylint: disable=simplifiable-if-statement,redefined-outer-name\n        method_name: _t.Text = getattr(self.view, 'action', method.lower())\n        method_obj: _t.Optional[_t.Callable] = getattr(self.view, method_name, None)\n        method_view: _t.Optional[_t.Type[rvs.APIView]] = (\n            getattr(method_obj, '_nested_view', None)\n            if method_obj else None\n        )\n        method_view = get_if_lazy(method_view)\n\n        if method_obj.__doc__:\n            return method_obj.__doc__.strip()\n        if not method_view:\n            if not self.view.__class__.__doc__:\n                model = getattr(self.view, 'model', None)\n                if model is not None and model.__doc__:\n                    self.view.__class__.__doc__ = model.__doc__\n            return super().get_description(path, method)\n\n        method_view_obj = method_view()\n        action = path.split('\/')[-2]\n        submethod = getattr(method_view, action, None)\n        if submethod.__doc__:\n            return str(submethod.__doc__).strip()  # nocv\n        if method == 'GET' and '{' not in path[:-1].split('\/')[-1]:\n            action = 'list'\n        elif method == 'POST':\n            action = 'create'\n        elif method == 'GET':\n            action = 'retrieve'\n        elif method == 'PUT':\n            action = 'update'\n        elif method == 'PATCH':\n            action = 'partial_update'\n        elif method == 'DELETE':\n            action = 'destroy'\n        method_view_obj.action = action  # type: ignore\n        if method_view_obj.schema is None:\n            return 'No description'  # nocv\n        return method_view_obj.schema.get_description(path, method)  # type: ignore\n\n\nclass QuerySetMixin(rvs.APIView):\n    \"\"\"\n    Instance REST operations.\n    \"\"\"\n    __slots__ = ()\n    queryset: _t.Optional[QuerySet]\n    _queryset: _t.Optional[QuerySet] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n\n    @classproperty  # type: ignore\n    def queryset(self) -> QuerySet:\n        # pylint: disable=method-hidden,function-redefined\n        if self._queryset is not None:\n            return _get_cleared(self._queryset)\n        return _get_cleared(self.model.objects.all())\n\n    @queryset.setter  # type: ignore\n    def queryset(self, value):\n        self._queryset = value\n\n    def _base_get_queryset(self) -> QuerySet:\n        assert self.queryset is not None, (\n            \"'%s' should either include a `queryset` attribute, \"\n            \"or override the `get_queryset()` method.\"\n            % self.__class__.__name__\n        )\n\n        queryset = self.queryset\n        if isinstance(queryset, QuerySet):\n            # Ensure queryset is re-evaluated on each request.\n            queryset = queryset.all()\n        return queryset\n\n    def get_extra_queryset(self) -> _t.Optional[QuerySet]:\n        return self.queryset\n\n    def get_queryset(self) -> QuerySet:\n        if self.queryset is None:  # nocv\n            assert self.model is not None, (\n                \"'%s' should either include a `queryset` or `model` attribute,\"\n                \" or override the `get_queryset()` method.\"\n                % self.__class__.__name__\n            )\n            self.queryset = _get_cleared(self.model.objects.all())\n        self.queryset = self.get_extra_queryset()\n        return self._base_get_queryset()\n\n\nclass GenericViewSetMeta(type(vsets.GenericViewSet)):  # type: ignore\n    __slots__ = ()\n\n    def __new__(mcs, name, bases, attrs):\n        new_class = super().__new__(mcs, name, bases, attrs)\n        for detail in (True, False):\n            setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None)\n        return new_class\n\n    def __get_http_methods_attr_name(cls, detail):\n        return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n\n\nclass GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta):\n    \"\"\"\n    The base class for all views. Extends the standard features of the DRF class.\n    Here are some of the possibilities:\n\n    - Provides ``model`` attribute instead of ``queryset``.\n    - Provides to set serializers for each action separately through a dictionary ``action_serializers`` or\n      attributes starting with ``serializer_class_[action name]``.\n    - Provides to specify a serializer for lists and detail views separately.\n    - Optimizes the database query for GET requests, if possible,\n      by selecting only the fields necessary for the serializer.\n    \"\"\"\n    __slots__ = ()\n    optimize_get_by_values = settings.OPTIMIZE_GET_BY_VALUES\n    optimize_get_by_values_actions = ()\n    select_related = False\n    serializer_class: _t.Type[serializers.Serializer]\n    _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n    action_serializers: _t.Dict[_t.Text, serializers.Serializer] = {}\n    _nested_args: _t.Dict[_t.Text, _t.Any]\n    _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]]\n    nested_detail: bool\n\n    def create_action_serializer(self, *args, **kwargs):\n        \"\"\"\n        A method that implements the standard logic for actions.\n        It relies on the passed arguments to build logic.\n        So, if the named argument data was passed, then the serializer will be validated and saved.\n\n        :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed.\n                         Enabled by default.\n        :type autosave: bool\n        :param: data: Default serializer class argument with serializable data. Enables validation and saving.\n        :type data: dict\n        :param: instance: Default serializer class argument with serializable instance.\n        :type instance: typing.Any\n        :param custom_data: Dict with data which will passed to `validated_data` without validation.\n        :type custom_data: dict\n        :param serializer_class: Serializer class for this execution.\n                                 May be usefull when request and response serializers is different.\n        :type serializer_class: None,type[rest_framework.serializers.Serializer]\n        :return: Ready serializer with default logic performed.\n        :rtype: rest_framework.serializers.Serializer\n        \"\"\"\n        self.serializer_class = kwargs.pop('serializer_class', None) or self.get_serializer_class()\n        save_kwargs = kwargs.pop('custom_data', {})\n        should_save = kwargs.pop('autosave', True) or save_kwargs\n        serializer = self.get_serializer(*args, **kwargs)\n        if 'data' in kwargs:\n            serializer.is_valid(raise_exception=True)\n            if should_save:\n                serializer.save(**save_kwargs)\n        return serializer\n\n    def filter_for_filter_backends(self, backend):\n        return getattr(backend, 'required', False)\n\n    def filter_queryset(self, queryset: QuerySet):\n        if hasattr(self, 'nested_name'):\n            self.filter_backends = filter(  # type: ignore\n                self.filter_for_filter_backends,\n                self.filter_backends\n            )\n        qs = super().filter_queryset(queryset)\n\n        if self.action in ('list', 'retrieve') + self.optimize_get_by_values_actions and self.optimize_get_by_values:\n            # pylint: disable=protected-access\n\n            serializer_class = self.get_serializer_class()\n            if issubclass(serializer_class, BaseSerializer) and not qs.query.select_related:\n                serializer = serializer_class()\n                read_fields = {\n                    f.field_name\n                    for f in serializer._readable_fields\n                }\n                model_fields = {\n                    f.name\n                    for f in queryset.model._meta.get_fields()\n                }\n                fk_related_fields = {\n                    f.name\n                    for f in queryset.model._meta.get_fields()\n                    if isinstance(f, models.ForeignKey)\n                }\n                deferable_fields = model_fields - read_fields - fk_related_fields\n                if deferable_fields:\n                    return qs.defer(*deferable_fields)\n\n        return qs\n\n    def get_serializer_class(self):\n        \"\"\"\n        Provides to setup serializer class for each action.\n        \"\"\"\n        lookup_field = self.lookup_url_kwarg or self.lookup_field or 'pk'\n        action_name = getattr(self, 'action', None)\n\n        # Try to get overloaded serializer from 'action_serializers' or from attrs\n        serializer_class = getattr(self, f'serializer_class_{action_name}', None)\n        if serializer_class:\n            return serializer_class\n        if action_name in self.action_serializers:\n            serializer_class = self.action_serializers.get(action_name, None)\n            if serializer_class:\n                return serializer_class\n\n        if action_name not in main_actions:\n            view_func = getattr(self, action_name, None)\n            if view_func is not None:\n                serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n                if serializer_class:\n                    return serializer_class\n\n        is_detail = (\n            hasattr(self, 'serializer_class_one') and\n            self.request and\n            (\n                action_name in detail_actions or\n                (\n                    self.kwargs.get(lookup_field, False) and\n                    action_name in main_actions\n                )\n            )\n        )\n\n        # Get 'serializer_class_one' for detail operations\n        if is_detail:\n            return self.serializer_class_one  # pylint: disable=no-member\n        return super().get_serializer_class()\n\n    def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer:\n        \"\"\"\n        Return the serializer instance that should be used for validating and\n        deserializing input, and for serializing output.\n\n        Provide to use :class:`django.http.StreamingHttpResponse` as serializer init.\n        \"\"\"\n        serializer_class = self.get_serializer_class()\n        if issubclass(serializer_class, BaseSerializer):\n            kwargs.setdefault('context', self.get_serializer_context())\n        return serializer_class(*args, **kwargs)\n\n    def nested_allow_check(self):\n        \"\"\"\n        Just raise or pass. Used for nested views for easier access checking.\n        \"\"\"\n\n    @classmethod\n    def get_view_methods(cls, detail=False) -> _t.List[_t.Text]:\n        attr_name = ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n        methods = getattr(cls, attr_name, None)\n        if methods is not None:\n            return methods\n        methods = []\n        if not detail and hasattr(cls, 'create'):\n            methods.append('post')\n        if hasattr(cls, 'list') or hasattr(cls, 'retrieve'):\n            methods.append('get')\n        if detail and hasattr(cls, 'update'):\n            methods.append('put')\n        if detail and hasattr(cls, 'partial_update'):\n            methods.append('patch')\n        if detail and hasattr(cls, 'destroy'):\n            methods.append('delete')\n        setattr(cls, attr_name, methods)\n        return methods\n\n    @classmethod\n    def get_extra_actions(cls):\n        return super().get_extra_actions()\n\n    @classmethod\n    def as_view(cls, actions=None, **initkwargs):\n        return super().as_view(actions, **initkwargs)\n\n\nclass CachableHeadMixin(GenericViewSet):\n    \"\"\"\n    Mixin which cache GET responses.\n    Uses standard HTTP-caching mechanism which response 304 when Etag match.\n\n    .. warning::\n        This works only with models based on :class:`vstutils.models.BModel`.\n    \"\"\"\n\n    class NotModifiedException(exceptions.APIException):\n        status_code = 304\n        default_detail = ''\n        default_code = 'cached'\n\n    @cached_property\n    def model_class(self):\n        return getattr(self, 'model', None) or self.queryset.model\n\n    @cached_property\n    @raise_context_decorator_with_default(default=False)\n    def is_main_action(self):\n        if hasattr(self, 'should_cache') and not self.should_cache():\n            return False\n        return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None\n\n    def get_etag_value(self, model_class, request):\n        return (\n            f'{model_class.get_etag_value()}'\n            f'_'\n            f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}'\n        )\n\n    def check_etag(self, request):\n        etag_data = self.get_etag_value(self.model_class, request)  # type: ignore\n\n        if request.method == \"GET\" and etag_data == str(request.headers.get(\"If-None-Match\", None)):\n            raise self.NotModifiedException(\"\")\n        # TODO: Workflow with ETag on PUT\/PATCH\n\n    def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse:\n        result_response = super().finalize_response(request, response, *args, **kwargs)\n        if self.is_main_action and 'ETag' not in result_response.headers:\n            result_response.headers['ETag'] = lazy(self.get_etag_value, str)(self.model_class, request)\n        return result_response\n\n    def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None:\n        super().initial(request, *args, **kwargs)\n\n        if self.is_main_action:\n            self.check_etag(request)\n\n\nclass CopyMixin(GenericViewSet):\n    \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\"\n\n    __slots__ = ()\n    #: Value of prefix which will be added to new instance name.\n    copy_prefix = 'copy-'\n    #: Name of field which will get a prefix.\n    copy_field_name = 'name'\n    #: List of related names which will be copied to new instance.\n    copy_related: _t.Iterable[_t.Text] = ()\n\n    def copy_instance(self, instance):\n        new_instance = deepcopy(instance)\n        new_instance.pk = None\n        name = getattr(instance, self.copy_field_name, None)\n        if isinstance(name, str):\n            name = f'{self.copy_prefix}{name}'\n        setattr(new_instance, self.copy_field_name, name)\n        new_instance.save()\n        for related_name in self.copy_related:\n            new_related_manager = getattr(new_instance, related_name, None)\n            if new_related_manager is not None:\n                new_related_manager.set(getattr(instance, related_name).all())\n        return new_instance\n\n    @action(methods=['post'], detail=True)\n    @transaction.atomic()\n    def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass:\n        # pylint: disable=unused-argument\n        \"\"\"\n        Endpoint which copy instance with deps.\n        \"\"\"\n        instance = self.copy_instance(self.get_object())\n        serializer = self.get_serializer(instance, data=request.data, partial=True)\n        serializer.is_valid()\n        serializer.save()\n        return responses.HTTP_201_CREATED(serializer.data)\n\n\nclass FileResponseRetrieveMixin(GenericViewSet):\n    \"\"\"\n    ViewSet mixin for retriving FileResponse from models with file fields data.\n\n    Example:\n\n        .. literalinclude:: ..\/test_src\/test_proj\/models\/files.py\n           :lines: 1-22,59-77\n    \"\"\"\n    __slots__ = ()\n\n    instance_field_data: _t.Text\n    instance_field_filename: _t.Text = 'filename'\n    instance_field_timestamp: _t.Optional[_t.Text] = None\n    cache_control_header_data: _t.Optional[_t.Text] = None\n    serializer_class_retrieve = FileResponse\n\n    def get_file_response_kwargs(self, instance):\n        data = getattr(instance, self.instance_field_data)\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        if isinstance(data, (bytes, bytearray)):\n            data = io.BytesIO(data)\n        return {\n            \"streaming_content\": data,\n            \"as_attachment\": True,\n            \"filename\": getattr(instance, self.instance_field_filename, ''),\n        }\n\n    @patch_gzip_response_decorator\n    def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]:\n        instance = self.get_object()\n\n        instance_edit_timestamp = None\n        if self.instance_field_timestamp:\n            instance_edit: datetime.datetime = getattr(instance, self.instance_field_timestamp, None)\n            instance_edit_timestamp = instance_edit.timestamp() if instance_edit else None\n\n        if instance_edit_timestamp and instance_edit_timestamp == float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')):\n            return HttpResponseNotModified()\n\n        response: FileResponse = self.get_serializer(**self.get_file_response_kwargs(instance))  # type: ignore\n\n        if self.instance_field_timestamp and instance_edit_timestamp:\n            cache_control_header_data = getattr(self, 'cache_control_header_data', None)\n            if cache_control_header_data is None:\n                cache_control_header_data = default_cache_control_header_data\n            response['Cache-Control'] = cache_control_header_data\n            response['ETag'] = str(instance_edit_timestamp)\n        return response\n\n\nclass ModelViewSet(GenericViewSet, vsets.ModelViewSet):\n    # pylint: disable=useless-super-delegation\n\n    \"\"\"\n    A viewset that provides CRUD actions under model. Inherited from :class:`.GenericViewSet`.\n\n    :var model: DB model with data.\n    :vartype model: vstutils.models.BModel\n    :var serializer_class: Serializer for view of Model data.\n    :vartype serializer_class: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_one: Serializer for view one instance of Model data.\n    :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`.\n    :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer\n\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.api.base import ModelViewSet\n            from . import serializers as sers\n\n\n            class StageViewSet(ModelViewSet):\n                # This is difference with DRF:\n                # we use model instead of queryset\n                model = sers.models.Stage\n                # Serializer for list view (view for a list of Model instances\n                serializer_class = sers.StageSerializer\n                # Serializer for page view (view for one Model instance).\n                # This property is not required, if its value is the same as `serializer_class`.\n                serializer_class_one = sers.StageSerializer\n                # Allowed to set decorator to custom endpoint like this:\n                # serializer_class_create - for create method\n                # serializer_class_copy - for detail endpoint `copy`.\n                # etc...\n\n    \"\"\"\n\n    __slots__ = ()\n\n\nclass NonModelsViewSet(GenericViewSet):\n    __slots__ = ()\n    base_name = None\n\n    def get_queryset(self) -> QuerySet:\n        return QuerySet()  # nocv\n\n\nclass ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin):\n    # pylint: disable=abstract-method\n    __slots__ = ()\n    schema = None  # type: ignore\n\n    @property\n    def methods(self) -> _t.Iterable[_t.Text]:\n        def is_list_action(attr):\n            if not inspect.isfunction(attr):\n                return False\n            elif not hasattr(attr, 'url_path'):\n                return False\n            elif getattr(attr, 'detail', True):\n                return False\n            return True\n\n        return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action))\n\n    def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass:\n        routes = {\n            method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request)\n            for method in self.methods\n        }\n        return responses.HTTP_200_OK(routes)\n\n\nclass ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for readonly models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for list only models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin):\n    \"\"\"\n    Default viewset like ReadOnlyModelViewSet but for historical data\n    (allow to delete, but can't create and update).\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n"},"\/vstutils\/middleware.py":{"changes":[{"diff":"\n \n     def get_response_handler(self, request: HttpRequest) -> HttpResponse:\n         if settings.CENTRIFUGO_CLIENT_KWARGS:\n-            with self.notificator_class([]):\n+            with self.notificator_class([]) as notificator:\n+                request.notificator = notificator  # type: ignore\n                 return super().get_response_handler(request)\n         return super().get_response_handler(request)\n","add":2,"remove":1,"filename":"\/vstutils\/middleware.py","badparts":["            with self.notificator_class([]):"],"goodparts":["            with self.notificator_class([]) as notificator:","                request.notificator = notificator  # type: ignore"]}],"source":"\nimport time import logging import typing as _t from django.db import connection from django.apps import apps from django.conf import settings from django.http.request import HttpRequest from django.http.response import HttpResponse from django.utils import translation from django.urls import resolve from django.shortcuts import redirect from.api.models import Language from.utils import BaseVstObject logger=logging.getLogger(settings.VST_PROJECT) class QueryTimingLogger: __slots__=('queries_time',) def __init__(self): self.queries_time=0 def __call__(self, execute, sql, params, many, context): start=time.time() try: return execute(sql, params, many, context) finally: self.queries_time +=time.time() -start class BaseMiddleware(BaseVstObject): \"\"\" Middleware base class for handling: * Incoming requests by:meth:`.BaseMiddleware.request_handler()`; * Outgoing response before any calling on server by:meth:`.BaseMiddleware.get_response_handler()`; * Outgoing responses by:meth:`.BaseMiddleware.handler()`. Middleware must be added to `MIDDLEWARE` list in settings. Example: .. sourcecode:: python from vstutils.middleware import BaseMiddleware from django.http import HttpResponse class CustomMiddleware(BaseMiddleware): def request_handler(self, request): request.headers['User-Agent']='Mozilla\/5.0' return request def get_response_handler(self, request): if not request.user.is_stuff: return HttpResponse( \"Access denied!\", content_type=\"text\/plain\", status_code=403 ) return super().get_response_handler(request) def handler(self, request, response): response['Custom-Header']='Some value' return response \"\"\" __slots__='get_response', 'logger' logger: logging.Logger def __init__(self, get_response: _t.Callable): self.get_response=get_response self.logger=logger super().__init__() def get_setting(self, value: _t.Text): return self.get_django_settings(value) def handler(self, request: HttpRequest, response: HttpResponse) -> HttpResponse: \"\"\" The response handler. Method to process responses. :param request: HTTP-request object. :type request: django.http.HttpRequest :param response: HTTP-response object which will be sended to client. :type response: django.http.HttpResponse :return: Handled response object. :rtype: django.http.HttpResponse \"\"\" return response def request_handler(self, request: HttpRequest) -> HttpRequest: \"\"\" The request handler. Called before request is handled by a view. :param request: HTTP-request object which is wrapped from client request. :type request: django.http.HttpRequest :return: Handled request object. :rtype: django.http.HttpRequest \"\"\" return request def get_response_handler(self, request: HttpRequest) -> HttpResponse: \"\"\" Entrypoint for breaking or continuing request handling. This function must return `django.http.HttpResponse` object or result of parent class calling. :param request: HTTP-request object which is wrapped from client request. :type request: django.http.HttpRequest :rtype: django.http.HttpResponse \"\"\" return self.get_response(request) def __call__(self, request: HttpRequest) -> HttpResponse: return self.handler( self.request_handler(request), self.get_response_handler(request) ) class TimezoneHeadersMiddleware(BaseMiddleware): __slots__=() def handler(self, request: HttpRequest, response: HttpResponse) -> HttpResponse: response['Server-Timezone']=self.get_setting('TIME_ZONE') response['VSTutils-Version']=self.get_setting('VSTUTILS_VERSION') return response class ExecuteTimeHeadersMiddleware(BaseMiddleware): __slots__=() def __duration_handler(self, data): key, value=data if isinstance(value,(list, tuple, map, filter, _t.Generator)): value=''.join((self.__duration_handler(('', v)) for v in value)) elif isinstance(value,(int, float)): value=f';dur={float(value)}' elif isinstance(value, str) and value: if ' ' in value: value=f'\"{value}\"' value=f';desc={value}' elif not value: value='' return f'{key}{value}' def _round_time(self, seconds: _t.Union[int, float]): return round(seconds * 1000, 2) def get_response_handler(self, request: HttpRequest) -> HttpResponse: start_time=time.time() get_response_handler=super().get_response_handler ql=QueryTimingLogger() if not getattr(request, 'is_bulk', False): with connection.execute_wrapper(ql): response=get_response_handler(request) else: response=get_response_handler(request) response_durations=getattr(response, 'timings', None) total_time=self._round_time(time.time() -start_time) if getattr(request, 'is_bulk', False): response['Response-Time']=str(total_time) else: if response_durations: response_durations=f',{\", \".join(map(self.__duration_handler, response_durations.items()))}' else: response_durations=\"\" response_durations +=f', db_execution_time;dur={self._round_time(ql.queries_time)}' response['Server-Timing']=f'total;dur={total_time}{response_durations or \"\"}' return response class LangMiddleware(BaseMiddleware): __slots__=() def get_lang_object(self, request: HttpRequest) -> _t.Tuple[Language, bool]: set_cookie=True if 'lang' in request.GET: code=request.GET['lang'] elif settings.LANGUAGE_COOKIE_NAME in request.COOKIES: code=request.COOKIES[settings.LANGUAGE_COOKIE_NAME] set_cookie=False else: code=translation.get_language_from_request(request) obj=Language.objects.filter(code=code).first() if obj is not None: return obj, set_cookie return Language.objects.get(code=settings.LANGUAGE_CODE), set_cookie def get_response_handler(self, request: HttpRequest) -> HttpResponse: request.language, set_cookie=self.get_lang_object(request) translation.activate(request.language.code) request.LANGUAGE_CODE=translation.get_language() response=super().get_response_handler(request) if set_cookie: response.set_cookie('lang', request.language.code, domain=settings.SESSION_COOKIE_DOMAIN) if 'Content-Language' not in response: response['Content-Language']=request.language.code return response class TwoFaMiddleware(BaseMiddleware): pass_names=( 'login', 'logout', 'pwa_manifest', 'service_worker', 'offline_gui', 'user_registration', 'terms', ) def request_handler(self, request: HttpRequest) -> HttpRequest: request.user.need_twofa=False if request.user.is_authenticated: twofa=getattr(request.user, 'twofa', None) if twofa and not request.session.get('2fa', False): request.user.need_twofa=True return request def check_url_name(self, request): url_name=resolve(request.path).url_name return any([ url_name not in self.pass_names, url_name is not None and url_name.startswith('password_reset') ]) def get_response_handler(self, request: HttpRequest) -> HttpResponse: if request.user.need_twofa and self.check_url_name(request): return redirect('login') return super().get_response_handler(request) class FrontendChangesNotifications(BaseMiddleware): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.notificator_class=apps.get_app_config('vstutils_api').module.notificator_class def get_response_handler(self, request: HttpRequest) -> HttpResponse: if settings.CENTRIFUGO_CLIENT_KWARGS: with self.notificator_class([]): return super().get_response_handler(request) return super().get_response_handler(request) ","sourceWithComments":"import time\nimport logging\nimport typing as _t\n\nfrom django.db import connection\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.http.request import HttpRequest\nfrom django.http.response import HttpResponse\nfrom django.utils import translation\nfrom django.urls import resolve\nfrom django.shortcuts import redirect\n\nfrom .api.models import Language\nfrom .utils import BaseVstObject\n\n\nlogger = logging.getLogger(settings.VST_PROJECT)\n\n\nclass QueryTimingLogger:\n    __slots__ = ('queries_time',)\n\n    def __init__(self):\n        self.queries_time = 0\n\n    def __call__(self, execute, sql, params, many, context):\n        start = time.time()\n        try:\n            return execute(sql, params, many, context)\n        finally:\n            self.queries_time += time.time() - start\n\n\nclass BaseMiddleware(BaseVstObject):\n    \"\"\"\n    Middleware base class for handling:\n\n    * Incoming requests by :meth:`.BaseMiddleware.request_handler()`;\n    * Outgoing response before any calling on server by :meth:`.BaseMiddleware.get_response_handler()`;\n    * Outgoing responses by :meth:`.BaseMiddleware.handler()`.\n\n    Middleware must be added to `MIDDLEWARE` list in settings.\n\n    Example:\n        .. sourcecode:: python\n\n            from vstutils.middleware import BaseMiddleware\n            from django.http import HttpResponse\n\n\n            class CustomMiddleware(BaseMiddleware):\n                def request_handler(self, request):\n                    # Add header to request\n                    request.headers['User-Agent'] = 'Mozilla\/5.0'\n                    return request\n\n                def get_response_handler(self, request):\n                    if not request.user.is_stuff:\n                        # Return 403 HTTP status for non-stuff users.\n                        # This request never gets in any view.\n                        return HttpResponse(\n                            \"Access denied!\",\n                            content_type=\"text\/plain\",\n                            status_code=403\n                        )\n                    return super().get_response_handler(request)\n\n                def handler(self, request, response):\n                    # Add header to response\n                    response['Custom-Header'] = 'Some value'\n                    return response\n\n    \"\"\"\n    __slots__ = 'get_response', 'logger'\n\n    logger: logging.Logger\n\n    def __init__(self, get_response: _t.Callable):\n        self.get_response = get_response\n        self.logger = logger\n        super().__init__()\n\n    def get_setting(self, value: _t.Text):\n        return self.get_django_settings(value)\n\n    def handler(self, request: HttpRequest, response: HttpResponse) -> HttpResponse:  # nocv\n        # pylint: disable=unused-argument\n\n        \"\"\"\n        The response handler. Method to process responses.\n\n        :param request: HTTP-request object.\n        :type request: django.http.HttpRequest\n        :param response: HTTP-response object which will be sended to client.\n        :type response: django.http.HttpResponse\n        :return: Handled response object.\n        :rtype: django.http.HttpResponse\n        \"\"\"\n\n        return response\n\n    def request_handler(self, request: HttpRequest) -> HttpRequest:\n        # pylint: disable=unused-argument\n\n        \"\"\"\n        The request handler. Called before request is handled by a view.\n\n        :param request: HTTP-request object which is wrapped from client request.\n        :type request: django.http.HttpRequest\n        :return: Handled request object.\n        :rtype: django.http.HttpRequest\n        \"\"\"\n\n        return request\n\n    def get_response_handler(self, request: HttpRequest) -> HttpResponse:\n        \"\"\"\n        Entrypoint for breaking or continuing request handling.\n        This function must return `django.http.HttpResponse` object\n        or result of parent class calling.\n\n        :param request: HTTP-request object which is wrapped from client request.\n        :type request: django.http.HttpRequest\n        :rtype: django.http.HttpResponse\n        \"\"\"\n        return self.get_response(request)\n\n    def __call__(self, request: HttpRequest) -> HttpResponse:\n        return self.handler(\n            self.request_handler(request),\n            self.get_response_handler(request)\n        )\n\n\nclass TimezoneHeadersMiddleware(BaseMiddleware):\n    __slots__ = ()\n\n    def handler(self, request: HttpRequest, response: HttpResponse) -> HttpResponse:\n        response['Server-Timezone'] = self.get_setting('TIME_ZONE')\n        response['VSTutils-Version'] = self.get_setting('VSTUTILS_VERSION')\n        return response\n\n\nclass ExecuteTimeHeadersMiddleware(BaseMiddleware):\n    __slots__ = ()\n\n    def __duration_handler(self, data):\n        key, value = data\n        if isinstance(value, (list, tuple, map, filter, _t.Generator)):\n            value = ''.join((self.__duration_handler(('', v)) for v in value))\n        elif isinstance(value, (int, float)):\n            value = f';dur={float(value)}'\n        elif isinstance(value, str) and value:\n            if ' ' in value:\n                value = f'\"{value}\"'\n            value = f';desc={value}'\n        elif not value:\n            value = ''\n        return f'{key}{value}'\n\n    def _round_time(self, seconds: _t.Union[int, float]):\n        return round(seconds * 1000, 2)\n\n    def get_response_handler(self, request: HttpRequest) -> HttpResponse:\n        start_time = time.time()\n        get_response_handler = super().get_response_handler\n        ql = QueryTimingLogger()\n\n        if not getattr(request, 'is_bulk', False):\n            with connection.execute_wrapper(ql):\n                response = get_response_handler(request)\n        else:\n            response = get_response_handler(request)\n\n        response_durations = getattr(response, 'timings', None)  # type: ignore\n        total_time = self._round_time(time.time() - start_time)\n\n        if getattr(request, 'is_bulk', False):\n            response['Response-Time'] = str(total_time)\n        else:\n            if response_durations:\n                response_durations = f', {\", \".join(map(self.__duration_handler, response_durations.items()))}'\n            else:\n                response_durations = \"\"\n            response_durations += f', db_execution_time;dur={self._round_time(ql.queries_time)}'\n            response['Server-Timing'] = f'total;dur={total_time}{response_durations or \"\"}'\n        return response\n\n\nclass LangMiddleware(BaseMiddleware):\n    __slots__ = ()\n\n    def get_lang_object(self, request: HttpRequest) -> _t.Tuple[Language, bool]:\n        set_cookie = True\n        if 'lang' in request.GET:\n            code = request.GET['lang']\n        elif settings.LANGUAGE_COOKIE_NAME in request.COOKIES:\n            code = request.COOKIES[settings.LANGUAGE_COOKIE_NAME]\n            set_cookie = False\n        else:\n            code = translation.get_language_from_request(request)  # type: ignore\n        obj = Language.objects.filter(code=code).first()\n        if obj is not None:\n            return obj, set_cookie\n        return Language.objects.get(code=settings.LANGUAGE_CODE), set_cookie  # nocv\n\n    def get_response_handler(self, request: HttpRequest) -> HttpResponse:\n        request.language, set_cookie = self.get_lang_object(request)  # type: ignore\n        translation.activate(request.language.code)  # type: ignore\n        request.LANGUAGE_CODE = translation.get_language()  # type: ignore\n        response = super().get_response_handler(request)\n        if set_cookie:\n            response.set_cookie('lang', request.language.code, domain=settings.SESSION_COOKIE_DOMAIN)  # type: ignore\n        if 'Content-Language' not in response:\n            response['Content-Language'] = request.language.code  # type: ignore\n        return response\n\n\nclass TwoFaMiddleware(BaseMiddleware):\n    pass_names = (\n        'login',\n        'logout',\n        'pwa_manifest',\n        'service_worker',\n        'offline_gui',\n        'user_registration',\n        'terms',\n    )\n\n    def request_handler(self, request: HttpRequest) -> HttpRequest:\n        request.user.need_twofa = False  # type: ignore\n        if request.user.is_authenticated:\n            twofa = getattr(request.user, 'twofa', None)\n            if twofa and not request.session.get('2fa', False):\n                request.user.need_twofa = True  # type: ignore\n        return request\n\n    def check_url_name(self, request):\n        url_name = resolve(request.path).url_name\n        return any([\n            url_name not in self.pass_names,\n            url_name is not None and url_name.startswith('password_reset')\n        ])\n\n    def get_response_handler(self, request: HttpRequest) -> HttpResponse:\n        if request.user.need_twofa and self.check_url_name(request):  # type: ignore\n            return redirect('login')\n        return super().get_response_handler(request)\n\n\nclass FrontendChangesNotifications(BaseMiddleware):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.notificator_class = apps.get_app_config('vstutils_api').module.notificator_class\n\n    def get_response_handler(self, request: HttpRequest) -> HttpResponse:\n        if settings.CENTRIFUGO_CLIENT_KWARGS:\n            with self.notificator_class([]):\n                return super().get_response_handler(request)\n        return super().get_response_handler(request)\n"}},"msg":"Release 5.0.0 Beta 136\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"d0d4cd80969cb1e4c093e85b914ccc52e65c05ec":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/d0d4cd80969cb1e4c093e85b914ccc52e65c05ec","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/d0d4cd80969cb1e4c093e85b914ccc52e65c05ec","sha":"d0d4cd80969cb1e4c093e85b914ccc52e65c05ec","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 8df4dde8..8c8a6268 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b137'\n+__version__: str = '5.0.0b138'\ndiff --git a\/vstutils\/api\/base.py b\/vstutils\/api\/base.py\nindex 39e48037..873e3d7a 100644\n--- a\/vstutils\/api\/base.py\n+++ b\/vstutils\/api\/base.py\n@@ -344,7 +344,7 @@ def filter_queryset(self, queryset: QuerySet):\n             if issubclass(serializer_class, BaseSerializer):\n                 serializer = serializer_class()\n                 read_fields = {\n-                    f.field_name\n+                    f.source if f.source and '.' not in f.source else f.field_name\n                     for f in serializer._readable_fields\n                 }\n                 model_fields = {\n@@ -356,7 +356,12 @@ def filter_queryset(self, queryset: QuerySet):\n                     for f in queryset.model._meta.get_fields()\n                     if isinstance(f, models.ForeignKey)\n                 }\n-                deferable_fields = model_fields - read_fields - fk_related_fields\n+                deferable_fields = (\n+                        model_fields -\n+                        read_fields -\n+                        fk_related_fields -\n+                        set(getattr(queryset.model, '_required_fields', None) or set())\n+                )\n                 if deferable_fields:\n                     return qs.defer(*deferable_fields)\n \ndiff --git a\/vstutils\/api\/filter_backends.py b\/vstutils\/api\/filter_backends.py\nindex e8b322fd..e73b58e8 100644\n--- a\/vstutils\/api\/filter_backends.py\n+++ b\/vstutils\/api\/filter_backends.py\n@@ -156,19 +156,15 @@ class SelectRelatedFilterBackend(VSTFilterBackend):\n     __slots__ = ()\n     required = True\n     fields_fetch_map = {\n-        'select': (models.ForeignKey, models.OneToOneField),\n+        'select': (models.ForeignKey,),\n         'prefetch': (models.ManyToManyField, models.ManyToManyField.rel_class)\n     }\n \n     def filter_model_fields(self, view, field_types):\n         return tuple(\n-            map(\n-                lambda f: f.name,\n-                filter(\n-                    lambda f: isinstance(f, field_types),\n-                    view.get_serializer_class().Meta.model()._meta.fields\n-                )\n-            )\n+            f.name\n+            for f in view.get_serializer_class().Meta.model()._meta.fields\n+            if isinstance(f, field_types)\n         )\n \n     def filter_by_func(self, queryset, queryset_func_name, related):\n@@ -187,15 +183,18 @@ def prefetch(self, queryset_func_name, view, queryset):\n \n     def filter_queryset(self, request, queryset, view):\n         \"\"\"\n-        Select related in queryset.\n+        Select+prefetch related in queryset.\n         \"\"\"\n-        if queryset.query.select_related:\n-            return queryset\n-        if not getattr(view, 'select_related', True):\n-            return queryset\n         if request.method != 'GET':\n             return queryset\n-        return self.prefetch('prefetch', view, self.prefetch('select', view, queryset))\n+\n+        if not queryset.query.select_related and getattr(view, 'select_related', True):\n+            queryset = self.prefetch('select', view, queryset)\n+\n+        # pylint: disable=protected-access\n+        if not queryset._prefetch_related_lookups and getattr(view, 'prefetch_related', True):\n+            queryset = self.prefetch('prefetch', view, queryset)\n+        return queryset\n \n \n class DeepViewFilterBackend(VSTFilterBackend):\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b137'\n+__version__: str = '5.0.0b138'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b137'"],"goodparts":["__version__: str = '5.0.0b138'"]}],"source":"\n\n__version__: str='5.0.0b137' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b137'\n"},"\/vstutils\/api\/base.py":{"changes":[{"diff":"\n             if issubclass(serializer_class, BaseSerializer):\n                 serializer = serializer_class()\n                 read_fields = {\n-                    f.field_name\n+                    f.source if f.source and '.' not in f.source else f.field_name\n                     for f in serializer._readable_fields\n                 }\n                 model_fields = {\n","add":1,"remove":1,"filename":"\/vstutils\/api\/base.py","badparts":["                    f.field_name"],"goodparts":["                    f.source if f.source and '.' not in f.source else f.field_name"]},{"diff":"\n                     for f in queryset.model._meta.get_fields()\n                     if isinstance(f, models.ForeignKey)\n                 }\n-                deferable_fields = model_fields - read_fields - fk_related_fields\n+                deferable_fields = (\n+                        model_fields -\n+                        read_fields -\n+                        fk_related_fields -\n+                        set(getattr(queryset.model, '_required_fields', None) or set())\n+                )\n                 if deferable_fields:\n                     return qs.defer(*deferable_fields)\n","add":6,"remove":1,"filename":"\/vstutils\/api\/base.py","badparts":["                deferable_fields = model_fields - read_fields - fk_related_fields"],"goodparts":["                deferable_fields = (","                        model_fields -","                        read_fields -","                        fk_related_fields -","                        set(getattr(queryset.model, '_required_fields', None) or set())","                )"]}],"source":"\n\"\"\" Default ViewSets for web-api. \"\"\" import re import io import json import logging import inspect import traceback import datetime import typing as _t from functools import partial from copy import deepcopy import orjson from django.conf import settings from django.core import exceptions as djexcs from django.http.response import Http404, FileResponse, HttpResponseNotModified from django.db.models.query import QuerySet from django.db import transaction, models from django.utils.functional import cached_property, lazy from rest_framework.reverse import reverse from rest_framework import viewsets as vsets, views as rvs, exceptions, status from rest_framework.serializers import BaseSerializer from rest_framework.response import Response as RestResponse from rest_framework.request import Request from rest_framework.decorators import action from rest_framework.schemas import AutoSchema as DRFAutoSchema from rest_framework.utils.serializer_helpers import ReturnList, ReturnDict from..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator from. import responses, fields from.serializers import( ErrorSerializer, ValidationErrorSerializer, OtherErrorsSerializer, serializers ) default_methods: _t.List[_t.Text]=[ 'get', 'post', 'put', 'patch', 'delete', 'options', 'head' ] detail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text]=( 'create', 'retrieve', 'update', 'partial_update' ) main_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text]=('list',) +detail_actions query_check_params=( 'extra_select', 'annotations_select' ) default_cache_control_header_data='private, no-cache' non_optimizeable_fields=( fields.NamedBinaryFileInJsonField, serializers.PrimaryKeyRelatedField, serializers.BaseSerializer, serializers.SerializerMethodField, ) logger: logging.Logger=logging.getLogger(settings.VST_PROJECT) http404_re_translate=re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE) def _get_cleared(qs): return getattr(qs, 'cleared', lambda: qs)() def apply_translation(obj: _t.Any, trans_function: _t.Callable): recursive_call=partial(apply_translation, trans_function=trans_function) if isinstance(obj, dict): return{ trans_function(k): recursive_call(v) for k, v in obj.items() } elif isinstance(obj,(tuple, list)): return type(obj)(recursive_call(v) for v in obj) elif isinstance(obj,(exceptions.ErrorDetail, ReturnList, ReturnDict)): with raise_context_decorator_with_default(): obj=orjson.loads(json.dumps(obj)) return recursive_call(obj) return trans_function(obj) def exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]: traceback_str: _t.Text=traceback.format_exc() default_exc=(exceptions.APIException, djexcs.PermissionDenied) serializer_class=ErrorSerializer data: _t.Optional[_t.Dict[_t.Text, _t.Any]]=None code: _t.SupportsInt=status.HTTP_400_BAD_REQUEST lang=getattr(context.get('request'), 'language', None) translate=getattr(lang, 'translate', lambda text: text) if isinstance(exc, exceptions.APIException): if isinstance(exc.detail, ReturnDict): for key, value in exc.detail.items(): exc.detail[key]=apply_translation(value, translate) else: exc.detail=apply_translation(exc.detail, translate) elif isinstance(exc, djexcs.PermissionDenied): data={\"detail\": translate(str(exc))} code=status.HTTP_403_FORBIDDEN logger.debug(traceback_str) elif isinstance(exc, Http404): text=getattr(exc, 'msg', str(exc)) with raise_context_decorator_with_default(): instance_type=http404_re_translate.match(text).group(1) if instance_type: instance_type=str(instance_type) instance_type_format=translate(instance_type.lower()) if instance_type.istitle(): instance_type_format=instance_type_format.title() text=translate(text.replace(instance_type, '{0}')).format(instance_type_format) elif text: text=translate(text) data={\"detail\": text} code=status.HTTP_404_NOT_FOUND logger.debug(traceback_str) elif isinstance(exc, djexcs.ValidationError): if hasattr(exc, 'error_dict'): errors=apply_translation(dict(exc), translate) elif hasattr(exc, 'error_list'): errors={'other_errors': apply_translation(list(exc), translate)} else: errors={'other_errors': apply_translation(str(exc), translate)} data={\"detail\": errors} serializer_class=ValidationErrorSerializer logger.debug(traceback_str) elif not isinstance(exc, default_exc) and isinstance(exc, Exception): data={ 'detail': translate(str(exc)), 'error_type': type(exc).__name__ } code=getattr(exc, 'status', code) serializer_class=OtherErrorsSerializer logger.debug(traceback_str) if data is not None: serializer=serializer_class(data=data) try: serializer.is_valid(raise_exception=True) except: logger.debug(\"Cannot serialize error data.\") else: return responses.BaseResponseClass(serializer.data, code) logger.info(traceback_str) if getattr(exc, 'status_code', 400) >=400 else None default_response=rvs.exception_handler(exc, context) if isinstance(exc, exceptions.NotAuthenticated): default_response[\"X-Anonymous\"]=\"true\" return default_response class AutoSchema(DRFAutoSchema): __slots__=() def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text: method_name: _t.Text=getattr(self.view, 'action', method.lower()) method_obj: _t.Optional[_t.Callable]=getattr(self.view, method_name, None) method_view: _t.Optional[_t.Type[rvs.APIView]]=( getattr(method_obj, '_nested_view', None) if method_obj else None ) method_view=get_if_lazy(method_view) if method_obj.__doc__: return method_obj.__doc__.strip() if not method_view: if not self.view.__class__.__doc__: model=getattr(self.view, 'model', None) if model is not None and model.__doc__: self.view.__class__.__doc__=model.__doc__ return super().get_description(path, method) method_view_obj=method_view() action=path.split('\/')[-2] submethod=getattr(method_view, action, None) if submethod.__doc__: return str(submethod.__doc__).strip() if method=='GET' and '{' not in path[:-1].split('\/')[-1]: action='list' elif method=='POST': action='create' elif method=='GET': action='retrieve' elif method=='PUT': action='update' elif method=='PATCH': action='partial_update' elif method=='DELETE': action='destroy' method_view_obj.action=action if method_view_obj.schema is None: return 'No description' return method_view_obj.schema.get_description(path, method) class QuerySetMixin(rvs.APIView): \"\"\" Instance REST operations. \"\"\" __slots__=() queryset: _t.Optional[QuerySet] _queryset: _t.Optional[QuerySet]=None model: _t.Optional[_t.Type[models.Model]]=None @classproperty def queryset(self) -> QuerySet: if self._queryset is not None: return _get_cleared(self._queryset) return _get_cleared(self.model.objects.all()) @queryset.setter def queryset(self, value): self._queryset=value def _base_get_queryset(self) -> QuerySet: assert self.queryset is not None,( \"'%s' should either include a `queryset` attribute, \" \"or override the `get_queryset()` method.\" % self.__class__.__name__ ) queryset=self.queryset if isinstance(queryset, QuerySet): queryset=queryset.all() return queryset def get_extra_queryset(self) -> _t.Optional[QuerySet]: return self.queryset def get_queryset(self) -> QuerySet: if self.queryset is None: assert self.model is not None,( \"'%s' should either include a `queryset` or `model` attribute,\" \" or override the `get_queryset()` method.\" % self.__class__.__name__ ) self.queryset=_get_cleared(self.model.objects.all()) self.queryset=self.get_extra_queryset() return self._base_get_queryset() class GenericViewSetMeta(type(vsets.GenericViewSet)): __slots__=() def __new__(mcs, name, bases, attrs): new_class=super().__new__(mcs, name, bases, attrs) for detail in(True, False): setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None) return new_class def __get_http_methods_attr_name(cls, detail): return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) class GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta): \"\"\" The base class for all views. Extends the standard features of the DRF class. Here are some of the possibilities: -Provides ``model`` attribute instead of ``queryset``. -Provides to set serializers for each action separately through a dictionary ``action_serializers`` or attributes starting with ``serializer_class_[action name]``. -Provides to specify a serializer for lists and detail views separately. -Optimizes the database query for GET requests, if possible, by selecting only the fields necessary for the serializer. \"\"\" __slots__=() optimize_get_by_values=settings.OPTIMIZE_GET_BY_VALUES optimize_get_by_values_actions=() select_related=False serializer_class: _t.Type[serializers.Serializer] _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]]=None model: _t.Optional[_t.Type[models.Model]]=None action_serializers: _t.Dict[_t.Text, serializers.Serializer]={} _nested_args: _t.Dict[_t.Text, _t.Any] _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]] nested_detail: bool def create_action_serializer(self, *args, **kwargs): \"\"\" A method that implements the standard logic for actions. It relies on the passed arguments to build logic. So, if the named argument data was passed, then the serializer will be validated and saved. :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed. Enabled by default. :type autosave: bool :param: data: Default serializer class argument with serializable data. Enables validation and saving. :type data: dict :param: instance: Default serializer class argument with serializable instance. :type instance: typing.Any :param custom_data: Dict with data which will passed to `validated_data` without validation. :type custom_data: dict :param serializer_class: Serializer class for this execution. May be usefull when request and response serializers is different. :type serializer_class: None,type[rest_framework.serializers.Serializer] :return: Ready serializer with default logic performed. :rtype: rest_framework.serializers.Serializer \"\"\" self.serializer_class=kwargs.pop('serializer_class', None) or self.get_serializer_class() save_kwargs=kwargs.pop('custom_data',{}) should_save=kwargs.pop('autosave', True) or save_kwargs serializer=self.get_serializer(*args, **kwargs) if 'data' in kwargs: serializer.is_valid(raise_exception=True) if should_save: serializer.save(**save_kwargs) return serializer def filter_for_filter_backends(self, backend): return getattr(backend, 'required', False) def filter_queryset(self, queryset: QuerySet): if hasattr(self, 'nested_name'): self.filter_backends=filter( self.filter_for_filter_backends, self.filter_backends ) qs=super().filter_queryset(queryset) if self.action in('list', 'retrieve') +self.optimize_get_by_values_actions and self.optimize_get_by_values: serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer): serializer=serializer_class() read_fields={ f.field_name for f in serializer._readable_fields } model_fields={ f.name for f in queryset.model._meta.get_fields() } fk_related_fields={ f.name for f in queryset.model._meta.get_fields() if isinstance(f, models.ForeignKey) } deferable_fields=model_fields -read_fields -fk_related_fields if deferable_fields: return qs.defer(*deferable_fields) return qs def get_serializer_class(self): \"\"\" Provides to setup serializer class for each action. \"\"\" lookup_field=self.lookup_url_kwarg or self.lookup_field or 'pk' action_name=getattr(self, 'action', None) serializer_class=getattr(self, f'serializer_class_{action_name}', None) if serializer_class: return serializer_class if action_name in self.action_serializers: serializer_class=self.action_serializers.get(action_name, None) if serializer_class: return serializer_class if action_name not in main_actions: view_func=getattr(self, action_name, None) if view_func is not None: serializer_class=getattr(view_func, 'kwargs',{}).get('serializer_class', None) if serializer_class: return serializer_class is_detail=( hasattr(self, 'serializer_class_one') and self.request and ( action_name in detail_actions or ( self.kwargs.get(lookup_field, False) and action_name in main_actions ) ) ) if is_detail: return self.serializer_class_one return super().get_serializer_class() def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer: \"\"\" Return the serializer instance that should be used for validating and deserializing input, and for serializing output. Provide to use:class:`django.http.StreamingHttpResponse` as serializer init. \"\"\" serializer_class=self.get_serializer_class() if issubclass(serializer_class, BaseSerializer): kwargs.setdefault('context', self.get_serializer_context()) return serializer_class(*args, **kwargs) def nested_allow_check(self): \"\"\" Just raise or pass. Used for nested views for easier access checking. \"\"\" @classmethod def get_view_methods(cls, detail=False) -> _t.List[_t.Text]: attr_name=''.join(['__', 'detail' if detail else 'list', 'http_methods', '__']) methods=getattr(cls, attr_name, None) if methods is not None: return methods methods=[] if not detail and hasattr(cls, 'create'): methods.append('post') if hasattr(cls, 'list') or hasattr(cls, 'retrieve'): methods.append('get') if detail and hasattr(cls, 'update'): methods.append('put') if detail and hasattr(cls, 'partial_update'): methods.append('patch') if detail and hasattr(cls, 'destroy'): methods.append('delete') setattr(cls, attr_name, methods) return methods @classmethod def get_extra_actions(cls): return super().get_extra_actions() @classmethod def as_view(cls, actions=None, **initkwargs): return super().as_view(actions, **initkwargs) class CachableHeadMixin(GenericViewSet): \"\"\" Mixin which cache GET responses. Uses standard HTTP-caching mechanism which response 304 when Etag match. .. warning:: This works only with models based on:class:`vstutils.models.BModel`. \"\"\" class NotModifiedException(exceptions.APIException): status_code=304 default_detail='' default_code='cached' @cached_property def model_class(self): return getattr(self, 'model', None) or self.queryset.model @cached_property @raise_context_decorator_with_default(default=False) def is_main_action(self): if hasattr(self, 'should_cache') and not self.should_cache(): return False return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None def get_etag_value(self, model_class, request): return( f'{model_class.get_etag_value()}' f'_' f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}' ) def check_etag(self, request): etag_data=self.get_etag_value(self.model_class, request) if request.method==\"GET\" and etag_data==str(request.headers.get(\"If-None-Match\", None)): raise self.NotModifiedException(\"\") def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse: result_response=super().finalize_response(request, response, *args, **kwargs) if self.is_main_action and 'ETag' not in result_response.headers: result_response.headers['ETag']=lazy(self.get_etag_value, str)(self.model_class, request) return result_response def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None: super().initial(request, *args, **kwargs) if self.is_main_action: self.check_etag(request) class CopyMixin(GenericViewSet): \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\" __slots__=() copy_prefix='copy-' copy_field_name='name' copy_related: _t.Iterable[_t.Text]=() def copy_instance(self, instance): new_instance=deepcopy(instance) new_instance.pk=None name=getattr(instance, self.copy_field_name, None) if isinstance(name, str): name=f'{self.copy_prefix}{name}' setattr(new_instance, self.copy_field_name, name) new_instance.save() for related_name in self.copy_related: new_related_manager=getattr(new_instance, related_name, None) if new_related_manager is not None: new_related_manager.set(getattr(instance, related_name).all()) return new_instance @action(methods=['post'], detail=True) @transaction.atomic() def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass: \"\"\" Endpoint which copy instance with deps. \"\"\" instance=self.copy_instance(self.get_object()) serializer=self.get_serializer(instance, data=request.data, partial=True) serializer.is_valid() serializer.save() return responses.HTTP_201_CREATED(serializer.data) class FileResponseRetrieveMixin(GenericViewSet): \"\"\" ViewSet mixin for retriving FileResponse from models with file fields data. Example: .. literalinclude::..\/test_src\/test_proj\/models\/files.py :lines: 1-22,59-77 \"\"\" __slots__=() instance_field_data: _t.Text instance_field_filename: _t.Text='filename' instance_field_timestamp: _t.Optional[_t.Text]=None cache_control_header_data: _t.Optional[_t.Text]=None serializer_class_retrieve=FileResponse def get_file_response_kwargs(self, instance): data=getattr(instance, self.instance_field_data) if isinstance(data, str): data=data.encode('utf-8') if isinstance(data,(bytes, bytearray)): data=io.BytesIO(data) return{ \"streaming_content\": data, \"as_attachment\": True, \"filename\": getattr(instance, self.instance_field_filename, ''), } @patch_gzip_response_decorator def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]: instance=self.get_object() instance_edit_timestamp=None if self.instance_field_timestamp: instance_edit: datetime.datetime=getattr(instance, self.instance_field_timestamp, None) instance_edit_timestamp=instance_edit.timestamp() if instance_edit else None if instance_edit_timestamp and instance_edit_timestamp==float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')): return HttpResponseNotModified() response: FileResponse=self.get_serializer(**self.get_file_response_kwargs(instance)) if self.instance_field_timestamp and instance_edit_timestamp: cache_control_header_data=getattr(self, 'cache_control_header_data', None) if cache_control_header_data is None: cache_control_header_data=default_cache_control_header_data response['Cache-Control']=cache_control_header_data response['ETag']=str(instance_edit_timestamp) return response class ModelViewSet(GenericViewSet, vsets.ModelViewSet): \"\"\" A viewset that provides CRUD actions under model. Inherited from:class:`.GenericViewSet`. :var model: DB model with data. :vartype model: vstutils.models.BModel :var serializer_class: Serializer for view of Model data. :vartype serializer_class: vstutils.api.serializers.VSTSerializer :var serializer_class_one: Serializer for view one instance of Model data. :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`. :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer Examples: .. sourcecode:: python from vstutils.api.base import ModelViewSet from. import serializers as sers class StageViewSet(ModelViewSet): model=sers.models.Stage serializer_class=sers.StageSerializer serializer_class_one=sers.StageSerializer \"\"\" __slots__=() class NonModelsViewSet(GenericViewSet): __slots__=() base_name=None def get_queryset(self) -> QuerySet: return QuerySet() class ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin): __slots__=() schema=None @property def methods(self) -> _t.Iterable[_t.Text]: def is_list_action(attr): if not inspect.isfunction(attr): return False elif not hasattr(attr, 'url_path'): return False elif getattr(attr, 'detail', True): return False return True return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action)) def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass: routes={ method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request) for method in self.methods } return responses.HTTP_200_OK(routes) class ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for readonly models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin): \"\"\" Default viewset like vstutils.api.base.ModelViewSet for list only models. Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() class HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin): \"\"\" Default viewset like ReadOnlyModelViewSet but for historical data (allow to delete, but can't create and update). Inherited from:class:`.GenericViewSet`. \"\"\" __slots__=() ","sourceWithComments":"\"\"\"\nDefault ViewSets for web-api.\n\"\"\"\n\nimport re\nimport io\nimport json\nimport logging\nimport inspect\nimport traceback\nimport datetime\nimport typing as _t\nfrom functools import partial\nfrom copy import deepcopy\n\nimport orjson\nfrom django.conf import settings\nfrom django.core import exceptions as djexcs\nfrom django.http.response import Http404, FileResponse, HttpResponseNotModified\nfrom django.db.models.query import QuerySet\nfrom django.db import transaction, models\nfrom django.utils.functional import cached_property, lazy\nfrom rest_framework.reverse import reverse\nfrom rest_framework import viewsets as vsets, views as rvs, exceptions, status\nfrom rest_framework.serializers import BaseSerializer\nfrom rest_framework.response import Response as RestResponse\nfrom rest_framework.request import Request\nfrom rest_framework.decorators import action\nfrom rest_framework.schemas import AutoSchema as DRFAutoSchema\nfrom rest_framework.utils.serializer_helpers import ReturnList, ReturnDict\n\nfrom ..utils import classproperty, get_if_lazy, raise_context_decorator_with_default, patch_gzip_response_decorator\nfrom . import responses, fields\nfrom .serializers import (\n    ErrorSerializer,\n    ValidationErrorSerializer,\n    OtherErrorsSerializer,\n    serializers\n)\n\ndefault_methods: _t.List[_t.Text] = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'delete',\n    'options',\n    'head'\n]\ndetail_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text] = (\n    'create',\n    'retrieve',\n    'update',\n    'partial_update'\n)\nmain_actions: _t.Tuple[_t.Text, _t.Text, _t.Text, _t.Text, _t.Text] = ('list',) + detail_actions\nquery_check_params = (\n    'extra_select',\n    'annotations_select'\n)\ndefault_cache_control_header_data = 'private, no-cache'\nnon_optimizeable_fields = (\n    fields.NamedBinaryFileInJsonField,\n    serializers.PrimaryKeyRelatedField,\n    serializers.BaseSerializer,\n    serializers.SerializerMethodField,\n)\nlogger: logging.Logger = logging.getLogger(settings.VST_PROJECT)\nhttp404_re_translate = re.compile(r\"^No\\s(.+)\\smatches the given query.$\", re.MULTILINE)\n\n\ndef _get_cleared(qs):\n    return getattr(qs, 'cleared', lambda: qs)()\n\n\ndef apply_translation(obj: _t.Any, trans_function: _t.Callable):\n    recursive_call = partial(apply_translation, trans_function=trans_function)\n    if isinstance(obj, dict):\n        return {\n            trans_function(k): recursive_call(v)\n            for k, v in obj.items()\n        }\n    elif isinstance(obj, (tuple, list)):\n        return type(obj)(recursive_call(v) for v in obj)\n    elif isinstance(obj, (exceptions.ErrorDetail, ReturnList, ReturnDict)):\n        with raise_context_decorator_with_default():\n            obj = orjson.loads(json.dumps(obj))\n            return recursive_call(obj)\n    return trans_function(obj)\n\n\ndef exception_handler(exc: Exception, context: _t.Any) -> _t.Optional[RestResponse]:\n    # pylint: disable=too-many-branches\n    traceback_str: _t.Text = traceback.format_exc()\n    default_exc = (exceptions.APIException, djexcs.PermissionDenied)\n    serializer_class = ErrorSerializer\n    data: _t.Optional[_t.Dict[_t.Text, _t.Any]] = None\n    code: _t.SupportsInt = status.HTTP_400_BAD_REQUEST\n    lang = getattr(context.get('request'), 'language', None)\n    translate = getattr(lang, 'translate', lambda text: text)\n\n    if isinstance(exc, exceptions.APIException):\n        if isinstance(exc.detail, ReturnDict):\n            for key, value in exc.detail.items():\n                exc.detail[key] = apply_translation(value, translate)\n        else:\n            exc.detail = apply_translation(exc.detail, translate)\n\n    elif isinstance(exc, djexcs.PermissionDenied):  # pragma: no cover\n        data = {\"detail\": translate(str(exc))}\n        code = status.HTTP_403_FORBIDDEN\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, Http404):\n        text = getattr(exc, 'msg', str(exc))\n        with raise_context_decorator_with_default():\n            instance_type = http404_re_translate.match(text).group(1)  # type: ignore\n            if instance_type:\n                instance_type = str(instance_type)\n                instance_type_format = translate(instance_type.lower())\n                if instance_type.istitle():\n                    instance_type_format = instance_type_format.title()\n                text = translate(text.replace(instance_type, '{0}')).format(instance_type_format)\n            elif text:  # nocv\n                text = translate(text)\n        data = {\"detail\": text}\n        code = status.HTTP_404_NOT_FOUND\n        logger.debug(traceback_str)\n\n    elif isinstance(exc, djexcs.ValidationError):\n        if hasattr(exc, 'error_dict'):  # nocv\n            errors = apply_translation(dict(exc), translate)  # type: ignore\n        elif hasattr(exc, 'error_list'):\n            errors = {'other_errors': apply_translation(list(exc), translate)}\n        else:  # nocv\n            errors = {'other_errors': apply_translation(str(exc), translate)}\n        data = {\"detail\": errors}\n        serializer_class = ValidationErrorSerializer\n        logger.debug(traceback_str)\n\n    elif not isinstance(exc, default_exc) and isinstance(exc, Exception):\n        data = {\n            'detail': translate(str(exc)),\n            'error_type': type(exc).__name__\n        }\n        code = getattr(exc, 'status', code)\n        serializer_class = OtherErrorsSerializer\n        logger.debug(traceback_str)\n\n    if data is not None:\n        serializer = serializer_class(data=data)\n        try:\n            serializer.is_valid(raise_exception=True)\n        except:  # nocv\n            logger.debug(\"Cannot serialize error data.\")\n        else:\n            return responses.BaseResponseClass(serializer.data, code)\n\n    logger.info(traceback_str) if getattr(exc, 'status_code', 400) >= 400 else None\n    default_response = rvs.exception_handler(exc, context)\n\n    if isinstance(exc, exceptions.NotAuthenticated):  # nocv\n        default_response[\"X-Anonymous\"] = \"true\"  # type: ignore\n\n    return default_response\n\n\nclass AutoSchema(DRFAutoSchema):\n    __slots__ = ()\n\n    def get_description(self, path: _t.Text, method: _t.Text) -> _t.Text:\n        # pylint: disable=simplifiable-if-statement,redefined-outer-name\n        method_name: _t.Text = getattr(self.view, 'action', method.lower())\n        method_obj: _t.Optional[_t.Callable] = getattr(self.view, method_name, None)\n        method_view: _t.Optional[_t.Type[rvs.APIView]] = (\n            getattr(method_obj, '_nested_view', None)\n            if method_obj else None\n        )\n        method_view = get_if_lazy(method_view)\n\n        if method_obj.__doc__:\n            return method_obj.__doc__.strip()\n        if not method_view:\n            if not self.view.__class__.__doc__:\n                model = getattr(self.view, 'model', None)\n                if model is not None and model.__doc__:\n                    self.view.__class__.__doc__ = model.__doc__\n            return super().get_description(path, method)\n\n        method_view_obj = method_view()\n        action = path.split('\/')[-2]\n        submethod = getattr(method_view, action, None)\n        if submethod.__doc__:\n            return str(submethod.__doc__).strip()  # nocv\n        if method == 'GET' and '{' not in path[:-1].split('\/')[-1]:\n            action = 'list'\n        elif method == 'POST':\n            action = 'create'\n        elif method == 'GET':\n            action = 'retrieve'\n        elif method == 'PUT':\n            action = 'update'\n        elif method == 'PATCH':\n            action = 'partial_update'\n        elif method == 'DELETE':\n            action = 'destroy'\n        method_view_obj.action = action  # type: ignore\n        if method_view_obj.schema is None:\n            return 'No description'  # nocv\n        return method_view_obj.schema.get_description(path, method)  # type: ignore\n\n\nclass QuerySetMixin(rvs.APIView):\n    \"\"\"\n    Instance REST operations.\n    \"\"\"\n    __slots__ = ()\n    queryset: _t.Optional[QuerySet]\n    _queryset: _t.Optional[QuerySet] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n\n    @classproperty  # type: ignore\n    def queryset(self) -> QuerySet:\n        # pylint: disable=method-hidden,function-redefined\n        if self._queryset is not None:\n            return _get_cleared(self._queryset)\n        return _get_cleared(self.model.objects.all())\n\n    @queryset.setter  # type: ignore\n    def queryset(self, value):\n        self._queryset = value\n\n    def _base_get_queryset(self) -> QuerySet:\n        assert self.queryset is not None, (\n            \"'%s' should either include a `queryset` attribute, \"\n            \"or override the `get_queryset()` method.\"\n            % self.__class__.__name__\n        )\n\n        queryset = self.queryset\n        if isinstance(queryset, QuerySet):\n            # Ensure queryset is re-evaluated on each request.\n            queryset = queryset.all()\n        return queryset\n\n    def get_extra_queryset(self) -> _t.Optional[QuerySet]:\n        return self.queryset\n\n    def get_queryset(self) -> QuerySet:\n        if self.queryset is None:  # nocv\n            assert self.model is not None, (\n                \"'%s' should either include a `queryset` or `model` attribute,\"\n                \" or override the `get_queryset()` method.\"\n                % self.__class__.__name__\n            )\n            self.queryset = _get_cleared(self.model.objects.all())\n        self.queryset = self.get_extra_queryset()\n        return self._base_get_queryset()\n\n\nclass GenericViewSetMeta(type(vsets.GenericViewSet)):  # type: ignore\n    __slots__ = ()\n\n    def __new__(mcs, name, bases, attrs):\n        new_class = super().__new__(mcs, name, bases, attrs)\n        for detail in (True, False):\n            setattr(new_class, mcs.__get_http_methods_attr_name(new_class, detail), None)\n        return new_class\n\n    def __get_http_methods_attr_name(cls, detail):\n        return ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n\n\nclass GenericViewSet(QuerySetMixin, vsets.GenericViewSet, metaclass=GenericViewSetMeta):\n    \"\"\"\n    The base class for all views. Extends the standard features of the DRF class.\n    Here are some of the possibilities:\n\n    - Provides ``model`` attribute instead of ``queryset``.\n    - Provides to set serializers for each action separately through a dictionary ``action_serializers`` or\n      attributes starting with ``serializer_class_[action name]``.\n    - Provides to specify a serializer for lists and detail views separately.\n    - Optimizes the database query for GET requests, if possible,\n      by selecting only the fields necessary for the serializer.\n    \"\"\"\n    __slots__ = ()\n    optimize_get_by_values = settings.OPTIMIZE_GET_BY_VALUES\n    optimize_get_by_values_actions = ()\n    select_related = False\n    serializer_class: _t.Type[serializers.Serializer]\n    _serializer_class_one: _t.Optional[_t.Type[serializers.Serializer]] = None\n    model: _t.Optional[_t.Type[models.Model]] = None\n    action_serializers: _t.Dict[_t.Text, serializers.Serializer] = {}\n    _nested_args: _t.Dict[_t.Text, _t.Any]\n    _nested_view: _t.ClassVar[_t.Union[QuerySetMixin, vsets.GenericViewSet]]\n    nested_detail: bool\n\n    def create_action_serializer(self, *args, **kwargs):\n        \"\"\"\n        A method that implements the standard logic for actions.\n        It relies on the passed arguments to build logic.\n        So, if the named argument data was passed, then the serializer will be validated and saved.\n\n        :param autosave: Enables \/ disables the execution of saving by the serializer if named argument `data` passed.\n                         Enabled by default.\n        :type autosave: bool\n        :param: data: Default serializer class argument with serializable data. Enables validation and saving.\n        :type data: dict\n        :param: instance: Default serializer class argument with serializable instance.\n        :type instance: typing.Any\n        :param custom_data: Dict with data which will passed to `validated_data` without validation.\n        :type custom_data: dict\n        :param serializer_class: Serializer class for this execution.\n                                 May be usefull when request and response serializers is different.\n        :type serializer_class: None,type[rest_framework.serializers.Serializer]\n        :return: Ready serializer with default logic performed.\n        :rtype: rest_framework.serializers.Serializer\n        \"\"\"\n        self.serializer_class = kwargs.pop('serializer_class', None) or self.get_serializer_class()\n        save_kwargs = kwargs.pop('custom_data', {})\n        should_save = kwargs.pop('autosave', True) or save_kwargs\n        serializer = self.get_serializer(*args, **kwargs)\n        if 'data' in kwargs:\n            serializer.is_valid(raise_exception=True)\n            if should_save:\n                serializer.save(**save_kwargs)\n        return serializer\n\n    def filter_for_filter_backends(self, backend):\n        return getattr(backend, 'required', False)\n\n    def filter_queryset(self, queryset: QuerySet):\n        if hasattr(self, 'nested_name'):\n            self.filter_backends = filter(  # type: ignore\n                self.filter_for_filter_backends,\n                self.filter_backends\n            )\n        qs = super().filter_queryset(queryset)\n\n        if self.action in ('list', 'retrieve') + self.optimize_get_by_values_actions and self.optimize_get_by_values:\n            # pylint: disable=protected-access\n\n            serializer_class = self.get_serializer_class()\n            if issubclass(serializer_class, BaseSerializer):\n                serializer = serializer_class()\n                read_fields = {\n                    f.field_name\n                    for f in serializer._readable_fields\n                }\n                model_fields = {\n                    f.name\n                    for f in queryset.model._meta.get_fields()\n                }\n                fk_related_fields = {\n                    f.name\n                    for f in queryset.model._meta.get_fields()\n                    if isinstance(f, models.ForeignKey)\n                }\n                deferable_fields = model_fields - read_fields - fk_related_fields\n                if deferable_fields:\n                    return qs.defer(*deferable_fields)\n\n        return qs\n\n    def get_serializer_class(self):\n        \"\"\"\n        Provides to setup serializer class for each action.\n        \"\"\"\n        lookup_field = self.lookup_url_kwarg or self.lookup_field or 'pk'\n        action_name = getattr(self, 'action', None)\n\n        # Try to get overloaded serializer from 'action_serializers' or from attrs\n        serializer_class = getattr(self, f'serializer_class_{action_name}', None)\n        if serializer_class:\n            return serializer_class\n        if action_name in self.action_serializers:\n            serializer_class = self.action_serializers.get(action_name, None)\n            if serializer_class:\n                return serializer_class\n\n        if action_name not in main_actions:\n            view_func = getattr(self, action_name, None)\n            if view_func is not None:\n                serializer_class = getattr(view_func, 'kwargs', {}).get('serializer_class', None)\n                if serializer_class:\n                    return serializer_class\n\n        is_detail = (\n            hasattr(self, 'serializer_class_one') and\n            self.request and\n            (\n                action_name in detail_actions or\n                (\n                    self.kwargs.get(lookup_field, False) and\n                    action_name in main_actions\n                )\n            )\n        )\n\n        # Get 'serializer_class_one' for detail operations\n        if is_detail:\n            return self.serializer_class_one  # pylint: disable=no-member\n        return super().get_serializer_class()\n\n    def get_serializer(self, *args: _t.Any, **kwargs: _t.Any) -> BaseSerializer:\n        \"\"\"\n        Return the serializer instance that should be used for validating and\n        deserializing input, and for serializing output.\n\n        Provide to use :class:`django.http.StreamingHttpResponse` as serializer init.\n        \"\"\"\n        serializer_class = self.get_serializer_class()\n        if issubclass(serializer_class, BaseSerializer):\n            kwargs.setdefault('context', self.get_serializer_context())\n        return serializer_class(*args, **kwargs)\n\n    def nested_allow_check(self):\n        \"\"\"\n        Just raise or pass. Used for nested views for easier access checking.\n        \"\"\"\n\n    @classmethod\n    def get_view_methods(cls, detail=False) -> _t.List[_t.Text]:\n        attr_name = ''.join(['__', 'detail' if detail else 'list', 'http_methods', '__'])\n        methods = getattr(cls, attr_name, None)\n        if methods is not None:\n            return methods\n        methods = []\n        if not detail and hasattr(cls, 'create'):\n            methods.append('post')\n        if hasattr(cls, 'list') or hasattr(cls, 'retrieve'):\n            methods.append('get')\n        if detail and hasattr(cls, 'update'):\n            methods.append('put')\n        if detail and hasattr(cls, 'partial_update'):\n            methods.append('patch')\n        if detail and hasattr(cls, 'destroy'):\n            methods.append('delete')\n        setattr(cls, attr_name, methods)\n        return methods\n\n    @classmethod\n    def get_extra_actions(cls):\n        return super().get_extra_actions()\n\n    @classmethod\n    def as_view(cls, actions=None, **initkwargs):\n        return super().as_view(actions, **initkwargs)\n\n\nclass CachableHeadMixin(GenericViewSet):\n    \"\"\"\n    Mixin which cache GET responses.\n    Uses standard HTTP-caching mechanism which response 304 when Etag match.\n\n    .. warning::\n        This works only with models based on :class:`vstutils.models.BModel`.\n    \"\"\"\n\n    class NotModifiedException(exceptions.APIException):\n        status_code = 304\n        default_detail = ''\n        default_code = 'cached'\n\n    @cached_property\n    def model_class(self):\n        return getattr(self, 'model', None) or self.queryset.model\n\n    @cached_property\n    @raise_context_decorator_with_default(default=False)\n    def is_main_action(self):\n        if hasattr(self, 'should_cache') and not self.should_cache():\n            return False\n        return self.action in main_actions or getattr(getattr(self, self.action, None), '_nested_view', None) is None\n\n    def get_etag_value(self, model_class, request):\n        return (\n            f'{model_class.get_etag_value()}'\n            f'_'\n            f'{request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME, settings.LANGUAGE_CODE)}'\n        )\n\n    def check_etag(self, request):\n        etag_data = self.get_etag_value(self.model_class, request)  # type: ignore\n\n        if request.method == \"GET\" and etag_data == str(request.headers.get(\"If-None-Match\", None)):\n            raise self.NotModifiedException(\"\")\n        # TODO: Workflow with ETag on PUT\/PATCH\n\n    def finalize_response(self, request: Request, response: RestResponse, *args, **kwargs) -> RestResponse:\n        result_response = super().finalize_response(request, response, *args, **kwargs)\n        if self.is_main_action and 'ETag' not in result_response.headers:\n            result_response.headers['ETag'] = lazy(self.get_etag_value, str)(self.model_class, request)\n        return result_response\n\n    def initial(self, request: Request, *args: _t.Any, **kwargs: _t.Any) -> None:\n        super().initial(request, *args, **kwargs)\n\n        if self.is_main_action:\n            self.check_etag(request)\n\n\nclass CopyMixin(GenericViewSet):\n    \"\"\" Mixin for viewsets which adds `copy` endpoint to view. \"\"\"\n\n    __slots__ = ()\n    #: Value of prefix which will be added to new instance name.\n    copy_prefix = 'copy-'\n    #: Name of field which will get a prefix.\n    copy_field_name = 'name'\n    #: List of related names which will be copied to new instance.\n    copy_related: _t.Iterable[_t.Text] = ()\n\n    def copy_instance(self, instance):\n        new_instance = deepcopy(instance)\n        new_instance.pk = None\n        name = getattr(instance, self.copy_field_name, None)\n        if isinstance(name, str):\n            name = f'{self.copy_prefix}{name}'\n        setattr(new_instance, self.copy_field_name, name)\n        new_instance.save()\n        for related_name in self.copy_related:\n            new_related_manager = getattr(new_instance, related_name, None)\n            if new_related_manager is not None:\n                new_related_manager.set(getattr(instance, related_name).all())\n        return new_instance\n\n    @action(methods=['post'], detail=True)\n    @transaction.atomic()\n    def copy(self, request: Request, **kwargs) -> responses.BaseResponseClass:\n        # pylint: disable=unused-argument\n        \"\"\"\n        Endpoint which copy instance with deps.\n        \"\"\"\n        instance = self.copy_instance(self.get_object())\n        serializer = self.get_serializer(instance, data=request.data, partial=True)\n        serializer.is_valid()\n        serializer.save()\n        return responses.HTTP_201_CREATED(serializer.data)\n\n\nclass FileResponseRetrieveMixin(GenericViewSet):\n    \"\"\"\n    ViewSet mixin for retriving FileResponse from models with file fields data.\n\n    Example:\n\n        .. literalinclude:: ..\/test_src\/test_proj\/models\/files.py\n           :lines: 1-22,59-77\n    \"\"\"\n    __slots__ = ()\n\n    instance_field_data: _t.Text\n    instance_field_filename: _t.Text = 'filename'\n    instance_field_timestamp: _t.Optional[_t.Text] = None\n    cache_control_header_data: _t.Optional[_t.Text] = None\n    serializer_class_retrieve = FileResponse\n\n    def get_file_response_kwargs(self, instance):\n        data = getattr(instance, self.instance_field_data)\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        if isinstance(data, (bytes, bytearray)):\n            data = io.BytesIO(data)\n        return {\n            \"streaming_content\": data,\n            \"as_attachment\": True,\n            \"filename\": getattr(instance, self.instance_field_filename, ''),\n        }\n\n    @patch_gzip_response_decorator\n    def retrieve(self, request: Request, *args, **kwargs) -> _t.Union[FileResponse, HttpResponseNotModified]:\n        instance = self.get_object()\n\n        instance_edit_timestamp = None\n        if self.instance_field_timestamp:\n            instance_edit: datetime.datetime = getattr(instance, self.instance_field_timestamp, None)\n            instance_edit_timestamp = instance_edit.timestamp() if instance_edit else None\n\n        if instance_edit_timestamp and instance_edit_timestamp == float(request.META.get('HTTP_IF_NONE_MATCH', '0.0')):\n            return HttpResponseNotModified()\n\n        response: FileResponse = self.get_serializer(**self.get_file_response_kwargs(instance))  # type: ignore\n\n        if self.instance_field_timestamp and instance_edit_timestamp:\n            cache_control_header_data = getattr(self, 'cache_control_header_data', None)\n            if cache_control_header_data is None:\n                cache_control_header_data = default_cache_control_header_data\n            response['Cache-Control'] = cache_control_header_data\n            response['ETag'] = str(instance_edit_timestamp)\n        return response\n\n\nclass ModelViewSet(GenericViewSet, vsets.ModelViewSet):\n    # pylint: disable=useless-super-delegation\n\n    \"\"\"\n    A viewset that provides CRUD actions under model. Inherited from :class:`.GenericViewSet`.\n\n    :var model: DB model with data.\n    :vartype model: vstutils.models.BModel\n    :var serializer_class: Serializer for view of Model data.\n    :vartype serializer_class: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_one: Serializer for view one instance of Model data.\n    :vartype serializer_class_one: vstutils.api.serializers.VSTSerializer\n    :var serializer_class_[ACTION_NAME]: Serializer for view of any endpoint like `.create`.\n    :vartype serializer_class_[ACTION_NAME]: vstutils.api.serializers.VSTSerializer\n\n\n    Examples:\n        .. sourcecode:: python\n\n            from vstutils.api.base import ModelViewSet\n            from . import serializers as sers\n\n\n            class StageViewSet(ModelViewSet):\n                # This is difference with DRF:\n                # we use model instead of queryset\n                model = sers.models.Stage\n                # Serializer for list view (view for a list of Model instances\n                serializer_class = sers.StageSerializer\n                # Serializer for page view (view for one Model instance).\n                # This property is not required, if its value is the same as `serializer_class`.\n                serializer_class_one = sers.StageSerializer\n                # Allowed to set decorator to custom endpoint like this:\n                # serializer_class_create - for create method\n                # serializer_class_copy - for detail endpoint `copy`.\n                # etc...\n\n    \"\"\"\n\n    __slots__ = ()\n\n\nclass NonModelsViewSet(GenericViewSet):\n    __slots__ = ()\n    base_name = None\n\n    def get_queryset(self) -> QuerySet:\n        return QuerySet()  # nocv\n\n\nclass ListNonModelViewSet(NonModelsViewSet, vsets.mixins.ListModelMixin):\n    # pylint: disable=abstract-method\n    __slots__ = ()\n    schema = None  # type: ignore\n\n    @property\n    def methods(self) -> _t.Iterable[_t.Text]:\n        def is_list_action(attr):\n            if not inspect.isfunction(attr):\n                return False\n            elif not hasattr(attr, 'url_path'):\n                return False\n            elif getattr(attr, 'detail', True):\n                return False\n            return True\n\n        return map(lambda x: x[0].replace('_', \"-\"), inspect.getmembers(self.__class__, is_list_action))\n\n    def list(self, request: Request, *args, **kwargs) -> responses.BaseResponseClass:\n        routes = {\n            method: reverse(f\"{request.version}:{self.base_name}-{method}\", request=request)\n            for method in self.methods\n        }\n        return responses.HTTP_200_OK(routes)\n\n\nclass ReadOnlyModelViewSet(GenericViewSet, vsets.ReadOnlyModelViewSet):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for readonly models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass ListOnlyModelViewSet(GenericViewSet, vsets.mixins.ListModelMixin):\n    \"\"\"\n    Default viewset like vstutils.api.base.ModelViewSet for list only models.\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n\n\nclass HistoryModelViewSet(ReadOnlyModelViewSet, vsets.mixins.DestroyModelMixin):\n    \"\"\"\n    Default viewset like ReadOnlyModelViewSet but for historical data\n    (allow to delete, but can't create and update).\n    Inherited from :class:`.GenericViewSet`.\n    \"\"\"\n    __slots__ = ()\n"},"\/vstutils\/api\/filter_backends.py":{"changes":[{"diff":"\n     __slots__ = ()\n     required = True\n     fields_fetch_map = {\n-        'select': (models.ForeignKey, models.OneToOneField),\n+        'select': (models.ForeignKey,),\n         'prefetch': (models.ManyToManyField, models.ManyToManyField.rel_class)\n     }\n \n     def filter_model_fields(self, view, field_types):\n         return tuple(\n-            map(\n-                lambda f: f.name,\n-                filter(\n-                    lambda f: isinstance(f, field_types),\n-                    view.get_serializer_class().Meta.model()._meta.fields\n-                )\n-            )\n+            f.name\n+            for f in view.get_serializer_class().Meta.model()._meta.fields\n+            if isinstance(f, field_types)\n         )\n \n     def filter_by_func(self, queryset, queryset_func_name, related):\n","add":4,"remove":8,"filename":"\/vstutils\/api\/filter_backends.py","badparts":["        'select': (models.ForeignKey, models.OneToOneField),","            map(","                lambda f: f.name,","                filter(","                    lambda f: isinstance(f, field_types),","                    view.get_serializer_class().Meta.model()._meta.fields","                )","            )"],"goodparts":["        'select': (models.ForeignKey,),","            f.name","            for f in view.get_serializer_class().Meta.model()._meta.fields","            if isinstance(f, field_types)"]},{"diff":"\n \n     def filter_queryset(self, request, queryset, view):\n         \"\"\"\n-        Select related in queryset.\n+        Select+prefetch related in queryset.\n         \"\"\"\n-        if queryset.query.select_related:\n-            return queryset\n-        if not getattr(view, 'select_related', True):\n-            return queryset\n         if request.method != 'GET':\n             return queryset\n-        return self.prefetch('prefetch', view, self.prefetch('select', view, queryset))\n+\n+        if not queryset.query.select_related and getattr(view, 'select_related', True):\n+            queryset = self.prefetch('select', view, queryset)\n+\n+        # pylint: disable=protected-access\n+        if not queryset._prefetch_related_lookups and getattr(view, 'prefetch_related', True):\n+            queryset = self.prefetch('prefetch', view, queryset)\n+        return queryset\n \n \n class DeepViewFilterBackend(VSTFilterBackend):\n","add":9,"remove":6,"filename":"\/vstutils\/api\/filter_backends.py","badparts":["        Select related in queryset.","        if queryset.query.select_related:","            return queryset","        if not getattr(view, 'select_related', True):","            return queryset","        return self.prefetch('prefetch', view, self.prefetch('select', view, queryset))"],"goodparts":["        Select+prefetch related in queryset.","        if not queryset.query.select_related and getattr(view, 'select_related', True):","            queryset = self.prefetch('select', view, queryset)","        if not queryset._prefetch_related_lookups and getattr(view, 'prefetch_related', True):","            queryset = self.prefetch('prefetch', view, queryset)","        return queryset"]}],"source":"\nimport typing as _t from django.utils.encoding import force_str from django.db import models from rest_framework.filters import BaseFilterBackend, OrderingFilter from django_filters.rest_framework.backends import DjangoFilterBackend as BaseDjangoFilterBackend from django_filters import compat, filters from vstutils.utils import raise_context, translate as _ from.filters import extra_filter class DjangoFilterBackend(BaseDjangoFilterBackend): def get_coreschema_field(self, field): kwargs={ 'description': str(field.extra.get('help_text', '')), } if isinstance(field, filters.NumberFilter): field_cls=compat.coreschema.Number elif isinstance(field, filters.BooleanFilter): field_cls=compat.coreschema.Boolean elif isinstance(field, filters.ChoiceFilter): field_cls=compat.coreschema.Enum kwargs['enum']=tuple(dict(field.field.choices).keys()) else: field_cls=compat.coreschema.String if field.method==extra_filter: result=compat.coreschema.Array( items=field_cls(), min_items=1, unique_items=True, **kwargs ) else: result=field_cls(**kwargs) return result class OrderingFilterBackend(OrderingFilter): def _get_fields_for_schema(self, view): for field in self.get_valid_fields(view.get_queryset(), view,{'request': view.request}): yield field[0] yield f'-{field[0]}' def get_schema_fields(self, view): try: fields=tuple(self._get_fields_for_schema(view)) except: return super().get_schema_fields(view) return[ compat.coreapi.Field( name=self.ordering_param, required=False, location='query', schema=compat.coreschema.Array( title=_(force_str(self.ordering_title)), description=_(force_str(self.ordering_description)), items=compat.coreschema.Enum(enum=fields), min_items=1, unique_items=True, ) ) ] class VSTFilterBackend(BaseFilterBackend): \"\"\" A base filter backend class to be inherited from. Example: .. sourcecode:: python from django.utils import timezone from django.db.models import Value, DateTimeField from vstutils.api.filter_backends import VSTFilterBackend class CurrentTimeFilterBackend(VSTFilterBackend): def filter_queryset(self, request, queryset, view): return queryset.annotate(current_time=Value(timezone.now(), output_field=DateTimeField())) In this example Filter Backend annotates time in current timezone to any connected model's queryset. In some cases it may be necessary to provide a parameter from a query of request. To define this parameter in the schema, you must overload the get_schema_fields function and specify a list of parameters to use. Example: .. sourcecode:: python from django.utils import timezone from django.db.models import Value, DateTimeField from vstutils.api.filter_backends import VSTFilterBackend class ConstantCurrentTimeForQueryFilterBackend(VSTFilterBackend): query_param='constant' def filter_queryset(self, request, queryset, view): if self.query_param in request.query_params and request.query_params[self.query_param]: queryset=queryset.annotate(**{ request.query_params[self.query_param]: Value(timezone.now(), output_field=DateTimeField()) }) return queryset def get_schema_fields(self, view): return[ compat.coreapi.Field( name=self.query_param, required=False, location='query', schema=compat.coreschema.String( description='Annotate value to queryset' ), ) ] In this example Filter Backend annotates time in current timezone to any connected model's queryset with field name from query `constant`. \"\"\" __slots__=() required=False def filter_queryset(self, request, queryset, view): raise NotImplementedError def get_schema_fields(self, view): \"\"\" You can also make the filter controls available to the schema autogeneration that REST framework provides, by implementing this method. The method should return a list of coreapi.Field instances. \"\"\" return[] class HideHiddenFilterBackend(VSTFilterBackend): \"\"\"Filter Backend that hides all objects with hidden=True from the queryset\"\"\" __slots__=() required=True def filter_queryset(self, request, queryset, view): \"\"\" Clear objects with hidden attr from queryset. \"\"\" return getattr(queryset, 'cleared', queryset.all)() class SelectRelatedFilterBackend(VSTFilterBackend): \"\"\" Filter Backend that will automatically call prefetch_related and select_related on all relations in queryset. \"\"\" __slots__=() required=True fields_fetch_map={ 'select':(models.ForeignKey, models.OneToOneField), 'prefetch':(models.ManyToManyField, models.ManyToManyField.rel_class) } def filter_model_fields(self, view, field_types): return tuple( map( lambda f: f.name, filter( lambda f: isinstance(f, field_types), view.get_serializer_class().Meta.model()._meta.fields ) ) ) def filter_by_func(self, queryset, queryset_func_name, related): if related: return getattr(queryset, queryset_func_name)(*related) return queryset def prefetch(self, queryset_func_name, view, queryset): with raise_context(): queryset=self.filter_by_func( queryset, f'{queryset_func_name}_related', self.filter_model_fields(view, self.fields_fetch_map[queryset_func_name]) ) return queryset def filter_queryset(self, request, queryset, view): \"\"\" Select related in queryset. \"\"\" if queryset.query.select_related: return queryset if not getattr(view, 'select_related', True): return queryset if request.method !='GET': return queryset return self.prefetch('prefetch', view, self.prefetch('select', view, queryset)) class DeepViewFilterBackend(VSTFilterBackend): \"\"\" Backend that filters queryset by column from `deep_parent_field` property of the model. Value for filtering must be provided in query param `__deep_parent`. If param is missing then no filtering is applied. If param is empty value(`\/?__deep_parent=`) then objects with no parent(the value of the field whose name is stored in the property `deep_parent_field` of the model is None) returned. This filter backend and nested view is automatically added when model has `deep_parent_field` property. Example: .. sourcecode:: python from django.db import models from vstutils.models import BModel class DeepNestedModel(BModel): name=models.CharField(max_length=10) parent=models.ForeignKey('self', null=True, default=None, on_delete=models.CASCADE) deep_parent_field='parent' deep_parent_allow_append=True class Meta: default_related_name='deepnested' In example above if we add this model under path '`deep`', following views will be created: `\/deep\/` and `\/deep\/{id}\/deepnested\/`. Filter backend can be used as `\/deep\/?__deep_parent=1` and will return all `DeepNestedModel` objects whose parent's primary key is `1`. You can also use generic DRF views, for that you still must set `deep_parent_field` to your model and manually add `DeepViewFilterBackend` to `filter_backends <https:\/\/www.django-rest-framework.org\/api-guide\/filtering\/ \"\"\" field_name='__deep_parent' field_types={ compat.coreschema.Integer: filters.NumberFilter, compat.coreschema.String: filters.CharFilter, } def filter_queryset(self, request, queryset, view): model=queryset.model parent_name: _t.Optional[_t.Text]=getattr(model, 'deep_parent_field', None) nested=getattr(view, 'nested_id', False) or getattr(getattr(view, 'nested_parent_object', None), 'id', None) if view.action !='list': if parent_name and nested: return queryset.get_children(with_current=True) return queryset if not parent_name or self.field_name not in request.query_params: return queryset filter_type_class=self.field_types[type(self.get_coreschema_field(model))] filter_data=request.query_params.get(self.field_name) if not filter_data: return queryset.filter(**{f'{parent_name}__isnull': True}) pk_name=model._meta.pk.attname parent_qs=model.objects.filter(**{pk_name: filter_data}) parent_qs=getattr(parent_qs, 'cleared', parent_qs.all)() if nested: queryset=model.objects.all() return filter_type_class(field_name=parent_name, lookup_expr='in').filter( queryset, value=parent_qs.values(pk_name) ) def get_coreschema_field(self, model: models.Model): primary_key_field: _t.Optional[models.Field]=model._meta.pk if isinstance(primary_key_field, models.IntegerField): field_cls=compat.coreschema.Integer else: field_cls=compat.coreschema.String return field_cls( description='' ) def get_schema_fields(self, view): return[ compat.coreapi.Field( name=self.field_name, required=False, location='query', schema=self.get_coreschema_field(view.get_queryset().model), ) ] ","sourceWithComments":"import typing as _t\n\nfrom django.utils.encoding import force_str\nfrom django.db import models\nfrom rest_framework.filters import BaseFilterBackend, OrderingFilter\nfrom django_filters.rest_framework.backends import DjangoFilterBackend as BaseDjangoFilterBackend\nfrom django_filters import compat, filters\nfrom vstutils.utils import raise_context, translate as _\n\nfrom .filters import extra_filter\n\n\nclass DjangoFilterBackend(BaseDjangoFilterBackend):\n    def get_coreschema_field(self, field):\n        kwargs = {\n            'description': str(field.extra.get('help_text', '')),\n        }\n        if isinstance(field, filters.NumberFilter):\n            field_cls = compat.coreschema.Number\n        elif isinstance(field, filters.BooleanFilter):\n            field_cls = compat.coreschema.Boolean\n        elif isinstance(field, filters.ChoiceFilter):\n            field_cls = compat.coreschema.Enum\n            kwargs['enum'] = tuple(dict(field.field.choices).keys())\n        else:\n            field_cls = compat.coreschema.String\n        if field.method == extra_filter:  # pylint: disable=comparison-with-callable\n            result = compat.coreschema.Array(\n                items=field_cls(),\n                min_items=1,\n                unique_items=True,\n                **kwargs\n            )\n        else:\n            result = field_cls(**kwargs)\n        return result\n\n\nclass OrderingFilterBackend(OrderingFilter):\n    def _get_fields_for_schema(self, view):\n        for field in self.get_valid_fields(view.get_queryset(), view, {'request': view.request}):\n            yield field[0]\n            yield f'-{field[0]}'\n\n    def get_schema_fields(self, view):\n        try:\n            fields = tuple(self._get_fields_for_schema(view))\n        except:\n            return super().get_schema_fields(view)\n        return [\n            compat.coreapi.Field(\n                name=self.ordering_param,\n                required=False,\n                location='query',\n                schema=compat.coreschema.Array(\n                    title=_(force_str(self.ordering_title)),\n                    description=_(force_str(self.ordering_description)),\n                    items=compat.coreschema.Enum(enum=fields),\n                    min_items=1,\n                    unique_items=True,\n                )\n            )\n        ]\n\n\n# Call standard filtering\nclass VSTFilterBackend(BaseFilterBackend):\n    \"\"\"\n    A base filter backend class to be inherited from.\n    Example:\n\n        .. sourcecode:: python\n\n            from django.utils import timezone\n            from django.db.models import Value, DateTimeField\n\n            from vstutils.api.filter_backends import VSTFilterBackend\n\n            class CurrentTimeFilterBackend(VSTFilterBackend):\n                def filter_queryset(self, request, queryset, view):\n                    return queryset.annotate(current_time=Value(timezone.now(), output_field=DateTimeField()))\n\n        In this example Filter Backend annotates time in current timezone to any connected\n        model's queryset.\n\n    In some cases it may be necessary to provide a parameter from a query of request.\n    To define this parameter in the schema, you must overload the get_schema_fields\n    function and specify a list of parameters to use.\n\n    Example:\n\n        .. sourcecode:: python\n\n            from django.utils import timezone\n            from django.db.models import Value, DateTimeField\n\n            from vstutils.api.filter_backends import VSTFilterBackend\n\n            class ConstantCurrentTimeForQueryFilterBackend(VSTFilterBackend):\n                query_param = 'constant'\n\n                def filter_queryset(self, request, queryset, view):\n                    if self.query_param in request.query_params and request.query_params[self.query_param]:\n                        queryset = queryset.annotate(**{\n                            request.query_params[self.query_param]: Value(timezone.now(), output_field=DateTimeField())\n                        })\n                    return queryset\n\n                    def get_schema_fields(self, view):\n                        return [\n                            compat.coreapi.Field(\n                                name=self.query_param,\n                                required=False,\n                                location='query',\n                                schema=compat.coreschema.String(\n                                    description='Annotate value to queryset'\n                                ),\n                            )\n                        ]\n\n        In this example Filter Backend annotates time in current timezone to any connected\n        model's queryset with field name from query `constant`.\n    \"\"\"\n    __slots__ = ()\n    required = False\n\n    def filter_queryset(self, request, queryset, view):\n        raise NotImplementedError  # nocv\n\n    def get_schema_fields(self, view):\n        \"\"\"\n        You can also make the filter controls available to the schema autogeneration that REST framework provides,\n        by implementing this method. The method should return a list of coreapi.Field instances.\n        \"\"\"\n        # pylint: disable=unused-argument\n        return []\n\n\nclass HideHiddenFilterBackend(VSTFilterBackend):\n    \"\"\"Filter Backend that hides all objects with hidden=True from the queryset\"\"\"\n    __slots__ = ()\n    required = True\n\n    def filter_queryset(self, request, queryset, view):\n        # pylint: disable=unused-argument\n        \"\"\"\n        Clear objects with hidden attr from queryset.\n        \"\"\"\n        return getattr(queryset, 'cleared', queryset.all)()\n\n\nclass SelectRelatedFilterBackend(VSTFilterBackend):\n    \"\"\"\n    Filter Backend that will automatically call prefetch_related and select_related on all relations in queryset.\n    \"\"\"\n    __slots__ = ()\n    required = True\n    fields_fetch_map = {\n        'select': (models.ForeignKey, models.OneToOneField),\n        'prefetch': (models.ManyToManyField, models.ManyToManyField.rel_class)\n    }\n\n    def filter_model_fields(self, view, field_types):\n        return tuple(\n            map(\n                lambda f: f.name,\n                filter(\n                    lambda f: isinstance(f, field_types),\n                    view.get_serializer_class().Meta.model()._meta.fields\n                )\n            )\n        )\n\n    def filter_by_func(self, queryset, queryset_func_name, related):\n        if related:\n            return getattr(queryset, queryset_func_name)(*related)\n        return queryset\n\n    def prefetch(self, queryset_func_name, view, queryset):\n        with raise_context():\n            queryset = self.filter_by_func(\n                queryset,\n                f'{queryset_func_name}_related',\n                self.filter_model_fields(view, self.fields_fetch_map[queryset_func_name])\n            )\n        return queryset\n\n    def filter_queryset(self, request, queryset, view):\n        \"\"\"\n        Select related in queryset.\n        \"\"\"\n        if queryset.query.select_related:\n            return queryset\n        if not getattr(view, 'select_related', True):\n            return queryset\n        if request.method != 'GET':\n            return queryset\n        return self.prefetch('prefetch', view, self.prefetch('select', view, queryset))\n\n\nclass DeepViewFilterBackend(VSTFilterBackend):\n    \"\"\"\n    Backend that filters queryset by column from `deep_parent_field` property of the model.\n    Value for filtering must be provided in query param `__deep_parent`.\n\n    If param is missing then no filtering is applied.\n\n    If param is empty value (`\/?__deep_parent=`) then objects with no parent (the value of the field whose name is\n    stored in the property `deep_parent_field` of the model is None) returned.\n\n    This filter backend and nested view is automatically added when model has `deep_parent_field` property.\n\n    Example:\n        .. sourcecode:: python\n\n            from django.db import models\n            from vstutils.models import BModel\n\n            class DeepNestedModel(BModel):\n                name = models.CharField(max_length=10)\n                parent = models.ForeignKey('self', null=True, default=None, on_delete=models.CASCADE)\n\n                deep_parent_field = 'parent'\n                deep_parent_allow_append = True\n\n                class Meta:\n                    default_related_name = 'deepnested'\n\n    In example above if we add this model under path '`deep`', following views will be created: `\/deep\/` and\n    `\/deep\/{id}\/deepnested\/`.\n\n    Filter backend can be used as `\/deep\/?__deep_parent=1` and will return all `DeepNestedModel` objects\n    whose parent's primary key is `1`.\n\n    You can also use generic DRF views, for that you still must set `deep_parent_field`\n    to your model and manually add `DeepViewFilterBackend` to\n    `filter_backends <https:\/\/www.django-rest-framework.org\/api-guide\/filtering\/#djangofilterbackend>`_ list.\n    \"\"\"\n    field_name = '__deep_parent'\n    field_types = {\n        compat.coreschema.Integer: filters.NumberFilter,  # type: ignore\n        compat.coreschema.String: filters.CharFilter,  # type: ignore\n    }\n\n    def filter_queryset(self, request, queryset, view):\n        model = queryset.model\n        parent_name: _t.Optional[_t.Text] = getattr(model, 'deep_parent_field', None)\n        nested = getattr(view, 'nested_id', False) or getattr(getattr(view, 'nested_parent_object', None), 'id', None)\n        if view.action != 'list':\n            if parent_name and nested:\n                return queryset.get_children(with_current=True)\n            return queryset\n        if not parent_name or self.field_name not in request.query_params:\n            return queryset\n        filter_type_class = self.field_types[type(self.get_coreschema_field(model))]\n        filter_data = request.query_params.get(self.field_name)\n        if not filter_data:\n            return queryset.filter(**{f'{parent_name}__isnull': True})\n        pk_name = model._meta.pk.attname\n        parent_qs = model.objects.filter(**{pk_name: filter_data})\n        parent_qs = getattr(parent_qs, 'cleared', parent_qs.all)()\n        if nested:\n            queryset = model.objects.all()\n        return filter_type_class(field_name=parent_name, lookup_expr='in').filter(\n            queryset,\n            value=parent_qs.values(pk_name)\n        )\n\n    def get_coreschema_field(self, model: models.Model):\n        primary_key_field: _t.Optional[models.Field] = model._meta.pk\n        if isinstance(primary_key_field, models.IntegerField):\n            field_cls = compat.coreschema.Integer  # type: ignore\n        else:  # nocv\n            field_cls = compat.coreschema.String  # type: ignore\n        return field_cls(\n            description=''\n        )\n\n    def get_schema_fields(self, view):\n        return [\n            compat.coreapi.Field(\n                name=self.field_name,\n                required=False,\n                location='query',\n                schema=self.get_coreschema_field(view.get_queryset().model),\n            )\n        ]\n"}},"msg":"Release 5.0.0 Beta 138\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"3c9ba792c61c332d24cb5e992a69932fdea178bc":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/3c9ba792c61c332d24cb5e992a69932fdea178bc","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/3c9ba792c61c332d24cb5e992a69932fdea178bc","sha":"3c9ba792c61c332d24cb5e992a69932fdea178bc","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 8c8a6268..76e10f3f 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b138'\n+__version__: str = '5.0.0b139'\ndiff --git a\/vstutils\/api\/schema\/generators.py b\/vstutils\/api\/schema\/generators.py\nindex 492052eb..595fce88 100644\n--- a\/vstutils\/api\/schema\/generators.py\n+++ b\/vstutils\/api\/schema\/generators.py\n@@ -135,7 +135,9 @@ def get_schema(self, request: drf_request.Request = None, *args, **kwargs):  # t\n                         algorithm=\"HS256\"\n                     )\n                     result['info']['x-centrifugo-address'] = get_centrifugo_public_address(request)\n-            for hook in self._get_hooks():\n-                result = copy.deepcopy(result)\n-                hook(request=request, schema=result)\n+\n+        for hook in self._get_hooks():\n+            result = copy.deepcopy(result)\n+            hook(request=request, schema=result)\n+\n         return result\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b138'\n+__version__: str = '5.0.0b139'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b138'"],"goodparts":["__version__: str = '5.0.0b139'"]}],"source":"\n\n__version__: str='5.0.0b138' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b138'\n"},"\/vstutils\/api\/schema\/generators.py":{"changes":[{"diff":"\n                         algorithm=\"HS256\"\n                     )\n                     result['info']['x-centrifugo-address'] = get_centrifugo_public_address(request)\n-            for hook in self._get_hooks():\n-                result = copy.deepcopy(result)\n-                hook(request=request, schema=result)\n+\n+        for hook in self._get_hooks():\n+            result = copy.deepcopy(result)\n+            hook(request=request, schema=result)\n+\n         return result\n","add":5,"remove":3,"filename":"\/vstutils\/api\/schema\/generators.py","badparts":["            for hook in self._get_hooks():","                result = copy.deepcopy(result)","                hook(request=request, schema=result)"],"goodparts":["        for hook in self._get_hooks():","            result = copy.deepcopy(result)","            hook(request=request, schema=result)"]}],"source":"\nimport os import time import copy import jwt from rest_framework import request as drf_request from django.conf import settings from drf_yasg import generators from drf_yasg.inspectors import field as field_insp from vstutils.utils import import_class, raise_context_decorator_with_default def get_centrifugo_public_address(request: drf_request.Request): address=settings.CENTRIFUGO_PUBLIC_HOST if address.startswith('\/'): address=request.build_absolute_uri(address) elif 'api' in address.rsplit('\/', 2): address=address[:address.rfind('api')] return os.path.join(address.replace('http', 'ws', 1), 'connection\/websocket') class EndpointEnumerator(generators.EndpointEnumerator): api_url_prifix=f'^{settings.API_URL}\/' def get_api_endpoints(self, *args, **kwargs): if 'prefix' in kwargs and(not kwargs['prefix'].startswith(self.api_url_prifix)): return[] return super().get_api_endpoints(*args, **kwargs) class VSTSchemaGenerator(generators.OpenAPISchemaGenerator): endpoint_enumerator_class=EndpointEnumerator def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) if not self.version: self.version=settings.VST_API_VERSION def _get_hooks(self): return map( raise_context_decorator_with_default(), filter( bool, map( raise_context_decorator_with_default()(import_class), getattr(settings, 'OPENAPI_HOOKS',()) ) ) ) def _get_subname(self, name): names=name.split('_') return['_'.join(names[0:-1]), names[-1]] def _get_model_type_info(self, name, model, model_field=None, query_name=None): if model_field: return None _query_name, field_name=self._get_subname(name) query_name=query_name or _query_name related_model=field_insp.get_related_model(model, query_name) related_field=field_insp.get_model_field(related_model, field_name) if related_field is None: return None type_info=field_insp.get_basic_type_info(related_field) if type_info is None: return None type_info.update({ 'description': ('A unique{} value identifying ' 'instance of this{} sublist.').format(type_info['type'], query_name), }) return type_info def _get_manager_name(self, param, view_cls): name, _=self._get_subname(param['name']) if not hasattr(view_cls, f'{name}_detail'): return None sub_view=getattr(view_cls, f'{name}_detail', None) return getattr(sub_view, '_nested_manager', None) def _update_param_model(self, param, model, model_field=None, **kw): type_info=self._get_model_type_info(param['name'], model, model_field, **kw) if type_info is None: return type_info param.update(type_info) return param def _update_param_view(self, param, model, view_cls): manager_name=self._get_manager_name(param, view_cls) if manager_name is None: return None return self._update_param_model(param, model, query_name=manager_name) def get_path_parameters(self, path, view_cls): parameters=super().get_path_parameters(path, view_cls) queryset=getattr(view_cls, 'queryset', None) for param in parameters: model, model_field=field_insp.get_queryset_field(queryset, param['name']) if self._update_param_model(param, model, model_field): continue elif self._update_param_view(param, model, view_cls): continue return parameters def get_operation_keys(self, subpath, method, view): keys=super().get_operation_keys(subpath, method, view) subpath_keys=list(filter(bool, subpath.split('\/'))) r_type, gist=keys[-1], keys[-2] if method.upper()=='GET' and '_detail' in r_type: keys=keys[:-1] +['_'.join(r_type.split('_')[:-1])] +['get'] if r_type=='get' and subpath_keys[-1]==gist: if any(f for f in dir(view) if f.endswith('_'.join([gist, 'list']))): keys[-1]='list' return keys def get_schema(self, request: drf_request.Request=None, *args, **kwargs): if not getattr(request, 'version', ''): request.version=self.version result=super().get_schema(request, *args, **kwargs) if request and getattr(request, 'accepted_media_type', None)=='application\/openapi+json': result['info']['x-user-id']=request.user.pk if settings.CENTRIFUGO_CLIENT_KWARGS and request.user.is_authenticated: secret=settings.CENTRIFUGO_CLIENT_KWARGS.get('token_hmac_secret_key', '') if secret and request.user.pk: result['info']['x-centrifugo-token']=jwt.encode( { \"sub\": request.session.session_key, \"exp\": int(time.time() +request.session.get_expiry_age()), \"info\":{ 'user_id': request.user.pk } }, secret, algorithm=\"HS256\" ) result['info']['x-centrifugo-address']=get_centrifugo_public_address(request) for hook in self._get_hooks(): result=copy.deepcopy(result) hook(request=request, schema=result) return result ","sourceWithComments":"import os\nimport time\nimport copy\n\nimport jwt\nfrom rest_framework import request as drf_request\nfrom django.conf import settings\nfrom drf_yasg import generators\nfrom drf_yasg.inspectors import field as field_insp\nfrom vstutils.utils import import_class, raise_context_decorator_with_default\n\n\ndef get_centrifugo_public_address(request: drf_request.Request):\n    address = settings.CENTRIFUGO_PUBLIC_HOST\n    if address.startswith('\/'):\n        address = request.build_absolute_uri(address)\n    elif 'api' in address.rsplit('\/', 2):\n        address = address[:address.rfind('api')]\n    return os.path.join(address.replace('http', 'ws', 1), 'connection\/websocket')\n\n\nclass EndpointEnumerator(generators.EndpointEnumerator):\n    api_url_prifix = f'^{settings.API_URL}\/'\n\n    def get_api_endpoints(self, *args, **kwargs):\n        if 'prefix' in kwargs and (not kwargs['prefix'].startswith(self.api_url_prifix)):\n            return []\n        return super().get_api_endpoints(*args, **kwargs)\n\n\nclass VSTSchemaGenerator(generators.OpenAPISchemaGenerator):\n    endpoint_enumerator_class = EndpointEnumerator\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if not self.version:\n            self.version = settings.VST_API_VERSION\n\n    def _get_hooks(self):\n        return map(\n            raise_context_decorator_with_default(),\n            filter(\n                bool,\n                map(\n                    raise_context_decorator_with_default()(import_class),\n                    getattr(settings, 'OPENAPI_HOOKS', ())\n                )\n            )\n        )\n\n    def _get_subname(self, name):\n        names = name.split('_')\n        return ['_'.join(names[0:-1]), names[-1]]\n\n    def _get_model_type_info(self, name, model, model_field=None, query_name=None):\n        if model_field:\n            return None\n        _query_name, field_name = self._get_subname(name)\n        query_name = query_name or _query_name\n        related_model = field_insp.get_related_model(model, query_name)\n        related_field = field_insp.get_model_field(related_model, field_name)\n        if related_field is None:\n            return None\n        type_info = field_insp.get_basic_type_info(related_field)\n        if type_info is None:\n            return None  # nocv\n        type_info.update({\n            'description':\n                ('A unique {} value identifying '\n                 'instance of this {} sublist.').format(type_info['type'], query_name),\n        })\n        return type_info\n\n    def _get_manager_name(self, param, view_cls):\n        name, _ = self._get_subname(param['name'])\n        if not hasattr(view_cls, f'{name}_detail'):\n            return None\n        sub_view = getattr(view_cls, f'{name}_detail', None)\n        return getattr(sub_view, '_nested_manager', None)\n\n    def _update_param_model(self, param, model, model_field=None, **kw):\n        type_info = self._get_model_type_info(param['name'], model, model_field, **kw)\n        if type_info is None:\n            return type_info\n        param.update(type_info)\n        return param\n\n    def _update_param_view(self, param, model, view_cls):\n        manager_name = self._get_manager_name(param, view_cls)\n        if manager_name is None:\n            return None\n        return self._update_param_model(param, model, query_name=manager_name)\n\n    def get_path_parameters(self, path, view_cls):\n        parameters = super().get_path_parameters(path, view_cls)\n        queryset = getattr(view_cls, 'queryset', None)\n        for param in parameters:\n            model, model_field = field_insp.get_queryset_field(queryset, param['name'])\n            if self._update_param_model(param, model, model_field):\n                continue\n            elif self._update_param_view(param, model, view_cls):\n                continue\n        return parameters\n\n    def get_operation_keys(self, subpath, method, view):\n        keys = super().get_operation_keys(subpath, method, view)\n        subpath_keys = list(filter(bool, subpath.split('\/')))\n        r_type, gist = keys[-1], keys[-2]\n        if method.upper() == 'GET' and '_detail' in r_type:\n            keys = keys[:-1] + ['_'.join(r_type.split('_')[:-1])] + ['get']\n        if r_type == 'get' and subpath_keys[-1] == gist:\n            if any(f for f in dir(view) if f.endswith('_'.join([gist, 'list']))):\n                keys[-1] = 'list'\n        return keys\n\n    def get_schema(self, request: drf_request.Request = None, *args, **kwargs):  # type: ignore\n        # pylint: disable=signature-differs\n        if not getattr(request, 'version', ''):\n            request.version = self.version  # type: ignore\n        result = super().get_schema(request, *args, **kwargs)\n        if request and getattr(request, 'accepted_media_type', None) == 'application\/openapi+json':\n            result['info']['x-user-id'] = request.user.pk\n            if settings.CENTRIFUGO_CLIENT_KWARGS and request.user.is_authenticated:\n                secret = settings.CENTRIFUGO_CLIENT_KWARGS.get('token_hmac_secret_key', '')\n                if secret and request.user.pk:\n                    result['info']['x-centrifugo-token'] = jwt.encode(\n                        {\n                            \"sub\": request.session.session_key,\n                            \"exp\": int(time.time() + request.session.get_expiry_age()),\n                            \"info\": {\n                                'user_id': request.user.pk\n                            }\n                        },\n                        secret,\n                        algorithm=\"HS256\"\n                    )\n                    result['info']['x-centrifugo-address'] = get_centrifugo_public_address(request)\n            for hook in self._get_hooks():\n                result = copy.deepcopy(result)\n                hook(request=request, schema=result)\n        return result\n"}},"msg":"Release 5.0.0 Beta 139\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"cd714e868bba3589c7a58816aa9e67365439cbc9":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/cd714e868bba3589c7a58816aa9e67365439cbc9","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/cd714e868bba3589c7a58816aa9e67365439cbc9","sha":"cd714e868bba3589c7a58816aa9e67365439cbc9","keyword":"execution after redirect prevent","diff":"diff --git a\/setup.py b\/setup.py\nindex f45e7762..91b3de41 100644\n--- a\/setup.py\n+++ b\/setup.py\n@@ -399,7 +399,7 @@ def make_setup(**opts):\n         'vstutils\/static\/bundle\/.*\\.js$'\n     ],\n     install_requires=[\n-        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.12\"),\n+        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.13\"),\n     ]\n     + requirements\n     + load_requirements('requirements-doc.txt'),\ndiff --git a\/test_src\/test_proj\/test_settings.ini b\/test_src\/test_proj\/test_settings.ini\nindex 95d0b820..85dbd3a9 100644\n--- a\/test_src\/test_proj\/test_settings.ini\n+++ b\/test_src\/test_proj\/test_settings.ini\n@@ -13,17 +13,29 @@ cors_allow_headers = accept,accept-encoding,authorization,content-type,dnt,origi\n [databases]\n default_db = primary1\n \n-[databases.primary1.options]\n-\n-[databases.replica1.options]\n-timeout = 10\n-\n [databases.replica2.options]\n timeout = 20\n \n [databases.replica3.options]\n timeout = 30\n \n+[databases.replica.test]\n+dependencies = primary1\n+mirror = primary1\n+\n+[databases.replica2.test]\n+dependencies = primary1\n+mirror = primary1\n+\n+[databases.replica3.test]\n+dependencies = primary1\n+mirror = primary1\n+\n+[databases.primary1.options]\n+\n+[databases.replica1.options]\n+timeout = 10\n+\n [database.options]\n \n [database]\ndiff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 76e10f3f..4ea0aec5 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b139'\n+__version__: str = '5.0.0b140'\ndiff --git a\/vstutils\/settings.py b\/vstutils\/settings.py\nindex 7faddd86..c541cc40 100644\n--- a\/vstutils\/settings.py\n+++ b\/vstutils\/settings.py\n@@ -3,7 +3,7 @@\n import gc\n import pwd\n import sys\n-from tempfile import gettempdir, tempdir\n+from tempfile import gettempdir\n \n import environ\n from django.contrib import admin\n@@ -215,6 +215,7 @@ class DBTestSection(DBSection):\n     type_serialize = ConfigBoolType\n     type_create_db = ConfigBoolType\n     type_create_user = ConfigBoolType\n+    type_dependencies = cconfig.ListType()\n \n \n class DBOptionsSection(cconfig.Section):\n@@ -451,7 +452,7 @@ def key_handler_to_all(self, key):\n             \"default_tablespace\": \"\",\n             \"default_index_tablespace\": \"\",\n             \"databases_without_cte_support\": [],\n-            'default': {}\n+            'default': {},\n         },\n         'cache': {\n             **env.cache(\n@@ -880,11 +881,13 @@ def get_plugins():\n def parse_db(params):\n     data: DBSection = config.get_section_instance('database')\n     data.update({**config['database'].all(), **params[1].all()})\n-    return params[0], data.all()\n+    data_all = data.all()\n+    USED_ENGINES.add(data_all.get('ENGINE'))\n+    return params[0], data_all\n \n \n+USED_ENGINES: _t.Set[_t.Text] = set()\n DATABASES = dict(map(parse_db, filter(lambda x: isinstance(x[1], cconfig.Section), config['databases'].items())))\n-USED_ENGINES = set(filter(bool, (i.get('ENGINE', None) for i in DATABASES.values())))\n \n if 'django.db.backends.mysql' in USED_ENGINES:  # nocv\n     try:\n@@ -1373,6 +1376,7 @@ def get_default_storage_class():\n \n     return 'django.core.files.storage.FileSystemStorage'  # nocv\n \n+\n storages = config['storages']\n LIBCLOUD_PROVIDERS: _t.Dict[_t.Text, _t.Dict] = {}\n MEDIA_ROOT = storages['filesystem']['media_root']\n","message":"","files":{"\/setup.py":{"changes":[{"diff":"\n         'vstutils\/static\/bundle\/.*\\.js$'\n     ],\n     install_requires=[\n-        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.12\"),\n+        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.13\"),\n     ]\n     + requirements\n     + load_requirements('requirements-doc.txt'),","add":1,"remove":1,"filename":"\/setup.py","badparts":["        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.12\"),"],"goodparts":["        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.13\"),"," requirements"," load_requirements('requirements-doc.txt'),"]}],"source":"\n import re import os import sys import fnmatch import codecs import gzip import glob import shutil os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir))) from setuptools import find_packages, setup, Command from setuptools.extension import Extension from setuptools.command.sdist import sdist as _sdist from setuptools.command.build_py import build_py as build_py_orig from setuptools.command.install_lib import install_lib as _install_lib try: from Cython.Build import cythonize, build_ext as _build_ext except ImportError: has_cython=False else: has_cython=True try: from sphinx.setup_command import BuildDoc import sphinx has_sphinx=True except ImportError: has_sphinx=False ignored_keys=['-h', '--help', '--version'] is_help=any([a for a in ignored_keys if a in sys.argv]) is_develop='develop' in sys.argv is_build=(any([a for a in['compile', 'bdist_wheel', 'bdist'] if a in sys.argv]) or is_develop) and not is_help def get_discription(file_path='README.rst', folder=os.getcwd()): with codecs.open(\"{}\/{}\".format(folder, file_path), 'r', encoding='utf-8') as readme: return readme.read() def load_requirements(file_name, folder=os.getcwd()): with codecs.open(os.path.join(folder, file_name), 'r', encoding='utf-8')as req_file: return req_file.read().strip().split('\\n') def get_file_ext(ext): file_types=[\".py\", \".pyx\", \".c\", '.cpp'] if has_cython else[\".c\", '.cpp', \".py\"] for ftype in file_types: fname=ext.replace(\".\", \"\/\") +ftype if os.path.exists(fname): return fname return None def listfiles(folder): if not isinstance(folder,(list, tuple)): folder=[folder] folder=filter(lambda p: os.path.isdir(p), folder) for one_folder in folder: for root, folders, files in os.walk(one_folder): for filename in folders +files: yield os.path.join(root, filename) def clear_old_extentions(extensions_list, packages): for filename in listfiles(packages): _filename, _f_ext=os.path.splitext(filename) if os.path.isdir(_filename) or _f_ext not in['.c', '.cpp']: continue has_py=( os.path.exists('{}.py'.format(_filename)) or os.path.exists('{}.pyx'.format(_filename)) ) if has_py and filename.replace('\/', '.').replace(_f_ext, '') in extensions_list: print('Removing old extention[{}].'.format(filename)) os.remove(filename) def make_extention(module_name, files, extra_compile_args, main_include_dir=os.path.join(os.getcwd(), 'include')): include_dirs=list(filter( lambda f: bool(f) and os.path.exists(f) and os.path.isdir(f), [os.path.join(module_name.split('.')[0], 'include'), main_include_dir] )) return Extension( module_name, files, extra_compile_args=extra_compile_args, include_dirs=include_dirs ) def make_extensions(extensions_list, packages): if not isinstance(extensions_list, list): raise Exception(\"Extension list should be `list`.\") if not is_help: clear_old_extentions(extensions_list, packages) extensions_dict={} for ext in extensions_list: files=[] module_name=ext if isinstance(ext,(list, tuple)): module_name=ext[0] for file_module in ext[1]: file_name=get_file_ext(file_module) files +=[file_name] if file_name else[] else: file_name=get_file_ext(ext) files +=[file_name] if file_name else[] if files: extensions_dict[module_name]=files extra_compile_args=[ '-g0', '-ggdb1', \"-fno-strict-aliasing\", \"-fno-var-tracking-assignments\", \"-pipe\", \"-std=c99\", '-Werror=sign-compare' ] ext_modules=list( make_extention(m, f, extra_compile_args) for m, f in extensions_dict.items() ) ext_count=len(ext_modules) nthreads=ext_count if ext_count < 10 else 10 language_level=3 if is_help: pass elif has_cython and('compile' in sys.argv or 'bdist_wheel' in sys.argv or 'build_ext' in sys.argv): cy_kwargs=dict( nthreads=nthreads, force=True, language_level=language_level, compiler_directives=dict( linetrace='CYTHON_TRACE_NOGIL' in sys.argv, profile=True, c_string_type='str', c_string_encoding='utf8' ), ) return cythonize(ext_modules, **cy_kwargs), extensions_dict return ext_modules, extensions_dict def minify_js_file(js_file, jsmin_func): return jsmin_func(js_file, quote_chars=\"'\\\"`\") def minify_css_file(css_file, cssmin_func): return cssmin_func(css_file) def minify_static_files(base_dir, files, exclude=None): exclude=exclude or[] patterns=dict() try: from jsmin import jsmin as jsmin_func patterns['*.js']=(minify_js_file, jsmin_func) except: pass try: from csscompressor import compress as csscompressor_func patterns['*.css']=(minify_css_file, csscompressor_func) except: pass regex_exclude=[re.compile(r, re.MULTILINE) for r in exclude] for fnext, funcs in patterns.items(): for fext_file in filter(lambda f: fnmatch.fnmatch(f, fnext), files): if fnmatch.fnmatch(fext_file, '*.min.*'): continue fext_file=os.path.join(base_dir, fext_file) if os.path.exists(fext_file): if not any(filter(lambda fp: bool(fp.search(fext_file)), regex_exclude)): func, subfunc=funcs with codecs.open(fext_file, 'r', encoding='utf-8') as static_file_fd: minified=func(static_file_fd.read(), subfunc) with codecs.open(fext_file, 'w', encoding='utf-8') as static_file_fd: static_file_fd.write(minified) print('Minfied file{fext_file}.'.format(fext_file=fext_file)) with open(fext_file, 'rb') as f_in: with gzip.open(\"{}.gz\".format(fext_file), 'wb') as f_out: shutil.copyfileobj(f_in, f_out) print('Compressed file{fext_file}.'.format(fext_file=fext_file)) def compile_py_func(fullname, compile_file_func): if compile_file_func(fullname, ddir=os.path.dirname(fullname), legacy=True, optimize=0): os.remove(fullname) def compile_python_sources(base_dir, files, exclude=None): exclude=exclude or[] patterns=dict() try: from compileall import compile_file patterns['*.py']=(compile_py_func, compile_file) except: pass regex_exclude=[re.compile(r, re.MULTILINE) for r in exclude] for fnext, funcs in patterns.items(): for fext_file in filter(lambda f: fnmatch.fnmatch(f, fnext), files): fext_file=os.path.join(base_dir, fext_file) if os.path.exists(fext_file): if not any(filter(lambda fp: bool(fp.search(fext_file)), regex_exclude)): func, subfunc=funcs funcs[0](fext_file, funcs[1]) print('Compiled{fext_file}.'.format(fext_file=fext_file)) class _Compile(_sdist): extensions_dict=dict() static_exclude=[] def __filter_files(self, files): for _files in self.extensions_dict.values(): for file in _files: if file in files: files.remove(file) return files def make_release_tree(self, base_dir, files): if has_cython: files=self.__filter_files(files) _sdist.make_release_tree(self, base_dir, files) minify_static_files(base_dir, files, self.static_exclude) def run(self): return _sdist.run(self) class GithubRelease(Command): ''' Make release on github via githubrelease ''' description='Make release on github via githubrelease' user_options=[ ('body=', 'b', 'Body message.'), ('assets=', 'a', 'Release assets patterns.'), ('repo=', 'r', 'Repository for release.'), ('release=', 'R', 'Release version.'), ('dry-run=', 'd', 'Dry run.'), ('publish=', 'p', 'Publish release or just create draft.'), ] def initialize_options(self): self.body=None or os.getenv('CI_COMMIT_DESCRIPTION', None) self.assets=None self.repo=None self.dry_run=False self.publish=False self.release=None or self.distribution.metadata.version def finalize_options(self): if self.repo is None: raise Exception(\"Parameter --repo is missing\") if self.release is None: raise Exception(\"Parameter --release is missing\") self._gh_args=(self.repo, self.release) self._gh_kwargs=dict( publish=self.publish, name=self.release, dry_run=self.dry_run ) if self.assets: assets=self.assets.format(release=self.release) assets=list(filter(bool, assets.split('\\n'))) self._gh_kwargs['asset_pattern']=assets if self.body: self._gh_kwargs['body']=self.body def run(self): from github_release import gh_release_create gh_release_create(*self._gh_args, **self._gh_kwargs) class build_py(build_py_orig): exclude=[] compile_extentions_types=['.py', '.pyx'] wheel_extentions_types=['.c', '.cpp'] +compile_extentions_types def _filter_modules(self, module_tuple): pkg, mod, file=module_tuple try: file_name, file_ext=os.path.splitext(file) module_name=file_name.replace('\/', '.') except: return True if 'bdist_wheel' in sys.argv: exclude_list=self.wheel_extentions_types elif 'compile' in sys.argv: exclude_list=self.compile_extentions_types else: return True if module_name in self.exclude and file_ext in exclude_list: return False return True def find_package_modules(self, package, package_dir): modules=build_py_orig.find_package_modules(self, package, package_dir) return list(filter(self._filter_modules, modules)) class install_lib(_install_lib): exclude=[] static_exclude=[] compile_exclude=[] def _filter_files_with_ext(self, filename): _filename, _fext=os.path.splitext(filename) if _fext in build_py.wheel_extentions_types: return True return False def install(self): result=_install_lib.install(self) files=list(listfiles(self.install_dir)) so_extentions=list(filter(lambda f: fnmatch.fnmatch(f, '*.so'), files)) for source in filter(self._filter_files_with_ext, files): _source_name, _source_ext=os.path.splitext(source) if any(filter(lambda f: fnmatch.fnmatch(f, _source_name+\"*.so\"), so_extentions)): print('Removing extention sources[{}].'.format(source)) os.remove(source) minify_static_files('', files, self.static_exclude) if os.getenv('BUILD_COMPILE', '')=='true': compile_python_sources('', files, self.compile_exclude) return result def get_compile_command(extensions_dict=None): extensions_dict=extensions_dict or dict() compile_class=_Compile compile_class.extensions_dict=extensions_dict return compile_class def make_setup(**opts): if 'packages' not in opts: opts['packages']=find_packages() ext_modules_list=opts.pop('ext_modules_list',[]) ext_mod, ext_mod_dict=make_extensions(ext_modules_list, opts['packages']) opts['ext_modules']=opts.get('ext_modules',[]) +ext_mod cmdclass=opts.get('cmdclass', dict()) static_exclude=opts.pop('static_exclude_min',[]) if 'compile' not in cmdclass: compile_class=get_compile_command(ext_mod_dict) compile_class.static_exclude=static_exclude cmdclass.update({\"compile\": get_compile_command(ext_mod_dict)}) if has_cython: build_py.exclude=ext_modules_list install_lib.static_exclude=static_exclude install_lib.compile_exclude=opts.pop('compile_modules_exclude',[]) cmdclass.update({ 'build_ext': _build_ext, 'build_py': build_py, 'install_lib': install_lib }) if has_sphinx and 'build_sphinx' not in cmdclass: cmdclass['build_sphinx']=BuildDoc cmdclass['githubrelease']=GithubRelease opts['cmdclass']=cmdclass webpack_path=os.path.join(os.getcwd(), 'webpack.config.js') if os.path.exists(webpack_path) and is_build and os.environ.get('DONT_YARN', \"\") !='true': yarn_build_command='devBuild' if is_develop else 'build' try: os.system('yarn install --pure-lockfile') os.system('yarn ' +yarn_build_command) except Extension as err: print(err) setup(**opts) ext_list=[] if 'develop' in sys.argv: ext_list=[] requirements=load_requirements('requirements.txt') requirements_rpc=load_requirements('requirements-rpc.txt') kwargs=dict( packages=find_packages(exclude=['tests', 'test_proj']+ext_list), ext_modules_list=ext_list, static_exclude_min=[ 'vstutils\/templates\/.*\\.js$', 'vstutils\/static\/bundle\/.*\\.js$' ], install_requires=[ \"django~=\" +(os.environ.get('DJANGO_DEP', \"\") or \"3.2.12\"), ] +requirements +load_requirements('requirements-doc.txt'), extras_require={ 'test': load_requirements('requirements-test.txt'), 'rpc': requirements_rpc, 'ldap': load_requirements('requirements-ldap.txt'), 'doc':['django-docs==0.3.1'] +load_requirements('requirements-doc.txt'), 'prod': load_requirements('requirements-prod.txt'), 'stubs': load_requirements('requirements-stubs.txt'), 'pil':['Pillow~=8.4.0;python_version<\"3.7\"', 'Pillow~=9.0.0;python_version>\"3.6\"'], 'boto3':[ i.replace('libcloud', 'libcloud,boto3') for i in requirements if isinstance(i, str) and 'django-storages' in i ], 'sqs':[ i.replace('redis', 'sqs,redis') if isinstance(i, str) and 'celery' in i else i for i in requirements_rpc ], 'librabbitmq':[ i.replace('redis', 'librabbitmq,redis') if isinstance(i, str) and 'celery' in i else i for i in requirements_rpc ], }, dependency_links=[ ] +load_requirements('requirements-git.txt'), entry_points={ 'console_scripts':['vstutilsctl=vstutils.__main__:cmd_execution'] }, project_urls={ \"Issue Tracker\": \"https:\/\/gitlab.com\/vstconsulting\/vstutils\/issues\", \"Source Code\": \"https:\/\/gitlab.com\/vstconsulting\/vstutils\", \"Releases\": \"https:\/\/pypi.org\/project\/vstutils\/ \"Documentation\": \"https:\/\/vstutils.vstconsulting.net\/\", } ) all_deps=[] for key, deps in kwargs['extras_require'].items(): if key not in('sqs', 'librabbitmq'): all_deps +=deps kwargs['extras_require']['all']=all_deps make_setup(**kwargs) ","sourceWithComments":"# Compilation block\n########################################################################################\nimport re\nimport os\nimport sys\nimport fnmatch\nimport codecs\nimport gzip\nimport glob\nimport shutil\n\n# allow setup.py to be run from any path\nos.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))\n\nfrom setuptools import find_packages, setup, Command\nfrom setuptools.extension import Extension\nfrom setuptools.command.sdist import sdist as _sdist\nfrom setuptools.command.build_py import build_py as build_py_orig\nfrom setuptools.command.install_lib import install_lib as _install_lib\ntry:\n    from Cython.Build import cythonize, build_ext as _build_ext\nexcept ImportError:\n    has_cython = False\nelse:\n    has_cython = True\n\ntry:\n    from sphinx.setup_command import BuildDoc\n    import sphinx  # noqa: F401\n    has_sphinx = True\nexcept ImportError:\n    has_sphinx = False\n\n\nignored_keys = ['-h', '--help', '--version']\nis_help = any([a for a in ignored_keys if a in sys.argv])\nis_develop = 'develop' in sys.argv\nis_build = (any([a for a in ['compile', 'bdist_wheel', 'bdist'] if a in sys.argv]) or is_develop) and not is_help\n\n\ndef get_discription(file_path='README.rst', folder=os.getcwd()):\n    with codecs.open(\"{}\/{}\".format(folder, file_path), 'r', encoding='utf-8') as readme:\n        return readme.read()\n\n\ndef load_requirements(file_name, folder=os.getcwd()):\n    with codecs.open(os.path.join(folder, file_name), 'r', encoding='utf-8')as req_file:\n        return req_file.read().strip().split('\\n')\n\n\ndef get_file_ext(ext):\n    file_types = [\".py\", \".pyx\", \".c\", '.cpp'] if has_cython else [\".c\", '.cpp', \".py\"]\n    for ftype in file_types:\n        fname = ext.replace(\".\", \"\/\") + ftype\n        if os.path.exists(fname):\n            return fname\n    return None\n\n\ndef listfiles(folder):\n    if not isinstance(folder, (list, tuple)):\n        folder = [folder]\n    folder = filter(lambda p: os.path.isdir(p), folder)\n    for one_folder in folder:\n        for root, folders, files in os.walk(one_folder):\n            for filename in folders + files:\n                yield os.path.join(root, filename)\n\n\ndef clear_old_extentions(extensions_list, packages):\n    for filename in listfiles(packages):\n        _filename, _f_ext = os.path.splitext(filename)\n        if os.path.isdir(_filename) or _f_ext not in ['.c', '.cpp']:\n            continue\n        has_py = (\n            os.path.exists('{}.py'.format(_filename)) or\n            os.path.exists('{}.pyx'.format(_filename))\n        )\n\n        if has_py and filename.replace('\/', '.').replace(_f_ext, '') in extensions_list:\n            print('Removing old extention [{}].'.format(filename))\n            os.remove(filename)\n\n\ndef make_extention(module_name, files, extra_compile_args, main_include_dir=os.path.join(os.getcwd(), 'include')):\n    include_dirs = list(filter(\n        lambda f: bool(f) and os.path.exists(f) and os.path.isdir(f),\n        [os.path.join(module_name.split('.')[0], 'include'), main_include_dir]\n    ))\n\n    return Extension(\n        module_name, files,\n        extra_compile_args=extra_compile_args,\n        include_dirs=include_dirs\n    )\n\n\ndef make_extensions(extensions_list, packages):\n    if not isinstance(extensions_list, list):\n        raise Exception(\"Extension list should be `list`.\")\n\n    if not is_help:\n        clear_old_extentions(extensions_list, packages)\n\n    extensions_dict = {}\n    for ext in extensions_list:\n        files = []\n        module_name = ext\n        if isinstance(ext, (list, tuple)):\n            module_name = ext[0]\n            for file_module in ext[1]:\n                file_name = get_file_ext(file_module)\n                files += [file_name] if file_name else []\n        else:\n            file_name = get_file_ext(ext)\n            files += [file_name] if file_name else []\n        if files:\n            extensions_dict[module_name] = files\n\n    extra_compile_args = [\n        '-g0', '-ggdb1',\n        \"-fno-strict-aliasing\",\n        \"-fno-var-tracking-assignments\",\n        \"-pipe\", \"-std=c99\", '-Werror=sign-compare'\n    ]\n    ext_modules = list(\n        make_extention(m, f, extra_compile_args)\n        for m, f in extensions_dict.items()\n    )\n    ext_count = len(ext_modules)\n    nthreads = ext_count if ext_count < 10 else 10\n\n    language_level = 3\n    if is_help:\n        pass\n    elif has_cython and ('compile' in sys.argv or 'bdist_wheel' in sys.argv or 'build_ext' in sys.argv):\n        cy_kwargs = dict(\n            nthreads=nthreads,\n            force=True,\n            language_level=language_level,\n            compiler_directives=dict(\n                linetrace='CYTHON_TRACE_NOGIL' in sys.argv,\n                profile=True,\n                c_string_type='str',\n                c_string_encoding='utf8'\n            ),\n        )\n        return cythonize(ext_modules, **cy_kwargs), extensions_dict\n    return ext_modules, extensions_dict\n\n\ndef minify_js_file(js_file, jsmin_func):\n    return jsmin_func(js_file, quote_chars=\"'\\\"`\")\n\n\ndef minify_css_file(css_file, cssmin_func):\n    return cssmin_func(css_file)\n\n\ndef minify_static_files(base_dir, files, exclude=None):\n    exclude = exclude or []\n    patterns = dict()\n    try:\n        from jsmin import jsmin as jsmin_func\n        patterns['*.js'] = (minify_js_file, jsmin_func)\n    except:\n        pass\n    try:\n        from csscompressor import compress as csscompressor_func\n        patterns['*.css'] = (minify_css_file, csscompressor_func)\n    except:\n        pass\n\n    regex_exclude = [re.compile(r, re.MULTILINE) for r in exclude]\n\n    for fnext, funcs in patterns.items():\n        for fext_file in filter(lambda f: fnmatch.fnmatch(f, fnext), files):\n            if fnmatch.fnmatch(fext_file, '*.min.*'):\n                continue\n            fext_file = os.path.join(base_dir, fext_file)\n            if os.path.exists(fext_file):\n                if not any(filter(lambda fp: bool(fp.search(fext_file)), regex_exclude)):\n                    func, subfunc = funcs\n                    with codecs.open(fext_file, 'r', encoding='utf-8') as static_file_fd:\n                        minified = func(static_file_fd.read(), subfunc)\n                    with codecs.open(fext_file, 'w', encoding='utf-8') as static_file_fd:\n                        static_file_fd.write(minified)\n                    print('Minfied file {fext_file}.'.format(fext_file=fext_file))\n                with open(fext_file, 'rb') as f_in:\n                    with gzip.open(\"{}.gz\".format(fext_file), 'wb') as f_out:\n                        shutil.copyfileobj(f_in, f_out)\n                print('Compressed file {fext_file}.'.format(fext_file=fext_file))\n\n\ndef compile_py_func(fullname, compile_file_func):\n    if compile_file_func(fullname, ddir=os.path.dirname(fullname), legacy=True, optimize=0):\n        os.remove(fullname)\n\n\ndef compile_python_sources(base_dir, files, exclude=None):\n    exclude = exclude or []\n    patterns = dict()\n    try:\n        from compileall import compile_file\n        patterns['*.py'] = (compile_py_func, compile_file)\n    except:\n        pass\n\n    regex_exclude = [re.compile(r, re.MULTILINE) for r in exclude]\n\n    for fnext, funcs in patterns.items():\n        for fext_file in filter(lambda f: fnmatch.fnmatch(f, fnext), files):\n            fext_file = os.path.join(base_dir, fext_file)\n            if os.path.exists(fext_file):\n                if not any(filter(lambda fp: bool(fp.search(fext_file)), regex_exclude)):\n                    func, subfunc = funcs\n                    funcs[0](fext_file, funcs[1])\n                    print('Compiled {fext_file}.'.format(fext_file=fext_file))\n\n\nclass _Compile(_sdist):\n    extensions_dict = dict()\n    static_exclude = []\n\n    def __filter_files(self, files):\n        for _files in self.extensions_dict.values():\n            for file in _files:\n                if file in files:\n                    files.remove(file)\n        return files\n\n    def make_release_tree(self, base_dir, files):\n        if has_cython:\n            files = self.__filter_files(files)\n        _sdist.make_release_tree(self, base_dir, files)\n        minify_static_files(base_dir, files, self.static_exclude)\n\n    def run(self):\n        return _sdist.run(self)\n\n\nclass GithubRelease(Command):\n    '''\n    Make release on github via githubrelease\n    '''\n    description = 'Make release on github via githubrelease'\n\n    user_options = [\n        ('body=', 'b', 'Body message.'),\n        ('assets=', 'a', 'Release assets patterns.'),\n        ('repo=', 'r', 'Repository for release.'),\n        ('release=', 'R', 'Release version.'),\n        ('dry-run=', 'd', 'Dry run.'),\n        ('publish=', 'p', 'Publish release or just create draft.'),\n    ]\n\n    def initialize_options(self):\n        self.body = None or os.getenv('CI_COMMIT_DESCRIPTION', None)\n        self.assets = None\n        self.repo = None\n        self.dry_run = False\n        self.publish = False\n        self.release = None or self.distribution.metadata.version\n\n    def finalize_options(self):\n        if self.repo is None:\n            raise Exception(\"Parameter --repo is missing\")\n        if self.release is None:\n            raise Exception(\"Parameter --release is missing\")\n        self._gh_args = (self.repo, self.release)\n        self._gh_kwargs = dict(\n            publish=self.publish, name=self.release, dry_run=self.dry_run\n        )\n        if self.assets:\n            assets = self.assets.format(release=self.release)\n            assets = list(filter(bool, assets.split('\\n')))\n            self._gh_kwargs['asset_pattern'] = assets\n        if self.body:\n            self._gh_kwargs['body'] = self.body\n\n    def run(self):\n        from github_release import gh_release_create\n        gh_release_create(*self._gh_args, **self._gh_kwargs)\n\n\nclass build_py(build_py_orig):\n    exclude = []\n    compile_extentions_types = ['.py', '.pyx']\n    wheel_extentions_types = ['.c', '.cpp'] + compile_extentions_types\n\n    def _filter_modules(self, module_tuple):\n        pkg, mod, file = module_tuple\n        try:\n            file_name, file_ext = os.path.splitext(file)\n            module_name = file_name.replace('\/', '.')\n        except:\n            return True\n        if 'bdist_wheel' in sys.argv:\n            exclude_list = self.wheel_extentions_types\n        elif 'compile' in sys.argv:\n            exclude_list = self.compile_extentions_types\n        else:\n            return True\n        if module_name in self.exclude and file_ext in exclude_list:\n            return False\n        return True\n\n    def find_package_modules(self, package, package_dir):\n        modules = build_py_orig.find_package_modules(self, package, package_dir)\n        return list(filter(self._filter_modules, modules))\n\n\nclass install_lib(_install_lib):\n    exclude = []\n    static_exclude = []\n    compile_exclude = []\n\n    def _filter_files_with_ext(self, filename):\n        _filename, _fext = os.path.splitext(filename)\n        if _fext in build_py.wheel_extentions_types:\n            return True\n        return False\n\n    def install(self):\n        result = _install_lib.install(self)\n        files = list(listfiles(self.install_dir))\n        so_extentions = list(filter(lambda f: fnmatch.fnmatch(f, '*.so'), files))\n        for source in filter(self._filter_files_with_ext, files):\n            _source_name, _source_ext = os.path.splitext(source)\n            if any(filter(lambda f: fnmatch.fnmatch(f, _source_name+\"*.so\"), so_extentions)):\n                print('Removing extention sources [{}].'.format(source))\n                os.remove(source)\n        minify_static_files('', files, self.static_exclude)\n        if os.getenv('BUILD_COMPILE', '') == 'true':\n            compile_python_sources('', files, self.compile_exclude)\n        return result\n\n\ndef get_compile_command(extensions_dict=None):\n    extensions_dict = extensions_dict or dict()\n    compile_class = _Compile\n    compile_class.extensions_dict = extensions_dict\n    return compile_class\n\n\ndef make_setup(**opts):\n    if 'packages' not in opts:\n        opts['packages'] = find_packages()\n    ext_modules_list = opts.pop('ext_modules_list', [])\n    ext_mod, ext_mod_dict = make_extensions(ext_modules_list, opts['packages'])\n    opts['ext_modules'] = opts.get('ext_modules', []) + ext_mod\n    cmdclass = opts.get('cmdclass', dict())\n    static_exclude = opts.pop('static_exclude_min', [])\n    if 'compile' not in cmdclass:\n        compile_class = get_compile_command(ext_mod_dict)\n        compile_class.static_exclude = static_exclude\n        cmdclass.update({\"compile\": get_compile_command(ext_mod_dict)})\n    if has_cython:\n        build_py.exclude = ext_modules_list\n        install_lib.static_exclude = static_exclude\n        install_lib.compile_exclude = opts.pop('compile_modules_exclude', [])\n        cmdclass.update({\n            'build_ext': _build_ext,\n            'build_py': build_py,\n            'install_lib': install_lib\n        })\n    if has_sphinx and 'build_sphinx' not in cmdclass:\n        cmdclass['build_sphinx'] = BuildDoc\n    cmdclass['githubrelease'] = GithubRelease\n    opts['cmdclass'] = cmdclass\n\n    webpack_path = os.path.join(os.getcwd(), 'webpack.config.js')\n    if os.path.exists(webpack_path) and is_build and os.environ.get('DONT_YARN', \"\") != 'true':\n        yarn_build_command = 'devBuild' if is_develop else 'build'\n        try:\n            os.system('yarn install --pure-lockfile')\n            os.system('yarn ' + yarn_build_command)\n        except Extension as err:\n            print(err)\n\n    setup(**opts)\n\n########################################################################################\n# end block\n\next_list = []\n\nif 'develop' in sys.argv:\n    ext_list = []\n\nrequirements = load_requirements('requirements.txt')\nrequirements_rpc = load_requirements('requirements-rpc.txt')\n\nkwargs = dict(\n    packages=find_packages(exclude=['tests', 'test_proj']+ext_list),\n    ext_modules_list=ext_list,\n    static_exclude_min=[\n        'vstutils\/templates\/.*\\.js$',\n        'vstutils\/static\/bundle\/.*\\.js$'\n    ],\n    install_requires=[\n        \"django~=\" + (os.environ.get('DJANGO_DEP', \"\") or \"3.2.12\"),\n    ]\n    + requirements\n    + load_requirements('requirements-doc.txt'),\n    extras_require={\n        'test': load_requirements('requirements-test.txt'),\n        'rpc': requirements_rpc,\n        'ldap': load_requirements('requirements-ldap.txt'),\n        'doc': ['django-docs==0.3.1'] + load_requirements('requirements-doc.txt'),\n        'prod': load_requirements('requirements-prod.txt'),\n        'stubs': load_requirements('requirements-stubs.txt'),\n        'pil': ['Pillow~=8.4.0;python_version<\"3.7\"', 'Pillow~=9.0.0;python_version>\"3.6\"'],\n        'boto3': [\n            i.replace('libcloud', 'libcloud,boto3')\n            for i in requirements\n            if isinstance(i, str) and 'django-storages' in i\n        ],\n        'sqs': [\n            i.replace('redis', 'sqs,redis')\n            if isinstance(i, str) and 'celery' in i\n            else i\n            for i in requirements_rpc\n        ],\n        'librabbitmq': [\n            i.replace('redis', 'librabbitmq,redis')\n            if isinstance(i, str) and 'celery' in i\n            else i\n            for i in requirements_rpc\n        ],\n    },\n    dependency_links=[\n    ] + load_requirements('requirements-git.txt'),\n    entry_points={\n        'console_scripts': ['vstutilsctl=vstutils.__main__:cmd_execution']\n    },\n    project_urls={\n        \"Issue Tracker\": \"https:\/\/gitlab.com\/vstconsulting\/vstutils\/issues\",\n        \"Source Code\": \"https:\/\/gitlab.com\/vstconsulting\/vstutils\",\n        \"Releases\": \"https:\/\/pypi.org\/project\/vstutils\/#history\",\n        \"Documentation\": \"https:\/\/vstutils.vstconsulting.net\/\",\n    }\n)\n\nall_deps = []\nfor key, deps in kwargs['extras_require'].items():\n    if key not in ('sqs', 'librabbitmq'):\n        all_deps += deps\n\nkwargs['extras_require']['all'] = all_deps\n\nmake_setup(**kwargs)\n"}},"msg":"Release 5.0.0 Beta 140\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n* Feature: Provide dependencies support for test databases.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"6efd1271decba1e6486a6fea56632edc495fa3a6":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/6efd1271decba1e6486a6fea56632edc495fa3a6","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/6efd1271decba1e6486a6fea56632edc495fa3a6","sha":"6efd1271decba1e6486a6fea56632edc495fa3a6","keyword":"execution after redirect prevent","diff":"diff --git a\/test_src\/test_proj\/tests.py b\/test_src\/test_proj\/tests.py\nindex b3e07c90..a4edf6b6 100644\n--- a\/test_src\/test_proj\/tests.py\n+++ b\/test_src\/test_proj\/tests.py\n@@ -2843,7 +2843,7 @@ def test_translate_action(self):\n         ]\n         results = self.bulk(bulk_data)\n         # test successful translation\n-        self.assertEqual(201, results[0]['status'])\n+        self.assertEqual(201, results[0]['status'], results[0]['data'])\n         self.assertEqual(test_results[0], results[0]['data'])\n         # test not translated\n         self.assertEqual(201, results[1]['status'])\n@@ -3052,7 +3052,7 @@ def test_deep_host_create(self):\n         results = self.bulk(bulk_data)\n         for result in results[:-2]:\n             self.assertEqual(result['status'], 201, f'Current result number is `{result}`')\n-        self.assertEqual(results[-2]['status'], 200)\n+        self.assertEqual(results[-2]['status'], 200, results[-2]['data'])\n         self.assertEqual(results[-2]['data']['name'], 'level4')\n         self.assertEqual(results[-1]['status'], 200)\n         self.assertEqual(results[-1]['data']['count'], 1)\ndiff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 4ea0aec5..c51930bf 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b140'\n+__version__: str = '5.0.0b141'\ndiff --git a\/vstutils\/api\/endpoint.py b\/vstutils\/api\/endpoint.py\nindex 06eefe38..211169ce 100644\n--- a\/vstutils\/api\/endpoint.py\n+++ b\/vstutils\/api\/endpoint.py\n@@ -4,8 +4,8 @@\n import functools\n from concurrent.futures import ThreadPoolExecutor, Executor\n from collections import OrderedDict\n-import json\n \n+import orjson\n from django.conf import settings\n from django.db import transaction\n from django.http import HttpResponse, HttpRequest\n@@ -66,7 +66,7 @@ def _get_request_data_dict(request_data):\n \n @_get_request_data.register(str)\n def _get_request_data_str(request_data):\n-    return _get_request_data(json.loads(request_data))  # nocv\n+    return _get_request_data(orjson.loads(request_data))  # nocv\n \n \n def _iter_request(request, operation_handler, context):\n@@ -125,7 +125,7 @@ def _get_rendered(self, response: _t.Union[HttpResponse, responses.BaseResponseC\n             if isinstance(response.accepted_renderer, ORJSONRenderer) and response.is_rendered:  # type: ignore\n                 return response.rendered_content  # type: ignore\n         if response.status_code != 404 and getattr(response, \"rendered_content\", False):  # nocv\n-            return json.loads(response.rendered_content.decode())  # type: ignore\n+            return orjson.loads(response.rendered_content.decode())  # type: ignore\n         return Dict(detail=str(response.content.decode('utf-8')))\n \n \n@@ -209,7 +209,7 @@ def to_internal_value(self, data) -> _t.Text:\n                 **self.context['variables'],\n             )\n             with raise_context():\n-                return json.loads(result)\n+                return orjson.loads(result)\n \n         return result\n \n@@ -272,6 +272,7 @@ def to_internal_value(self, data):\n class OperationSerializer(serializers.Serializer):\n     # pylint: disable=abstract-method\n     __slots__ = ()\n+    renderer = ORJSONRenderer()\n \n     path = PathField(required=True)\n     method = MethodChoicesField(required=True)\n@@ -304,6 +305,9 @@ def create(self, validated_data: _t.Dict[_t.Text, _t.Union[_t.Text, _t.Mapping]]\n             url += '?' + str(validated_data['query'])\n         if method_name != 'get':\n             method = transaction.atomic()(method)\n+        data = validated_data['data']\n+        if data and method_name != 'get':\n+            data = self.renderer.render(data, media_type=self.renderer.media_type)\n         result = ParseResponseDict(\n             path=url,\n             method=method_name,\n@@ -311,7 +315,7 @@ def create(self, validated_data: _t.Dict[_t.Text, _t.Union[_t.Text, _t.Mapping]]\n                 url,\n                 content_type='application\/json',\n                 secure=self.context['request']._request.is_secure(),\n-                data=validated_data['data'],\n+                data=data,\n                 **validated_data['headers']\n             )\n         )\ndiff --git a\/vstutils\/api\/renderers.py b\/vstutils\/api\/renderers.py\nindex 39cf15a0..878930cf 100644\n--- a\/vstutils\/api\/renderers.py\n+++ b\/vstutils\/api\/renderers.py\n@@ -21,7 +21,7 @@ def default(obj):\n         return BaseORJSONRenderer.default(obj)\n \n     def render(self, data, media_type=None, renderer_context=None):\n-        if getattr(renderer_context['request'], 'is_bulk', False):\n+        if renderer_context and getattr(renderer_context['request'], 'is_bulk', False):\n             return data\n         return super().render(data, media_type, renderer_context)\n \n","message":"","files":{"\/test_src\/test_proj\/tests.py":{"changes":[{"diff":"\n         ]\n         results = self.bulk(bulk_data)\n         # test successful translation\n-        self.assertEqual(201, results[0]['status'])\n+        self.assertEqual(201, results[0]['status'], results[0]['data'])\n         self.assertEqual(test_results[0], results[0]['data'])\n         # test not translated\n         self.assertEqual(201, results[1]['status'])\n","add":1,"remove":1,"filename":"\/test_src\/test_proj\/tests.py","badparts":["        self.assertEqual(201, results[0]['status'])"],"goodparts":["        self.assertEqual(201, results[0]['status'], results[0]['data'])"]},{"diff":"\n         results = self.bulk(bulk_data)\n         for result in results[:-2]:\n             self.assertEqual(result['status'], 201, f'Current result number is `{result}`')\n-        self.assertEqual(results[-2]['status'], 200)\n+        self.assertEqual(results[-2]['status'], 200, results[-2]['data'])\n         self.assertEqual(results[-2]['data']['name'], 'level4')\n         self.assertEqual(results[-1]['status'], 200)\n         self.assertEqual(results[-1]['data']['count'], 1)","add":1,"remove":1,"filename":"\/test_src\/test_proj\/tests.py","badparts":["        self.assertEqual(results[-2]['status'], 200)"],"goodparts":["        self.assertEqual(results[-2]['status'], 200, results[-2]['data'])"]}]},"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b140'\n+__version__: str = '5.0.0b141","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b140'"],"goodparts":["__version__: str = '5.0.0b141"]}],"source":"\n\n__version__: str='5.0.0b140' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b140'\n"},"\/vstutils\/api\/endpoint.py":{"changes":[{"diff":"\n import functools\n from concurrent.futures import ThreadPoolExecutor, Executor\n from collections import OrderedDict\n-import json\n \n+import orjson\n from django.conf import settings\n from django.db import transaction\n from django.http import HttpResponse, HttpRequest\n","add":1,"remove":1,"filename":"\/vstutils\/api\/endpoint.py","badparts":["import json"],"goodparts":["import orjson"]},{"diff":"\n \n @_get_request_data.register(str)\n def _get_request_data_str(request_data):\n-    return _get_request_data(json.loads(request_data))  # nocv\n+    return _get_request_data(orjson.loads(request_data))  # nocv\n \n \n def _iter_request(request, operation_handler, context):\n","add":1,"remove":1,"filename":"\/vstutils\/api\/endpoint.py","badparts":["    return _get_request_data(json.loads(request_data))  # nocv"],"goodparts":["    return _get_request_data(orjson.loads(request_data))  # nocv"]},{"diff":"\n             if isinstance(response.accepted_renderer, ORJSONRenderer) and response.is_rendered:  # type: ignore\n                 return response.rendered_content  # type: ignore\n         if response.status_code != 404 and getattr(response, \"rendered_content\", False):  # nocv\n-            return json.loads(response.rendered_content.decode())  # type: ignore\n+            return orjson.loads(response.rendered_content.decode())  # type: ignore\n         return Dict(detail=str(response.content.decode('utf-8')))\n \n \n","add":1,"remove":1,"filename":"\/vstutils\/api\/endpoint.py","badparts":["            return json.loads(response.rendered_content.decode())  # type: ignore"],"goodparts":["            return orjson.loads(response.rendered_content.decode())  # type: ignore"]},{"diff":"\n                 **self.context['variables'],\n             )\n             with raise_context():\n-                return json.loads(result)\n+                return orjson.loads(result)\n \n         return result\n \n","add":1,"remove":1,"filename":"\/vstutils\/api\/endpoint.py","badparts":["                return json.loads(result)"],"goodparts":["                return orjson.loads(result)"]},{"diff":"\n                 url,\n                 content_type='application\/json',\n                 secure=self.context['request']._request.is_secure(),\n-                data=validated_data['data'],\n+                data=data,\n                 **validated_data['headers']\n             )\n        ","add":1,"remove":1,"filename":"\/vstutils\/api\/endpoint.py","badparts":["                data=validated_data['data'],"],"goodparts":["                data=data,"]}],"source":"\nimport typing as _t import logging import traceback import functools from concurrent.futures import ThreadPoolExecutor, Executor from collections import OrderedDict import json from django.conf import settings from django.db import transaction from django.http import HttpResponse, HttpRequest from django.contrib.auth.models import AbstractUser from django.test.client import Client, ClientHandler from django.test.utils import modify_settings from drf_yasg.views import SPEC_RENDERERS from rest_framework import serializers, views, versioning, request as drf_request from rest_framework.authentication import( SessionAuthentication, BasicAuthentication, TokenAuthentication, BaseAuthentication ) from. import responses from.decorators import cache_method_result from.serializers import DataSerializer from.validators import UrlQueryStringValidator from.renderers import ORJSONRenderer from..utils import Dict, raise_context, patch_gzip_response from..middleware import BaseMiddleware RequestType=_t.Union[drf_request.Request, HttpRequest] logger: logging.Logger=logging.getLogger('vstutils') THREADS_COUNT=settings.BULK_THREADS API_URL: _t.Text=settings.API_URL DEFAULT_VERSION=settings.VST_API_VERSION REST_METHODS: _t.List[_t.Text]=[ m.upper() for m in views.APIView.http_method_names ] default_authentication_classes=( SessionAuthentication, BasicAuthentication, TokenAuthentication ) append_to_list=list.append response_headers_to_pass=( \"ETag\", \"Location\", \"Pagination-Identifiers\", ) @functools.singledispatch def _get_request_data(request_data: _t.Iterable) -> _t.Union[_t.List, _t.Tuple]: assert isinstance(request_data,(list, tuple)), 'Request data must be list or tuple.' return request_data @_get_request_data.register(dict) def _get_request_data_dict(request_data): return[request_data] @_get_request_data.register(str) def _get_request_data_str(request_data): return _get_request_data(json.loads(request_data)) def _iter_request(request, operation_handler, context): executor_class=_DummyExecutor if request.method not in('POST', 'PUT'): executor_class=ThreadPoolExecutor if THREADS_COUNT else executor_class handler=lambda o: operation_handler(o, context) with executor_class(max_workers=THREADS_COUNT) as executor: for operation_result in executor.map(handler, _get_request_data(request.data)): yield operation_result def _join_paths(*args) -> _t.Text: \"\"\"Join multiple path fragments into one :param *args: List of items that can be anything like '\/a\/b\/c', 'b\/c\/', 1, 'v1' :returns: Path that starts and ends with \"\"\" return f\"\/{'\/'.join(str(arg).strip('\/') for arg in args)}\/\" class _DummyExecutor(Executor): def __init__(self, *args, **kwargs): super().__init__() def map(self, fn, *iterables, timeout=None, chunksize=1): return map(fn, *iterables) class ParseResponseDict(dict): __slots__=('timing',) timing: _t.SupportsFloat def __init__(self, path: _t.Text, method: _t.Text, response: HttpResponse): super().__init__( path=path, status=response.status_code, data=self._get_rendered(response), method=method, headers={ header: response.headers[header] for header in response.headers if header in response_headers_to_pass } ) self.timing=float(response.get('Response-Time', '0.0')) def _get_rendered(self, response: _t.Union[HttpResponse, responses.BaseResponseClass]): with raise_context(): result=response.data if isinstance(result, dict): return Dict(result) with raise_context(): if isinstance(response.accepted_renderer, ORJSONRenderer) and response.is_rendered: return response.rendered_content if response.status_code !=404 and getattr(response, \"rendered_content\", False): return json.loads(response.rendered_content.decode()) return Dict(detail=str(response.content.decode('utf-8'))) class BulkRequestType(drf_request.Request, HttpRequest): data: _t.List[_t.Dict[_t.Text, _t.Any]] version: _t.Optional[_t.Text] successful_authenticator: _t.Optional[BaseAuthentication] class BulkMiddleware(BaseMiddleware): __slots__=() def request_handler(self, request: HttpRequest) -> HttpRequest: request.is_bulk=True if 'user' in request.META: request.user=request.META.pop('user') request._cached_user=request.user if 'language' in request.META: request.language=request.META.pop('language') if 'session' in request.META: request.session=request.META.pop('session') return request class BulkClientHandler(ClientHandler): __slots__=() @modify_settings(MIDDLEWARE=settings.MIDDLEWARE_ENDPOINT_CONTROL) def __init__(self, *args, **kwargs): super().__init__(enforce_csrf_checks=False, *args, **kwargs) if self.__class__.__name__=='BulkClientHandler': self.load_middleware() class BulkClient(Client): __slots__=('user', 'language', 'session', 'exc_info') handler: BulkClientHandler=BulkClientHandler() user: _t.Optional[AbstractUser] def __init__(self, enforce_csrf_checks=False, **defaults): self.user=defaults.pop('user', None) self.language=defaults.pop('language', None) self.session=defaults.pop('session', None) super(Client, self).__init__(**defaults) self.exc_info=None def request(self, **request): if self.user: request['user']=self.user if self.language: request['language']=self.language if self.session: request['session']=self.session response=self.handler(self._base_environ(**request)) if response.cookies: self.cookies.update(response.cookies) return response class FormatDataFieldMixin: \"\"\" Mixin for fields that can format \"<< >>\" templates inside strings \"\"\" __slots__=() requires_context: bool=True context: _t.Dict def to_internal_value(self, data) -> _t.Text: result=super().to_internal_value(data) if isinstance(result, str) \\ and '<<' in result \\ and '>>' in result \\ and not('{' in result and '}' in result) \\ and 'results' in self.context: result=result.replace('<<', '{').replace('>>', '}').format( *self.context['results'], **self.context['variables'], ) with raise_context(): return json.loads(result) return result class TemplateStringField(FormatDataFieldMixin, serializers.CharField): \"\"\" Field that can format \"<< >>\" templates inside strings \"\"\" __slots__=() class RequestDataField(FormatDataFieldMixin, DataSerializer): \"\"\" Field that can handle basic data types and recursise format template strings inside them \"\"\" __slots__=() def to_internal_value(self, data): if isinstance(data, str): pass elif isinstance(data,(list, tuple)): return[self.to_internal_value(i) for i in data] elif isinstance(data,(dict, OrderedDict)): return type(data)( (super(RequestDataField, self).to_internal_value(k), self.to_internal_value(v)) for k, v in data.items() ) return super(RequestDataField, self).to_internal_value(data) class MethodChoicesField(serializers.ChoiceField): \"\"\"Field for HTTP method\"\"\" __slots__=() def __init__(self, choices: _t.List=None, **kwargs): super().__init__(choices or REST_METHODS, **kwargs) def to_internal_value(self, data): return super(MethodChoicesField, self).to_internal_value(str(data).upper()) class PathField(TemplateStringField): __slots__=() def to_internal_value(self, data): if isinstance(data, str): data=(data,) return _join_paths(*[ super(PathField, self).to_internal_value(path) for path in data ]) class OperationSerializer(serializers.Serializer): __slots__=() path=PathField(required=True) method=MethodChoicesField(required=True) headers=serializers.DictField(child=TemplateStringField(), default={}) data=RequestDataField(required=False, default=None, allow_null=True) status=serializers.IntegerField(read_only=True, default=500) info=serializers.CharField(read_only=True) query=TemplateStringField(required=False, allow_blank=True, validators=[UrlQueryStringValidator()], write_only=True) let=TemplateStringField(required=False, write_only=True) version=serializers.ChoiceField(choices=list(settings.API.keys()), default=settings.VST_API_VERSION, write_only=True) def to_representation(self, instance: _t.Dict[_t.Text, _t.Any]) -> Dict: return Dict(super().to_representation(instance)) def get_operation_method(self, method: _t.Text) -> _t.Callable: return getattr(self.context.get('client'), method.lower()) def create(self, validated_data: _t.Dict[_t.Text, _t.Union[_t.Text, _t.Mapping]]) -> ParseResponseDict: method_name=str(validated_data['method']).lower() method=self.get_operation_method(method_name) url=_join_paths(API_URL, validated_data['version'], validated_data['path']) if 'query' in validated_data and validated_data['query']: url +='?' +str(validated_data['query']) if method_name !='get': method=transaction.atomic()(method) result=ParseResponseDict( path=url, method=method_name, response=method( url, content_type='application\/json', secure=self.context['request']._request.is_secure(), data=validated_data['data'], **validated_data['headers'] ) ) if 'let' in validated_data: self.context['variables'][validated_data['let']]=result return result class EndpointViewSet(views.APIView): \"\"\" Default API-endpoint viewset. \"\"\" __slots__=('results',) throttle_classes=[] schema=None versioning_class=versioning.QueryParameterVersioning renderer_classes=list(views.APIView.renderer_classes) +list(SPEC_RENDERERS) session_cookie_name: _t.ClassVar[_t.Text]=settings.SESSION_COOKIE_NAME client_environ_keys_copy: _t.List[_t.Text]=[ \"SCRIPT_NAME\", \"SERVER_NAME\", \"SERVER_PORT\", \"SERVER_PROTOCOL\", \"SERVER_SOFTWARE\", \"REMOTE_ADDR\", settings.SECURE_PROXY_SSL_HEADER[0], \"HTTP_HOST\", \"HTTP_USER_AGENT\" ] serializer_class: _t.ClassVar[_t.Type[OperationSerializer]]=OperationSerializer def get_client(self, request: BulkRequestType) -> BulkClient: \"\"\" Returns test client and guarantees that if bulk request comes authenticated than test client will be authenticated with the same user \"\"\" return BulkClient(**self.original_environ_data(request=request)) def original_environ_data(self, request: BulkRequestType, *args) -> _t.Dict: get_environ=request.META.get kwargs={} for env_var in tuple(self.client_environ_keys_copy) +args: value=get_environ(env_var, None) if value: kwargs[env_var]=str(value) if request.user.is_authenticated: if isinstance(request.successful_authenticator, SessionAuthentication): kwargs['HTTP_COOKIE']=str(request.META.get('HTTP_COOKIE')) elif isinstance(request.successful_authenticator,(BasicAuthentication, TokenAuthentication)): kwargs['HTTP_AUTHORIZATION']=str(request.META.get('HTTP_AUTHORIZATION')) kwargs['user']=request.user kwargs['language']=getattr(request, 'language', None) kwargs['session']=getattr(request, 'session', None) return kwargs def get_serializer(self, *args, **kwargs) -> OperationSerializer: \"\"\" Return the serializer instance that should be used for validating and deserializing input, and for serializing output. \"\"\" serializer_class=self.get_serializer_class() kwargs['context']=self.get_serializer_context(kwargs.get('context',{})) return serializer_class(*args, **kwargs) @cache_method_result def get_serializer_class(self): \"\"\" Return the class to use for the serializer. Defaults to using `self.serializer_class`. You may want to override this if you need to provide different serializations depending on the incoming request. (Eg. admins get full serialization, others get basic serialization) \"\"\" assert self.serializer_class is not None,( \"'%s' should either include a `serializer_class` attribute, \" \"or override the `get_serializer_class()` method.\" % self.__class__.__name__ ) return self.serializer_class def get_serializer_context(self, context) -> dict: \"\"\" Extra context provided to the serializer class. \"\"\" if 'client' not in context: context=context.copy() context['client']=self.get_client(_t.cast(BulkRequestType, self.request)) return{ 'request': self.request, 'view': self, **context } def operate(self, operation_data: _t.Dict, context: _t.Dict) -> _t.Tuple[_t.Dict, _t.SupportsFloat]: \"\"\"Method used to handle one operation and return result of it\"\"\" serializer=self.get_serializer(data=operation_data, context=context) try: serializer.is_valid(raise_exception=True) return serializer.to_representation(serializer.save()), serializer.instance.timing except Exception as err: return{ 'path': 'bulk', 'info':{ 'errors': getattr(serializer, '_errors', traceback.format_exc()), 'operation_data': operation_data }, 'status': 500, 'data':{'detail': f'Error in bulk request data. See info. Original message:{str(err)}'} }, 0.0 def get(self, request: BulkRequestType) -> HttpResponse: \"\"\"Returns response with swagger ui or openapi json schema if ?format=openapi\"\"\" url=f'\/api\/{getattr(request, \"version\", DEFAULT_VERSION) or DEFAULT_VERSION}\/_openapi\/' if request.query_params.get('format')=='openapi': url +='?format=openapi' should_gzip=True else: should_gzip=False response=self.get_client(request).get(url, secure=request.is_secure()) if should_gzip: patch_gzip_response(response, request) return response def post(self, request: BulkRequestType) -> responses.BaseResponseClass: \"\"\"Execute transactional bulk request\"\"\" try: with transaction.atomic(): return self.put(request, allow_fail=False) except Exception: logger.debug(traceback.format_exc()) return responses.HTTP_502_BAD_GATEWAY(self.results) def put(self, request: BulkRequestType, allow_fail=True) -> responses.BaseResponseClass: \"\"\"Execute non transaction bulk request\"\"\" context: _t.Dict[_t.Text, _t.Union[_t.List, _t.Dict, BulkClient]]={ 'client': self.get_client(request), 'results': self.results, 'variables':{}, } timings: _t.List=[] for result, timing in _iter_request(request, self.operate, context): append_to_list(self.results, result) append_to_list(timings, timing) if not allow_fail and not(100 <=result.get('status', 500) < 400): raise Exception(f'Execute transaction stopped. Error message:{str(result)}') response=responses.HTTP_200_OK(self.results, timings={f'op{i}': float(j) for i, j in enumerate(timings)}) for cookie_name, cookie_value in context['client'].cookies.items(): if cookie_value.value !=request.COOKIES.get(cookie_name, None): response.cookies[cookie_name]=cookie_value return response def patch(self, request: BulkRequestType) -> responses.BaseResponseClass: return self.put(request) def initial(self, request: drf_request.Request, *args, **kwargs): super().initial(request, *args, **kwargs) self.results: _t.List[_t.Dict[_t.Text, _t.Any]]=[] def finalize_response(self, request: drf_request.Request, *args, **kwargs): if not isinstance(request.successful_authenticator, default_authentication_classes): self.get_client(_t.cast(BulkRequestType, self.request)).logout() return super().finalize_response(request, *args, **kwargs) ","sourceWithComments":"import typing as _t\nimport logging\nimport traceback\nimport functools\nfrom concurrent.futures import ThreadPoolExecutor, Executor\nfrom collections import OrderedDict\nimport json\n\nfrom django.conf import settings\nfrom django.db import transaction\nfrom django.http import HttpResponse, HttpRequest\nfrom django.contrib.auth.models import AbstractUser\nfrom django.test.client import Client, ClientHandler\nfrom django.test.utils import modify_settings\nfrom drf_yasg.views import SPEC_RENDERERS\nfrom rest_framework import serializers, views, versioning, request as drf_request\nfrom rest_framework.authentication import (\n    SessionAuthentication,\n    BasicAuthentication,\n    TokenAuthentication,\n    BaseAuthentication\n)\n\nfrom . import responses\nfrom .decorators import cache_method_result\nfrom .serializers import DataSerializer\nfrom .validators import UrlQueryStringValidator\nfrom .renderers import ORJSONRenderer\nfrom ..utils import Dict, raise_context, patch_gzip_response\nfrom ..middleware import BaseMiddleware\n\nRequestType = _t.Union[drf_request.Request, HttpRequest]\nlogger: logging.Logger = logging.getLogger('vstutils')\n\nTHREADS_COUNT = settings.BULK_THREADS\nAPI_URL: _t.Text = settings.API_URL\nDEFAULT_VERSION = settings.VST_API_VERSION\nREST_METHODS: _t.List[_t.Text] = [\n    m.upper() for m in views.APIView.http_method_names\n]\n\ndefault_authentication_classes = (\n    SessionAuthentication,\n    BasicAuthentication,\n    TokenAuthentication\n)\n\nappend_to_list = list.append\nresponse_headers_to_pass = (\n    \"ETag\",\n    \"Location\",\n    \"Pagination-Identifiers\",\n)\n\n\n@functools.singledispatch\ndef _get_request_data(request_data: _t.Iterable) -> _t.Union[_t.List, _t.Tuple]:\n    assert isinstance(request_data, (list, tuple)), 'Request data must be list or tuple.'\n    return request_data\n\n\n@_get_request_data.register(dict)\ndef _get_request_data_dict(request_data):\n    return [request_data]\n\n\n@_get_request_data.register(str)\ndef _get_request_data_str(request_data):\n    return _get_request_data(json.loads(request_data))  # nocv\n\n\ndef _iter_request(request, operation_handler, context):\n    executor_class = _DummyExecutor\n    if request.method not in ('POST', 'PUT'):\n        executor_class = ThreadPoolExecutor if THREADS_COUNT else executor_class\n    handler = lambda o: operation_handler(o, context)\n    with executor_class(max_workers=THREADS_COUNT) as executor:\n        for operation_result in executor.map(handler, _get_request_data(request.data)):\n            yield operation_result\n\n\ndef _join_paths(*args) -> _t.Text:\n    \"\"\"Join multiple path fragments into one\n\n    :param *args: List of items that can be anything like '\/a\/b\/c', 'b\/c\/', 1, 'v1'\n    :returns: Path that starts and ends with\n    \"\"\"\n    return f\"\/{'\/'.join(str(arg).strip('\/') for arg in args)}\/\"\n\n\nclass _DummyExecutor(Executor):\n    # pylint: disable=abstract-method\n\n    def __init__(self, *args, **kwargs):\n        super().__init__()\n\n    def map(self, fn, *iterables, timeout=None, chunksize=1):\n        return map(fn, *iterables)\n\n\nclass ParseResponseDict(dict):\n    __slots__ = ('timing',)\n    timing: _t.SupportsFloat\n\n    def __init__(self, path: _t.Text, method: _t.Text, response: HttpResponse):\n        super().__init__(\n            path=path,\n            status=response.status_code,\n            data=self._get_rendered(response),\n            method=method,\n            headers={\n                header: response.headers[header]\n                for header in response.headers\n                if header in response_headers_to_pass\n            }\n        )\n        self.timing = float(response.get('Response-Time', '0.0'))\n\n    def _get_rendered(self, response: _t.Union[HttpResponse, responses.BaseResponseClass]):\n        with raise_context():\n            result = response.data  # type: ignore\n            if isinstance(result, dict):\n                return Dict(result)\n        with raise_context():\n            if isinstance(response.accepted_renderer, ORJSONRenderer) and response.is_rendered:  # type: ignore\n                return response.rendered_content  # type: ignore\n        if response.status_code != 404 and getattr(response, \"rendered_content\", False):  # nocv\n            return json.loads(response.rendered_content.decode())  # type: ignore\n        return Dict(detail=str(response.content.decode('utf-8')))\n\n\nclass BulkRequestType(drf_request.Request, HttpRequest):  # type: ignore\n    # pylint: disable=abstract-method\n    data: _t.List[_t.Dict[_t.Text, _t.Any]]  # type: ignore\n    version: _t.Optional[_t.Text]\n    successful_authenticator: _t.Optional[BaseAuthentication]\n\n\nclass BulkMiddleware(BaseMiddleware):\n    __slots__ = ()\n\n    def request_handler(self, request: HttpRequest) -> HttpRequest:\n        request.is_bulk = True  # type: ignore\n        if 'user' in request.META:\n            request.user = request.META.pop('user')\n            # pylint: disable=protected-access\n            request._cached_user = request.user  # type: ignore\n        if 'language' in request.META:\n            request.language = request.META.pop('language')  # type: ignore\n        if 'session' in request.META:\n            request.session = request.META.pop('session')  # type: ignore\n        return request\n\n\nclass BulkClientHandler(ClientHandler):\n    __slots__ = ()\n\n    @modify_settings(MIDDLEWARE=settings.MIDDLEWARE_ENDPOINT_CONTROL)\n    def __init__(self, *args, **kwargs):\n        super().__init__(enforce_csrf_checks=False, *args, **kwargs)\n        if self.__class__.__name__ == 'BulkClientHandler':\n            self.load_middleware()\n\n\nclass BulkClient(Client):\n    __slots__ = ('user', 'language', 'session', 'exc_info')\n    handler: BulkClientHandler = BulkClientHandler()\n    user: _t.Optional[AbstractUser]\n\n    def __init__(self, enforce_csrf_checks=False, **defaults):\n        # pylint: disable=bad-super-call\n        self.user = defaults.pop('user', None)\n        self.language = defaults.pop('language', None)\n        self.session = defaults.pop('session', None)\n        super(Client, self).__init__(**defaults)\n        self.exc_info = None\n\n    def request(self, **request):\n        if self.user:\n            request['user'] = self.user\n        if self.language:\n            request['language'] = self.language\n        if self.session:\n            request['session'] = self.session\n        response = self.handler(self._base_environ(**request))\n        if response.cookies:\n            self.cookies.update(response.cookies)\n        return response\n\n\nclass FormatDataFieldMixin:\n    \"\"\"\n    Mixin for fields that can format \"<< >>\" templates inside strings\n    \"\"\"\n    __slots__ = ()\n    requires_context: bool = True\n    context: _t.Dict\n\n    def to_internal_value(self, data) -> _t.Text:\n        result = super().to_internal_value(data)  # type: ignore\n\n        if isinstance(result, str) \\\n                and '<<' in result \\\n                and '>>' in result \\\n                and not ('{' in result and '}' in result) \\\n                and 'results' in self.context:\n            result = result.replace('<<', '{').replace('>>', '}').format(\n                *self.context['results'],\n                **self.context['variables'],\n            )\n            with raise_context():\n                return json.loads(result)\n\n        return result\n\n\nclass TemplateStringField(FormatDataFieldMixin, serializers.CharField):\n    \"\"\"\n    Field that can format \"<< >>\" templates inside strings\n    \"\"\"\n    __slots__ = ()\n\n\nclass RequestDataField(FormatDataFieldMixin, DataSerializer):\n    \"\"\"\n    Field that can handle basic data types and recursise\n    format template strings inside them\n    \"\"\"\n    __slots__ = ()\n\n    def to_internal_value(self, data):\n        if isinstance(data, str):\n            pass\n\n        elif isinstance(data, (list, tuple)):\n            return [self.to_internal_value(i) for i in data]\n\n        elif isinstance(data, (dict, OrderedDict)):\n            return type(data)(\n                (super(RequestDataField, self).to_internal_value(k), self.to_internal_value(v))\n                for k, v in data.items()\n            )\n\n        return super(RequestDataField, self).to_internal_value(data)\n\n\nclass MethodChoicesField(serializers.ChoiceField):\n    \"\"\"Field for HTTP method\"\"\"\n    __slots__ = ()\n\n    def __init__(self, choices: _t.List = None, **kwargs):\n        super().__init__(choices or REST_METHODS, **kwargs)\n\n    def to_internal_value(self, data):\n        return super(MethodChoicesField, self).to_internal_value(str(data).upper())\n\n\nclass PathField(TemplateStringField):\n    __slots__ = ()\n\n    def to_internal_value(self, data):\n\n        if isinstance(data, str):\n            data = (data, )\n\n        return _join_paths(*[\n            super(PathField, self).to_internal_value(path)\n            for path in data\n        ])\n\n\nclass OperationSerializer(serializers.Serializer):\n    # pylint: disable=abstract-method\n    __slots__ = ()\n\n    path = PathField(required=True)\n    method = MethodChoicesField(required=True)\n    headers = serializers.DictField(child=TemplateStringField(), default={})\n    data = RequestDataField(required=False, default=None, allow_null=True)  # type: ignore\n    status = serializers.IntegerField(read_only=True, default=500)\n    info = serializers.CharField(read_only=True)\n    query = TemplateStringField(required=False,\n                                allow_blank=True,\n                                validators=[UrlQueryStringValidator()],\n                                write_only=True)\n    let = TemplateStringField(required=False,\n                              write_only=True)\n    version = serializers.ChoiceField(choices=list(settings.API.keys()),\n                                      default=settings.VST_API_VERSION,\n                                      write_only=True)\n\n    def to_representation(self, instance: _t.Dict[_t.Text, _t.Any]) -> Dict:\n        return Dict(super().to_representation(instance))\n\n    def get_operation_method(self, method: _t.Text) -> _t.Callable:\n        return getattr(self.context.get('client'), method.lower())\n\n    def create(self, validated_data: _t.Dict[_t.Text, _t.Union[_t.Text, _t.Mapping]]) -> ParseResponseDict:\n        # pylint: disable=protected-access\n        method_name = str(validated_data['method']).lower()\n        method = self.get_operation_method(method_name)\n        url = _join_paths(API_URL, validated_data['version'], validated_data['path'])\n        if 'query' in validated_data and validated_data['query']:\n            url += '?' + str(validated_data['query'])\n        if method_name != 'get':\n            method = transaction.atomic()(method)\n        result = ParseResponseDict(\n            path=url,\n            method=method_name,\n            response=method(  # type: ignore\n                url,\n                content_type='application\/json',\n                secure=self.context['request']._request.is_secure(),\n                data=validated_data['data'],\n                **validated_data['headers']\n            )\n        )\n        if 'let' in validated_data:\n            self.context['variables'][validated_data['let']] = result\n        return result\n\n\nclass EndpointViewSet(views.APIView):\n    \"\"\"\n    Default API-endpoint viewset.\n    \"\"\"\n    __slots__ = ('results',)\n\n    throttle_classes = []  # type: ignore\n    schema = None  # type: ignore\n    versioning_class = versioning.QueryParameterVersioning  # type: ignore\n    renderer_classes = list(views.APIView.renderer_classes) + list(SPEC_RENDERERS)\n    session_cookie_name: _t.ClassVar[_t.Text] = settings.SESSION_COOKIE_NAME\n    client_environ_keys_copy: _t.List[_t.Text] = [\n        \"SCRIPT_NAME\",\n        \"SERVER_NAME\",\n        \"SERVER_PORT\",\n        \"SERVER_PROTOCOL\",\n        \"SERVER_SOFTWARE\",\n        \"REMOTE_ADDR\",\n        settings.SECURE_PROXY_SSL_HEADER[0],\n        \"HTTP_HOST\",\n        \"HTTP_USER_AGENT\"\n    ]\n\n    #: One operation serializer class.\n    serializer_class: _t.ClassVar[_t.Type[OperationSerializer]] = OperationSerializer\n\n    def get_client(self, request: BulkRequestType) -> BulkClient:\n        \"\"\"\n        Returns test client and guarantees that if bulk request comes\n        authenticated than test client will be authenticated with the same user\n        \"\"\"\n        return BulkClient(**self.original_environ_data(request=request))\n\n    def original_environ_data(self, request: BulkRequestType, *args) -> _t.Dict:\n        get_environ = request.META.get\n        kwargs = {}\n        for env_var in tuple(self.client_environ_keys_copy) + args:\n            value = get_environ(env_var, None)\n            if value:\n                kwargs[env_var] = str(value)\n        if request.user.is_authenticated:\n            if isinstance(request.successful_authenticator, SessionAuthentication):\n                kwargs['HTTP_COOKIE'] = str(request.META.get('HTTP_COOKIE'))\n            elif isinstance(request.successful_authenticator, (BasicAuthentication, TokenAuthentication)):\n                kwargs['HTTP_AUTHORIZATION'] = str(request.META.get('HTTP_AUTHORIZATION'))\n            kwargs['user'] = request.user  # type: ignore\n        kwargs['language'] = getattr(request, 'language', None)\n        kwargs['session'] = getattr(request, 'session', None)\n        return kwargs\n\n    def get_serializer(self, *args, **kwargs) -> OperationSerializer:\n        \"\"\"\n        Return the serializer instance that should be used for validating and\n        deserializing input, and for serializing output.\n        \"\"\"\n        serializer_class = self.get_serializer_class()\n        kwargs['context'] = self.get_serializer_context(kwargs.get('context', {}))\n        return serializer_class(*args, **kwargs)\n\n    @cache_method_result\n    def get_serializer_class(self):\n        \"\"\"\n        Return the class to use for the serializer.\n        Defaults to using `self.serializer_class`.\n\n        You may want to override this if you need to provide different\n        serializations depending on the incoming request.\n\n        (Eg. admins get full serialization, others get basic serialization)\n        \"\"\"\n        assert self.serializer_class is not None, (\n            \"'%s' should either include a `serializer_class` attribute, \"\n            \"or override the `get_serializer_class()` method.\"\n            % self.__class__.__name__\n        )\n\n        return self.serializer_class\n\n    def get_serializer_context(self, context) -> dict:\n        \"\"\"\n        Extra context provided to the serializer class.\n        \"\"\"\n        if 'client' not in context:  # nocv\n            context = context.copy()\n            context['client'] = self.get_client(_t.cast(BulkRequestType, self.request))\n        return {\n            'request': self.request,\n            'view': self,\n            **context\n        }\n\n    def operate(self, operation_data: _t.Dict, context: _t.Dict) -> _t.Tuple[_t.Dict, _t.SupportsFloat]:\n        \"\"\"Method used to handle one operation and return result of it\"\"\"\n        serializer = self.get_serializer(data=operation_data, context=context)\n        try:\n            serializer.is_valid(raise_exception=True)\n            return serializer.to_representation(serializer.save()), serializer.instance.timing  # type: ignore\n        except Exception as err:\n            return {\n                'path': 'bulk',\n                'info': {\n                    'errors': getattr(serializer, '_errors', traceback.format_exc()),\n                    'operation_data': operation_data\n                },\n                'status': 500,\n                'data': {'detail': f'Error in bulk request data. See info. Original message: {str(err)}'}\n            }, 0.0\n\n    def get(self, request: BulkRequestType) -> HttpResponse:\n        \"\"\"Returns response with swagger ui or openapi json schema if ?format=openapi\"\"\"\n\n        url = f'\/api\/{getattr(request, \"version\", DEFAULT_VERSION) or DEFAULT_VERSION}\/_openapi\/'\n\n        if request.query_params.get('format') == 'openapi':  # type: ignore\n            url += '?format=openapi'\n            should_gzip = True\n        else:\n            should_gzip = False\n\n        response = self.get_client(request).get(url, secure=request.is_secure())\n\n        if should_gzip:\n            patch_gzip_response(response, request)\n\n        return response\n\n    def post(self, request: BulkRequestType) -> responses.BaseResponseClass:\n        \"\"\"Execute transactional bulk request\"\"\"\n        try:\n            with transaction.atomic():\n                return self.put(request, allow_fail=False)\n        except Exception:\n            logger.debug(traceback.format_exc())\n            return responses.HTTP_502_BAD_GATEWAY(self.results)\n\n    def put(self, request: BulkRequestType, allow_fail=True) -> responses.BaseResponseClass:\n        \"\"\"Execute non transaction bulk request\"\"\"\n        context: _t.Dict[_t.Text, _t.Union[_t.List, _t.Dict, BulkClient]] = {\n            'client': self.get_client(request),\n            'results': self.results,\n            'variables': {},\n        }\n        timings: _t.List = []\n        for result, timing in _iter_request(request, self.operate, context):\n            append_to_list(self.results, result)\n            append_to_list(timings, timing)\n            if not allow_fail and not (100 <= result.get('status', 500) < 400):\n                raise Exception(f'Execute transaction stopped. Error message: {str(result)}')\n        response = responses.HTTP_200_OK(self.results, timings={f'op{i}': float(j) for i, j in enumerate(timings)})\n        for cookie_name, cookie_value in context['client'].cookies.items():  # type: ignore\n            if cookie_value.value != request.COOKIES.get(cookie_name, None):\n                response.cookies[cookie_name] = cookie_value\n        return response\n\n    def patch(self, request: BulkRequestType) -> responses.BaseResponseClass:\n        return self.put(request)\n\n    def initial(self, request: drf_request.Request, *args, **kwargs):\n        super().initial(request, *args, **kwargs)\n        self.results: _t.List[_t.Dict[_t.Text, _t.Any]] = []\n\n    def finalize_response(self, request: drf_request.Request, *args, **kwargs):\n        if not isinstance(request.successful_authenticator, default_authentication_classes):\n            self.get_client(_t.cast(BulkRequestType, self.request)).logout()\n        return super().finalize_response(request, *args, **kwargs)\n"},"\/vstutils\/api\/renderers.py":{"changes":[{"diff":"\n         return BaseORJSONRenderer.default(obj)\n \n     def render(self, data, media_type=None, renderer_context=None):\n-        if getattr(renderer_context['request'], 'is_bulk', False):\n+        if renderer_context and getattr(renderer_context['request'], 'is_bulk', False):\n             return data\n         return super().render(data, media_type, renderer_context)\n \n","add":1,"remove":1,"filename":"\/vstutils\/api\/renderers.py","badparts":["        if getattr(renderer_context['request'], 'is_bulk', False):"],"goodparts":["        if renderer_context and getattr(renderer_context['request'], 'is_bulk', False):"]}],"source":"\nimport functools import operator import ormsgpack from django.utils.functional import Promise, LazyObject from rest_framework.renderers import BaseRenderer from rest_framework.settings import api_settings from drf_orjson_renderer.renderers import ORJSONRenderer as BaseORJSONRenderer from..utils import get_if_lazy class ORJSONRenderer(BaseORJSONRenderer): @staticmethod def default(obj): if isinstance(obj, Promise): obj=obj._proxy____cast() elif isinstance(obj, LazyObject): obj=get_if_lazy(obj) return BaseORJSONRenderer.default(obj) def render(self, data, media_type=None, renderer_context=None): if getattr(renderer_context['request'], 'is_bulk', False): return data return super().render(data, media_type, renderer_context) class MsgpackRenderer(BaseRenderer): \"\"\" Renderer which serializes to MessagePack. \"\"\" media_type='application\/msgpack' format='msgpack' render_style='binary' charset=None options=functools.reduce( operator.or_, api_settings.user_settings.get(\"MSGPACK_RENDERER_OPTIONS\",()), ormsgpack.OPT_SERIALIZE_NUMPY, ) def render(self, data, accepted_media_type=None, renderer_context=None): \"\"\" Renders *obj* into serialized MessagePack. \"\"\" if data is None: return '' return ormsgpack.packb(data, default=ORJSONRenderer.default, option=self.options) ","sourceWithComments":"import functools\nimport operator\n\nimport ormsgpack\nfrom django.utils.functional import Promise, LazyObject\nfrom rest_framework.renderers import BaseRenderer\nfrom rest_framework.settings import api_settings\nfrom drf_orjson_renderer.renderers import ORJSONRenderer as BaseORJSONRenderer  # type: ignore\n\nfrom ..utils import get_if_lazy\n\n\nclass ORJSONRenderer(BaseORJSONRenderer):\n    @staticmethod\n    def default(obj):\n        # pylint: disable=protected-access\n        if isinstance(obj, Promise):\n            obj = obj._proxy____cast()\n        elif isinstance(obj, LazyObject):  # nocv\n            obj = get_if_lazy(obj)\n        return BaseORJSONRenderer.default(obj)\n\n    def render(self, data, media_type=None, renderer_context=None):\n        if getattr(renderer_context['request'], 'is_bulk', False):\n            return data\n        return super().render(data, media_type, renderer_context)\n\n\nclass MsgpackRenderer(BaseRenderer):\n    \"\"\"\n    Renderer which serializes to MessagePack.\n    \"\"\"\n\n    media_type = 'application\/msgpack'\n    format = 'msgpack'\n    render_style = 'binary'\n    charset = None\n    options = functools.reduce(\n        operator.or_,\n        api_settings.user_settings.get(\"MSGPACK_RENDERER_OPTIONS\", ()),\n        ormsgpack.OPT_SERIALIZE_NUMPY,\n    )\n\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        \"\"\"\n        Renders *obj* into serialized MessagePack.\n        \"\"\"\n        if data is None:\n            return ''  # nocv\n        return ormsgpack.packb(data, default=ORJSONRenderer.default, option=self.options)\n"}},"msg":"Release 5.0.0 Beta 140\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n* Feature: Provide dependencies support for test databases.\n* Optimization: Speedup endpoint bulk calls with orjson.\n\nParsed bundle size: 4.65 MB\n\n### TODO:\n* Optimize bundle size."},"32d7c2e000c43974ecb535ab59aca2a104981c24":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/32d7c2e000c43974ecb535ab59aca2a104981c24","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/32d7c2e000c43974ecb535ab59aca2a104981c24","sha":"32d7c2e000c43974ecb535ab59aca2a104981c24","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 2f32bf80..e29d2089 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b149'\n+__version__: str = '5.0.0b150'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b149'\n+__version__: str = '5.0.0b150'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b149'"],"goodparts":["__version__: str = '5.0.0b150'"]}],"source":"\n\n__version__: str='5.0.0b149' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b149'\n"}},"msg":"Release 5.0.0 Beta 150\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n* Delete import `.control-sidebar` from adminlte.\n* Delete import `IFrame.js`, `Fullscreen.js`, `ControlSidebar.js`, `DirectChat.js`, `ExpandableTable.js`.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n* Feature: Provide dependencies support for test databases.\n* Optimization: Speedup endpoint bulk calls with orjson.\n* Fix: CVE-2022-34265\n* Fix: Now request data s not converted to string.\n* Feature: Add ways to close ControlSidebar.\n* Feature: Add new modal, when ControlSidebar is closed.\n* Feature: Save previous settings state.\n* Feature: Create `ControlSidebarButton`.\n* Feature: Create possibility add new buttons to ControlSidebar.\n* Feature: Provide enabling user's self-removing via config.\n* Fix: Displaying of modals on devices with the notch by adding top and bottom paddings.\n* Fix\/Feature: Provide filtering with `contains` in custom models.\n* Fix: Hide operations dropdown if all buttons inside are hidden.\n* Fix: Remove link from toggle control sidebar button.\n* Feature: Provide changing subactions and sublinks with signals.\n* Feature: Provide customization of csv parsing options using `parser_options` property of `CSVFileField`.\n* Fix: Usage of `CSVFileField` with `\"`, new lines and delimiters in cells' content.\n* Feature: Add support for selecting MIME-types for FileInString-like fields.\n* Chore: Enable build optimization for python 3.10 with cython.\n* Change styles of file selectors in binary and csv fields.\n* Feature: Provide set extensions validators for `NamedBinaryFileInJSONField` types.\n\nParsed bundle size: 4.68 MB\n\n### TODO:\n* Optimize bundle size."},"31a479e6697e56469a24c10091c655f85f5058cf":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/31a479e6697e56469a24c10091c655f85f5058cf","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/31a479e6697e56469a24c10091c655f85f5058cf","sha":"31a479e6697e56469a24c10091c655f85f5058cf","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex e29d2089..80fe1f0a 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b150'\n+__version__: str = '5.0.0b151'\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b150'\n+__version__: str = '5.0.0b151'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b150'"],"goodparts":["__version__: str = '5.0.0b151'"]}],"source":"\n\n__version__: str='5.0.0b150' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b150'\n"}},"msg":"Release 5.0.0 Beta 151\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n* Delete import `.control-sidebar` from adminlte.\n* Delete import `IFrame.js`, `Fullscreen.js`, `ControlSidebar.js`, `DirectChat.js`, `ExpandableTable.js`.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n* Feature: Provide dependencies support for test databases.\n* Optimization: Speedup endpoint bulk calls with orjson.\n* Fix: CVE-2022-34265\n* Fix: Now request data s not converted to string.\n* Feature: Add ways to close ControlSidebar.\n* Feature: Add new modal, when ControlSidebar is closed.\n* Feature: Save previous settings state.\n* Feature: Create `ControlSidebarButton`.\n* Feature: Create possibility add new buttons to ControlSidebar.\n* Feature: Provide enabling user's self-removing via config.\n* Fix: Displaying of modals on devices with the notch by adding top and bottom paddings.\n* Fix\/Feature: Provide filtering with `contains` in custom models.\n* Fix: Hide operations dropdown if all buttons inside are hidden.\n* Fix: Remove link from toggle control sidebar button.\n* Feature: Provide changing subactions and sublinks with signals.\n* Feature: Provide customization of csv parsing options using `parser_options` property of `CSVFileField`.\n* Fix: Usage of `CSVFileField` with `\"`, new lines and delimiters in cells' content.\n* Feature: Add support for selecting MIME-types for FileInString-like fields.\n* Chore: Enable build optimization for python 3.10 with cython.\n* Change styles of file selectors in binary and csv fields.\n* Feature: Provide set extensions validators for `NamedBinaryFileInJSONField` types.\n* Feature: Add filterSublinks, filterActions signals to ListTableRow per item.\n\nParsed bundle size: 4.68 MB\n\n### TODO:\n* Optimize bundle size."},"a1e9bd206c28663dea69c93d9dd2562b36121117":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/a1e9bd206c28663dea69c93d9dd2562b36121117","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/a1e9bd206c28663dea69c93d9dd2562b36121117","message":"Release 5.0.0 Beta 152\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n* Delete import `.control-sidebar` from adminlte.\n* Delete import `IFrame.js`, `Fullscreen.js`, `ControlSidebar.js`, `DirectChat.js`, `ExpandableTable.js`.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n* Feature: Provide dependencies support for test databases.\n* Optimization: Speedup endpoint bulk calls with orjson.\n* Fix: CVE-2022-34265\n* Fix: Now request data s not converted to string.\n* Feature: Add ways to close ControlSidebar.\n* Feature: Add new modal, when ControlSidebar is closed.\n* Feature: Save previous settings state.\n* Feature: Create `ControlSidebarButton`.\n* Feature: Create possibility add new buttons to ControlSidebar.\n* Feature: Provide enabling user's self-removing via config.\n* Fix: Displaying of modals on devices with the notch by adding top and bottom paddings.\n* Fix\/Feature: Provide filtering with `contains` in custom models.\n* Fix: Hide operations dropdown if all buttons inside are hidden.\n* Fix: Remove link from toggle control sidebar button.\n* Feature: Provide changing subactions and sublinks with signals.\n* Feature: Provide customization of csv parsing options using `parser_options` property of `CSVFileField`.\n* Fix: Usage of `CSVFileField` with `\"`, new lines and delimiters in cells' content.\n* Feature: Add support for selecting MIME-types for FileInString-like fields.\n* Chore: Enable build optimization for python 3.10 with cython.\n* Change styles of file selectors in binary and csv fields.\n* Feature: Provide set extensions validators for `NamedBinaryFileInJSONField` types.\n* Feature: Add filterSublinks, filterActions signals to ListTableRow per item.\n* Feature: Provided setup db params through env vars for each connections.\n* Fix: The request time for each connection is counted.\n* Feature: Create a reusable  ConfirmModal component.\n* Fix: Make a CSV-table always visible.\n* Fix: Change BootstrapModal to ConfirmModal in ControlSidebar, AppRoot and CSVFileFieldEdit.\n\nParsed bundle size: 4.68 MB\n\n### TODO:\n* Optimize bundle size.","sha":"a1e9bd206c28663dea69c93d9dd2562b36121117","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 80fe1f0a..6c6437b2 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b151'\n+__version__: str = '5.0.0b152'\n","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b151'\n+__version__: str = '5.0.0b152'\n","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b151'"],"goodparts":["__version__: str = '5.0.0b152'"]}],"source":"\n\n__version__: str='5.0.0b151' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b151'\n"}},"msg":"Release 5.0.0 Beta 152\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n* Delete import `.control-sidebar` from adminlte.\n* Delete import `IFrame.js`, `Fullscreen.js`, `ControlSidebar.js`, `DirectChat.js`, `ExpandableTable.js`.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n* Feature: Provide dependencies support for test databases.\n* Optimization: Speedup endpoint bulk calls with orjson.\n* Fix: CVE-2022-34265\n* Fix: Now request data s not converted to string.\n* Feature: Add ways to close ControlSidebar.\n* Feature: Add new modal, when ControlSidebar is closed.\n* Feature: Save previous settings state.\n* Feature: Create `ControlSidebarButton`.\n* Feature: Create possibility add new buttons to ControlSidebar.\n* Feature: Provide enabling user's self-removing via config.\n* Fix: Displaying of modals on devices with the notch by adding top and bottom paddings.\n* Fix\/Feature: Provide filtering with `contains` in custom models.\n* Fix: Hide operations dropdown if all buttons inside are hidden.\n* Fix: Remove link from toggle control sidebar button.\n* Feature: Provide changing subactions and sublinks with signals.\n* Feature: Provide customization of csv parsing options using `parser_options` property of `CSVFileField`.\n* Fix: Usage of `CSVFileField` with `\"`, new lines and delimiters in cells' content.\n* Feature: Add support for selecting MIME-types for FileInString-like fields.\n* Chore: Enable build optimization for python 3.10 with cython.\n* Change styles of file selectors in binary and csv fields.\n* Feature: Provide set extensions validators for `NamedBinaryFileInJSONField` types.\n* Feature: Add filterSublinks, filterActions signals to ListTableRow per item.\n* Feature: Provided setup db params through env vars for each connections.\n* Fix: The request time for each connection is counted.\n* Feature: Create a reusable  ConfirmModal component.\n* Fix: Make a CSV-table always visible.\n* Fix: Change BootstrapModal to ConfirmModal in ControlSidebar, AppRoot and CSVFileFieldEdit.\n\nParsed bundle size: 4.68 MB\n\n### TODO:\n* Optimize bundle size."},"fa739bcf01011e89ed90bdb5c34ee544d05720f9":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/fa739bcf01011e89ed90bdb5c34ee544d05720f9","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/fa739bcf01011e89ed90bdb5c34ee544d05720f9","sha":"fa739bcf01011e89ed90bdb5c34ee544d05720f9","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 6c6437b2..57004a4c 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b152'\n+__version__: str = '5.0.0b153'\ndiff --git a\/vstutils\/management\/commands\/_base.py b\/vstutils\/management\/commands\/_base.py\nindex 67ace6cb..eaeb17db 100644\n--- a\/vstutils\/management\/commands\/_base.py\n+++ b\/vstutils\/management\/commands\/_base.py\n@@ -400,7 +400,7 @@ class DockerSection(Section):\n             format_exclude_sections=('uwsgi',)\n         )\n         config = self.config\n-        config.parse_files(self._settings('CONFIG_FILES'))\n+        config.parse_text(settings.CONFIG.generate_config_string())\n \n         # Set log level\n         self.log_level = os.getenv(f'{prefix}_LOG_LEVEL', 'WARNING')\ndiff --git a\/vstutils\/settings.py b\/vstutils\/settings.py\nindex 167185a5..79820e02 100644\n--- a\/vstutils\/settings.py\n+++ b\/vstutils\/settings.py\n@@ -563,6 +563,8 @@ def key_handler_to_all(self, key):\n main: MainSection = config['main']\n web: WebSection = config['web']\n \n+CONFIG = config\n+\n # Secret file with key for hashing passwords\n SECRET_FILE = os.getenv(\n     f\"{ENV_NAME}_SECRET_FILE\",\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b152'\n+__version__: str = '5.0.0b153'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b152'"],"goodparts":["__version__: str = '5.0.0b153'"]}],"source":"\n\n__version__: str='5.0.0b152' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b152'\n"},"\/vstutils\/management\/commands\/_base.py":{"changes":[{"diff":"\n             format_exclude_sections=('uwsgi',)\n         )\n         config = self.config\n-        config.parse_files(self._settings('CONFIG_FILES'))\n+        config.parse_text(settings.CONFIG.generate_config_string())\n \n         # Set log level\n         self.log_level = os.getenv(f'{prefix}_LOG_LEVEL', 'WARNING'","add":1,"remove":1,"filename":"\/vstutils\/management\/commands\/_base.py","badparts":["        config.parse_files(self._settings('CONFIG_FILES'))"],"goodparts":["        config.parse_text(settings.CONFIG.generate_config_string())"]}],"source":"\n\nimport json import os import logging import tempfile import sys import time import traceback from subprocess import check_call from collections import OrderedDict from django.conf import settings from django.core.management.base import( BaseCommand as _BaseCommand, CommandError as CmdError, ) from configparserc.config import ConfigParserC, Section, BoolType from vstutils.utils import Lock tmp=tempfile.tempdir logger=logging.getLogger(settings.VST_PROJECT) logger_lib=logging.getLogger(settings.VST_PROJECT_LIB) class BaseCommand(_BaseCommand): interactive=False requires_system_checks=False keep_base_opts=False help=\"Service command for web-application\" class CommandError(CmdError): pass def add_arguments(self, parser): super().add_arguments(parser) parser.fromfile_prefix_chars='@' parser.add_argument( '-l', '--log-level', action='store', dest='log-level', default=False, type=str, help='Set logs level[debug|warning|error|critical]') if self.interactive: parser.add_argument( '--noinput', '--no-input', action='store_false', dest='interactive', default=True, help=\"Do NOT prompt the user for input of any kind.\", ) def _print(self, msg, style=None): style=style or 'HTTP_INFO' style=getattr(self.style, style, str) self.stdout.write(style(msg)) def _settings(self, value, default=None): return getattr(settings, value, default) def _get_versions(self): versions=OrderedDict(django=super().get_version()) versions[self._settings('VST_PROJECT')]=self._settings('PROJECT_VERSION') if self._settings('VST_PROJECT') !=self._settings('VST_PROJECT_LIB'): versions[self._settings('VST_PROJECT_LIB')]=self._settings( 'PROJECT_LIB_VERSION' ) if self._settings('VST_PROJECT') !=\"vstutils\": versions['vstutils']=self._settings('VSTUTILS_VERSION') return versions def get_version(self): return ' '.join([ f'{k.title()}={v}' for k, v in self._get_versions().items() ]) def ask_user(self, message, default=None): if getattr(self, 'interactive_mode', False): return input(message) or default return default def ask_user_bool(self, message, default=True): reply=self.ask_user(message, 'yes' if default else 'no').lower() if reply in['y', 'yes']: return True elif reply in['n', 'no']: return False def handle(self, *args, **options): self.interactive_mode=options.pop('interactive', False) LOG_LEVEL=settings.LOG_LEVEL if options.get('log-level', False): LOG_LEVEL=options.pop('log-level', LOG_LEVEL) logger.setLevel(LOG_LEVEL.upper()) logger_lib.setLevel(LOG_LEVEL.upper()) self.LOG_LEVEL=LOG_LEVEL.upper() os.environ.setdefault('DJANGO_LOG_LEVEL', self.LOG_LEVEL) class DockerCommand(BaseCommand): interactive=True with_migration=True def add_arguments(self, parser): super().add_arguments(parser) if self.with_migration: parser.add_argument( '--migrate-attempts', '-a', default=60, dest='attempts', help='The number of attempts to migrate.', ) parser.add_argument( '--migrate-attempts-sleep-time', '-t', default=1, dest='attempts_timeout', help='The number of attempts to migrate.', ) def handle(self, *args, **options): super().handle(*args, **options) self.prefix=self._settings('VST_PROJECT_LIB', 'vstutils').upper() self.project_name=self._settings('VST_PROJECT', 'vstutils') logger.debug(f'Prefix={self.prefix} | Project={self.project_name}') self.env=os.environ.copy() config=self.prepare_config() self.env[self._settings('CONFIG_ENV_DATA_NAME')]=config.generate_config_string() default_envs={ 'UWSGI_PROCESSES': 'UWSGI_WORKERS', 'UWSGI_THREADS': 'UWSGI_THREADS' } for key in default_envs: value=os.environ.get(f\"{self.prefix}_{key}\", '') if value: self.env[default_envs[key]]=value if config['main']['debug'] or self._settings('TESTS_RUN', False): logger.debug(f'Env:\\n{json.dumps(self.env, indent=4)}') logger.debug(f'Config:\\n{self.env[self._settings(\"CONFIG_ENV_DATA_NAME\")]}') @property def databases_to_migrate(self): allowed_databases=('default',) +tuple(set(getattr(settings, 'DOCKER_DATABASES_TO_MIGRATE',()))) for db in settings.DATABASES.keys(): if db in allowed_databases: yield db def migrate(self, options, *args): success=False error='Unknown error.' for i in range(options.get('attempts', 60)): try: with Lock( self._settings('DOCKERRUN_MIGRATE_LOCK_ID'), 1, self._settings('DOCKERRUN_MIGRATE_LOCK_TIMEOUT'), 'Migration process still locked by another application process.', int(os.getenv(\"DOCKER_MIGRATE_LOCK_KEY_TIMEOUT\", '0')) or None ) as lock: logger.info(f'Migration locked by key: `{lock.id}`') for db_name in self.databases_to_migrate: logger.info(f'Migrating db \"{db_name}\".') check_call( [sys.executable, '-m', self.project_name, 'migrate', '--database', db_name, *args], env=self.env, bufsize=0, universal_newlines=True, ) logger.info(f'Unlocking migration by key: `{lock.id}`') except: error=traceback.format_exc() logger.debug(f'Migration attempt{i} failed:{sys.exc_info()[1]}') self._print(f\"Retry time.sleep(options.get('attempts_timeout', 1)) else: success=True break return success, error def prepare_section_main(self, config): config['main']={ 'debug': os.getenv(f'{self.prefix}_DEBUG', 'false'), 'log_level': self.log_level, 'timezone': os.getenv(f'{self.prefix}_TIMEZONE', 'UTC'), 'enable_admin_panel': os.getenv(f'{self.prefix}_ENABLE_ADMIN_PANEL', 'false'), 'first_day_of_week': os.getenv( f'{self.prefix}_FIRST_DAY_OF_WEEK', self._settings('FIRST_DAY_OF_WEEK') ) } ldap_server=os.getenv(f'{self.prefix}_LDAP_CONNECTION', None) if ldap_server: config['main']['ldap_server']=ldap_server ldap_default_domain=os.getenv(f'{self.prefix}_LDAP_DOMAIN', None) if ldap_default_domain: config['main']['ldap-default-domain']=ldap_default_domain def prepare_section_db(self, config): sqlite_default_dir=os.environ.get(f'{self.prefix}_SQLITE_DIR', '\/') if sqlite_default_dir !='\/' and not os.path.exists(sqlite_default_dir): os.makedirs(sqlite_default_dir) if sqlite_default_dir[-1] !='\/': sqlite_default_dir +='\/' sqlite_default_name=os.environ.get(f'{self.prefix}_SQLITE_DBNAME', 'db.sqlite3') sqlite_db_path=f'{sqlite_default_dir}\/{sqlite_default_name}' if os.getenv(f'{self.prefix}_DB_HOST') is not None: try: pm_type=os.getenv(f'{self.prefix}_DB_TYPE', 'mysql') default_port='' if pm_type=='mysql': default_port='3306' elif pm_type=='postgresql': default_port='5432' config['database']={ 'engine': f'django.db.backends.{pm_type}', 'name': os.environ[f'{self.prefix}_DB_NAME'], 'user': os.environ[f'{self.prefix}_DB_USER'], 'password': os.environ[f'{self.prefix}_DB_PASSWORD'], 'host': os.environ[f'{self.prefix}_DB_HOST'], 'port': os.getenv(f'{self.prefix}_DB_PORT', default_port), } config['database.options']={ 'connect_timeout': os.getenv(f'{self.prefix}_DB_CONNECT_TIMEOUT', '20'), } if pm_type=='mysql': config['database.options']['init_command']=os.getenv('DB_INIT_CMD', '') except KeyError as err: raise Exception('Not enough variables for connect to SQL server.') from err else: config['database']={ 'engine': 'django.db.backends.sqlite3', 'name': sqlite_db_path } def prepare_section_cache(self, config): cache_loc=os.getenv('CACHE_LOCATION', f'{tmp}\/{self.prefix}_django_cache') cache_type=os.getenv(f'{self.prefix}_CACHE_TYPE', 'file') if cache_type=='file': cache_engine='django.core.cache.backends.filebased.FileBasedCache' elif cache_type=='memcache': cache_engine='django.core.cache.backends.memcached.MemcachedCache' elif cache_type=='redis': cache_engine='django_redis.cache.RedisCache' else: raise Exception(f'Unknown cache type `{cache_type}`.') config['cache']=config['locks']={ 'backend': cache_engine, 'location': cache_loc } def prepare_section_rpc(self, config): rpc_connection=os.getenv('RPC_ENGINE', None) config['rpc']={ 'heartbeat': os.getenv('RPC_HEARTBEAT', '5'), 'concurrency': os.getenv('RPC_CONCURRENCY', '4'), 'clone_retry_count': os.getenv('RPC_CLONE_RETRY_COUNT', '3') } if rpc_connection: config['rpc']['connection']=rpc_connection config['rpc']['enable_worker']='false' if os.environ.get('WORKER', '')=='ENABLE': config['rpc']['enable_worker']='true' config['worker']={ 'loglevel': self.log_level, 'pidfile': f'{tmp}\/{self.prefix.lower()}_worker.pid', 'beat': os.getenv(f'{self.prefix}_SCHEDULER_ENABLE', 'true') } def prepare_section_web(self, config): config['web']={ 'session_timeout': os.getenv(f'{self.prefix}_SESSION_TIMEOUT', '2w'), 'rest_page_limit': os.getenv(f'{self.prefix}_WEB_REST_PAGE_LIMIT', '100'), 'enable_gravatar': os.getenv(f'{self.prefix}_WEB_GRAVATAR', 'true'), 'request_max_size': os.getenv( f'{self.prefix}_REQUEST_MAX_SIZE', self._settings('DATA_UPLOAD_MAX_MEMORY_SIZE') ), 'x_frame_options': os.getenv( f'{self.prefix}_X_FRAME_OPTIONS', self._settings('X_FRAME_OPTIONS') ), 'use_x_forwarded_host': os.getenv( f'{self.prefix}_USE_X_FORWARDED_HOST', self._settings('USE_X_FORWARDED_HOST') ), 'use_x_forwarded_port': os.getenv( f'{self.prefix}_USE_X_FORWARDED_PORT', self._settings('USE_X_FORWARDED_PORT') ), 'password_reset_timeout_days': os.getenv( f'{self.prefix}_PASSWORD_RESET_TIMEOUT_DAYS', self._settings('PASSWORD_RESET_TIMEOUT_DAYS') ), 'secure_browser_xss_filter': os.getenv( f'{self.prefix}_SECURE_BROWSER_XSS_FILTER', self._settings('SECURE_BROWSER_XSS_FILTER') ), 'secure_content_type_nosniff': os.getenv( f'{self.prefix}_SECURE_CONTENT_TYPE_NOSNIFF', self._settings('SECURE_CONTENT_TYPE_NOSNIFF') ), 'secure_hsts_include_subdomains': os.getenv( f'{self.prefix}_SECURE_HSTS_INCLUDE_SUBDOMAINS', self._settings('SECURE_HSTS_INCLUDE_SUBDOMAINS') ), 'secure_hsts_preload': os.getenv( f'{self.prefix}_SECURE_HSTS_PRELOAD', self._settings('SECURE_HSTS_PRELOAD') ), 'secure_hsts_seconds': os.getenv( f'{self.prefix}_SECURE_HSTS_SECONDS', self._settings('SECURE_HSTS_SECONDS') ), 'health_throttle_rate': os.getenv( f'{self.prefix}_HEALTH_THROTTLE_RATE', self._settings('HEALTH_THROTTLE_RATE').replace('\/minute', '') ), } def prepare_section_uwsgi(self, config): config['uwsgi']={ 'thread-stacksize': os.getenv(f'{self.prefix}_UWSGI_THREADSTACK', '40960'), 'max-requests': os.getenv(f'{self.prefix}_UWSGI_MAXREQUESTS', '50000'), 'limit-as': os.getenv(f'{self.prefix}_UWSGI_LIMITS', '512'), 'pidfile': os.getenv(f'{self.prefix}_UWSGI_PIDFILE', '\/run\/web.pid'), 'daemon': 'false' } current_addr, current_port=self._settings('WEB_ADDRPORT').split(',')[0].split(':') config['uwsgi']['addrport']=( f\"{os.getenv(f'{self.prefix}_WEB_HOST', current_addr)}:\" f\"{os.getenv(f'{self.prefix}_WEB_PORT', current_port)}\" ) harakiri=os.getenv(f'{self.prefix}_UWSGI_HARAKIRI', '') if harakiri: config['uwsgi']['harakiri']=harakiri vacuum=os.getenv(f'{self.prefix}_UWSGI_VACUUM', '') if vacuum: config['uwsgi']['vacuum']=vacuum def prepare_section_smtp(self, config): mail_parameters=['port', 'user', 'password', 'tls', 'ssl', 'from_address'] mail_settings={'host': os.environ.get(f'{self.prefix}_MAIL_HOST')} if mail_settings['host']: for param in mail_parameters: value=os.environ.get(f'{self.prefix}_MAIL_{param.upper()}') if value: mail_settings[param]=value config['mail']=mail_settings def prepare_config(self): prefix=self.prefix default_sections=( 'main', 'db', 'cache', 'rpc', 'web', 'uwsgi', 'smtp', ) section_handlers_prefix='prepare_section_' sections=default_sections +tuple(map( lambda y: y.replace(section_handlers_prefix, ''), filter( lambda x: x.startswith(section_handlers_prefix) and x not in default_sections, dir(self) ) )) class DockerSection(Section): types_map={ f'override_{s}': BoolType() for s in sections } self.config=ConfigParserC( format_kwargs=self._settings('KWARGS',{}), section_defaults={ 'docker':{ s: os.getenv(f'{prefix}_DOCKER_{s.upper()}', 'True') for s in DockerSection.types_map } }, section_overload={ 'docker': DockerSection }, format_exclude_sections=('uwsgi',) ) config=self.config config.parse_files(self._settings('CONFIG_FILES')) self.log_level=os.getenv(f'{prefix}_LOG_LEVEL', 'WARNING') for section_name in sections: if config['docker'][f'override_{section_name}']: getattr(self, f'prepare_section_{section_name}')(config) os.environ.setdefault('SECRET_KEY', 'DISABLE') if os.environ['SECRET_KEY'] !='DISABLE': with open(f'\/etc\/{prefix.lower()}\/secret', 'w', encoding='utf-8') as secretfile: secretfile.write(os.environ['SECRET_KEY']) return config ","sourceWithComments":"# pylint: disable=abstract-method,unused-import,undefined-variable\nimport json\nimport os\nimport logging\nimport tempfile\nimport sys\nimport time\nimport traceback\nfrom subprocess import check_call\nfrom collections import OrderedDict\n\nfrom django.conf import settings\nfrom django.core.management.base import (\n    BaseCommand as _BaseCommand,\n    CommandError as CmdError,\n)\nfrom configparserc.config import ConfigParserC, Section, BoolType\nfrom vstutils.utils import Lock\n\n\ntmp = tempfile.tempdir\nlogger = logging.getLogger(settings.VST_PROJECT)\nlogger_lib = logging.getLogger(settings.VST_PROJECT_LIB)\n\n\nclass BaseCommand(_BaseCommand):\n    interactive = False\n    requires_system_checks = False\n    keep_base_opts = False\n    help = \"Service command for web-application\"\n\n    class CommandError(CmdError):\n        pass\n\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.fromfile_prefix_chars = '@'\n        parser.add_argument(\n            '-l', '--log-level',\n            action='store',\n            dest='log-level',\n            default=False,\n            type=str,\n            help='Set logs level [debug|warning|error|critical]')\n        if self.interactive:\n            parser.add_argument(\n                '--noinput', '--no-input',\n                action='store_false', dest='interactive', default=True,\n                help=\"Do NOT prompt the user for input of any kind.\",\n            )\n\n    def _print(self, msg, style=None):\n        style = style or 'HTTP_INFO'\n        style = getattr(self.style, style, str)\n        self.stdout.write(style(msg))\n\n    def _settings(self, value, default=None):\n        return getattr(settings, value, default)\n\n    def _get_versions(self):\n        versions = OrderedDict(django=super().get_version())\n        versions[self._settings('VST_PROJECT')] = self._settings('PROJECT_VERSION')\n        if self._settings('VST_PROJECT') != self._settings('VST_PROJECT_LIB'):\n            versions[self._settings('VST_PROJECT_LIB')] = self._settings(\n                'PROJECT_LIB_VERSION'\n            )\n        if self._settings('VST_PROJECT') != \"vstutils\":\n            versions['vstutils'] = self._settings('VSTUTILS_VERSION')\n        return versions\n\n    def get_version(self):\n        return ' '.join([\n            f'{k.title()}={v}' for k, v in self._get_versions().items()\n        ])\n\n    def ask_user(self, message, default=None):\n        # pylint: disable=import-error\n        if getattr(self, 'interactive_mode', False):\n            return input(message) or default\n        return default\n\n    def ask_user_bool(self, message, default=True):\n        reply = self.ask_user(message, 'yes' if default else 'no').lower()\n        if reply in ['y', 'yes']:\n            return True\n        elif reply in ['n', 'no']:\n            return False\n\n    def handle(self, *args, **options):\n        # pylint: disable=invalid-name\n        self.interactive_mode = options.pop('interactive', False)\n        LOG_LEVEL = settings.LOG_LEVEL\n        if options.get('log-level', False):\n            LOG_LEVEL = options.pop('log-level', LOG_LEVEL)\n        logger.setLevel(LOG_LEVEL.upper())\n        logger_lib.setLevel(LOG_LEVEL.upper())\n        self.LOG_LEVEL = LOG_LEVEL.upper()\n        os.environ.setdefault('DJANGO_LOG_LEVEL', self.LOG_LEVEL)\n\n\nclass DockerCommand(BaseCommand):\n    interactive = True\n    with_migration = True\n\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        if self.with_migration:\n            parser.add_argument(\n                '--migrate-attempts', '-a',\n                default=60,\n                dest='attempts', help='The number of attempts to migrate.',\n            )\n            parser.add_argument(\n                '--migrate-attempts-sleep-time', '-t',\n                default=1,\n                dest='attempts_timeout', help='The number of attempts to migrate.',\n            )\n\n    def handle(self, *args, **options):\n        super().handle(*args, **options)\n        self.prefix = self._settings('VST_PROJECT_LIB', 'vstutils').upper()\n        self.project_name = self._settings('VST_PROJECT', 'vstutils')\n\n        logger.debug(f'Prefix={self.prefix} | Project={self.project_name}')\n\n        self.env = os.environ.copy()\n        config = self.prepare_config()\n        self.env[self._settings('CONFIG_ENV_DATA_NAME')] = config.generate_config_string()\n        default_envs = {\n            'UWSGI_PROCESSES': 'UWSGI_WORKERS',\n            'UWSGI_THREADS': 'UWSGI_THREADS'\n        }\n        for key in default_envs:  # pylint: disable=consider-using-dict-items\n            value = os.environ.get(f\"{self.prefix}_{key}\", '')\n            if value:\n                self.env[default_envs[key]] = value  # nocv\n\n        if config['main']['debug'] or self._settings('TESTS_RUN', False):\n            logger.debug(f'Env:\\n{json.dumps(self.env, indent=4)}')\n            logger.debug(f'Config:\\n{self.env[self._settings(\"CONFIG_ENV_DATA_NAME\")]}')\n\n    @property\n    def databases_to_migrate(self):\n        allowed_databases = ('default',) + tuple(set(getattr(settings, 'DOCKER_DATABASES_TO_MIGRATE', ())))\n        for db in settings.DATABASES.keys():\n            if db in allowed_databases:\n                yield db\n\n    def migrate(self, options, *args):\n        success = False\n        error = 'Unknown error.'\n        for i in range(options.get('attempts', 60)):\n            try:\n                with Lock(\n                        self._settings('DOCKERRUN_MIGRATE_LOCK_ID'),\n                        1,\n                        self._settings('DOCKERRUN_MIGRATE_LOCK_TIMEOUT'),\n                        'Migration process still locked by another application process.',\n                        int(os.getenv(\"DOCKER_MIGRATE_LOCK_KEY_TIMEOUT\", '0')) or None\n                ) as lock:  # noqa: F841, pylint:disable=unused-variable\n                    logger.info(f'Migration locked by key: `{lock.id}`')\n                    for db_name in self.databases_to_migrate:\n                        logger.info(f'Migrating db \"{db_name}\".')\n                        check_call(\n                            [sys.executable, '-m', self.project_name, 'migrate', '--database', db_name, *args],\n                            env=self.env,\n                            bufsize=0,\n                            universal_newlines=True,\n                        )\n                    logger.info(f'Unlocking migration by key: `{lock.id}`')\n            except:\n                error = traceback.format_exc()\n                logger.debug(f'Migration attempt {i} failed: {sys.exc_info()[1]}')\n                self._print(f\"Retry #{i}...\", 'WARNING')\n                time.sleep(options.get('attempts_timeout', 1))\n            else:\n                success = True\n                break\n        return success, error\n\n    def prepare_section_main(self, config):\n        config['main'] = {\n            'debug': os.getenv(f'{self.prefix}_DEBUG', 'false'),\n            'log_level': self.log_level,\n            'timezone': os.getenv(f'{self.prefix}_TIMEZONE', 'UTC'),\n            'enable_admin_panel': os.getenv(f'{self.prefix}_ENABLE_ADMIN_PANEL', 'false'),\n            'first_day_of_week': os.getenv(\n                f'{self.prefix}_FIRST_DAY_OF_WEEK',\n                self._settings('FIRST_DAY_OF_WEEK')\n            )\n        }\n        # ldap-server, ldap-default-domain if exist\n        ldap_server = os.getenv(f'{self.prefix}_LDAP_CONNECTION', None)\n        if ldap_server:  # nocv\n            config['main']['ldap_server'] = ldap_server\n        ldap_default_domain = os.getenv(f'{self.prefix}_LDAP_DOMAIN', None)\n        if ldap_default_domain:  # nocv\n            config['main']['ldap-default-domain'] = ldap_default_domain\n\n    def prepare_section_db(self, config):\n        # SQLite prepearing\n        sqlite_default_dir = os.environ.get(f'{self.prefix}_SQLITE_DIR', '\/')\n        if sqlite_default_dir != '\/' and not os.path.exists(sqlite_default_dir):  # nocv\n            os.makedirs(sqlite_default_dir)\n        if sqlite_default_dir[-1] != '\/':  # nocv\n            sqlite_default_dir += '\/'\n        sqlite_default_name = os.environ.get(f'{self.prefix}_SQLITE_DBNAME', 'db.sqlite3')\n        sqlite_db_path = f'{sqlite_default_dir}\/{sqlite_default_name}'\n\n        if os.getenv(f'{self.prefix}_DB_HOST') is not None:\n            try:\n                pm_type = os.getenv(f'{self.prefix}_DB_TYPE', 'mysql')\n\n                default_port = ''\n                if pm_type == 'mysql':\n                    default_port = '3306'\n                elif pm_type == 'postgresql':  # nocv\n                    default_port = '5432'\n\n                config['database'] = {\n                    'engine': f'django.db.backends.{pm_type}',\n                    'name': os.environ[f'{self.prefix}_DB_NAME'],\n                    'user': os.environ[f'{self.prefix}_DB_USER'],\n                    'password': os.environ[f'{self.prefix}_DB_PASSWORD'],\n                    'host': os.environ[f'{self.prefix}_DB_HOST'],\n                    'port': os.getenv(f'{self.prefix}_DB_PORT', default_port),\n                }\n                config['database.options'] = {\n                    'connect_timeout': os.getenv(f'{self.prefix}_DB_CONNECT_TIMEOUT', '20'),\n                }\n                if pm_type == 'mysql':\n                    config['database.options']['init_command'] = os.getenv('DB_INIT_CMD', '')\n            except KeyError as err:  # nocv\n                raise Exception('Not enough variables for connect to  SQL server.') from err\n        else:  # nocv\n            config['database'] = {\n                'engine': 'django.db.backends.sqlite3',\n                'name': sqlite_db_path\n            }\n\n    def prepare_section_cache(self, config):\n        cache_loc = os.getenv('CACHE_LOCATION', f'{tmp}\/{self.prefix}_django_cache')\n        cache_type = os.getenv(f'{self.prefix}_CACHE_TYPE', 'file')\n        if cache_type == 'file':\n            cache_engine = 'django.core.cache.backends.filebased.FileBasedCache'\n        elif cache_type == 'memcache':  # nocv\n            cache_engine = 'django.core.cache.backends.memcached.MemcachedCache'\n        elif cache_type == 'redis':  # nocv\n            cache_engine = 'django_redis.cache.RedisCache'\n        else:  # nocv\n            raise Exception(f'Unknown cache type `{cache_type}`.')\n\n        config['cache'] = config['locks'] = {\n            'backend': cache_engine,\n            'location': cache_loc\n        }\n\n    def prepare_section_rpc(self, config):\n        rpc_connection = os.getenv('RPC_ENGINE', None)\n        config['rpc'] = {\n            'heartbeat': os.getenv('RPC_HEARTBEAT', '5'),\n            'concurrency': os.getenv('RPC_CONCURRENCY', '4'),\n            'clone_retry_count': os.getenv('RPC_CLONE_RETRY_COUNT', '3')\n        }\n\n        if rpc_connection:  # nocv\n            config['rpc']['connection'] = rpc_connection\n        config['rpc']['enable_worker'] = 'false'\n\n        # Set worker settings\n        if os.environ.get('WORKER', '') == 'ENABLE':  # nocv\n            config['rpc']['enable_worker'] = 'true'\n            config['worker'] = {\n                'loglevel': self.log_level,\n                'pidfile': f'{tmp}\/{self.prefix.lower()}_worker.pid',\n                'beat': os.getenv(f'{self.prefix}_SCHEDULER_ENABLE', 'true')\n            }\n\n    def prepare_section_web(self, config):\n        config['web'] = {\n            'session_timeout': os.getenv(f'{self.prefix}_SESSION_TIMEOUT', '2w'),\n            'rest_page_limit': os.getenv(f'{self.prefix}_WEB_REST_PAGE_LIMIT', '100'),\n            'enable_gravatar': os.getenv(f'{self.prefix}_WEB_GRAVATAR', 'true'),\n            'request_max_size': os.getenv(\n                f'{self.prefix}_REQUEST_MAX_SIZE',\n                self._settings('DATA_UPLOAD_MAX_MEMORY_SIZE')\n            ),\n            'x_frame_options': os.getenv(\n                f'{self.prefix}_X_FRAME_OPTIONS',\n                self._settings('X_FRAME_OPTIONS')\n            ),\n            'use_x_forwarded_host': os.getenv(\n                f'{self.prefix}_USE_X_FORWARDED_HOST',\n                self._settings('USE_X_FORWARDED_HOST')\n            ),\n            'use_x_forwarded_port': os.getenv(\n                f'{self.prefix}_USE_X_FORWARDED_PORT',\n                self._settings('USE_X_FORWARDED_PORT')\n            ),\n            'password_reset_timeout_days': os.getenv(\n                f'{self.prefix}_PASSWORD_RESET_TIMEOUT_DAYS',\n                self._settings('PASSWORD_RESET_TIMEOUT_DAYS')\n            ),\n            'secure_browser_xss_filter': os.getenv(\n                f'{self.prefix}_SECURE_BROWSER_XSS_FILTER',\n                self._settings('SECURE_BROWSER_XSS_FILTER')\n            ),\n            'secure_content_type_nosniff': os.getenv(\n                f'{self.prefix}_SECURE_CONTENT_TYPE_NOSNIFF',\n                self._settings('SECURE_CONTENT_TYPE_NOSNIFF')\n            ),\n            'secure_hsts_include_subdomains': os.getenv(\n                f'{self.prefix}_SECURE_HSTS_INCLUDE_SUBDOMAINS',\n                self._settings('SECURE_HSTS_INCLUDE_SUBDOMAINS')\n            ),\n            'secure_hsts_preload': os.getenv(\n                f'{self.prefix}_SECURE_HSTS_PRELOAD',\n                self._settings('SECURE_HSTS_PRELOAD')\n            ),\n            'secure_hsts_seconds': os.getenv(\n                f'{self.prefix}_SECURE_HSTS_SECONDS',\n                self._settings('SECURE_HSTS_SECONDS')\n            ),\n            'health_throttle_rate': os.getenv(\n                f'{self.prefix}_HEALTH_THROTTLE_RATE',\n                self._settings('HEALTH_THROTTLE_RATE').replace('\/minute', '')\n            ),\n        }\n\n    def prepare_section_uwsgi(self, config):\n        config['uwsgi'] = {\n            'thread-stacksize': os.getenv(f'{self.prefix}_UWSGI_THREADSTACK', '40960'),\n            'max-requests': os.getenv(f'{self.prefix}_UWSGI_MAXREQUESTS', '50000'),\n            'limit-as': os.getenv(f'{self.prefix}_UWSGI_LIMITS', '512'),\n            'pidfile': os.getenv(f'{self.prefix}_UWSGI_PIDFILE', '\/run\/web.pid'),\n            'daemon': 'false'\n        }\n        current_addr, current_port = self._settings('WEB_ADDRPORT').split(',')[0].split(':')\n        config['uwsgi']['addrport'] = (\n            f\"{os.getenv(f'{self.prefix}_WEB_HOST', current_addr)}:\"\n            f\"{os.getenv(f'{self.prefix}_WEB_PORT', current_port)}\"\n        )\n        harakiri = os.getenv(f'{self.prefix}_UWSGI_HARAKIRI', '')\n        if harakiri:\n            config['uwsgi']['harakiri'] = harakiri\n        vacuum = os.getenv(f'{self.prefix}_UWSGI_VACUUM', '')\n        if vacuum:\n            config['uwsgi']['vacuum'] = vacuum\n\n    def prepare_section_smtp(self, config):\n        mail_parameters = ['port', 'user', 'password', 'tls', 'ssl', 'from_address']\n        mail_settings = {'host': os.environ.get(f'{self.prefix}_MAIL_HOST')}\n        if mail_settings['host']:\n            for param in mail_parameters:\n                value = os.environ.get(f'{self.prefix}_MAIL_{param.upper()}')\n                if value:\n                    mail_settings[param] = value\n            config['mail'] = mail_settings\n\n    def prepare_config(self):\n        # pylint: disable=too-many-locals,too-many-branches,too-many-statements\n        prefix = self.prefix\n\n        default_sections = (\n            'main',\n            'db',\n            'cache',\n            'rpc',\n            'web',\n            'uwsgi',\n            'smtp',\n        )\n        section_handlers_prefix = 'prepare_section_'\n        sections = default_sections + tuple(map(\n            lambda y: y.replace(section_handlers_prefix, ''),\n            filter(\n                lambda x: x.startswith(section_handlers_prefix) and x not in default_sections,\n                dir(self)\n            )\n        ))\n\n        class DockerSection(Section):\n            types_map = {\n                f'override_{s}': BoolType()\n                for s in sections\n            }\n\n        # Start configuring config file\n        self.config = ConfigParserC(\n            format_kwargs=self._settings('KWARGS', {}),\n            section_defaults={\n                'docker': {\n                    s: os.getenv(f'{prefix}_DOCKER_{s.upper()}', 'True')\n                    for s in DockerSection.types_map\n                }\n            },\n            section_overload={\n                'docker': DockerSection\n            },\n            format_exclude_sections=('uwsgi',)\n        )\n        config = self.config\n        config.parse_files(self._settings('CONFIG_FILES'))\n\n        # Set log level\n        self.log_level = os.getenv(f'{prefix}_LOG_LEVEL', 'WARNING')\n\n        for section_name in sections:\n            if config['docker'][f'override_{section_name}']:\n                getattr(self, f'prepare_section_{section_name}')(config)\n\n        # Set secret key\n        os.environ.setdefault('SECRET_KEY', 'DISABLE')\n        if os.environ['SECRET_KEY'] != 'DISABLE':  # nocv\n            with open(f'\/etc\/{prefix.lower()}\/secret', 'w', encoding='utf-8') as secretfile:\n                secretfile.write(os.environ['SECRET_KEY'])\n\n        return config\n"}},"msg":"Release 5.0.0 Beta 153\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n* Delete import `.control-sidebar` from adminlte.\n* Delete import `IFrame.js`, `Fullscreen.js`, `ControlSidebar.js`, `DirectChat.js`, `ExpandableTable.js`.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n* Feature: Provide dependencies support for test databases.\n* Optimization: Speedup endpoint bulk calls with orjson.\n* Fix: CVE-2022-34265\n* Fix: Now request data s not converted to string.\n* Feature: Add ways to close ControlSidebar.\n* Feature: Add new modal, when ControlSidebar is closed.\n* Feature: Save previous settings state.\n* Feature: Create `ControlSidebarButton`.\n* Feature: Create possibility add new buttons to ControlSidebar.\n* Feature: Provide enabling user's self-removing via config.\n* Fix: Displaying of modals on devices with the notch by adding top and bottom paddings.\n* Fix\/Feature: Provide filtering with `contains` in custom models.\n* Fix: Hide operations dropdown if all buttons inside are hidden.\n* Fix: Remove link from toggle control sidebar button.\n* Feature: Provide changing subactions and sublinks with signals.\n* Feature: Provide customization of csv parsing options using `parser_options` property of `CSVFileField`.\n* Fix: Usage of `CSVFileField` with `\"`, new lines and delimiters in cells' content.\n* Feature: Add support for selecting MIME-types for FileInString-like fields.\n* Chore: Enable build optimization for python 3.10 with cython.\n* Change styles of file selectors in binary and csv fields.\n* Feature: Provide set extensions validators for `NamedBinaryFileInJSONField` types.\n* Feature: Add filterSublinks, filterActions signals to ListTableRow per item.\n* Feature: Provided setup db params through env vars for each connections.\n* Fix: The request time for each connection is counted.\n* Feature: Create a reusable  ConfirmModal component.\n* Fix: Make a CSV-table always visible.\n* Fix: Change BootstrapModal to ConfirmModal in ControlSidebar, AppRoot and CSVFileFieldEdit.\n* Fix: Support `DATABASE_URL` and `CACHE_URL` in docker commands.\n\nParsed bundle size: 4.68 MB\n\n### TODO:\n* Optimize bundle size."},"9c76db7e614930d464a0464cfb27bdc7e08a628b":{"url":"https:\/\/api.github.com\/repos\/vstconsulting\/vstutils\/commits\/9c76db7e614930d464a0464cfb27bdc7e08a628b","html_url":"https:\/\/github.com\/vstconsulting\/vstutils\/commit\/9c76db7e614930d464a0464cfb27bdc7e08a628b","sha":"9c76db7e614930d464a0464cfb27bdc7e08a628b","keyword":"execution after redirect prevent","diff":"diff --git a\/vstutils\/__init__.py b\/vstutils\/__init__.py\nindex 57004a4c..0e4f6922 100644\n--- a\/vstutils\/__init__.py\n+++ b\/vstutils\/__init__.py\n@@ -1,2 +1,2 @@\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b153'\n+__version__: str = '5.0.0b154'\ndiff --git a\/vstutils\/management\/commands\/_base.py b\/vstutils\/management\/commands\/_base.py\nindex eaeb17db..28aca697 100644\n--- a\/vstutils\/management\/commands\/_base.py\n+++ b\/vstutils\/management\/commands\/_base.py\n@@ -406,7 +406,7 @@ class DockerSection(Section):\n         self.log_level = os.getenv(f'{prefix}_LOG_LEVEL', 'WARNING')\n \n         for section_name in sections:\n-            if config['docker'][f'override_{section_name}']:\n+            if config['docker'].getboolean(f'override_{section_name}', fallback=True):\n                 getattr(self, f'prepare_section_{section_name}')(config)\n \n         # Set secret key\ndiff --git a\/vstutils\/management\/commands\/web.py b\/vstutils\/management\/commands\/web.py\nindex c30e869b..e4339c76 100644\n--- a\/vstutils\/management\/commands\/web.py\n+++ b\/vstutils\/management\/commands\/web.py\n@@ -164,9 +164,13 @@ def handle(self, *uwsgi_args, **opts):\n \n         # Append uwsgi configs.\n         for config_file in map(Path, settings.CONFIG_FILES):\n-            option = f'--ini={str(config_file)}'\n-            if config_file.exists() and config_file.suffix == '.ini' and option not in cmd:\n+            option = f'--{\"ini\" if config_file.suffix == \".ini\" else \"yml\"}={str(config_file)}'\n+            if not (config_file.exists() and option not in cmd):\n+                continue\n+            if config_file.suffix == '.ini':\n                 cmd.append(option)\n+            elif config_file.suffix == '.yml':\n+                cmd.append(f'--yml={str(config_file)}')\n \n         if self.uwsgi_default_config.exists():\n             cmd.append(str(self.uwsgi_default_config))\ndiff --git a\/vstutils\/settings.py b\/vstutils\/settings.py\nindex 79820e02..fff576de 100644\n--- a\/vstutils\/settings.py\n+++ b\/vstutils\/settings.py\n@@ -92,12 +92,12 @@ def __getitem__(self, item):\n     PROJECT_DEFAULTS_CONFIG,\n     '\/etc\/vstutils\/settings.ini' if VST_PROJECT != 'test_proj' else None,\n     '\/etc\/vstutils\/settings.yml' if VST_PROJECT != 'test_proj' else None,\n-    os.path.splitext(CONFIG_FILE)[0] + '.yml' if CONFIG_FILE else None,\n     CONFIG_FILE,\n-    os.path.splitext(PROJECT_CONFIG_FILE)[0] + '.yml' if PROJECT_CONFIG_FILE else None,\n+    os.path.splitext(CONFIG_FILE)[0] + '.yml' if CONFIG_FILE else None,\n     PROJECT_CONFIG_FILE,\n-    os.path.splitext(DEV_SETTINGS_FILE)[0] + '.yml' if DEV_SETTINGS_FILE else None,\n+    os.path.splitext(PROJECT_CONFIG_FILE)[0] + '.yml' if PROJECT_CONFIG_FILE else None,\n     DEV_SETTINGS_FILE,\n+    os.path.splitext(DEV_SETTINGS_FILE)[0] + '.yml' if DEV_SETTINGS_FILE else None,\n )))\n \n ConfigBoolType = cconfig.BoolType()\n","message":"","files":{"\/vstutils\/__init__.py":{"changes":[{"diff":"\n # pylint: disable=django-not-available\n-__version__: str = '5.0.0b153'\n+__version__: str = '5.0.0b154'","add":1,"remove":1,"filename":"\/vstutils\/__init__.py","badparts":["__version__: str = '5.0.0b153'"],"goodparts":["__version__: str = '5.0.0b154'"]}],"source":"\n\n__version__: str='5.0.0b153' ","sourceWithComments":"# pylint: disable=django-not-available\n__version__: str = '5.0.0b153'\n"},"\/vstutils\/management\/commands\/_base.py":{"changes":[{"diff":"\n         self.log_level = os.getenv(f'{prefix}_LOG_LEVEL', 'WARNING')\n \n         for section_name in sections:\n-            if config['docker'][f'override_{section_name}']:\n+            if config['docker'].getboolean(f'override_{section_name}', fallback=True):\n                 getattr(self, f'prepare_section_{section_name}')(config)\n \n         # Set secret ke","add":1,"remove":1,"filename":"\/vstutils\/management\/commands\/_base.py","badparts":["            if config['docker'][f'override_{section_name}']:"],"goodparts":["            if config['docker'].getboolean(f'override_{section_name}', fallback=True):"]}],"source":"\n\nimport json import os import logging import tempfile import sys import time import traceback from subprocess import check_call from collections import OrderedDict from django.conf import settings from django.core.management.base import( BaseCommand as _BaseCommand, CommandError as CmdError, ) from configparserc.config import ConfigParserC, Section, BoolType from vstutils.utils import Lock tmp=tempfile.tempdir logger=logging.getLogger(settings.VST_PROJECT) logger_lib=logging.getLogger(settings.VST_PROJECT_LIB) class BaseCommand(_BaseCommand): interactive=False requires_system_checks=False keep_base_opts=False help=\"Service command for web-application\" class CommandError(CmdError): pass def add_arguments(self, parser): super().add_arguments(parser) parser.fromfile_prefix_chars='@' parser.add_argument( '-l', '--log-level', action='store', dest='log-level', default=False, type=str, help='Set logs level[debug|warning|error|critical]') if self.interactive: parser.add_argument( '--noinput', '--no-input', action='store_false', dest='interactive', default=True, help=\"Do NOT prompt the user for input of any kind.\", ) def _print(self, msg, style=None): style=style or 'HTTP_INFO' style=getattr(self.style, style, str) self.stdout.write(style(msg)) def _settings(self, value, default=None): return getattr(settings, value, default) def _get_versions(self): versions=OrderedDict(django=super().get_version()) versions[self._settings('VST_PROJECT')]=self._settings('PROJECT_VERSION') if self._settings('VST_PROJECT') !=self._settings('VST_PROJECT_LIB'): versions[self._settings('VST_PROJECT_LIB')]=self._settings( 'PROJECT_LIB_VERSION' ) if self._settings('VST_PROJECT') !=\"vstutils\": versions['vstutils']=self._settings('VSTUTILS_VERSION') return versions def get_version(self): return ' '.join([ f'{k.title()}={v}' for k, v in self._get_versions().items() ]) def ask_user(self, message, default=None): if getattr(self, 'interactive_mode', False): return input(message) or default return default def ask_user_bool(self, message, default=True): reply=self.ask_user(message, 'yes' if default else 'no').lower() if reply in['y', 'yes']: return True elif reply in['n', 'no']: return False def handle(self, *args, **options): self.interactive_mode=options.pop('interactive', False) LOG_LEVEL=settings.LOG_LEVEL if options.get('log-level', False): LOG_LEVEL=options.pop('log-level', LOG_LEVEL) logger.setLevel(LOG_LEVEL.upper()) logger_lib.setLevel(LOG_LEVEL.upper()) self.LOG_LEVEL=LOG_LEVEL.upper() os.environ.setdefault('DJANGO_LOG_LEVEL', self.LOG_LEVEL) class DockerCommand(BaseCommand): interactive=True with_migration=True def add_arguments(self, parser): super().add_arguments(parser) if self.with_migration: parser.add_argument( '--migrate-attempts', '-a', default=60, dest='attempts', help='The number of attempts to migrate.', ) parser.add_argument( '--migrate-attempts-sleep-time', '-t', default=1, dest='attempts_timeout', help='The number of attempts to migrate.', ) def handle(self, *args, **options): super().handle(*args, **options) self.prefix=self._settings('VST_PROJECT_LIB', 'vstutils').upper() self.project_name=self._settings('VST_PROJECT', 'vstutils') logger.debug(f'Prefix={self.prefix} | Project={self.project_name}') self.env=os.environ.copy() config=self.prepare_config() self.env[self._settings('CONFIG_ENV_DATA_NAME')]=config.generate_config_string() default_envs={ 'UWSGI_PROCESSES': 'UWSGI_WORKERS', 'UWSGI_THREADS': 'UWSGI_THREADS' } for key in default_envs: value=os.environ.get(f\"{self.prefix}_{key}\", '') if value: self.env[default_envs[key]]=value if config['main']['debug'] or self._settings('TESTS_RUN', False): logger.debug(f'Env:\\n{json.dumps(self.env, indent=4)}') logger.debug(f'Config:\\n{self.env[self._settings(\"CONFIG_ENV_DATA_NAME\")]}') @property def databases_to_migrate(self): allowed_databases=('default',) +tuple(set(getattr(settings, 'DOCKER_DATABASES_TO_MIGRATE',()))) for db in settings.DATABASES.keys(): if db in allowed_databases: yield db def migrate(self, options, *args): success=False error='Unknown error.' for i in range(options.get('attempts', 60)): try: with Lock( self._settings('DOCKERRUN_MIGRATE_LOCK_ID'), 1, self._settings('DOCKERRUN_MIGRATE_LOCK_TIMEOUT'), 'Migration process still locked by another application process.', int(os.getenv(\"DOCKER_MIGRATE_LOCK_KEY_TIMEOUT\", '0')) or None ) as lock: logger.info(f'Migration locked by key: `{lock.id}`') for db_name in self.databases_to_migrate: logger.info(f'Migrating db \"{db_name}\".') check_call( [sys.executable, '-m', self.project_name, 'migrate', '--database', db_name, *args], env=self.env, bufsize=0, universal_newlines=True, ) logger.info(f'Unlocking migration by key: `{lock.id}`') except: error=traceback.format_exc() logger.debug(f'Migration attempt{i} failed:{sys.exc_info()[1]}') self._print(f\"Retry time.sleep(options.get('attempts_timeout', 1)) else: success=True break return success, error def prepare_section_main(self, config): config['main']={ 'debug': os.getenv(f'{self.prefix}_DEBUG', 'false'), 'log_level': self.log_level, 'timezone': os.getenv(f'{self.prefix}_TIMEZONE', 'UTC'), 'enable_admin_panel': os.getenv(f'{self.prefix}_ENABLE_ADMIN_PANEL', 'false'), 'first_day_of_week': os.getenv( f'{self.prefix}_FIRST_DAY_OF_WEEK', self._settings('FIRST_DAY_OF_WEEK') ) } ldap_server=os.getenv(f'{self.prefix}_LDAP_CONNECTION', None) if ldap_server: config['main']['ldap_server']=ldap_server ldap_default_domain=os.getenv(f'{self.prefix}_LDAP_DOMAIN', None) if ldap_default_domain: config['main']['ldap-default-domain']=ldap_default_domain def prepare_section_db(self, config): sqlite_default_dir=os.environ.get(f'{self.prefix}_SQLITE_DIR', '\/') if sqlite_default_dir !='\/' and not os.path.exists(sqlite_default_dir): os.makedirs(sqlite_default_dir) if sqlite_default_dir[-1] !='\/': sqlite_default_dir +='\/' sqlite_default_name=os.environ.get(f'{self.prefix}_SQLITE_DBNAME', 'db.sqlite3') sqlite_db_path=f'{sqlite_default_dir}\/{sqlite_default_name}' if os.getenv(f'{self.prefix}_DB_HOST') is not None: try: pm_type=os.getenv(f'{self.prefix}_DB_TYPE', 'mysql') default_port='' if pm_type=='mysql': default_port='3306' elif pm_type=='postgresql': default_port='5432' config['database']={ 'engine': f'django.db.backends.{pm_type}', 'name': os.environ[f'{self.prefix}_DB_NAME'], 'user': os.environ[f'{self.prefix}_DB_USER'], 'password': os.environ[f'{self.prefix}_DB_PASSWORD'], 'host': os.environ[f'{self.prefix}_DB_HOST'], 'port': os.getenv(f'{self.prefix}_DB_PORT', default_port), } config['database.options']={ 'connect_timeout': os.getenv(f'{self.prefix}_DB_CONNECT_TIMEOUT', '20'), } if pm_type=='mysql': config['database.options']['init_command']=os.getenv('DB_INIT_CMD', '') except KeyError as err: raise Exception('Not enough variables for connect to SQL server.') from err else: config['database']={ 'engine': 'django.db.backends.sqlite3', 'name': sqlite_db_path } def prepare_section_cache(self, config): cache_loc=os.getenv('CACHE_LOCATION', f'{tmp}\/{self.prefix}_django_cache') cache_type=os.getenv(f'{self.prefix}_CACHE_TYPE', 'file') if cache_type=='file': cache_engine='django.core.cache.backends.filebased.FileBasedCache' elif cache_type=='memcache': cache_engine='django.core.cache.backends.memcached.MemcachedCache' elif cache_type=='redis': cache_engine='django_redis.cache.RedisCache' else: raise Exception(f'Unknown cache type `{cache_type}`.') config['cache']=config['locks']={ 'backend': cache_engine, 'location': cache_loc } def prepare_section_rpc(self, config): rpc_connection=os.getenv('RPC_ENGINE', None) config['rpc']={ 'heartbeat': os.getenv('RPC_HEARTBEAT', '5'), 'concurrency': os.getenv('RPC_CONCURRENCY', '4'), 'clone_retry_count': os.getenv('RPC_CLONE_RETRY_COUNT', '3') } if rpc_connection: config['rpc']['connection']=rpc_connection config['rpc']['enable_worker']='false' if os.environ.get('WORKER', '')=='ENABLE': config['rpc']['enable_worker']='true' config['worker']={ 'loglevel': self.log_level, 'pidfile': f'{tmp}\/{self.prefix.lower()}_worker.pid', 'beat': os.getenv(f'{self.prefix}_SCHEDULER_ENABLE', 'true') } def prepare_section_web(self, config): config['web']={ 'session_timeout': os.getenv(f'{self.prefix}_SESSION_TIMEOUT', '2w'), 'rest_page_limit': os.getenv(f'{self.prefix}_WEB_REST_PAGE_LIMIT', '100'), 'enable_gravatar': os.getenv(f'{self.prefix}_WEB_GRAVATAR', 'true'), 'request_max_size': os.getenv( f'{self.prefix}_REQUEST_MAX_SIZE', self._settings('DATA_UPLOAD_MAX_MEMORY_SIZE') ), 'x_frame_options': os.getenv( f'{self.prefix}_X_FRAME_OPTIONS', self._settings('X_FRAME_OPTIONS') ), 'use_x_forwarded_host': os.getenv( f'{self.prefix}_USE_X_FORWARDED_HOST', self._settings('USE_X_FORWARDED_HOST') ), 'use_x_forwarded_port': os.getenv( f'{self.prefix}_USE_X_FORWARDED_PORT', self._settings('USE_X_FORWARDED_PORT') ), 'password_reset_timeout_days': os.getenv( f'{self.prefix}_PASSWORD_RESET_TIMEOUT_DAYS', self._settings('PASSWORD_RESET_TIMEOUT_DAYS') ), 'secure_browser_xss_filter': os.getenv( f'{self.prefix}_SECURE_BROWSER_XSS_FILTER', self._settings('SECURE_BROWSER_XSS_FILTER') ), 'secure_content_type_nosniff': os.getenv( f'{self.prefix}_SECURE_CONTENT_TYPE_NOSNIFF', self._settings('SECURE_CONTENT_TYPE_NOSNIFF') ), 'secure_hsts_include_subdomains': os.getenv( f'{self.prefix}_SECURE_HSTS_INCLUDE_SUBDOMAINS', self._settings('SECURE_HSTS_INCLUDE_SUBDOMAINS') ), 'secure_hsts_preload': os.getenv( f'{self.prefix}_SECURE_HSTS_PRELOAD', self._settings('SECURE_HSTS_PRELOAD') ), 'secure_hsts_seconds': os.getenv( f'{self.prefix}_SECURE_HSTS_SECONDS', self._settings('SECURE_HSTS_SECONDS') ), 'health_throttle_rate': os.getenv( f'{self.prefix}_HEALTH_THROTTLE_RATE', self._settings('HEALTH_THROTTLE_RATE').replace('\/minute', '') ), } def prepare_section_uwsgi(self, config): config['uwsgi']={ 'thread-stacksize': os.getenv(f'{self.prefix}_UWSGI_THREADSTACK', '40960'), 'max-requests': os.getenv(f'{self.prefix}_UWSGI_MAXREQUESTS', '50000'), 'limit-as': os.getenv(f'{self.prefix}_UWSGI_LIMITS', '512'), 'pidfile': os.getenv(f'{self.prefix}_UWSGI_PIDFILE', '\/run\/web.pid'), 'daemon': 'false' } current_addr, current_port=self._settings('WEB_ADDRPORT').split(',')[0].split(':') config['uwsgi']['addrport']=( f\"{os.getenv(f'{self.prefix}_WEB_HOST', current_addr)}:\" f\"{os.getenv(f'{self.prefix}_WEB_PORT', current_port)}\" ) harakiri=os.getenv(f'{self.prefix}_UWSGI_HARAKIRI', '') if harakiri: config['uwsgi']['harakiri']=harakiri vacuum=os.getenv(f'{self.prefix}_UWSGI_VACUUM', '') if vacuum: config['uwsgi']['vacuum']=vacuum def prepare_section_smtp(self, config): mail_parameters=['port', 'user', 'password', 'tls', 'ssl', 'from_address'] mail_settings={'host': os.environ.get(f'{self.prefix}_MAIL_HOST')} if mail_settings['host']: for param in mail_parameters: value=os.environ.get(f'{self.prefix}_MAIL_{param.upper()}') if value: mail_settings[param]=value config['mail']=mail_settings def prepare_config(self): prefix=self.prefix default_sections=( 'main', 'db', 'cache', 'rpc', 'web', 'uwsgi', 'smtp', ) section_handlers_prefix='prepare_section_' sections=default_sections +tuple(map( lambda y: y.replace(section_handlers_prefix, ''), filter( lambda x: x.startswith(section_handlers_prefix) and x not in default_sections, dir(self) ) )) class DockerSection(Section): types_map={ f'override_{s}': BoolType() for s in sections } self.config=ConfigParserC( format_kwargs=self._settings('KWARGS',{}), section_defaults={ 'docker':{ s: os.getenv(f'{prefix}_DOCKER_{s.upper()}', 'True') for s in DockerSection.types_map } }, section_overload={ 'docker': DockerSection }, format_exclude_sections=('uwsgi',) ) config=self.config config.parse_text(settings.CONFIG.generate_config_string()) self.log_level=os.getenv(f'{prefix}_LOG_LEVEL', 'WARNING') for section_name in sections: if config['docker'][f'override_{section_name}']: getattr(self, f'prepare_section_{section_name}')(config) os.environ.setdefault('SECRET_KEY', 'DISABLE') if os.environ['SECRET_KEY'] !='DISABLE': with open(f'\/etc\/{prefix.lower()}\/secret', 'w', encoding='utf-8') as secretfile: secretfile.write(os.environ['SECRET_KEY']) return config ","sourceWithComments":"# pylint: disable=abstract-method,unused-import,undefined-variable\nimport json\nimport os\nimport logging\nimport tempfile\nimport sys\nimport time\nimport traceback\nfrom subprocess import check_call\nfrom collections import OrderedDict\n\nfrom django.conf import settings\nfrom django.core.management.base import (\n    BaseCommand as _BaseCommand,\n    CommandError as CmdError,\n)\nfrom configparserc.config import ConfigParserC, Section, BoolType\nfrom vstutils.utils import Lock\n\n\ntmp = tempfile.tempdir\nlogger = logging.getLogger(settings.VST_PROJECT)\nlogger_lib = logging.getLogger(settings.VST_PROJECT_LIB)\n\n\nclass BaseCommand(_BaseCommand):\n    interactive = False\n    requires_system_checks = False\n    keep_base_opts = False\n    help = \"Service command for web-application\"\n\n    class CommandError(CmdError):\n        pass\n\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.fromfile_prefix_chars = '@'\n        parser.add_argument(\n            '-l', '--log-level',\n            action='store',\n            dest='log-level',\n            default=False,\n            type=str,\n            help='Set logs level [debug|warning|error|critical]')\n        if self.interactive:\n            parser.add_argument(\n                '--noinput', '--no-input',\n                action='store_false', dest='interactive', default=True,\n                help=\"Do NOT prompt the user for input of any kind.\",\n            )\n\n    def _print(self, msg, style=None):\n        style = style or 'HTTP_INFO'\n        style = getattr(self.style, style, str)\n        self.stdout.write(style(msg))\n\n    def _settings(self, value, default=None):\n        return getattr(settings, value, default)\n\n    def _get_versions(self):\n        versions = OrderedDict(django=super().get_version())\n        versions[self._settings('VST_PROJECT')] = self._settings('PROJECT_VERSION')\n        if self._settings('VST_PROJECT') != self._settings('VST_PROJECT_LIB'):\n            versions[self._settings('VST_PROJECT_LIB')] = self._settings(\n                'PROJECT_LIB_VERSION'\n            )\n        if self._settings('VST_PROJECT') != \"vstutils\":\n            versions['vstutils'] = self._settings('VSTUTILS_VERSION')\n        return versions\n\n    def get_version(self):\n        return ' '.join([\n            f'{k.title()}={v}' for k, v in self._get_versions().items()\n        ])\n\n    def ask_user(self, message, default=None):\n        # pylint: disable=import-error\n        if getattr(self, 'interactive_mode', False):\n            return input(message) or default\n        return default\n\n    def ask_user_bool(self, message, default=True):\n        reply = self.ask_user(message, 'yes' if default else 'no').lower()\n        if reply in ['y', 'yes']:\n            return True\n        elif reply in ['n', 'no']:\n            return False\n\n    def handle(self, *args, **options):\n        # pylint: disable=invalid-name\n        self.interactive_mode = options.pop('interactive', False)\n        LOG_LEVEL = settings.LOG_LEVEL\n        if options.get('log-level', False):\n            LOG_LEVEL = options.pop('log-level', LOG_LEVEL)\n        logger.setLevel(LOG_LEVEL.upper())\n        logger_lib.setLevel(LOG_LEVEL.upper())\n        self.LOG_LEVEL = LOG_LEVEL.upper()\n        os.environ.setdefault('DJANGO_LOG_LEVEL', self.LOG_LEVEL)\n\n\nclass DockerCommand(BaseCommand):\n    interactive = True\n    with_migration = True\n\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        if self.with_migration:\n            parser.add_argument(\n                '--migrate-attempts', '-a',\n                default=60,\n                dest='attempts', help='The number of attempts to migrate.',\n            )\n            parser.add_argument(\n                '--migrate-attempts-sleep-time', '-t',\n                default=1,\n                dest='attempts_timeout', help='The number of attempts to migrate.',\n            )\n\n    def handle(self, *args, **options):\n        super().handle(*args, **options)\n        self.prefix = self._settings('VST_PROJECT_LIB', 'vstutils').upper()\n        self.project_name = self._settings('VST_PROJECT', 'vstutils')\n\n        logger.debug(f'Prefix={self.prefix} | Project={self.project_name}')\n\n        self.env = os.environ.copy()\n        config = self.prepare_config()\n        self.env[self._settings('CONFIG_ENV_DATA_NAME')] = config.generate_config_string()\n        default_envs = {\n            'UWSGI_PROCESSES': 'UWSGI_WORKERS',\n            'UWSGI_THREADS': 'UWSGI_THREADS'\n        }\n        for key in default_envs:  # pylint: disable=consider-using-dict-items\n            value = os.environ.get(f\"{self.prefix}_{key}\", '')\n            if value:\n                self.env[default_envs[key]] = value  # nocv\n\n        if config['main']['debug'] or self._settings('TESTS_RUN', False):\n            logger.debug(f'Env:\\n{json.dumps(self.env, indent=4)}')\n            logger.debug(f'Config:\\n{self.env[self._settings(\"CONFIG_ENV_DATA_NAME\")]}')\n\n    @property\n    def databases_to_migrate(self):\n        allowed_databases = ('default',) + tuple(set(getattr(settings, 'DOCKER_DATABASES_TO_MIGRATE', ())))\n        for db in settings.DATABASES.keys():\n            if db in allowed_databases:\n                yield db\n\n    def migrate(self, options, *args):\n        success = False\n        error = 'Unknown error.'\n        for i in range(options.get('attempts', 60)):\n            try:\n                with Lock(\n                        self._settings('DOCKERRUN_MIGRATE_LOCK_ID'),\n                        1,\n                        self._settings('DOCKERRUN_MIGRATE_LOCK_TIMEOUT'),\n                        'Migration process still locked by another application process.',\n                        int(os.getenv(\"DOCKER_MIGRATE_LOCK_KEY_TIMEOUT\", '0')) or None\n                ) as lock:  # noqa: F841, pylint:disable=unused-variable\n                    logger.info(f'Migration locked by key: `{lock.id}`')\n                    for db_name in self.databases_to_migrate:\n                        logger.info(f'Migrating db \"{db_name}\".')\n                        check_call(\n                            [sys.executable, '-m', self.project_name, 'migrate', '--database', db_name, *args],\n                            env=self.env,\n                            bufsize=0,\n                            universal_newlines=True,\n                        )\n                    logger.info(f'Unlocking migration by key: `{lock.id}`')\n            except:\n                error = traceback.format_exc()\n                logger.debug(f'Migration attempt {i} failed: {sys.exc_info()[1]}')\n                self._print(f\"Retry #{i}...\", 'WARNING')\n                time.sleep(options.get('attempts_timeout', 1))\n            else:\n                success = True\n                break\n        return success, error\n\n    def prepare_section_main(self, config):\n        config['main'] = {\n            'debug': os.getenv(f'{self.prefix}_DEBUG', 'false'),\n            'log_level': self.log_level,\n            'timezone': os.getenv(f'{self.prefix}_TIMEZONE', 'UTC'),\n            'enable_admin_panel': os.getenv(f'{self.prefix}_ENABLE_ADMIN_PANEL', 'false'),\n            'first_day_of_week': os.getenv(\n                f'{self.prefix}_FIRST_DAY_OF_WEEK',\n                self._settings('FIRST_DAY_OF_WEEK')\n            )\n        }\n        # ldap-server, ldap-default-domain if exist\n        ldap_server = os.getenv(f'{self.prefix}_LDAP_CONNECTION', None)\n        if ldap_server:  # nocv\n            config['main']['ldap_server'] = ldap_server\n        ldap_default_domain = os.getenv(f'{self.prefix}_LDAP_DOMAIN', None)\n        if ldap_default_domain:  # nocv\n            config['main']['ldap-default-domain'] = ldap_default_domain\n\n    def prepare_section_db(self, config):\n        # SQLite prepearing\n        sqlite_default_dir = os.environ.get(f'{self.prefix}_SQLITE_DIR', '\/')\n        if sqlite_default_dir != '\/' and not os.path.exists(sqlite_default_dir):  # nocv\n            os.makedirs(sqlite_default_dir)\n        if sqlite_default_dir[-1] != '\/':  # nocv\n            sqlite_default_dir += '\/'\n        sqlite_default_name = os.environ.get(f'{self.prefix}_SQLITE_DBNAME', 'db.sqlite3')\n        sqlite_db_path = f'{sqlite_default_dir}\/{sqlite_default_name}'\n\n        if os.getenv(f'{self.prefix}_DB_HOST') is not None:\n            try:\n                pm_type = os.getenv(f'{self.prefix}_DB_TYPE', 'mysql')\n\n                default_port = ''\n                if pm_type == 'mysql':\n                    default_port = '3306'\n                elif pm_type == 'postgresql':  # nocv\n                    default_port = '5432'\n\n                config['database'] = {\n                    'engine': f'django.db.backends.{pm_type}',\n                    'name': os.environ[f'{self.prefix}_DB_NAME'],\n                    'user': os.environ[f'{self.prefix}_DB_USER'],\n                    'password': os.environ[f'{self.prefix}_DB_PASSWORD'],\n                    'host': os.environ[f'{self.prefix}_DB_HOST'],\n                    'port': os.getenv(f'{self.prefix}_DB_PORT', default_port),\n                }\n                config['database.options'] = {\n                    'connect_timeout': os.getenv(f'{self.prefix}_DB_CONNECT_TIMEOUT', '20'),\n                }\n                if pm_type == 'mysql':\n                    config['database.options']['init_command'] = os.getenv('DB_INIT_CMD', '')\n            except KeyError as err:  # nocv\n                raise Exception('Not enough variables for connect to  SQL server.') from err\n        else:  # nocv\n            config['database'] = {\n                'engine': 'django.db.backends.sqlite3',\n                'name': sqlite_db_path\n            }\n\n    def prepare_section_cache(self, config):\n        cache_loc = os.getenv('CACHE_LOCATION', f'{tmp}\/{self.prefix}_django_cache')\n        cache_type = os.getenv(f'{self.prefix}_CACHE_TYPE', 'file')\n        if cache_type == 'file':\n            cache_engine = 'django.core.cache.backends.filebased.FileBasedCache'\n        elif cache_type == 'memcache':  # nocv\n            cache_engine = 'django.core.cache.backends.memcached.MemcachedCache'\n        elif cache_type == 'redis':  # nocv\n            cache_engine = 'django_redis.cache.RedisCache'\n        else:  # nocv\n            raise Exception(f'Unknown cache type `{cache_type}`.')\n\n        config['cache'] = config['locks'] = {\n            'backend': cache_engine,\n            'location': cache_loc\n        }\n\n    def prepare_section_rpc(self, config):\n        rpc_connection = os.getenv('RPC_ENGINE', None)\n        config['rpc'] = {\n            'heartbeat': os.getenv('RPC_HEARTBEAT', '5'),\n            'concurrency': os.getenv('RPC_CONCURRENCY', '4'),\n            'clone_retry_count': os.getenv('RPC_CLONE_RETRY_COUNT', '3')\n        }\n\n        if rpc_connection:  # nocv\n            config['rpc']['connection'] = rpc_connection\n        config['rpc']['enable_worker'] = 'false'\n\n        # Set worker settings\n        if os.environ.get('WORKER', '') == 'ENABLE':  # nocv\n            config['rpc']['enable_worker'] = 'true'\n            config['worker'] = {\n                'loglevel': self.log_level,\n                'pidfile': f'{tmp}\/{self.prefix.lower()}_worker.pid',\n                'beat': os.getenv(f'{self.prefix}_SCHEDULER_ENABLE', 'true')\n            }\n\n    def prepare_section_web(self, config):\n        config['web'] = {\n            'session_timeout': os.getenv(f'{self.prefix}_SESSION_TIMEOUT', '2w'),\n            'rest_page_limit': os.getenv(f'{self.prefix}_WEB_REST_PAGE_LIMIT', '100'),\n            'enable_gravatar': os.getenv(f'{self.prefix}_WEB_GRAVATAR', 'true'),\n            'request_max_size': os.getenv(\n                f'{self.prefix}_REQUEST_MAX_SIZE',\n                self._settings('DATA_UPLOAD_MAX_MEMORY_SIZE')\n            ),\n            'x_frame_options': os.getenv(\n                f'{self.prefix}_X_FRAME_OPTIONS',\n                self._settings('X_FRAME_OPTIONS')\n            ),\n            'use_x_forwarded_host': os.getenv(\n                f'{self.prefix}_USE_X_FORWARDED_HOST',\n                self._settings('USE_X_FORWARDED_HOST')\n            ),\n            'use_x_forwarded_port': os.getenv(\n                f'{self.prefix}_USE_X_FORWARDED_PORT',\n                self._settings('USE_X_FORWARDED_PORT')\n            ),\n            'password_reset_timeout_days': os.getenv(\n                f'{self.prefix}_PASSWORD_RESET_TIMEOUT_DAYS',\n                self._settings('PASSWORD_RESET_TIMEOUT_DAYS')\n            ),\n            'secure_browser_xss_filter': os.getenv(\n                f'{self.prefix}_SECURE_BROWSER_XSS_FILTER',\n                self._settings('SECURE_BROWSER_XSS_FILTER')\n            ),\n            'secure_content_type_nosniff': os.getenv(\n                f'{self.prefix}_SECURE_CONTENT_TYPE_NOSNIFF',\n                self._settings('SECURE_CONTENT_TYPE_NOSNIFF')\n            ),\n            'secure_hsts_include_subdomains': os.getenv(\n                f'{self.prefix}_SECURE_HSTS_INCLUDE_SUBDOMAINS',\n                self._settings('SECURE_HSTS_INCLUDE_SUBDOMAINS')\n            ),\n            'secure_hsts_preload': os.getenv(\n                f'{self.prefix}_SECURE_HSTS_PRELOAD',\n                self._settings('SECURE_HSTS_PRELOAD')\n            ),\n            'secure_hsts_seconds': os.getenv(\n                f'{self.prefix}_SECURE_HSTS_SECONDS',\n                self._settings('SECURE_HSTS_SECONDS')\n            ),\n            'health_throttle_rate': os.getenv(\n                f'{self.prefix}_HEALTH_THROTTLE_RATE',\n                self._settings('HEALTH_THROTTLE_RATE').replace('\/minute', '')\n            ),\n        }\n\n    def prepare_section_uwsgi(self, config):\n        config['uwsgi'] = {\n            'thread-stacksize': os.getenv(f'{self.prefix}_UWSGI_THREADSTACK', '40960'),\n            'max-requests': os.getenv(f'{self.prefix}_UWSGI_MAXREQUESTS', '50000'),\n            'limit-as': os.getenv(f'{self.prefix}_UWSGI_LIMITS', '512'),\n            'pidfile': os.getenv(f'{self.prefix}_UWSGI_PIDFILE', '\/run\/web.pid'),\n            'daemon': 'false'\n        }\n        current_addr, current_port = self._settings('WEB_ADDRPORT').split(',')[0].split(':')\n        config['uwsgi']['addrport'] = (\n            f\"{os.getenv(f'{self.prefix}_WEB_HOST', current_addr)}:\"\n            f\"{os.getenv(f'{self.prefix}_WEB_PORT', current_port)}\"\n        )\n        harakiri = os.getenv(f'{self.prefix}_UWSGI_HARAKIRI', '')\n        if harakiri:\n            config['uwsgi']['harakiri'] = harakiri\n        vacuum = os.getenv(f'{self.prefix}_UWSGI_VACUUM', '')\n        if vacuum:\n            config['uwsgi']['vacuum'] = vacuum\n\n    def prepare_section_smtp(self, config):\n        mail_parameters = ['port', 'user', 'password', 'tls', 'ssl', 'from_address']\n        mail_settings = {'host': os.environ.get(f'{self.prefix}_MAIL_HOST')}\n        if mail_settings['host']:\n            for param in mail_parameters:\n                value = os.environ.get(f'{self.prefix}_MAIL_{param.upper()}')\n                if value:\n                    mail_settings[param] = value\n            config['mail'] = mail_settings\n\n    def prepare_config(self):\n        # pylint: disable=too-many-locals,too-many-branches,too-many-statements\n        prefix = self.prefix\n\n        default_sections = (\n            'main',\n            'db',\n            'cache',\n            'rpc',\n            'web',\n            'uwsgi',\n            'smtp',\n        )\n        section_handlers_prefix = 'prepare_section_'\n        sections = default_sections + tuple(map(\n            lambda y: y.replace(section_handlers_prefix, ''),\n            filter(\n                lambda x: x.startswith(section_handlers_prefix) and x not in default_sections,\n                dir(self)\n            )\n        ))\n\n        class DockerSection(Section):\n            types_map = {\n                f'override_{s}': BoolType()\n                for s in sections\n            }\n\n        # Start configuring config file\n        self.config = ConfigParserC(\n            format_kwargs=self._settings('KWARGS', {}),\n            section_defaults={\n                'docker': {\n                    s: os.getenv(f'{prefix}_DOCKER_{s.upper()}', 'True')\n                    for s in DockerSection.types_map\n                }\n            },\n            section_overload={\n                'docker': DockerSection\n            },\n            format_exclude_sections=('uwsgi',)\n        )\n        config = self.config\n        config.parse_text(settings.CONFIG.generate_config_string())\n\n        # Set log level\n        self.log_level = os.getenv(f'{prefix}_LOG_LEVEL', 'WARNING')\n\n        for section_name in sections:\n            if config['docker'][f'override_{section_name}']:\n                getattr(self, f'prepare_section_{section_name}')(config)\n\n        # Set secret key\n        os.environ.setdefault('SECRET_KEY', 'DISABLE')\n        if os.environ['SECRET_KEY'] != 'DISABLE':  # nocv\n            with open(f'\/etc\/{prefix.lower()}\/secret', 'w', encoding='utf-8') as secretfile:\n                secretfile.write(os.environ['SECRET_KEY'])\n\n        return config\n"},"\/vstutils\/management\/commands\/web.py":{"changes":[{"diff":"\n \n         # Append uwsgi configs.\n         for config_file in map(Path, settings.CONFIG_FILES):\n-            option = f'--ini={str(config_file)}'\n-            if config_file.exists() and config_file.suffix == '.ini' and option not in cmd:\n+            option = f'--{\"ini\" if config_file.suffix == \".ini\" else \"yml\"}={str(config_file)}'\n+            if not (config_file.exists() and option not in cmd):\n+                continue\n+            if config_file.suffix == '.ini':\n                 cmd.append(option)\n+            elif config_file.suffix == '.yml':\n+                cmd.append(f'--yml={str(config_file)}')\n \n         if self.uwsgi_default_config.exists():\n             cmd.append(str(self.uwsgi_default_config","add":6,"remove":2,"filename":"\/vstutils\/management\/commands\/web.py","badparts":["            option = f'--ini={str(config_file)}'","            if config_file.exists() and config_file.suffix == '.ini' and option not in cmd:"],"goodparts":["            option = f'--{\"ini\" if config_file.suffix == \".ini\" else \"yml\"}={str(config_file)}'","            if not (config_file.exists() and option not in cmd):","                continue","            if config_file.suffix == '.ini':","            elif config_file.suffix == '.yml':","                cmd.append(f'--yml={str(config_file)}')"]}],"source":"\n import os import sys import time from pathlib import Path from subprocess import CalledProcessError import subprocess import signal from django.conf import settings from._base import BaseCommand from...utils import raise_context python_exec_dir=Path(os.path.dirname(settings.PYTHON_INTERPRETER)) python_subexec_dir=Path('\/usr\/local\/bin') _uwsgi_default_path=python_exec_dir \/ 'uwsgi' _uwsgi_default_path_alt=python_exec_dir \/ 'pyuwsgi' _uwsgi_default_path_alt2=python_subexec_dir \/ 'uwsgi' _uwsgi_default_path_alt3=python_subexec_dir \/ 'pyuwsgi' if not _uwsgi_default_path.exists() and _uwsgi_default_path_alt.exists(): _uwsgi_default_path=_uwsgi_default_path_alt elif _uwsgi_default_path_alt2.exists(): _uwsgi_default_path=_uwsgi_default_path_alt2 elif _uwsgi_default_path_alt3.exists(): _uwsgi_default_path=_uwsgi_default_path_alt3 def wait(proc, timeout=None, delay=0.01): while proc.poll() is None and(timeout or timeout is None): time.sleep(delay) if timeout is not None: timeout -=delay return proc.poll() def get_celery_command(celery_path='celery', **kwargs): options='' app_option=f'--app={settings.VST_PROJECT}.wapp:app' worker_options_dict={ **settings.WORKER_OPTIONS, **kwargs } for key, value in worker_options_dict.items(): if key=='app': app_option=\"--app={}\".format(value.replace(',', r'\\,')) continue is_boolean=isinstance(value, bool) if(is_boolean and value) or value: options +=f' -{\"-\" if key !=\"O\" else \"\"}{key}' if is_boolean: continue options +=\"{}{}\".format('=' if key !='O' else '', value.replace(',', r'\\,')) if '--queues' not in options: options +=' --queues={}'.format(r'\\,'.join(settings.WORKER_QUEUES)) return f'{celery_path}{app_option} worker{options}' class Command(BaseCommand): help=\"Backend web-server.\" _uwsgi_default_path=_uwsgi_default_path uwsgi_default_config=Path(os.path.dirname(__file__)).parent.parent \/ 'web.ini' default_addrport=settings.WEB_ADDRPORT prefix=getattr(settings, 'VST_PROJECT_LIB', 'vstutils').upper() def add_arguments(self, parser): super().add_arguments(parser) parser.add_argument( 'args', metavar='uwsgi_arg=value', nargs='*', help='Args \"name=value\" uwsgi server.', ) parser.add_argument( '--uwsgi-path', '-s', default=self._uwsgi_default_path, dest='script', help='Specifies the uwsgi script.', ) parser.add_argument( '--uwsgi-config', '-c', default=str(Path(settings.VST_PROJECT_DIR) \/ 'web.ini'), dest='config', help='Specifies the uwsgi script.', ) parser.add_argument( '--addrport', '-p', default=self.default_addrport, dest='addrport', help='Specifies the uwsgi address:port. Default:[:8080]', ) def _get_uwsgi_arg(self, arg): return arg if isinstance(arg, str) else None def _get_uwsgi_args(self, *uwsgi_args): args=[] if settings.WEB_DAEMON: args.append(f'daemonize={settings.WEB_DAEMON_LOGFILE}') args +=[self._get_uwsgi_arg(arg) for arg in uwsgi_args] return args def _get_worker_options(self): cmd=[] if not getattr(settings, 'RUN_WORKER', False): return cmd cmd.append('--attach-daemon2') cmd.append(f'stopsignal=15,reloadsignal=1,exec={get_celery_command()}') return cmd def handle(self, *uwsgi_args, **opts): super().handle(*uwsgi_args, **opts) env=os.environ.copy() cmd=[ str(opts['script']), f'--set-ph=program_name={settings.VST_PROJECT}', f'--set-ph=lib_name={settings.VST_PROJECT_LIB}', f'--set-ph=api_path={settings.API_URL}', f'--set-ph=vstutils_version={settings.VSTUTILS_VERSION}', f'--module={settings.UWSGI_APPLICATION}', ] addrport=opts['addrport'] cmd +=[f'--{\"https\" if len(addrport.split(\",\")) > 1 else \"http\"}={addrport}'] cmd +=[ f'--{arg}' for arg in self._get_uwsgi_args(*uwsgi_args) if arg is not None ] if opts['config'] and Path(opts['config']).exists(): cmd +=[f'--ini={opts[\"config\"]}'] if settings.STATIC_URL.startswith('\/'): cmd +=[f'--set-ph=static_url={settings.STATIC_URL}'] for static_path in settings.STATIC_FILES_FOLDERS: if f\"{settings.STATIC_URL}={static_path}\" not in cmd: cmd +=['--static-map', f\"{settings.STATIC_URL}={static_path}\"] if settings.MEDIA_URL.startswith('\/') and settings.MEDIA_ROOT: cmd +=['--static-map', f\"{settings.MEDIA_URL}={settings.MEDIA_ROOT}\"] if 'docs' in settings.INSTALLED_APPS and getattr(settings, 'DOCS_ACCESS', 'public')=='public': cmd +=['--static-map', f\"{settings.DOC_URL}={settings.DOCS_ROOT}\"] for config_file in map(Path, settings.CONFIG_FILES): option=f'--ini={str(config_file)}' if config_file.exists() and config_file.suffix=='.ini' and option not in cmd: cmd.append(option) if self.uwsgi_default_config.exists(): cmd.append(str(self.uwsgi_default_config)) else: self._print(f'File{str(self.uwsgi_default_config)} doesnt exists.', 'ERROR') cmd +=self._get_worker_options() cmd +=['--ini', '-'] if sys.prefix !='\/usr': cmd +=[f'--virtualenv={sys.prefix}'] if sys.prefix not in env[\"PATH\"]: env['PATH']=f'{sys.prefix}\/bin:{env[\"PATH\"]}' read, write=os.pipe() os.write(write, os.environ.get(self._settings('CONFIG_ENV_DATA_NAME'), '').encode('utf-8')) os.close(write) try: self._print('Execute: ' +' '.join(cmd)) with subprocess.Popen(cmd, env=env, stdin=read) as proc: try: wait(proc) except BaseException as exc: proc.send_signal(signal.SIGTERM) wait(proc, 10) with raise_context(): proc.kill() wait(proc) raise exc except KeyboardInterrupt: self._print('Exit by user...', 'WARNING') except CalledProcessError as err: raise self.CommandError(str(err)) except BaseException as err: self._print(str(err), 'ERROR') raise ","sourceWithComments":"# pylint: disable=no-member\n\nimport os\nimport sys\nimport time\nfrom pathlib import Path\nfrom subprocess import CalledProcessError\nimport subprocess\nimport signal\n\nfrom django.conf import settings\n\nfrom ._base import BaseCommand\nfrom ...utils import raise_context\n\npython_exec_dir = Path(os.path.dirname(settings.PYTHON_INTERPRETER))\npython_subexec_dir = Path('\/usr\/local\/bin')\n_uwsgi_default_path = python_exec_dir \/ 'uwsgi'\n_uwsgi_default_path_alt = python_exec_dir \/ 'pyuwsgi'\n_uwsgi_default_path_alt2 = python_subexec_dir \/ 'uwsgi'\n_uwsgi_default_path_alt3 = python_subexec_dir \/ 'pyuwsgi'\nif not _uwsgi_default_path.exists() and _uwsgi_default_path_alt.exists():\n    _uwsgi_default_path = _uwsgi_default_path_alt\nelif _uwsgi_default_path_alt2.exists():\n    _uwsgi_default_path = _uwsgi_default_path_alt2\nelif _uwsgi_default_path_alt3.exists():\n    _uwsgi_default_path = _uwsgi_default_path_alt3\n\n\ndef wait(proc, timeout=None, delay=0.01):\n    while proc.poll() is None and (timeout or timeout is None):\n        time.sleep(delay)\n        if timeout is not None:\n            timeout -= delay\n    return proc.poll()\n\n\ndef get_celery_command(celery_path='celery', **kwargs):\n    # Format args string.\n    options = ''\n    app_option = f'--app={settings.VST_PROJECT}.wapp:app'\n    worker_options_dict = {\n        **settings.WORKER_OPTIONS,\n        **kwargs\n    }\n    for key, value in worker_options_dict.items():\n        if key == 'app':\n            app_option = \"--app={}\".format(value.replace(',', r'\\,'))\n            continue\n        is_boolean = isinstance(value, bool)\n        if (is_boolean and value) or value:\n            options += f' -{\"-\" if key != \"O\" else \"\"}{key}'\n        if is_boolean:\n            continue\n        options += \"{}{}\".format('=' if key != 'O' else '', value.replace(',', r'\\,'))\n\n    # Add queues list to celery args\n    if '--queues' not in options:\n        options += ' --queues={}'.format(r'\\,'.join(settings.WORKER_QUEUES))\n\n    # Add arguments to uwsgi cmd list.\n    return f'{celery_path} {app_option} worker {options}'\n\n\nclass Command(BaseCommand):\n    help = \"Backend web-server.\"\n    _uwsgi_default_path = _uwsgi_default_path\n    uwsgi_default_config = Path(os.path.dirname(__file__)).parent.parent \/ 'web.ini'\n    default_addrport = settings.WEB_ADDRPORT\n    prefix = getattr(settings, 'VST_PROJECT_LIB', 'vstutils').upper()\n\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\n            'args',\n            metavar='uwsgi_arg=value', nargs='*',\n            help='Args \"name=value\" uwsgi server.',\n        )\n        parser.add_argument(\n            '--uwsgi-path', '-s',\n            default=self._uwsgi_default_path, dest='script',\n            help='Specifies the uwsgi script.',\n        )\n        parser.add_argument(\n            '--uwsgi-config', '-c',\n            default=str(Path(settings.VST_PROJECT_DIR) \/ 'web.ini'),\n            dest='config', help='Specifies the uwsgi script.',\n        )\n        parser.add_argument(\n            '--addrport', '-p',\n            default=self.default_addrport,\n            dest='addrport', help='Specifies the uwsgi address:port. Default: [:8080]',\n        )\n\n    def _get_uwsgi_arg(self, arg):\n        return arg if isinstance(arg, str) else None\n\n    def _get_uwsgi_args(self, *uwsgi_args):\n        args = []\n\n        # Set `--daemonize` to logfile if `daemon = true`\n        if settings.WEB_DAEMON:\n            args.append(f'daemonize={settings.WEB_DAEMON_LOGFILE}')\n\n        # Parse command args and setup to uwsgi\n        args += [self._get_uwsgi_arg(arg) for arg in uwsgi_args]\n\n        return args\n\n    def _get_worker_options(self):\n        cmd = []\n\n        # Check that worker is enabled in settings.\n        if not getattr(settings, 'RUN_WORKER', False):\n            return cmd\n\n        # Add arguments to uwsgi cmd list.\n        cmd.append('--attach-daemon2')\n        cmd.append(f'stopsignal=15,reloadsignal=1,exec={get_celery_command()}')\n\n        return cmd\n\n    def handle(self, *uwsgi_args, **opts):\n        # pylint: disable=too-many-branches\n        super().handle(*uwsgi_args, **opts)\n\n        # Environment\n        env = os.environ.copy()\n\n        # Build default uwsgi-command options.\n        cmd = [\n            str(opts['script']),\n            f'--set-ph=program_name={settings.VST_PROJECT}',\n            f'--set-ph=lib_name={settings.VST_PROJECT_LIB}',\n            f'--set-ph=api_path={settings.API_URL}',\n            f'--set-ph=vstutils_version={settings.VSTUTILS_VERSION}',\n            f'--module={settings.UWSGI_APPLICATION}',\n        ]\n        #  Setup http addr:port.\n        addrport = opts['addrport']\n        cmd += [f'--{\"https\" if len(addrport.split(\",\")) > 1 else \"http\"}={addrport}']\n\n        # Import uwsgi-args from this command args (key=value).\n        cmd += [\n            f'--{arg}' for arg in self._get_uwsgi_args(*uwsgi_args)\n            if arg is not None\n        ]\n        # Import config from project.\n        if opts['config'] and Path(opts['config']).exists():\n            cmd += [f'--ini={opts[\"config\"]}']\n\n        # Connect static files.\n        if settings.STATIC_URL.startswith('\/'):\n            cmd += [f'--set-ph=static_url={settings.STATIC_URL}']\n            for static_path in settings.STATIC_FILES_FOLDERS:\n                if f\"{settings.STATIC_URL}={static_path}\" not in cmd:\n                    cmd += ['--static-map', f\"{settings.STATIC_URL}={static_path}\"]\n\n        if settings.MEDIA_URL.startswith('\/') and settings.MEDIA_ROOT:\n            cmd += ['--static-map', f\"{settings.MEDIA_URL}={settings.MEDIA_ROOT}\"]\n\n        if 'docs' in settings.INSTALLED_APPS and getattr(settings, 'DOCS_ACCESS', 'public') == 'public':\n            cmd += ['--static-map', f\"{settings.DOC_URL}={settings.DOCS_ROOT}\"]\n\n        # Append uwsgi configs.\n        for config_file in map(Path, settings.CONFIG_FILES):\n            option = f'--ini={str(config_file)}'\n            if config_file.exists() and config_file.suffix == '.ini' and option not in cmd:\n                cmd.append(option)\n\n        if self.uwsgi_default_config.exists():\n            cmd.append(str(self.uwsgi_default_config))\n        else:\n            self._print(f'File {str(self.uwsgi_default_config)} doesnt exists.', 'ERROR')\n\n        # Attach worker.\n        cmd += self._get_worker_options()\n\n        # Load config data from stdin.\n        cmd += ['--ini', '-']\n\n        # Check if it is run under virtualenv\n        if sys.prefix != '\/usr':\n            cmd += [f'--virtualenv={sys.prefix}']\n            if sys.prefix not in env[\"PATH\"]:\n                env['PATH'] = f'{sys.prefix}\/bin:{env[\"PATH\"]}'\n\n        # Get config from env\n        read, write = os.pipe()\n        os.write(write, os.environ.get(self._settings('CONFIG_ENV_DATA_NAME'), '').encode('utf-8'))\n        os.close(write)\n\n        # Run web server\n        try:\n            self._print('Execute: ' + ' '.join(cmd))\n            with subprocess.Popen(cmd, env=env, stdin=read) as proc:\n                try:\n                    wait(proc)\n                except BaseException as exc:\n                    proc.send_signal(signal.SIGTERM)\n                    wait(proc, 10)\n                    with raise_context():\n                        proc.kill()\n                    wait(proc)\n                    raise exc\n        except KeyboardInterrupt:\n            self._print('Exit by user...', 'WARNING')\n        except CalledProcessError as err:\n            raise self.CommandError(str(err))\n        except BaseException as err:\n            self._print(str(err), 'ERROR')\n            raise\n"},"\/vstutils\/settings.py":{"changes":[{"diff":"\n     PROJECT_DEFAULTS_CONFIG,\n     '\/etc\/vstutils\/settings.ini' if VST_PROJECT != 'test_proj' else None,\n     '\/etc\/vstutils\/settings.yml' if VST_PROJECT != 'test_proj' else None,\n-    os.path.splitext(CONFIG_FILE)[0] + '.yml' if CONFIG_FILE else None,\n     CONFIG_FILE,\n-    os.path.splitext(PROJECT_CONFIG_FILE)[0] + '.yml' if PROJECT_CONFIG_FILE else None,\n+    os.path.splitext(CONFIG_FILE)[0] + '.yml' if CONFIG_FILE else None,\n     PROJECT_CONFIG_FILE,\n-    os.path.splitext(DEV_SETTINGS_FILE)[0] + '.yml' if DEV_SETTINGS_FILE else None,\n+    os.path.splitext(PROJECT_CONFIG_FILE)[0] + '.yml' if PROJECT_CONFIG_FILE else None,\n     DEV_SETTINGS_FILE,\n+    os.path.splitext(DEV_SETTINGS_FILE)[0] + '.yml' if DEV_SETTINGS_FILE else None,\n )))\n \n ConfigBoolType = cconfig.BoolType()\n","add":3,"remove":3,"filename":"\/vstutils\/settings.py","badparts":["    os.path.splitext(CONFIG_FILE)[0] + '.yml' if CONFIG_FILE else None,","    os.path.splitext(PROJECT_CONFIG_FILE)[0] + '.yml' if PROJECT_CONFIG_FILE else None,","    os.path.splitext(DEV_SETTINGS_FILE)[0] + '.yml' if DEV_SETTINGS_FILE else None,"],"goodparts":["    os.path.splitext(CONFIG_FILE)[0] + '.yml' if CONFIG_FILE else None,","    os.path.splitext(PROJECT_CONFIG_FILE)[0] + '.yml' if PROJECT_CONFIG_FILE else None,","    os.path.splitext(DEV_SETTINGS_FILE)[0] + '.yml' if DEV_SETTINGS_FILE else None,"]}]}},"msg":"Release 5.0.0 Beta 153\n\n### BREAKING CHANGES:\n* Remove useless `raw_password` functionality.\n* Dropped support for django<3.2.\n* Old `[database]` section now is used as template for each database.\n* Old bulk view class was removed.\n* Default asgi mechanism based on channels was removed.\n* Add DB overhead to translations (over 1ms).\n* Unrequired empty fields are not included in inner data anymore.\n* Removed transaction on get methods in bulk.\n* It is required now to register custom fields using `app.fieldsResolver`.\n* Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Changed openapi schema of fields that return array of items.\n* Drop sqlalchemy dependency for rpc.\n* Delete import `.control-sidebar` from adminlte.\n* Delete import `IFrame.js`, `Fullscreen.js`, `ControlSidebar.js`, `DirectChat.js`, `ExpandableTable.js`.\n\n### Changelog:\n* Chore: better tests coverage.\n* Feature: Added MultipleFileField, MultipleImageField model fields.\n* Feature: Added MultipleFieldFile, MultipleImageFieldFile django.File wrappers.\n* Feature: Added MultipleFileDescriptor.\n* Feature: Added some_multiplefile and some_multipleimage fields to ModelWithBinaryFiles for test purposes.\n* Refactoring: Update libs versions.\n* Feature: Migrate to Django 3.2.\n* Feature: Added Vietnamese language.\n* Feature: Added Chinese language.\n* Fix actions view.\n* Allow separate models for request and response.\n* After actions display message returned from the server.\n* Redirect after actions if redirect field is used.\n* Fix: uncover useless branches.\n* Feature: Added `endpoint_schema` test method to `BaseTastCase` class which returns schema.\n* Feature: Provided passing query params to `endpoint_call` with `query` named argument.\n* Refactoring: Removed useless code from TranslateTag.\n* Use portals for rendering modal windows.\n* Fix operations translations.\n* Display custom operations in dropdown.\n* Translate fields descriptions.\n* Refactor widgets.\n* Docs: improved documentation.\n* Fix: error 'Passwords do not match.' never showed because `ValueError` raised.\n* Refactoring: removed some useless checks because because they didn't make sense.\n* Tests: add test for health check class for checking reaction on uncallable attributes.\n* Tests: add not None argument to SecurePickling class.\n* Use JSONField for user settings.\n* Add image validator messages translations.\n* Fix TFA page margins.\n* Remove multiple spaces from field title to translations work properly.\n* Inject `componentId` before create.\n* Create base mixins for components that load data from API using queryset and display it in some way.\n* Fix: fixed russian locale.\n* Refactoring: set `LANGUAGE_COOKIE_NAME` as default cookie name for language.\n* Feature: translate errors if it possible.\n* Feature: added filters to FkField (front + back)\n* Remove channels related parameters from `web.py`.\n* Upgrade `adminlte` to `3.1.0`.\n* Create model for user settings.\n* Control sidebar\n- Remove styles parameters.\n- Add language selector and dark theme button.\n* Layout\n- Put title and back button on the top bar.\n* Instances list\n- Show actions list in modal window.\n- Make rows smaller.\n* One instance\n- In read-only view do not display inputs, leave just content.\n- Add cancel button on `edit` and not `editOnly` views.\n- Allow to add custom content before and after fields.\n* Add `__slots__` where it increase performance.\n* Move `django.conf.settings` import to head.\n* Removed `vstutils.api.base.Response`.\n* Removed `_find` from BQuerySet.\n* Used `celery_app.tasks.register` instead of `register_task`.\n* Update libs.\n* Update mypy version and stubs.\n* Added frontend Quickstart.\n* Restructured frontend section of docs.\n* Added mermaid graph.\n* `CONFIG_FILES` - default tuple with all configs.\n* Add to `CONFIG_FILES` configs from `\/etc\/vstutils\/`.\n* Remove ASGI deps.\n* Optimize uwsgi routing for faster responses with static files.\n* Libs updated: configparserc, djangorestframework, django-crispy-forms.\n* Provided configure in `settings.ini` multiple databases.\n* Chore: use serializer from child for `ListSerializer` in ref_name.\n* Removing channels code.\n* Removing old bulk view.\n* Frontend: Deprecate old code and functionality.\n* Added additional symbols (`%`, `.`) for url parsing in throttling class.\n* Added handler for unrecognized url (no throttling for urls with invalid symbols).\n* Fixed indexes for Django 3.2.\n* Grouping buttons on mobile view if they dont have icons.\n* Feature: provide `_pre_filter_backends` and `_pre_permission_classes` functionality.\n* Fix: `s3_verify` type to boolean, None or path to pem-bundle.\n* Fix: migration locks race condition.\n* Fix: `vstutils.utils.Lock` race condition with sleep between key checks.\n* Feature: Deep nested views.\n* Feature: gzip openapi schema and file responses (in `FileResponseRetrieveMixin`).\n* Fix: MultipleFileField bug with empty string from db.\n* Fix: Excludes fields from filterset fields.\n* Fix: two factor enabling in GUI.\n* Feature: Display file and image fields in RelatedListField.\n* Feature: Add vstutils api models to django's admin panel.\n* Fix: operation identification (get views is always sublink).\n* Feature: Do not create nested view for deep parent if view is read-only.\n* Create nested object, array, and static value fields.\n* Fix datetime format in read-only views.\n* Upgrade some npm dependencies.\n* Add static path to frontend configuration object.\n* Apply migrations in dockerrun only if `docker.migration` is set `true`.\n* Do not group operations if the total of them is less than 3.\n* Optimize auto updates by preventing list view rerendering if instances are not changed.\n* Fix prefetching values of `FKField` if it is created by `DynamicField`.\n* Remove old test helpers from fields classes.\n* Feature: Allow to setup custom translations via DB\n* Improve response message parsing.\n* Feature: Developers can now enable `hideNotRequired` in detail page view to hide unrequired fields and allow users to select which fields they want to use.\n* Feature: \"Terms of agreement\".\n* Feature: Provide sqs support (use extra `sqs` which enable rpc too).\n* Feature: Provide caching with `Etag` and `If-None-Match`.\n* Fix: executing of prepareViewsModelsFields hook on not empty actions' models.\n* Add `getCurrentViewPath` helper to the App instance.\n* Ignore undefined jest in eslint config.\n* Fix: disposing of bootstrap modals in `beforeDestroy` hook.\n* Add headers to responses (now only `Etag` and `Location`).\n* Provide caching for models with updating signal about response (proxy models includes).\n* Fix: Field created by `DynamicField` was not hideable.\n* Fix: Watcher in `DynamicField` that was supposed to track changes in `data`, but actually did nothing.\n* Fix: Queryset's URL formatting.\n* Feature: Allow to add some text before and after the field's value.\n* Fix: custom db translations indexes.\n* Fix: S3 allowed to setup s3 as insecure by true\/false (instead of blank line).\n* Feature: provide to setup `public_address` for centrifugo.\n* Create `RedirectFieldMixin`, which adds the ability to dynamically set `operation_id` of view for redirect.\n* Fix: login page styles.\n* Fix: notify via centrifugo on append and removing nested objects.\n* Replace `croppie` with `cropperjs` for images validator modal. Now it can handle big images.\n* Use `CSRF_COOKIE_SECURE` from `settings.ini`.\n* Display new lines in `TextAreaField`.\n* Fix error when image field created without `additionalProperties`.\n* Fix failing prefetch requests.\n* Fix redirect field.\n* Edit text in quickstart, backend docs and config section.\n* Feature: improve bulk performance on get requests.\n* Fix: Etag caching.\n* Feature: Use `text` for multiple files fields (allow to save many files with long names).\n* Fix: allow to send data for update file fields without data overriding.\n* Fix: provide to show file fields as view field.\n* Fix: check on FkModelField's value for proxy models too.\n* Chore: update celery libs.\n* Fix displaying images on the list view.\n* Do not serialize data before sending.\n* Add drag and drop feature for file fields.\n* Fix representation of empty fields.\n* Fix uploading of multiple images.\n* Fix documentation build + update docs libs.\n* Fix: exclude `hidden` from all fields autoset.\n* Feature: allow to set `__all__` for detail fields.\n* Remove hook that was setting view field for user models (it was failing if model's name was changed). Also, the field was set in `vstutils` by default.\n* Fix images previews.\n* Send query params in detail view requests.\n* Do not show `non_field_errors` key on error page (show only value).\n* Enable translation of fk and choices fields' values.\n* Improve pages layout for printing.\n* Fix bug when `DynamicField` was keeping the same value even when its type was changed.\n* Make modal windows lazy (do not render content until opened).\n* Allow executing non empty actions on multiple instances.\n* Move `UserSettings` model to `models.py` and create migration.\n* Fixed file fields validations on update.\n* Allow hiding view on frontend using `x-hidden` property in operation schema.\n* Change eslint warnings to errors.\n* Completely remove inner api object field.\n* Add _translate_model attribute to BModel\n* ChoiceField and FkField use x-translate-model` from schema to get translations\n* Add ability to hide field's `title` and to override `setValue` method.\n* Add `MaskedField`.\n* Add `PhoneField`.\n* Translate text inside pills with selected filters.\n* Fixed `counter`.\n* Fixed cursor `pointer` on file input button.\n* Update Pillow to `8.3.1`.\n* Translate prepend and append texts and make them reactive.\n* Fix breadcrumbs generation.\n* Fix prop type of list modal.\n* Remove the ability to upload svg files.\n* Fix links for breadcrumbs to router back.\n* Added `DecimalField` on frontend.\n* Added `DecimalFieldInspector`.\n* Now `integer` and `float` fields is inherited from `number` field.\n* Using `SetValue` function to validate value instead 'Input type number'.\n* Added validations for `NumberField` and `IntegerField`. Now fields allow to type only correct characters.\n* Fixed `DecimalField` with empy value.\n* Added tests for `DecimalField`, `NumberField` and `IntegerField` on Frontend.\n* Display error messages for each field.\n* Refactor error handling.\n* Refactor i18n, and allow to import it.\n* Do not translate keys of `ReturnDict` in `exception_handler`.\n* Feature: set type for filters with `extra_filter` as csv array.\n* Fixed page update when path changed.\n* Feature: Setup array of valid orderings in schema.\n* Add single component for all errors.\n* Change layout of errorPage.\n* Extend Vue using prototype. Added 'utils' to `$u`. Filters now in `$u`.\n* All filters in templates replaced with functions from `$u`.\n* Some values capitalized in translations file instead of using function.\n* Fix bug when `fk autocomplete` displayed empty value instead of real one.\n* Feature: Add `__search` param for each views.\n* Feature: Generate search fields from detail view with filtarable values.\n* Fix: fix CVE for `PasswordField` in filters.\n* Fix miltiselect field initial value.\n* Revert some filters related changes.\n* Fix: do not call hooks on non openapi requests.\n* Fix: broken hooks on Swagger UI request.\n* Fix styles of select fields for dark mode.\n* Fix styles for fields with autocomplete.\n* Added search field on the top panel.\n* Added pagination to the top of the list.\n* Filters are hidden from the list if they starts with `__`.\n* Fix: Bug when `initStoreModuleComponent` was called if params was not changed.\n* Fix: invalid parameter in array for query schema params.\n* Feature: additional dependence filters.\n* Fix: invalid produces in schema for file responses.\n* Refactoring: moved code with migration attempts to base `DockerCommand`.\n* Refactoring: replace `'''` to `\"\"\"` in code.\n* Feature: Add new command `dockermigrate` for preparing database before start.\n* Fix: pylint codestyle impruvements.\n* Fix: update Etag and check it only on main actions (ignore subactions).\n* Fix: check etag on nested views.\n* Fix: calling response finalizing on nested views.\n* Docs: Add notice about nested view calls for some methods.\n* Docs: Add information about GenericViewSet and example for VSTFilterBackend.\n* Add array field and support displaying any field as array.\n* Fields can now be displayed inline.\n* Respect `x-format` while determining field's class.\n* Fix style of fields in filters modal.\n* Fix `modelValidationError` failure when non model error occurred.\n* Fix images validator to work with new schema.\n* Use media types in images validator.\n* Feature: It is required now to register custom fields using `app.fieldsResolver`.\n* Feature: Remove `GuiCustomizer`, `APIObjectField`, `FormField` and `MultiselectField`.\n* Feature: Changed openapi schema of fields that return array of items.\n* Fix: Use fields' `toInner` in filters.\n* Fix: style of header, search input, and filters' modal when dark mode enabled.\n* Fix: Hide select2 text in string array field.\n* Fix: type for query filter `id` and `id__not`.\n* Fix: jsmin in tox builds.\n* Feature: Store parameters inside queryset.\n* Feature: Add method to querysets to format path.\n* Set special \"Not found\" object when fetching of related instance is failed.\n* Fix invalid method overloading in `SingleEntityQueryset`.\n* Fix array field for numbers.\n* Changed pagination buttons display.\n* Added the ability to transfer classes.\n* Set lang cookie as session cookie domain.\n* Fix: added `request` to `send_template_email_handler`.\n* Changed error messages in code by new translations.\n* Updated CN and VN translations.\n* Add `_setFieldValue` method for model instances.\n* Do not escape page titles.\n* Fix creating queryset for edit view.\n* Fix generation of CSS classes for field groups.\n* In schema replace `additionalProperties` with `x-options`.\n* Allow use `x-collectionFormat`.\n* Allow to place block items in card tools.\n* Cache bulk responses.\n* Use for related list table same CSS classes as for usual instances table.\n* Fix infinite prefetching.\n* Fix `afterInstancesFetched` hook in `RelatedListField`.\n* Fix `IndexedDB` cache closing.\n* Feature: Provide changing proxy header name and value for ssl terminations.\n* Added logic: prefix '$' for translate context variables.\n* Changed logic 'get_render'.\n* Refactoring: use logic from GZipMiddleware in `vstutils.utils.patch_gzip_response`.\n* Fix: Provide secure ssl header name in bulk requests.\n* Fix: FKAutocompleteField and caching.\n* Feature: Add cors settings to `[web]` section.\n* Support legacy field format.\n* Handle error that can be thrown by the cache.\n* Hide top pagination on extra small devices.\n* Feature: Provide `_cache_related_labels` for update etag on related objects.\n* Fix: dark mode styles.\n* Feature: Add `<<parent_pk>>` pattern for fk dependencies patterns.\n* Fix: context in django templates without request.\n* Fix: Allow to execute custom actions methods for multiple instances.\n* Feature: Provide chunkArray helper function.\n* Add `$st` translation helper.\n* Fix main header bottom border color.\n* Fix some translations.\n* Update npm dependencies.\n* Fix fk array fetching.\n* Add card component loader.\n* Fix non-reactive content and title of popover.\n* Allow customizing some parts of `BootstrapModal`.\n* Fix undefined in translation key names.\n* Put store initialization in constructor.\n* Add default values for decimal params.\n* Fix default queryset selection.\n* Call toInner on user settings.\n* Add loader to BootstrapModal.\n* Fix: Allow to set `FkFilterHandler` for `[related_fk]__not` variants.\n* Feature: Provide declaring results as named arguments to templates.\n* Docs: Add docs about `let` in bulk requests.\n* Feature: Cachable lang view (with `ETag` header).\n* Fix: Create test which check feature with getting schema in bulk request.\n* Fix: Override default json renderer with lazy objects fix.\n* Refactoring: Removed useless commented code.\n* Refactoring: Move email tests to another test case.\n* Feature: Provide get new etag value from `set_etag_value`.\n* Fix: return actual etag value on responses.\n* Fix: allow blank values in bulk `query` parameter.\n* Fix multi actions button hidden under the bottom bar.\n* Remove style for hovering menus.\n* Fix: set default as no main action for incorrect actions in cachable views.\n* Added carousel component for images\n* Now MultipleImage readonly and list view displays as carousel.\n* Fixed MultipleImage list view.\n* `Modal` component now under bootstrap modal. Added the ability to add styles in `Modal`.\n* Feature: Allow hiding actions using x-hidden schema property on operation.\n* Fix: Apply settings on `ControlSidebar` initialization.\n* Fix: show boolean filter as boolean in schema.\n* Create `ModelFields` component for rendering models instances data.\n* Fix sidebar styles.\n* Feature: `ImageBaseSizeValidator` automatically resize image if size doesn't satisfy validator rules when server received `Auto-Resize-Image` header equal `'true'`.\n* Fix: Bug with NamedBinaryInJsonField file name with non ansii symbols.\n* Fix: notify to centifugo about proxy models.\n* Feature: Export autoupdate related components.\n* Fix: recursion in models.\n* Feature: Centrifugo notifications now can send multiple labels.\n* Feature: CSS class can be passed to ModelFields to customize appearance of fields groups.\n* Feature: Provide support for sentinel clients in cache.\n* Fix: Provide support all native types from official django cache documentation.\n* Feature: Provide functions `translate` and `lazy_translate`.\n* Fix: Rewrite some translations.\n* Fix: Create valid schema for `django_filters.ChoiceFilter`.\n* Feature: Provide `Identifiers-List-Name` header to paginator with name of attributes which will passed to `Pagination-Identifiers` header.\n* Feature: Pass `Pagination-Identifiers` to headers in bulk responses.\n* Fix: multiactions execution.\n* Fix: redirection fields.\n* Fix: Stop hiding logo on small screen.\n* Add hide button to fk and boolean fields.\n* Feature: Translate \"Not filters\".\n* Fix: redirect fields operation names starts with `_`.\n* Prevent setting same data during single instance page.\n* Fix redirect field.\n* Fix `toInner` of nested object field.\n* Feature: Provide migrate for multiple databases.\n* Feature: Auto setup enum fields for filters with ChoiceField in serializer.\n* Feature: Now we can use some translation rules only at server without sending excess translations to client.\n* Chore: Optimize translate function performance.\n* Feature: Provide using translate tag in templates without request.\n* Feature: Provide functionality to setup model in extra serializers.\n* Fix: Fixed input in fk field in modals.\n* Feature: Personal data policy endpoint.\n* Fix: manifest and icons generation between projects.\n* Fix: translations difference.\n* Chore: Update new project templates.\n* Feature: Provide inheritance for view's actions and view's methods in proxy models.\n* Feature: Provide setup celery app via os environment var `VST_CELERY_APP`.\n* Feature: Added custom scrollbar.\n* Feature: Created `NestedFkField`.\n* Fix: DeepFkDield disabling prefetch and show value on load.\n* Fix: Deeply nested lists.\n* Fix: `DeepFKField` failed when instance has no parent.\n* Feature: Allow using fields instances as dynamic field's types.\n* Feature: Provide utils function `create_view` which uses generated view logic.\n* Feature: Provide vstutils.utils.BaseEnum based enums use key as value of dict.\n* Feature: Added the ability to set arguments for the function to get custom model data.\n* Feature: Added the ability to set data for `vstutils.custom_model.ListModel` via queryset or manager.\n* Feature: Add support for django-environ (DATABASE_URL, CACHE_URL, etc).\n* Refactored model error handling to work with nested models.\n* Respecting `x-hidden` property in schema for fields hiding.\n* Providing nested object field to hide not required.\n* Generating primary keys for custom models if `AutoField` is used.\n* Fix: Do not deep copy `custom_queryset_kwargs`.\n* Fixed a bug when it was impossible to re-upload a deleted image.\n* Fixed a bug due to which when loading multiple images, only the first one was loaded.\n* Fixed validation translations.\n* Fix: Change error message from removeMany to remove.\n* Fix: Fixed elements counting after delete.\n* Fix: Added buttons to browse pages without redirect to it.\n* Feature: Escaped component data as arrow function.\n* Fix: Translate active filters value.\n* Feature: Display view field as a component for some fields on read-only FKField.\n* Fix models resolver when nonexistent model is requested.\n* Fix dynamic field label.\n* Chore: Apple devices optimization.\n* Fix: Validators for FkFields without min\/max_value.\n* Feature: Addition css classes based on fields `name` and `value` to table rows.\n* Fix: PhoneField code in ascending order.\n* Fix: table row for boolean.\n* Feature: Add `extra_view_attributes` for generated view attributes.\n* Feature: Add `create_action_serializer` method for default action executions.\n* Fix: Multiactions result messages when at least one of them rejected.\n* Fix: Added translations to user profile and controlBar.\n* Fix: Buttons row on printable view.\n* Feature: Add Vstutils-Version header to each request.\n* Fix: Docs layout.\n* Fix: Update all npm development requirments.\n* Fix: Replace node-sass with sass.\n* Feature: Add `SPA_STATIC_FILES_PROVIDERS` settings for managing spa static files.\n* Fix: Update project template.\n* Feature: Migrate to webpack 5.\n* Feature: Setup choices and boolean style classes to detail view.\n* Feature: Provide additional classes to viewsets.\n* Feature: Extend default django's `send_email` function with named args.\n* Fix: `search_fields` in meta doesn't works.\n* Fix: `create_view` override data in meta attributes.\n* Optimization: Disable useless rendering in bulk request.\n* Fix: raise_context_decorator_with_default fails on tuple returns.\n* Chore: Update python dependencies.\n* Feature: Add support for msgpack parsing and rendering in api.\n* Chore: Use msgpack in tests by argument `use_msgpack` in class test case.\n* Chore: Add logging for static_files loaders and update python-ldap lib.\n* Feature: Add environment for tests with python 3.10.\n* Fix: Update configparserc minimal version to 1.2.9.\n* DevOps: Change default image with ubuntu.\n* DevOps: Run full tox as default branch template.\n* Fix: Clear button in `DeepFK` field.\n* Fix: `replaceAll` has issues in Safari so use `replace` instead.\n* Chore: Exclude `node_modules` form `jsdoc`.\n* Fix: Put in window `baseBundlePromise` so dependent projects can await.\n* Feature: Allow passing additional mixins to the app root.\n* Feature: Add file handlers before and after validation.\n* Feature: Add `runrpc` standart command for run celery in docker separately.\n* Optimized resizing algoritm. Now algoritm complexity is `O(n)` instead of `O(n*2)`.\n* Changed resample algoritm from `ANTIALIASING` to `NEAREST` and therefore image size slightly increased, quality slightly reduced and speed very increased.\n* Created `resize_image` function for resizing to specific size.\n* Added CSS classes to elements depending on field values and actions and links types.\n* Docs for CSS classes.\n* Fix displaying of empty small box widget.\n* Hide empty card if json field is empty.\n* Support loader in small box widge.\n* Improve frontend build time while development.\n* Fixed `CompactOperation` click event.\n* Dynamic change of classes on edit view depending on field value.\n* Fix: M2M fields wont applied to deep nested views.\n* Fix: style attribute name for default buttons.\n* Fix: Configparserc raised on uwsgi valid syntax.\n* Fix: Support of email confirmation (settings.SEND_CONFIRMATION_EMAIL).\n* Fix: now `SingletonDatabaseScheduler` prevents executing overdued tasks.\n* Fix: Registration uid errors reporting.\n* Fix: centrifugo BaseModel notifications.\n* Fix: coreschema fails import.\n* Fix: Remove unnecessary fields attrs in registration form.\n* Fix: email confirmation URL generation.\n* Feature: Add db tablespace settings configurable.\n* Fix: `DeepViewFilterBackend` works correctly with nested models.\n* Fix: Allow to set model instance as value to FkModelField.\n* Fix: Serializer class name is not work on `create_view`.\n* Fix: Deep nested logic logic moved to BQuerySet as `get_children` method.\n* Feature: Added `get_parents` method.\n* Fix: Allow to notify about update models with uuid primary keys.\n* Fix: \u0421hanged incoming filtered field value to lower case.\n* Feature: Add django templates tag for rendering bootstrap forms.\n* Make tables in `RelatedListField` responsive.\n* Fix conversion to json in DynamicJsonTypeField.\n* Fix editing in deep nested views.\n* Added `require_confirmation` param for `subaction` that sets whether the action must be confirmed before being executed.\n* Fix: Pagination on deep nested view.\n* Fix: Cache data using local storage instead of IndexedDB.\n* Fix: Set model property in DynamicField.\n* Feature: Provide `uniq` meta attribute for task classes.\n* Refactoring: Move code with notifications to task's meta class.\n* Fix: Inheritance of `TaskClass.run()` can send duplicates about updates.\n* Fix: Add lang code to etag.\n* Feature: Dynamicly set centrifugo public host.\n* Feature: Provide new api field - CSVFileField.\n* Feature: Provide setup celery arguments for `runrpc` command.\n* Feature: Provide setup `-Ofair` for celery worker arguments.\n* Fix: View action shows `object has no attribute` on get serializer class.\n* Fix: Hide fields selector on readonly.\n* Disable centrifugo in tests.\n* Feature: Provide set db select optimizations for other actions.\n* Fix: Add commas in russian translation.\n* Fix: Correct misspellings in russian translation.\n* Feature: Added read only mixin for  `CSVFileField`.\n* Refactoring: Cut one file to three for `CSVFileField`.\n* Feature: Provide download in csv field.\n* Feature: Provide disable etag-caching by method.\n* Feature: Create WYSIWYGField displays as editor on frontend and stores data in markdown.\n* Fix: CVE-2022-29217 - Key confusion through non-blocklisted public key formats.\n* Feature: Create uri and uuid fields on frontend.\n* Fix: Couldnt rewrite `schema_properties_groups` in `create_view()`.\n* Fix: Add translations to help text in filters.\n* Fix: Add translations to filter titles.\n* Fix: Create `_translate_search_help_text` in `vstutils\/models\/base.py`.\n* Chore: Add uri field to `NOT_INLINE_FIELDS`\n* Fix: Filter on CharField's in `FkFilterHandler` when uses generated view.\n* Feature: Provide truly `.only()` for custom models (without db).\n* Fix: Use `reverse()` for `.last()` in custom models.\n* Optimization: Use `next()` for `first()` and `last()` in custom models.\n* Fix: Infinite loading after registration confirmation.\n* Feature: Provide wrapper function for users queryset in auth backend.\n* Fix: deep nested with RawSQL.\n* Feature: Migrate to `.defer()` optimization instead of `.values()`.\n* Fix: Normalize fields in custom models as db types.\n* Feature: Provide truly `.defer()` for custom models (without db).\n* Feature: Add notificator to request.\n* Fix: Dont prefetch if already prefetched.\n* Feature: Provide openapi hooks in `generate_schema` command.\n* Feature: Provide dependencies support for test databases.\n* Optimization: Speedup endpoint bulk calls with orjson.\n* Fix: CVE-2022-34265\n* Fix: Now request data s not converted to string.\n* Feature: Add ways to close ControlSidebar.\n* Feature: Add new modal, when ControlSidebar is closed.\n* Feature: Save previous settings state.\n* Feature: Create `ControlSidebarButton`.\n* Feature: Create possibility add new buttons to ControlSidebar.\n* Feature: Provide enabling user's self-removing via config.\n* Fix: Displaying of modals on devices with the notch by adding top and bottom paddings.\n* Fix\/Feature: Provide filtering with `contains` in custom models.\n* Fix: Hide operations dropdown if all buttons inside are hidden.\n* Fix: Remove link from toggle control sidebar button.\n* Feature: Provide changing subactions and sublinks with signals.\n* Feature: Provide customization of csv parsing options using `parser_options` property of `CSVFileField`.\n* Fix: Usage of `CSVFileField` with `\"`, new lines and delimiters in cells' content.\n* Feature: Add support for selecting MIME-types for FileInString-like fields.\n* Chore: Enable build optimization for python 3.10 with cython.\n* Change styles of file selectors in binary and csv fields.\n* Feature: Provide set extensions validators for `NamedBinaryFileInJSONField` types.\n* Feature: Add filterSublinks, filterActions signals to ListTableRow per item.\n* Feature: Provided setup db params through env vars for each connections.\n* Fix: The request time for each connection is counted.\n* Feature: Create a reusable  ConfirmModal component.\n* Fix: Make a CSV-table always visible.\n* Fix: Change BootstrapModal to ConfirmModal in ControlSidebar, AppRoot and CSVFileFieldEdit.\n* Fix: Support `DATABASE_URL` and `CACHE_URL` in docker commands.\n* Fix: Make yaml configs as priority.\n* Feature: Support yml as uwsgi configs.\n\nParsed bundle size: 4.68 MB\n\n### TODO:\n* Optimize bundle size."}},"https:\/\/github.com\/InScience\/DAMIS-old":{"c97045b47ad90090da3b191594263daec648104a":{"url":"https:\/\/api.github.com\/repos\/InScience\/DAMIS-old\/commits\/c97045b47ad90090da3b191594263daec648104a","html_url":"https:\/\/github.com\/InScience\/DAMIS-old\/commit\/c97045b47ad90090da3b191594263daec648104a","message":"Fix redirect url after succesfull experiment execution.","sha":"c97045b47ad90090da3b191594263daec648104a","keyword":"execution after redirect fix","diff":"diff --git a\/src\/damis\/views.py b\/src\/damis\/views.py\nindex 85bcc98..10698d1 100644\n--- a\/src\/damis\/views.py\n+++ b\/src\/damis\/views.py\n@@ -412,7 +412,7 @@ def form_valid(self, experiment_form, task_formset):\n         # response.wait()\n         # response.communicate()\n \n-        return HttpResponseRedirect(reverse_lazy('experiment-list'))\n+        return HttpResponse(reverse_lazy('experiment-list'))\n \n     def form_invalid(self, experiment_form, task_formset):\n         return render_to_response('damis\/_experiment_form.html',\n","files":{"\/src\/damis\/views.py":{"changes":[{"diff":"\n         # response.wait()\n         # response.communicate()\n \n-        return HttpResponseRedirect(reverse_lazy('experiment-list'))\n+        return HttpResponse(reverse_lazy('experiment-list'))\n \n     def form_invalid(self, experiment_form, task_formset):\n         return render_to_response('damis\/_experiment_form.html',\n","add":1,"remove":1,"filename":"\/src\/damis\/views.py","badparts":["        return HttpResponseRedirect(reverse_lazy('experiment-list'))"],"goodparts":["        return HttpResponse(reverse_lazy('experiment-list'))"]}],"source":"\n\nimport json import re from os.path import join, exists, getsize, splitext from os import makedirs, listdir from subprocess import call, Popen, PIPE from collections import OrderedDict from django.conf import settings from django.core.urlresolvers import reverse_lazy from django.core.context_processors import csrf from django.contrib.auth import login, logout, authenticate from django.contrib.auth.decorators import login_required from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User from django.db.models import Q from django.shortcuts import render, get_object_or_404, render_to_response from django.http import HttpResponseRedirect, HttpResponse from django.template.loader import render_to_string from django.utils.decorators import method_decorator from django.utils.translation import ugettext_lazy as _ from django.forms.models import modelformset_factory from django.forms.models import inlineformset_factory from django.views.generic import CreateView, UpdateView, DeleteView, ListView, DetailView from django.core.context_processors import csrf from damis.settings import BUILDOUT_DIR from damis.constants import COMPONENT_TITLE__TO__FORM_URL from damis.utils import slugify from damis.forms import LoginForm, RegistrationForm from damis.forms import DatasetForm from damis.forms import ComponentForm from damis.forms import ParameterForm, ParameterFormset from damis.forms import ExperimentForm from damis.forms import WorkflowTaskFormset, CreateExperimentFormset, ParameterValueFormset, ParameterValueForm from damis.forms import DatasetSelectForm from damis.forms import UserUpdateForm from damis.forms import VALIDATOR_FIELDS from damis.models import Component from damis.models import Cluster from damis.models import Connection from damis.models import Parameter, ParameterValue from damis.models import Dataset from damis.models import Experiment from damis.models import WorkflowTask class LoginRequiredMixin(object): @method_decorator(login_required(login_url=reverse_lazy('login'))) def dispatch(self, *args, **kwargs): return super(LoginRequiredMixin, self).dispatch(*args, **kwargs) class SuperUserRequiredMixin(object): @method_decorator(login_required(login_url=reverse_lazy('login'))) def dispatch(self, *args, **kwargs): user=self.request.user if not user.is_superuser: return HttpResponseRedirect(reverse_lazy('login')) return super(SuperUserRequiredMixin, self).dispatch(*args, **kwargs) class ListDeleteMixin(object): success_url=reverse_lazy('home') def get_context_data(self, **kwargs): context=super(ListDeleteMixin, self).get_context_data(**kwargs) context['request']=self.request return context def post(self, request, *args, **kwargs): action=request.POST.get('action') if action=='delete': for pk in request.POST.getlist('pk'): obj=self.model.objects.get(pk=pk) obj.delete() return HttpResponseRedirect(self.success_url) def index_view(request): return HttpResponseRedirect(reverse_lazy('experiment-new')) def static_page_view(request, template): return render(request, template,{}) class DatasetCreate(LoginRequiredMixin, CreateView): model=Dataset template_name='damis\/dataset_new.html' form_class=DatasetForm def form_valid(self, form): form.instance.slug=slugify(form.instance.title) return super(DatasetCreate, self).form_valid(form) class DatasetList(ListDeleteMixin, LoginRequiredMixin, ListView): model=Dataset paginate_by=50 template_name='damis\/dataset_list.html' success_url=reverse_lazy('dataset-list') def get_queryset(self): qs=super(DatasetList, self).get_queryset() return qs.order_by('-created') class DatasetUpdate(LoginRequiredMixin, UpdateView): model=Dataset form_class=DatasetForm class DatasetDetail(LoginRequiredMixin, DetailView): model=Dataset class DatasetDelete(LoginRequiredMixin, DeleteView): model=Dataset success_url=reverse_lazy('dataset-list') def dataset_download_view(request, pk, file_format): dataset=Dataset.objects.get(pk=pk) file=dataset.file response=HttpResponse(mimetype='text\/csv') response['Content-Disposition']='attachment; filename=%s.csv' %(file,) response.write(file.read()) return response class ComponentCreate(LoginRequiredMixin, CreateView): model=Component form_class=ComponentForm template_name='damis\/algorithm_form.html' def get(self, request, *args, **kwargs): self.object=None form_class=self.get_form_class() form=self.get_form(form_class) parameter_form= ParameterFormset() return self.render_to_response( self.get_context_data(form=form, parameter_form=parameter_form)) def post(self, request, *args, **kwargs): self.object=None form_class=self.get_form_class() form=self.get_form(form_class) parameter_form=ParameterFormset(self.request.POST) if form.is_valid() and parameter_form.is_valid(): return self.form_valid(form, parameter_form) else: return self.form_invalid(form, parameter_form) def form_valid(self, form, parameter_form): self.object=form.save() parameter_form.instance=self.object parameter_form.save() return HttpResponseRedirect(self.get_success_url()) def form_invalid(self, form, parameter_form): return self.render_to_response(self.get_context_data(form=form, parameter_form=parameter_form)) class ComponentList(ListDeleteMixin, LoginRequiredMixin, ListView): model=Component template_name='damis\/algorithm_list.html' paginate_by=30 success_url=reverse_lazy('algorithm-list') class UserList(ListDeleteMixin, SuperUserRequiredMixin, ListView): model=User template_name='damis\/user_list.html' paginate_by=30 success_url=reverse_lazy('user-list') class UserUpdate(LoginRequiredMixin, UpdateView): model=User form_class=UserUpdateForm template_name='damis\/user_update.html' def get_success_url(self): return reverse_lazy('user-list') class ComponentUpdate(LoginRequiredMixin, UpdateView): model=Component form_class=ComponentForm template_name='damis\/algorithm_form.html' def post(self, request, *args, **kwargs): self.object=Component.objects.get(pk=self.kwargs['pk']) form_class=self.get_form_class() form=self.get_form(form_class) parameter_form=ParameterFormset(self.request.POST, instance=self.object) if form.is_valid() and parameter_form.is_valid(): return self.form_valid(form, parameter_form) else: return self.form_invalid(form, parameter_form) def form_valid(self, form, parameter_form): self.object=form.save() parameter_form.instance=self.object parameter_form.save() return HttpResponseRedirect(self.get_success_url()) def form_invalid(self, form, parameter_form): return self.render_to_response(self.get_context_data(form=form, parameter_form=parameter_form)) def get_context_data(self, **kwargs): context=super(ComponentUpdate, self).get_context_data(**kwargs) ParameterFormset=inlineformset_factory(Component, Parameter, extra=0, can_delete=True) context['parameter_form']=ParameterFormset(instance=self.object) return context class ComponentDetail(LoginRequiredMixin, DetailView): model=Component class ComponentDelete(LoginRequiredMixin, DeleteView): model=Component success_url=reverse_lazy('algorithm-list') class ExperimentList(ListDeleteMixin, LoginRequiredMixin, ListView): model=Experiment paginate_by=10 success_url=reverse_lazy('experiment-list') def get_queryset(self): qs=super(ExperimentList, self).get_queryset() return qs.order_by('-created') class ExperimentDetail(LoginRequiredMixin, DetailView): model=Experiment class ExperimentDelete(LoginRequiredMixin, DeleteView): model=Experiment success_url=reverse_lazy('experiment-list') class ExperimentUpdate(LoginRequiredMixin, UpdateView): model=Experiment def get(self, request, *args, **kwargs): self.object=None experiment=get_object_or_404(Experiment, pk=self.kwargs['pk']) task_formset=WorkflowTaskFormset(instance=experiment) return self.render_to_response(self.get_context_data( experiment=task_formset.instance, task_formset=task_formset, )) def post(self, request, *args, **kwargs): self.object=None instance=Experiment.objects.get(pk=self.kwargs['pk']) task_formset=WorkflowTaskFormset(self.request.POST, instance=instance) if task_formset.is_valid(): return self.form_valid(task_formset) else: return self.form_invalid(task_formset) def form_valid(self, task_formset): self.object=task_formset.save_all() return HttpResponseRedirect(reverse_lazy('experiment-list')) def form_invalid(self, task_formset): return self.render_to_response(self.get_context_data( experiment=task_formset.instance, task_formset=task_formset, )) class ExperimentCreate(LoginRequiredMixin, CreateView): model=Experiment template_name='damis\/experiment_create.html' def get(self, request, *args, **kwargs): self.object=None experiment_pk=self.kwargs.get('pk') if experiment_pk: experiment=Experiment.objects.get(pk=experiment_pk) else: experiment=Experiment() experiment_form=ExperimentForm(instance=experiment) task_formset=CreateExperimentFormset(instance=experiment) form_count=len(task_formset.forms) task_formset.forms.insert(0, task_formset.forms.pop(form_count -1)) return self.render_to_response(self.get_context_data( experiment=task_formset.instance, task_formset=task_formset, experiment_form=experiment_form, )) def get_context_data(self, **kwargs): context=super(ExperimentCreate, self).get_context_data(**kwargs) context['dataset_form']=DatasetSelectForm() context.update(csrf(self.request)) algorithms=Component.objects.all() clusters=dict() for algorithm in algorithms: if not algorithm.cluster in clusters: clusters[algorithm.cluster]=dict() cat_name=algorithm.get_category_display() if not cat_name in clusters[algorithm.cluster]: clusters[algorithm.cluster][cat_name]=[] clusters[algorithm.cluster][cat_name].append(algorithm) all_clusters=Cluster.objects.all() sorted_clusters=[] for cluster in all_clusters: b=[] for cat, cat_name in Component.CATEGORIES: if cluster in clusters and cat_name in clusters[cluster]: b.append([cat_name, clusters[cluster][cat_name]]); a=[cluster, b] sorted_clusters.append(a); context['clusters']=sorted_clusters context['component_form_urls']=COMPONENT_TITLE__TO__FORM_URL.items() context['component_details']=[[c.pk,{\"title\": c.title, \"label\": c.get_label_display()}] for c in Component.objects.all()] return context def skip_validation(self, experiment_form, task_formset): experiment_form.full_clean() exp_data=experiment_form.cleaned_data exp_data.pop('skip_validation') if experiment_form.instance and experiment_form.instance.pk: exp=experiment_form.instance experiment_form.save() else: exp=Experiment.objects.create(**exp_data) task_formset.full_clean() sources={} for task_form in task_formset.forms: data=task_form.cleaned_data data['experiment']=exp if data.get('algorithm'): task=data.get('id') if not task: task=WorkflowTask.objects.create(**data) pv_formset=task_form.parameter_values[0] pv_formset.instance=task pv_formset.full_clean() for pv_form in pv_formset.forms: data={} data['parameter']=pv_form.cleaned_data.get('parameter') data['value']=pv_form.cleaned_data.get('value') data['task']=task pv_form_prefix=pv_form.prefix pv_instance=pv_form.cleaned_data.get('id') if not pv_instance: pv_instance=ParameterValue.objects.create(**data) else: pv_form.save() pv_form.instance=pv_instance sources[pv_form_prefix]=pv_form.instance for task_form in task_formset.forms: for pv_form in task_form.parameter_values[0].forms: source_ref=pv_form.cleaned_data['source_ref'] if source_ref: source_ref=source_ref.split('-value')[0] source=sources[source_ref] target=pv_form.instance exist=Connection.objects.filter(target=target, source=source) if not exist: Connection.objects.create(target=target, source=source) return HttpResponse(reverse_lazy('experiment-update', kwargs={'pk': exp.pk})) def post(self, request, *args, **kwargs): self.object=None experiment_pk=self.kwargs.get('pk') if experiment_pk: experiment=Experiment.objects.get(pk=experiment_pk) else: experiment=Experiment() experiment_form=ExperimentForm(self.request.POST, instance=experiment) task_formset=CreateExperimentFormset(self.request.POST, instance=experiment) if self.request.POST.get('skip_validation'): return self.skip_validation(experiment_form, task_formset) if experiment_form.is_valid() and task_formset.is_valid(): return self.form_valid(experiment_form, task_formset) else: return self.form_invalid(experiment_form, task_formset) def form_valid(self, experiment_form, task_formset): exp=experiment_form.save() self.object=task_formset.save_all(experiment=exp) command='bin\/python %s\/src\/damis\/run_experiment.py %s' %(BUILDOUT_DIR, exp.pk) response=Popen(command, shell=True, stdout=PIPE, stderr=PIPE) return HttpResponseRedirect(reverse_lazy('experiment-list')) def form_invalid(self, experiment_form, task_formset): return render_to_response('damis\/_experiment_form.html', self.get_context_data( experiment=task_formset.instance, task_formset=task_formset, experiment_form=experiment_form, )) def gen_parameter_prefixes(request): prefixes=request.GET.getlist('prefixes[]') task_ids=request.GET.getlist('taskIds[]') task_prefixes=[re.findall('(tasks-\\d+)', prefix)[0] for prefix in prefixes] pv_prefixes=[] for task_id, task_prefix in zip(task_ids, task_prefixes): if task_id and task_id !='-': pv_prefixes.append('PV_PK%s' %(task_id,)) else: pv_prefixes.append('PV_%s' %(str(hash(task_prefix)),)) return HttpResponse(\",\".join(pv_prefixes)) def algorithm_parameter_form(request): algorithm=get_object_or_404(Component, pk=request.GET.get('algorithm_id')) task_form_prefix=re.findall('[id_]*(\\w+-\\d+)', request.GET.get('prefix'))[0] prefix='PV_%s' % hash(task_form_prefix) val_params=algorithm.parameters.filter(Q(connection_type=\"INPUT_VALUE\")|Q(connection_type=\"INPUT_CONNECTION\")|Q(connection_type=\"OUTPUT_CONNECTION\")) ParameterValueFormset=inlineformset_factory(WorkflowTask, ParameterValue, form=ParameterValueForm, extra=len(val_params), can_delete=False ) parameter_formset=ParameterValueFormset(instance=None, prefix=prefix) for parameter, form in zip(val_params, parameter_formset.forms): field_class=VALIDATOR_FIELDS[parameter.type]['class'] field_attrs=VALIDATOR_FIELDS[parameter.type]['attrs'] form.fields['value']=field_class(**field_attrs) form.fields['value'].label=str(parameter) form.initial.update({'parameter': parameter}) return render_to_response('dynamic\/parameter_formset.html',{ 'formset': parameter_formset, }) def upload_file_form_view(request): context=csrf(request) if request.method=='POST': form=DatasetForm(request.POST, request.FILES) if form.is_valid(): dataset=form.save() context['file_path']=dataset.file.url else: form=DatasetForm() context['form']=form return render_to_response('damis\/_dataset_form.html', context) def existing_file_form_view(request): return HttpResponse(_('Not implemented, yet')) def midas_file_form_view(request): return HttpResponse(_('Not implemented, yet')) def select_features_form_view(request): return HttpResponse(_('Not implemented, yet')) def file_to_table(file_url): f=open(BUILDOUT_DIR +'\/var\/www' +file_url) file_table=[] for line in f: file_table.append([cell for cell in line.split(\",\")]) f.close() return file_table def convert(file_path, file_format): '''Opens, converts file to specified format and returns it.''' f=open(BUILDOUT_DIR +'\/var\/www' +file_path) return f def technical_details_form_view(request): '''Handles Ajax GET request to update the technical details component. request -Ajax GET request. Fields: pv_name -OUTPUT_CONNECTION parameter form input name; used to track down the task, output of which should be rendered by the technical details component dataset_url -url of the data file, which is to be rendered ty the technical details component download -if True return a downloadable file, else return HTML format -file format ''' pv_name=request.GET.get('pv_name') dataset_url=request.GET.get('dataset_url'); context={} if re.findall('PV_\\d+-\\d+-value', pv_name): if(dataset_url): if request.GET.get('download'): file_format=request.GET.get('format') response=HttpResponse(mimetype='text\/html') response['Content-Disposition']='attachment; filename=%s.%s' %(\"rez\", file_format) converted_file=convert(dataset_url, file_format=file_format) response.write(converted_file.read()) return response context['file']=file_to_table(dataset_url) return render_to_response('damis\/_technical_details.html', context) else: return HttpResponse(_('You have to execute this experiment first to see the result.')) else: task_pk=re.findall('PV_PK(\\d+)-\\d+-value', pv_name)[0] task=WorkflowTask.objects.get(pk=task_pk) params=task.parameter_values.filter(parameter__connection_type=\"OUTPUT_VALUE\") context['values']=params file_params=task.parameter_values.filter(parameter__connection_type='OUTPUT_CONNECTION') file_table=None file_path=None if len(file_params) and file_params[0].value: file_path=file_params[0].value file_table=file_to_table(file_path) if request.GET.get('download'): file_format=request.GET.get('format') response=HttpResponse(mimetype='text\/html') response['Content-Disposition']='attachment; filename=%s.%s' %(\"rez\", file_format) if file_path: converted_file=convert(file_path, file_format=file_format) else: return HttpResponse(_('There is no file to download.')) response.write(converted_file.read()) return response context['file']=file_table if not params and not file_table: return HttpResponse(_('You have to execute this experiment first to see the result.')) return render_to_response('damis\/_technical_details.html', context) def read_classified_data(file_url): f=open(BUILDOUT_DIR +'\/var\/www' +file_url) clsCol=-1 result=OrderedDict() minX=None; maxX=None minY=None; maxY=None for line in f: cells=line.rstrip().split(\",\") cls=cells[clsCol] if not cls in result: result[cls]=[] result[cls].append([cells[0], cells[1]]) if minX is None or float(cells[0]) < minX: minX=float(cells[0]) if maxX is None or float(cells[0]) > maxX: maxX=float(cells[0]) if minY is None or float(cells[1]) < minY: minY=float(cells[1]) if maxY is None or float(cells[1]) > maxY: maxY=float(cells[1]) f.close() result=[{\"group\": cls, \"data\": data} for cls, data in result.items()] return{\"data\": result, \"minX\": minX, \"maxX\": maxX, \"minY\": minY, \"maxY\": maxY} def chart_form_view(request): pv_name=request.GET.get('pv_name') dataset_url=request.GET.get('dataset_url'); if re.findall('PV_\\d+-\\d+-value', pv_name): if(dataset_url): content=read_classified_data(dataset_url) resp={\"status\": \"SUCCESS\", \"content\": content} return HttpResponse(json.dumps(resp), content_type=\"application\/json\") else: resp={\"status\": \"ERROR\", \"message\": unicode(_('You have to execute this experiment first to see the result.'))} return HttpResponse(json.dumps(resp), content_type=\"application\/json\") else: task_pk=re.findall('PV_PK(\\d+)-\\d+-value', pv_name)[0] task=WorkflowTask.objects.get(pk=task_pk) file_params=task.parameter_values.filter(parameter__connection_type='OUTPUT_CONNECTION') if not file_params: resp={\"status\": \"ERROR\", \"message\": unicode(_('You have to execute this experiment first to see the result.'))} return HttpResponse(json.dumps(resp), content_type=\"applicatioin\/json\") content=read_classified_data(dataset_url) resp={\"status\": \"SUCCESS\", \"content\": content} return HttpResponse(json.dumps(resp), content_type=\"application\/json\") def register_view(request): form=RegistrationForm() if request.method=='POST': form=RegistrationForm(request.POST) if form.is_valid(): username=form.cleaned_data.get('username') password=form.cleaned_data.get('password') user=form.save() user=authenticate(username=username, password=password) if user is not None and user.is_active: login(request, user) return HttpResponseRedirect(reverse_lazy('home')) return render(request, 'accounts\/register.html',{ 'form': form, }) def login_view(request): if request.method=='POST': form=LoginForm(request.POST) if form.is_valid(): user=form.cleaned_data['user'] if user is not None and user.is_active: login(request, user) return HttpResponseRedirect(reverse_lazy('home')) else: form=LoginForm() return render(request, 'accounts\/login.html',{ 'form': form, }) def logout_view(request): logout(request) request.session.clear() return HttpResponseRedirect('\/login\/') def profile_settings_view(request): pass def reset_password_view(request): pass ","sourceWithComments":"#! coding: utf-8\nimport json\nimport re\nfrom os.path import join, exists, getsize, splitext\nfrom os import makedirs, listdir\nfrom subprocess import call, Popen, PIPE\n\nfrom collections import OrderedDict\n\nfrom django.conf import settings\nfrom django.core.urlresolvers import reverse_lazy\nfrom django.core.context_processors import csrf\nfrom django.contrib.auth import login, logout, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\nfrom django.db.models import Q\nfrom django.shortcuts import render, get_object_or_404, render_to_response\nfrom django.http import HttpResponseRedirect, HttpResponse\nfrom django.template.loader import render_to_string\nfrom django.utils.decorators import method_decorator\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.forms.models import modelformset_factory\nfrom django.forms.models import inlineformset_factory\nfrom django.views.generic import CreateView, UpdateView, DeleteView, ListView, DetailView\nfrom django.core.context_processors import csrf\n\nfrom damis.settings import BUILDOUT_DIR\nfrom damis.constants import COMPONENT_TITLE__TO__FORM_URL\nfrom damis.utils import slugify\n\nfrom damis.forms import LoginForm, RegistrationForm\nfrom damis.forms import DatasetForm\nfrom damis.forms import ComponentForm\nfrom damis.forms import ParameterForm, ParameterFormset\nfrom damis.forms import ExperimentForm\nfrom damis.forms import WorkflowTaskFormset, CreateExperimentFormset, ParameterValueFormset, ParameterValueForm\nfrom damis.forms import DatasetSelectForm\nfrom damis.forms import UserUpdateForm\nfrom damis.forms import VALIDATOR_FIELDS\n\nfrom damis.models import Component\nfrom damis.models import Cluster\nfrom damis.models import Connection\nfrom damis.models import Parameter, ParameterValue\nfrom damis.models import Dataset\nfrom damis.models import Experiment\nfrom damis.models import WorkflowTask\n\n\nclass LoginRequiredMixin(object):\n    @method_decorator(login_required(login_url=reverse_lazy('login')))\n    def dispatch(self, *args, **kwargs):\n        return super(LoginRequiredMixin, self).dispatch(*args, **kwargs)\n\nclass SuperUserRequiredMixin(object):\n    @method_decorator(login_required(login_url=reverse_lazy('login')))\n    def dispatch(self, *args, **kwargs):\n        user = self.request.user\n        if not user.is_superuser:\n            return HttpResponseRedirect(reverse_lazy('login'))\n        return super(SuperUserRequiredMixin, self).dispatch(*args, **kwargs)\n\nclass ListDeleteMixin(object):\n    success_url = reverse_lazy('home')\n\n    def get_context_data(self, **kwargs):\n        context = super(ListDeleteMixin, self).get_context_data(**kwargs)\n        context['request'] = self.request\n        return context\n\n    def post(self, request, *args, **kwargs):\n        action = request.POST.get('action')\n        if action == 'delete':\n            for pk in request.POST.getlist('pk'):\n                obj = self.model.objects.get(pk=pk)\n                obj.delete()\n        return HttpResponseRedirect(self.success_url)\n\ndef index_view(request):\n    return HttpResponseRedirect(reverse_lazy('experiment-new'))\n\ndef static_page_view(request, template):\n    return render(request, template, {})\n\nclass DatasetCreate(LoginRequiredMixin, CreateView):\n    model = Dataset\n    template_name = 'damis\/dataset_new.html'\n    form_class = DatasetForm\n\n    def form_valid(self, form):\n        form.instance.slug = slugify(form.instance.title)\n        return super(DatasetCreate, self).form_valid(form)\n\n\nclass DatasetList(ListDeleteMixin, LoginRequiredMixin, ListView):\n    model = Dataset\n    paginate_by = 50\n    template_name = 'damis\/dataset_list.html'\n    success_url = reverse_lazy('dataset-list')\n\n    def get_queryset(self):\n        qs = super(DatasetList, self).get_queryset()\n        return qs.order_by('-created')\n\n\nclass DatasetUpdate(LoginRequiredMixin, UpdateView):\n    model = Dataset\n    form_class = DatasetForm\n\nclass DatasetDetail(LoginRequiredMixin, DetailView):\n    model = Dataset\n\nclass DatasetDelete(LoginRequiredMixin, DeleteView):\n    model = Dataset\n    success_url = reverse_lazy('dataset-list')\n\ndef dataset_download_view(request, pk, file_format):\n    dataset = Dataset.objects.get(pk=pk)\n    file = dataset.file\n    response = HttpResponse(mimetype='text\/csv')\n    response['Content-Disposition'] = 'attachment; filename=%s.csv' % (file,)\n    response.write(file.read())\n    return response\n\n\nclass ComponentCreate(LoginRequiredMixin, CreateView):\n    model = Component\n    form_class = ComponentForm\n    template_name = 'damis\/algorithm_form.html'\n\n    def get(self, request, *args, **kwargs):\n        self.object = None\n        form_class = self.get_form_class()\n        form = self.get_form(form_class)\n        parameter_form =  ParameterFormset()\n        return self.render_to_response(\n                self.get_context_data(form=form,\n                    parameter_form=parameter_form))\n\n    def post(self, request, *args, **kwargs):\n        self.object = None\n        form_class = self.get_form_class()\n        form = self.get_form(form_class)\n        parameter_form = ParameterFormset(self.request.POST)\n        if form.is_valid() and parameter_form.is_valid():\n            return self.form_valid(form, parameter_form)\n        else:\n            return self.form_invalid(form, parameter_form)\n\n    def form_valid(self, form, parameter_form):\n        self.object = form.save()\n        parameter_form.instance = self.object\n        parameter_form.save()\n        return HttpResponseRedirect(self.get_success_url())\n\n    def form_invalid(self, form, parameter_form):\n        return self.render_to_response(self.get_context_data(form=form,\n            parameter_form=parameter_form))\n\n\nclass ComponentList(ListDeleteMixin, LoginRequiredMixin, ListView):\n    model = Component\n    template_name = 'damis\/algorithm_list.html'\n    paginate_by = 30\n    success_url = reverse_lazy('algorithm-list')\n\n\nclass UserList(ListDeleteMixin, SuperUserRequiredMixin, ListView):\n    model = User\n    template_name = 'damis\/user_list.html'\n    paginate_by = 30\n    success_url = reverse_lazy('user-list')\n\nclass UserUpdate(LoginRequiredMixin, UpdateView):\n    model = User\n    form_class = UserUpdateForm\n    template_name = 'damis\/user_update.html'\n\n    def get_success_url(self):\n        return reverse_lazy('user-list')\n\n\nclass ComponentUpdate(LoginRequiredMixin, UpdateView):\n    model = Component\n    form_class = ComponentForm\n    template_name = 'damis\/algorithm_form.html'\n\n    def post(self, request, *args, **kwargs):\n        self.object = Component.objects.get(pk=self.kwargs['pk'])\n        form_class = self.get_form_class()\n        form = self.get_form(form_class)\n        parameter_form = ParameterFormset(self.request.POST, instance=self.object)\n        if form.is_valid() and parameter_form.is_valid():\n            return self.form_valid(form, parameter_form)\n        else:\n            return self.form_invalid(form, parameter_form)\n\n    def form_valid(self, form, parameter_form):\n        self.object = form.save()\n        parameter_form.instance = self.object\n        parameter_form.save()\n        return HttpResponseRedirect(self.get_success_url())\n\n    def form_invalid(self, form, parameter_form):\n        return self.render_to_response(self.get_context_data(form=form,\n            parameter_form=parameter_form))\n\n    def get_context_data(self, **kwargs):\n        context = super(ComponentUpdate, self).get_context_data(**kwargs)\n        ParameterFormset = inlineformset_factory(Component, Parameter, extra=0, can_delete=True)\n        context['parameter_form'] = ParameterFormset(instance=self.object)\n        return context\n\nclass ComponentDetail(LoginRequiredMixin, DetailView):\n    model = Component\n\nclass ComponentDelete(LoginRequiredMixin, DeleteView):\n    model = Component\n    success_url = reverse_lazy('algorithm-list')\n\n\nclass ExperimentList(ListDeleteMixin, LoginRequiredMixin, ListView):\n    model = Experiment\n    paginate_by = 10\n    success_url = reverse_lazy('experiment-list')\n\n    def get_queryset(self):\n        qs = super(ExperimentList, self).get_queryset()\n        return qs.order_by('-created')\n\n\nclass ExperimentDetail(LoginRequiredMixin, DetailView):\n    model = Experiment\n\nclass ExperimentDelete(LoginRequiredMixin, DeleteView):\n    model = Experiment\n    success_url = reverse_lazy('experiment-list')\n\nclass ExperimentUpdate(LoginRequiredMixin, UpdateView):\n    model = Experiment\n\n    def get(self, request, *args, **kwargs):\n        self.object = None\n        experiment = get_object_or_404(Experiment, pk=self.kwargs['pk'])\n        task_formset = WorkflowTaskFormset(instance=experiment)\n        return self.render_to_response(self.get_context_data(\n                    experiment=task_formset.instance,\n                    task_formset=task_formset,\n                ))\n\n    def post(self, request, *args, **kwargs):\n        self.object = None\n        instance = Experiment.objects.get(pk=self.kwargs['pk'])\n\n        task_formset = WorkflowTaskFormset(self.request.POST,\n                                           instance=instance)\n        if task_formset.is_valid():\n            return self.form_valid(task_formset)\n        else:\n            return self.form_invalid(task_formset)\n\n    def form_valid(self, task_formset):\n        self.object = task_formset.save_all()\n        return HttpResponseRedirect(reverse_lazy('experiment-list'))\n\n    def form_invalid(self, task_formset):\n        return self.render_to_response(self.get_context_data(\n                        experiment=task_formset.instance,\n                        task_formset=task_formset,\n                    ))\n\n\nclass ExperimentCreate(LoginRequiredMixin, CreateView):\n    model = Experiment\n    template_name = 'damis\/experiment_create.html'\n\n    def get(self, request, *args, **kwargs):\n        self.object = None\n\n        experiment_pk = self.kwargs.get('pk')\n        if experiment_pk:\n            experiment = Experiment.objects.get(pk=experiment_pk)\n        else:\n            experiment = Experiment()\n\n        experiment_form = ExperimentForm(instance=experiment)\n        task_formset = CreateExperimentFormset(instance=experiment)\n\n        # Move one extra empty task formset to the begining of forms\n        form_count = len(task_formset.forms)\n        task_formset.forms.insert(0, task_formset.forms.pop(form_count - 1))\n\n        return self.render_to_response(self.get_context_data(\n                    experiment=task_formset.instance,\n                    task_formset=task_formset,\n                    experiment_form=experiment_form,\n                ))\n\n    def get_context_data(self, **kwargs):\n        context = super(ExperimentCreate, self).get_context_data(**kwargs)\n        context['dataset_form'] = DatasetSelectForm()\n        context.update(csrf(self.request))\n\n        # assign component to clusters by category\n        algorithms = Component.objects.all()\n        clusters = dict()\n        for algorithm in algorithms:\n            if not algorithm.cluster in clusters:\n                clusters[algorithm.cluster] = dict()\n            cat_name = algorithm.get_category_display()\n            if not cat_name in clusters[algorithm.cluster]:\n                clusters[algorithm.cluster][cat_name] = []\n            clusters[algorithm.cluster][cat_name].append(algorithm)\n\n        # sort algorithms by clusters and categories\n        all_clusters = Cluster.objects.all()\n        sorted_clusters = []\n        for cluster in all_clusters:\n            b = []\n            for cat, cat_name in Component.CATEGORIES:\n                if cluster in clusters and cat_name in clusters[cluster]:\n                    b.append([cat_name, clusters[cluster][cat_name]]);\n            a = [cluster, b]\n            sorted_clusters.append(a);\n\n        context['clusters'] = sorted_clusters\n        context['component_form_urls'] = COMPONENT_TITLE__TO__FORM_URL.items()\n        context['component_details'] = [[c.pk, {\"title\": c.title, \"label\": c.get_label_display()}] for c in Component.objects.all()]\n        return context\n\n    def skip_validation(self, experiment_form, task_formset):\n        experiment_form.full_clean()\n        exp_data = experiment_form.cleaned_data\n        exp_data.pop('skip_validation')\n        if experiment_form.instance and experiment_form.instance.pk:\n            exp = experiment_form.instance\n            experiment_form.save()\n        else:\n            exp = Experiment.objects.create(**exp_data)\n\n        task_formset.full_clean()\n        sources = {}\n        for task_form in task_formset.forms:\n            data = task_form.cleaned_data\n            data['experiment'] = exp\n            if data.get('algorithm'):\n                task = data.get('id')\n                if not task:\n                    task = WorkflowTask.objects.create(**data)\n\n                pv_formset = task_form.parameter_values[0]\n                pv_formset.instance = task\n                pv_formset.full_clean()\n\n                for pv_form in pv_formset.forms:\n                    data = {}\n                    data['parameter'] = pv_form.cleaned_data.get('parameter')\n                    data['value'] = pv_form.cleaned_data.get('value')\n                    data['task'] = task\n\n                    pv_form_prefix = pv_form.prefix\n\n                    pv_instance = pv_form.cleaned_data.get('id')\n                    if not pv_instance:\n                        pv_instance = ParameterValue.objects.create(**data)\n                    else:\n                        pv_form.save()\n                    pv_form.instance = pv_instance\n\n                    sources[pv_form_prefix] = pv_form.instance\n\n        for task_form in task_formset.forms:\n            for pv_form in task_form.parameter_values[0].forms:\n                source_ref = pv_form.cleaned_data['source_ref']\n                if source_ref:\n                    source_ref = source_ref.split('-value')[0]\n                    source = sources[source_ref]\n                    target = pv_form.instance\n                    exist = Connection.objects.filter(target=target, source=source)\n                    if not exist:\n                        Connection.objects.create(target=target, source=source)\n\n        return HttpResponse(reverse_lazy('experiment-update', kwargs={'pk': exp.pk}))\n\n    def post(self, request, *args, **kwargs):\n        self.object = None\n\n        experiment_pk = self.kwargs.get('pk')\n        if experiment_pk:\n            experiment = Experiment.objects.get(pk=experiment_pk)\n        else:\n            experiment = Experiment()\n\n        experiment_form = ExperimentForm(self.request.POST, instance=experiment)\n        task_formset = CreateExperimentFormset(self.request.POST, instance=experiment)\n\n        if self.request.POST.get('skip_validation'):\n            return self.skip_validation(experiment_form, task_formset)\n\n        if experiment_form.is_valid() and task_formset.is_valid():\n            return self.form_valid(experiment_form, task_formset)\n        else:\n            return self.form_invalid(experiment_form, task_formset)\n\n    def form_valid(self, experiment_form, task_formset):\n        exp = experiment_form.save()\n        self.object = task_formset.save_all(experiment=exp)\n\n        command = 'bin\/python %s\/src\/damis\/run_experiment.py %s' % (BUILDOUT_DIR, exp.pk)\n        response = Popen(command, shell=True, stdout=PIPE, stderr=PIPE)\n        # response.wait()\n        # response.communicate()\n\n        return HttpResponseRedirect(reverse_lazy('experiment-list'))\n\n    def form_invalid(self, experiment_form, task_formset):\n        return render_to_response('damis\/_experiment_form.html',\n                        self.get_context_data(\n                            experiment=task_formset.instance,\n                            task_formset=task_formset,\n                            experiment_form=experiment_form,\n                        ))\n\n\ndef gen_parameter_prefixes(request):\n    prefixes = request.GET.getlist('prefixes[]')\n    task_ids = request.GET.getlist('taskIds[]')\n    task_prefixes = [re.findall('(tasks-\\d+)', prefix)[0] for prefix in prefixes]\n    pv_prefixes = []\n    for task_id, task_prefix in zip(task_ids, task_prefixes):\n        if task_id and task_id != '-':\n            pv_prefixes.append('PV_PK%s' % (task_id,))\n        else:\n            pv_prefixes.append('PV_%s' % (str(hash(task_prefix)),))\n    return HttpResponse(\",\".join(pv_prefixes))\n\ndef algorithm_parameter_form(request):\n    algorithm = get_object_or_404(Component, pk=request.GET.get('algorithm_id'))\n    task_form_prefix = re.findall('[id_]*(\\w+-\\d+)', request.GET.get('prefix'))[0]\n    prefix = 'PV_%s' % hash(task_form_prefix)\n\n    val_params = algorithm.parameters.filter(Q(connection_type=\"INPUT_VALUE\")|Q(connection_type=\"INPUT_CONNECTION\")|Q(connection_type=\"OUTPUT_CONNECTION\"))\n    ParameterValueFormset = inlineformset_factory(WorkflowTask,\n                                ParameterValue,\n                                form=ParameterValueForm,\n                                extra=len(val_params),\n                                can_delete=False\n                            )\n    parameter_formset = ParameterValueFormset(instance=None, prefix=prefix)\n    for parameter, form in zip(val_params, parameter_formset.forms):\n        field_class = VALIDATOR_FIELDS[parameter.type]['class']\n        field_attrs = VALIDATOR_FIELDS[parameter.type]['attrs']\n        form.fields['value'] = field_class(**field_attrs)\n        form.fields['value'].label = str(parameter)\n        form.initial.update({'parameter': parameter})\n\n    return render_to_response('dynamic\/parameter_formset.html', {\n        'formset': parameter_formset,\n        })\n\n\ndef upload_file_form_view(request):\n    context = csrf(request)\n    if request.method == 'POST':\n        form = DatasetForm(request.POST, request.FILES)\n        if form.is_valid():\n            dataset = form.save()\n            context['file_path'] = dataset.file.url\n    else:\n        form = DatasetForm()\n    context['form'] = form\n    return render_to_response('damis\/_dataset_form.html', context)\n\ndef existing_file_form_view(request):\n    return HttpResponse(_('Not implemented, yet'))\n\ndef midas_file_form_view(request):\n    return HttpResponse(_('Not implemented, yet'))\n\ndef select_features_form_view(request):\n    return HttpResponse(_('Not implemented, yet'))\n\ndef file_to_table(file_url):\n    f = open(BUILDOUT_DIR + '\/var\/www' + file_url)\n    file_table = []\n    for line in f:\n        file_table.append([cell for cell in line.split(\",\")])\n    f.close()\n    return file_table\n\ndef convert(file_path, file_format):\n    '''Opens, converts file to specified format and returns it.'''\n    f = open(BUILDOUT_DIR + '\/var\/www' + file_path)\n    return f\n\ndef technical_details_form_view(request):\n    '''Handles Ajax GET request to update the technical details component.\n\n    request - Ajax GET request. Fields:\n        pv_name - OUTPUT_CONNECTION parameter form input name; used to track down the task, output of which should be rendered by the technical details component\n        dataset_url - url of the data file, which is to be rendered ty the technical details component\n        download - if True return a downloadable file, else return HTML\n        format - file format\n    '''\n    pv_name = request.GET.get('pv_name')\n    dataset_url = request.GET.get('dataset_url');\n    context = {}\n    if re.findall('PV_\\d+-\\d+-value', pv_name):\n        if (dataset_url): \n            if request.GET.get('download'):\n                file_format = request.GET.get('format')\n                response = HttpResponse(mimetype='text\/html')\n                response['Content-Disposition'] = 'attachment; filename=%s.%s' % (\"rez\", file_format)\n                converted_file = convert(dataset_url, file_format=file_format)\n                response.write(converted_file.read())\n                return response\n            context['file'] = file_to_table(dataset_url)\n            return render_to_response('damis\/_technical_details.html', context)\n        else:\n            return HttpResponse(_('You have to execute this experiment first to see the result.'))\n    else:\n        task_pk = re.findall('PV_PK(\\d+)-\\d+-value', pv_name)[0]\n        task = WorkflowTask.objects.get(pk=task_pk)\n        params = task.parameter_values.filter(parameter__connection_type=\"OUTPUT_VALUE\")\n        context['values'] = params\n        file_params = task.parameter_values.filter(parameter__connection_type='OUTPUT_CONNECTION')\n        # XXX: constraint: can download only first file OUTPUT_CONNECTION\n        file_table = None\n        file_path = None\n        if len(file_params) and file_params[0].value:\n            file_path = file_params[0].value\n            file_table = file_to_table(file_path)\n\n        if request.GET.get('download'):\n            file_format = request.GET.get('format')\n            response = HttpResponse(mimetype='text\/html')\n            response['Content-Disposition'] = 'attachment; filename=%s.%s' % (\"rez\", file_format)\n            if file_path:\n                converted_file = convert(file_path, file_format=file_format)\n            else:\n                return HttpResponse(_('There is no file to download.'))\n\n            response.write(converted_file.read())\n            return response\n\n        context['file'] = file_table\n        if not params and not file_table:\n            return HttpResponse(_('You have to execute this experiment first to see the result.'))\n        return render_to_response('damis\/_technical_details.html', context)\n\n\ndef read_classified_data(file_url):\n    f = open(BUILDOUT_DIR + '\/var\/www' + file_url)\n    clsCol = -1\n    result = OrderedDict()\n    minX = None; maxX = None\n    minY = None; maxY = None\n    for line in f:\n        cells = line.rstrip().split(\",\")\n        cls = cells[clsCol]\n        if not cls in result:\n            result[cls] = []\n        result[cls].append([cells[0], cells[1]])\n\n        if minX is None or float(cells[0]) < minX:\n            minX = float(cells[0])\n        if maxX is None or float(cells[0]) > maxX:\n            maxX = float(cells[0])\n        if minY is None or float(cells[1]) < minY:\n            minY = float(cells[1])\n        if maxY is None or float(cells[1]) > maxY:\n            maxY = float(cells[1])\n\n    f.close()\n    result = [{\"group\": cls, \"data\": data} for cls, data in result.items()]\n    return {\"data\": result, \"minX\": minX, \"maxX\": maxX, \"minY\": minY, \"maxY\": maxY}\n\ndef chart_form_view(request):\n    pv_name = request.GET.get('pv_name')\n    dataset_url = request.GET.get('dataset_url');\n\n    if re.findall('PV_\\d+-\\d+-value', pv_name):\n        if (dataset_url): \n            content = read_classified_data(dataset_url)\n            resp = {\"status\": \"SUCCESS\", \"content\": content}\n            return HttpResponse(json.dumps(resp), content_type=\"application\/json\") \n        else:\n            resp = {\"status\": \"ERROR\", \"message\": unicode(_('You have to execute this experiment first to see the result.'))}\n            return HttpResponse(json.dumps(resp), content_type=\"application\/json\")\n    else:\n        task_pk = re.findall('PV_PK(\\d+)-\\d+-value', pv_name)[0]\n        task = WorkflowTask.objects.get(pk=task_pk)\n        file_params = task.parameter_values.filter(parameter__connection_type='OUTPUT_CONNECTION')\n        if not file_params:\n            resp = {\"status\": \"ERROR\", \"message\": unicode(_('You have to execute this experiment first to see the result.'))}\n            return HttpResponse(json.dumps(resp), content_type=\"applicatioin\/json\")\n        content = read_classified_data(dataset_url)\n        resp = {\"status\": \"SUCCESS\", \"content\": content}\n        return HttpResponse(json.dumps(resp), content_type=\"application\/json\") \n\n# User views\ndef register_view(request):\n    form = RegistrationForm()\n    if request.method == 'POST':\n        form = RegistrationForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = form.save()\n            user = authenticate(username=username, password=password)\n            if user is not None and user.is_active:\n                login(request, user)\n                return HttpResponseRedirect(reverse_lazy('home'))\n    return render(request, 'accounts\/register.html', {\n        'form': form,\n    })\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            user = form.cleaned_data['user']\n            if user is not None and user.is_active:\n                login(request, user)\n                return HttpResponseRedirect(reverse_lazy('home'))\n    else:\n        form = LoginForm()\n\n    return render(request, 'accounts\/login.html', {\n            'form': form,\n        })\n\ndef logout_view(request):\n    logout(request)\n    request.session.clear()\n    return HttpResponseRedirect('\/login\/')\n\ndef profile_settings_view(request):\n    pass\n\ndef reset_password_view(request):\n    pass\n"}},"msg":"Fix redirect url after succesfull experiment execution."}}}