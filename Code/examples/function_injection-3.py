
import dataclasses import enum import typing ParameterType=enum.Enum('ParameterType', 'Weight Activation SparseWeightCOOIndex SparseWeightCOOValue SparseActivationCOOIndex SparseActivationCOOValue', module=__name__) BitValue=enum.Enum('BitValue', 'Random Zero One BitFlip', module=__name__) @dataclasses.dataclass(init=True) class BaseFaultDescriptor(object): module_name: str parameter_name: str=None parameter_type: ParameterType tensor_index: tuple[typing.Union[int, slice],...] bit_index: typing.Tuple[int,...] bit_value: BitValue def __post_init__(self): pass @staticmethod def bit_index_from_slice(self, slice_: slice): return tuple(range(*slice_.indices(slice_.stop))) 